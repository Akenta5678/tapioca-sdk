/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ConvexRewardPoolMock,
  ConvexRewardPoolMockInterface,
} from "../../../convex/mocks/ConvexRewardPoolMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_rewardToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lpToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stakeFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "withdrawAndUnwrap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60803461008d57601f61063438819003918201601f19168301916001600160401b0383118484101761009257808492604094855283398101031261008d57610052602061004b836100a8565b92016100a8565b600080546001600160a01b039384166001600160a01b0319918216179091556001805492909316911617905560405161057790816100bd8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361008d5756fe604060808152600436101561001357600080fd5b600090813560e01c80630700037d146102195780632ee40908146101905780635fcbd2851461016957806370a082311461013c578063c32e7202146100b2578063f1068454146100975763f7c618c11461006c57600080fd5b3461009357816003193601126100935760015490516001600160a01b039091168152602090f35b5080fd5b50346100935781600319360112610093576020905160018152f35b5034610093578060031936011261009357602435801515036100935760018060a01b0382541681519263a9059cbb60e01b6020850152336024850152600435604485015260448452608084019084821067ffffffffffffffff831117610128575082526020926101219161030a565b5160018152f35b634e487b7160e01b81526041600452602490fd5b50346100935760203660031901126100935760209061015961023f565b50610162610292565b9051908152f35b5034610093578160031936011261009357905490516001600160a01b039091168152602090f35b5090346102165781600319360112610216576101aa61023f565b5060018060a01b038154168251906323b872dd60e01b602083015233602483015230604483015260243560648301526064825260a0820182811067ffffffffffffffff821117610202576101ff93945261030a565b80f35b634e487b7160e01b84526041600452602484fd5b80fd5b50346100935760203660031901126100935760209061023661023f565b50610162610523565b600435906001600160a01b038216820361025557565b600080fd5b90601f8019910116810190811067ffffffffffffffff82111761027c57604052565b634e487b7160e01b600052604160045260246000fd5b6000546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa9081156102fe576000916102d0575090565b906020823d82116102f6575b816102e96020938361025a565b8101031261021657505190565b3d91506102dc565b6040513d6000823e3d90fd5b60018060a01b0316906040516040810167ffffffffffffffff908281108282111761027c576040526020938483527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858401526000808587829751910182855af1903d15610444573d92831161043057906103a59392916040519261039888601f19601f840116018561025a565b83523d868885013e61044f565b8051806103b3575b50505050565b81849181010312610093578201519081159182150361021657506103d9578080806103ad565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b634e487b7160e01b85526041600452602485fd5b906103a59392506060915b919290156104b15750815115610463575090565b3b1561046c5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156104c45750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b82851061050a575050604492506000838284010152601f80199101168101030190fd5b84810182015186860160440152938101938593506104e7565b61052b610292565b1561053c57678ac7230489e8000090565b60009056fea2646970667358221220c593473517c152446db3586f718eb486a30c9f37f1c31e9497ec9802edb4c99864736f6c63430008120033";

type ConvexRewardPoolMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConvexRewardPoolMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConvexRewardPoolMock__factory extends ContractFactory {
  constructor(...args: ConvexRewardPoolMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ConvexRewardPoolMock";
  }

  override deploy(
    _lpToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConvexRewardPoolMock> {
    return super.deploy(
      _lpToken,
      _rewardToken,
      overrides || {}
    ) as Promise<ConvexRewardPoolMock>;
  }
  override getDeployTransaction(
    _lpToken: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_lpToken, _rewardToken, overrides || {});
  }
  override attach(address: string): ConvexRewardPoolMock {
    return super.attach(address) as ConvexRewardPoolMock;
  }
  override connect(signer: Signer): ConvexRewardPoolMock__factory {
    return super.connect(signer) as ConvexRewardPoolMock__factory;
  }
  static readonly contractName: "ConvexRewardPoolMock";

  public readonly contractName: "ConvexRewardPoolMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConvexRewardPoolMockInterface {
    return new utils.Interface(_abi) as ConvexRewardPoolMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConvexRewardPoolMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ConvexRewardPoolMock;
  }
}
