/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CompoundStrategy,
  CompoundStrategyInterface,
} from "../../compound/CompoundStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IYieldBox",
        name: "_yieldBox",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_cToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "AmountDeposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "AmountQueued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "AmountWithdrawn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_old",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_new",
        type: "uint256",
      },
    ],
    name: "DepositThreshold",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "cToken",
    outputs: [
      {
        internalType: "contract ICToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cheapWithdrawable",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "compound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "compoundAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "contractAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "depositThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposited",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "description_",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "emergencyWithdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "rescueEth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "setDepositThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenType",
    outputs: [
      {
        internalType: "enum TokenType",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
      {
        internalType: "bool",
        name: "direct",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "renounce",
        type: "bool",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawable",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wrappedNative",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "yieldBox",
    outputs: [
      {
        internalType: "contract IYieldBox",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x61010060409080825234620001ff57606081620015bb803803809162000026828562000204565b833981010312620001ff5780516001600160a01b038082168203620001ff5760209262000062856200005a8684016200023e565b92016200023e565b926080528060a0526000913360018060a01b0319845416178355808087519333867f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a3600160025516948560c05216918260e05285816044818763095ea7b360e01b998a83528860048401528160248401525af18015620001f55791604491879493620001d3575b5060c051169484885196879485938452600484015260001960248401525af1908115620001c8575062000193575b825161134d90816200026e82396080518181816101a701528181610691015261093c015260a05181610142015260c0518181816101e70152818161061f0152818161078901528181610fbb0152611135015260e0518181816104100152818161071f01528181610a6f01528181610f3501526111da0152f35b81620001b792903d10620001c0575b620001ae818362000204565b81019062000253565b5038806200011a565b503d620001a2565b8451903d90823e3d90fd5b620001ed90853d8711620001c057620001ae818362000204565b5038620000ec565b87513d86823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200022857604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001ff57565b90816020910312620001ff57518015158103620001ff579056fe6080604081815260049182361015610022575b505050361561002057600080fd5b005b600092833560e01c91826306fdde0314610d5d57508163078dfbe714610c3e57816317d70f7c14610bb157816322a58c5d14610be857816330fa738c14610bcc57816348dcb05114610bb15781634cce992d14610b515781634e71e0c814610a9e578163501883011461064e57816369e527da14610a5a5781637284e416146109c7578163734daaa1146109a85781638da5cb5b14610980578163afa91cc61461091f578163b25ea8fb1461087f578163ce845d1d1461064e578163db2e21bc146106c0578163de4065771461067c578163e30c397814610653578163e3575f051461064e578163eb6d3a111461060a578163f3fef3a314610175575063f6b4dfb41461012f5780610012565b34610171578160031936011261017157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b90503461060657816003193601126106065761018f610df2565b6001600160a01b03929091602480359291906101ce337f00000000000000000000000000000000000000000000000000000000000000008816146110d3565b6101d66112c3565b836101df610f0e565b106105ba57857f0000000000000000000000000000000000000000000000000000000000000000168351956370a0823160e01b808852308589015260209788818681875afa9081156104dc578b91610589575b50808811610402575b508551908152308582015287818581865afa9081156103f8579087918b916103c2575b5010610380578451978789019163a9059cbb60e01b835216978884820152866044820152604481526080810181811067ffffffffffffffff82111761036c57865251899283929083905af16102b1610ede565b8161032f575b50156102ef575050519081527f058b581e2433b8b02263f5b0e5c2889fcb7b3495112884a3147619038fba46d89190a2600160025580f35b601c9085606494519362461bcd60e51b85528401528201527f426f72696e6745524332303a205472616e73666572206661696c6564000000006044820152fd5b80915051868115918215610348575b50509050386102b7565b83809293500103126103685785015180151581036103685780863861033e565b8780fd5b84604187634e487b7160e01b600052526000fd5b845162461bcd60e51b8152808501889052601c818501527f436f6d706f756e6453747261746567793a206e6f7420656e6f756768000000006044820152606490fd5b809250898092503d83116103f1575b6103db8183610e32565b810103126103ec578690513861025e565b600080fd5b503d6103d1565b86513d8c823e3d90fd5b865163182df0f560e01b81527f00000000000000000000000000000000000000000000000000000000000000008b16918a828981865afa91821561057f578d9261054c575b50808a03908a821161053a57670de0b6b3a764000080830292830414908b1417156105285781156105165790868b928e8b51958694859363db006a7560e01b8552048c8401525af180156104dc579089916104e9575b5050478a843b156104e6578751630d0e30db60e41b815291829088908290885af180156104dc571561023b576104d5909a919a610e08565b983861023b565b87513d8d823e3d90fd5b80fd5b813d831161050f575b6104fc8183610e32565b8101031261050b57873861049d565b8980fd5b503d6104f2565b634e487b7160e01b8d5260128852868dfd5b634e487b7160e01b8d5260118852868dfd5b634e487b7160e01b8e5260118952878efd5b9091508a81813d8311610578575b6105648183610e32565b8101031261057457519038610447565b8c80fd5b503d61055a565b89513d8f823e3d90fd5b90508881813d83116105b3575b6105a08183610e32565b810103126105af575138610232565b8a80fd5b503d610596565b6022906020608494519362461bcd60e51b85528401528201527f436f6d706f756e6453747261746567793a20616d6f756e74206e6f742076616c6044820152611a5960f21b6064820152fd5b8280fd5b505034610171578160031936011261017157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b610e70565b50503461017157816003193601126101715760015490516001600160a01b039091168152602090f35b505034610171578160031936011261017157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90503461060657826003193601126106065782546001600160a01b0393906106eb9085163314610e93565b82519360209485810181811067ffffffffffffffff82111761086c57855282905283516370a0823160e01b815230848201527f00000000000000000000000000000000000000000000000000000000000000008216908681602481855afa9081156108625791879185938491610829575b506024908851948593849263db006a7560e01b84528a8401525af1801561081f579086916107f6575b50507f0000000000000000000000000000000000000000000000000000000000000000164792813b15610606578451630d0e30db60e41b815293839285929183915af19081156107eb57506107dc575b5051478152f35b6107e590610e08565b386107d5565b8351903d90823e3d90fd5b813d8311610818575b6108098183610e32565b81010312610171578438610785565b503d6107ff565b85513d85823e3d90fd5b92809294508391503d831161085b575b6108438183610e32565b81010312610857575183918791602461075c565b8380fd5b503d610839565b86513d86823e3d90fd5b634e487b7160e01b845260418552602484fd5b91905034610606578060031936011261060657826001600160a01b03602435818116810361060657828092916108ba82938354163314610e93565b8635905af16108c7610ede565b50156108d1578280f35b906020608492519162461bcd60e51b8352820152602260248201527f436f6d706f756e6453747261746567793a207472616e73666572206661696c65604482015261321760f11b6064820152fd5b839034610171576020366003190112610171576109789061096a337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146110d3565b6109726112c3565b3561110e565b600160025580f35b505034610171578160031936011261017157905490516001600160a01b039091168152602090f35b5050346101715781600319360112610171576020906003549051908152f35b838334610171578160031936011261017157805191606083019083821067ffffffffffffffff831117610a475750610a4393508152602b82527f436f6d706f756e6420737472617465677920666f722077726170706564206e6160208301526a746976652061737365747360a81b818301525191829182610da9565b0390f35b634e487b7160e01b815260418552602490fd5b505034610171578160031936011261017157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b919050346106065782600319360112610606576001546001600160a01b03929091838316919033839003610b0e5750508084549384167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08680a36001600160a01b03199283161783551660015580f35b906020606492519162461bcd60e51b8352820152602060248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e65726044820152fd5b905034610606576020366003190112610606577f3b779194d2cc7daf4de546bec10f6f325d421b2e202c11aa24e86e39845860cc903591610b9c60018060a01b038554163314610e93565b6003548151908152836020820152a160035580f35b50503461017157816003193601126101715751908152602090f35b5050346101715781600319360112610171576020905160018152f35b9050346106065760203660031901126106065780359167ffffffffffffffff8311610857573660238401121561085757610c3283602493013591610c2b83610e54565b9051610e32565b36920101116104e65780f35b9190503461060657606036600319011261060657610c5a610df2565b91602435918215158303610d5957604435928315158403610d555760018060a01b03948591610c8d838954163314610e93565b15610d34571692831590811591610d2c575b5015610cf15750508083549283167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08580a36bffffffffffffffffffffffff60a01b8092161782556001541660015580f35b906020606492519162461bcd60e51b835282015260156024820152744f776e61626c653a207a65726f206164647265737360581b6044820152fd5b905038610c9f565b9350505050166bffffffffffffffffffffffff60a01b600154161760015580f35b8580fd5b8480fd5b8385346104e657806003193601126104e6578183019083821067ffffffffffffffff831117610a475750610a4393508152600882526710dbdb5c1bdd5b9960c21b602083015251918291825b6020808252825181830181905290939260005b828110610dde57505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610dbc565b600435906001600160a01b03821682036103ec57565b67ffffffffffffffff8111610e1c57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610e1c57604052565b67ffffffffffffffff8111610e1c57601f01601f191660200190565b346103ec5760003660031901126103ec576020610e8b610f0e565b604051908152f35b15610e9a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b3d15610f09573d90610eef82610e54565b91610efd6040519384610e32565b82523d6000602084013e565b606090565b604080516370a0823160e01b808252306004830152909291906001600160a01b03906020907f000000000000000000000000000000000000000000000000000000000000000083168287602481845afa9687156110c857600097611099575b509582859697600496519687809263182df0f560e01b82525afa94851561108e5760009561105f575b50848102948186041490151715611006578190602486518095819382523060048301527f0000000000000000000000000000000000000000000000000000000000000000165afa938415611055575060009361101c575b5050670de0b6b3a7640000900481018091116110065790565b634e487b7160e01b600052601160045260246000fd5b8181949293943d831161104e575b6110348183610e32565b810103126104e657505190670de0b6b3a764000038610fed565b503d61102a565b513d6000823e3d90fd5b90948382813d8311611087575b6110768183610e32565b810103126104e65750519338610f96565b503d61106c565b86513d6000823e3d90fd5b968388813d83116110c1575b6110af8183610e32565b810103126104e6575095519582610f6d565b503d6110a5565b85513d6000823e3d90fd5b156110da57565b60405162461bcd60e51b815260206004820152600c60248201526b09cdee840b2d2cad8c884def60a31b6044820152606490fd5b604080516370a0823160e01b81523060048201526000939260209290916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081168583602481845afa9283156112b957889361128a575b5060035483116111a4575050507f9447d5abbf0af693ca2937bf8b1ec6a8c9dc4fbac672911c633fb31c78e5e3ca93945051908152a1565b8791929450803b156101715781906024855180948193632e1a7d4d60e01b83528960048401525af180156112805761126d575b507f00000000000000000000000000000000000000000000000000000000000000001685813b156104e65783916004845180948193631249c58b60e01b83525af180156112635761124f575b507fde22222b0ac0d69f2a19cd7b1443a29a5f37346640fff3506bdd6a9a9497f9d393945051908152a1565b6112598691610e08565b610d595784611223565b82513d88823e3d90fd5b61127990969196610e08565b94386111d7565b83513d89823e3d90fd5b9092508581813d83116112b2575b6112a28183610e32565b810103126103685751913861116c565b503d611298565b84513d8a823e3d90fd5b60028054146112d25760028055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fdfea2646970667358221220eff48c3bc252bfb70823ac5f481ddeaae13008192634c9e9d8fa5f65a5624c6e64736f6c63430008120033";

type CompoundStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CompoundStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CompoundStrategy__factory extends ContractFactory {
  constructor(...args: CompoundStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CompoundStrategy";
  }

  override deploy(
    _yieldBox: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _cToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CompoundStrategy> {
    return super.deploy(
      _yieldBox,
      _token,
      _cToken,
      overrides || {}
    ) as Promise<CompoundStrategy>;
  }
  override getDeployTransaction(
    _yieldBox: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _cToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _yieldBox,
      _token,
      _cToken,
      overrides || {}
    );
  }
  override attach(address: string): CompoundStrategy {
    return super.attach(address) as CompoundStrategy;
  }
  override connect(signer: Signer): CompoundStrategy__factory {
    return super.connect(signer) as CompoundStrategy__factory;
  }
  static readonly contractName: "CompoundStrategy";

  public readonly contractName: "CompoundStrategy";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CompoundStrategyInterface {
    return new utils.Interface(_abi) as CompoundStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CompoundStrategy {
    return new Contract(address, _abi, signerOrProvider) as CompoundStrategy;
  }
}
