/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  YearnVaultMock,
  YearnVaultMockInterface,
} from "../../../yearn/mocks/YearnVaultMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "asset",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getUserAccountData",
    outputs: [
      {
        internalType: "uint256",
        name: "totalCollateralETH",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalDebtETH",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "availableBorrowsETH",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentLiquidationThreshold",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ltv",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "healthFactor",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pricePerShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60803461007457601f6105ce38819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b03191691909117905560405161053e90816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060409080825260048036101561001657600080fd5b600091823560e01c908163313ce5671461042c5750806338d52e0f146104045780636e553f651461030257806370a082311461026457806399530b0614610246578063bf92857c146101895763e63697c81461007157600080fd5b346101855760603660031901126101855780359161008d610447565b8154855163a9059cbb60e01b602082019081526001600160a01b0393841660248301526044808301889052825291909216916080810167ffffffffffffffff81118282101761017257849392918491895251925af16100ea6104b0565b81610143575b5015610100575060209151908152f35b606490602084519162461bcd60e51b8352820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c6564000000006044820152fd5b8051801592508215610158575b5050386100f0565b61016b92506020809183010191016104f0565b3880610150565b634e487b7160e01b855260418652602485fd5b5080fd5b5082346102425760208060031936011261022d576101a5610462565b50835482516370a0823160e01b815230948101949094528190849060249082906001600160a01b03165afa928315610238578493610204575b5092818160c09581945195865285015283015280606083015280608083015260a0820152f35b9080935081813d8311610231575b61021c8183610478565b8101031261022d57519160c06101de565b8380fd5b503d610212565b82513d86823e3d90fd5b8280fd5b82843461018557816003193601126101855760209051620186a08152f35b509134610185576020928360031936011261024257610281610462565b50825482516370a0823160e01b815230928101929092528490829060249082906001600160a01b03165afa9283156102f75780936102c2575b505051908152f35b909192508382813d83116102f0575b6102db8183610478565b810103126102ed5750519038806102ba565b80fd5b503d6102d1565b8251903d90823e3d90fd5b50823461024257806003193601126102425781359161031f610447565b50835482516323b872dd60e01b60208083019182523360248401523060448401526064808401889052835296926001600160a01b03169160a0810167ffffffffffffffff81118282101761017257849392918491885251925af16103816104b0565b816103d4575b5015610394575051908152f35b8380606493519262461bcd60e51b845283015260248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c65646044820152fd5b805180159250869083156103ec575b50505085610387565b6103fc93508201810191016104f0565b8585816103e3565b828434610185578160031936011261018557905490516001600160a01b039091168152602090f35b83903461018557816003193601126101855780600560209252f35b602435906001600160a01b038216820361045d57565b600080fd5b600435906001600160a01b038216820361045d57565b90601f8019910116810190811067ffffffffffffffff82111761049a57604052565b634e487b7160e01b600052604160045260246000fd5b3d156104eb573d9067ffffffffffffffff821161049a57604051916104df601f8201601f191660200184610478565b82523d6000602084013e565b606090565b9081602091031261045d5751801515810361045d579056fea2646970667358221220df318d7acdbf3a02eccffff0afa6ac925a8cb1826f2aa06961566ea6fc130d9364736f6c63430008120033";

type YearnVaultMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: YearnVaultMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class YearnVaultMock__factory extends ContractFactory {
  constructor(...args: YearnVaultMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "YearnVaultMock";
  }

  override deploy(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<YearnVaultMock> {
    return super.deploy(_asset, overrides || {}) as Promise<YearnVaultMock>;
  }
  override getDeployTransaction(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_asset, overrides || {});
  }
  override attach(address: string): YearnVaultMock {
    return super.attach(address) as YearnVaultMock;
  }
  override connect(signer: Signer): YearnVaultMock__factory {
    return super.connect(signer) as YearnVaultMock__factory;
  }
  static readonly contractName: "YearnVaultMock";

  public readonly contractName: "YearnVaultMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): YearnVaultMockInterface {
    return new utils.Interface(_abi) as YearnVaultMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): YearnVaultMock {
    return new Contract(address, _abi, signerOrProvider) as YearnVaultMock;
  }
}
