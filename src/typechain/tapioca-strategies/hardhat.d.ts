/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AaveStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveStrategy__factory>;
    getContractFactory(
      name: "BalancerStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerStrategy__factory>;
    getContractFactory(
      name: "CompoundStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundStrategy__factory>;
    getContractFactory(
      name: "ConvexTricryptoStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConvexTricryptoStrategy__factory>;
    getContractFactory(
      name: "TricryptoLPGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TricryptoLPGetter__factory>;
    getContractFactory(
      name: "TricryptoStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TricryptoStrategy__factory>;
    getContractFactory(
      name: "LidoEthStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LidoEthStrategy__factory>;
    getContractFactory(
      name: "StargateStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StargateStrategy__factory>;
    getContractFactory(
      name: "StargateSwapperV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StargateSwapperV3__factory>;
    getContractFactory(
      name: "YearnStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YearnStrategy__factory>;

    getContractAt(
      name: "AaveStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveStrategy>;
    getContractAt(
      name: "BalancerStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerStrategy>;
    getContractAt(
      name: "CompoundStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundStrategy>;
    getContractAt(
      name: "ConvexTricryptoStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConvexTricryptoStrategy>;
    getContractAt(
      name: "TricryptoLPGetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TricryptoLPGetter>;
    getContractAt(
      name: "TricryptoStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TricryptoStrategy>;
    getContractAt(
      name: "LidoEthStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LidoEthStrategy>;
    getContractAt(
      name: "StargateStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StargateStrategy>;
    getContractAt(
      name: "StargateSwapperV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StargateSwapperV3>;
    getContractAt(
      name: "YearnStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YearnStrategy>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
