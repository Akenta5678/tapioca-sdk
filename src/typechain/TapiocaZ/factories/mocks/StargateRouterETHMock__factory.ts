/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  StargateRouterETHMock,
  StargateRouterETHMockInterface,
} from "../../mocks/StargateRouterETHMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IStargateRouterBase",
        name: "_router",
        type: "address",
      },
      {
        internalType: "contract ERC20Mock",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "contract IStargateRouterBase",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_dstChainId",
        type: "uint16",
      },
      {
        internalType: "address payable",
        name: "_refundAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_toAddress",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_amountLD",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minAmountLD",
        type: "uint256",
      },
    ],
    name: "swapETH",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract ERC20Mock",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461006c57601f6104ea38819003918201601f19168301916001600160401b0383118484101761007157808492604094855283398101031261006c5780516001600160a01b0391908281160361006c57602001519081160361006c5760405161046290816100888239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c9182631114cd2a146100975750508063f887ea401461006f5763fc0c546a1461004557600080fd5b3461006b578160031936011261006b57905490516001600160a01b039091168152602090f35b5080fd5b503461006b578160031936011261006b5760015490516001600160a01b039091168152602090f35b84908460a03660031901126103fe57813561ffff81168091036103fa576001600160a01b03602480358281169791908890036103f6576044359767ffffffffffffffff90818a116103f2573660238b0112156103f25789880135938285116103ee573684868d0101116103ee57606435908134111561039e5750875191606083018381108582111761038c57908b949392918a5284835260209788840194868652818c860197606089525416803b15610388578e858f928f938361018495518096819582946340c10f1960e01b84523090840160209093929193604081019460018060a01b031681520152565b03925af1801561035e5761036a575b506101d7908a8f8f8f82878a94541692886001541692519788958694859363095ea7b360e01b8552840160209093929193604081019460018060a01b031681520152565b03925af1801561035e57610300575b50506001541698893b156102fc578a519b6327efc43f60e21b8d528c01526001868c0152600160448c015260648b015260848a015260843560a48a015261012060c48a015251610124890152516101448801525192606061016488015283519384610184890152885b8581106102e757505050866101e481998286601f8088808e9b99869d9b8d9b888d6101a4998a91010152851996879101168c01968c60e46101a0828b03019101528701526101c49701878601378486828601015201160191858303926101c08401610104880152015201925af19081156102de57506102cb5750f35b6102d490610402565b6102db5780f35b80fd5b513d84823e3d90fd5b8181018301518982016101a40152820161024f565b8c80fd5b8a903d8c11610356575b601f8201601f1916830190811183821017610341578b9183918f528101031261033d5751801515036102fc578e806101e6565b8d80fd5b508860418f634e487b7160e01b600052526000fd5b3d915061030a565b8f8e51903d90823e3d90fd5b908a8e9f86908f9461037b90610402565b9f505050909d9c9d610193565b8e80fd5b634e487b7160e01b8c5260418b52858cfd5b62461bcd60e51b815260208a8201526027858201527f53746172676174653a206d73672e76616c7565206d757374206265203e205f616044820152661b5bdd5b9d131160ca1b6064820152608490fd5b8980fd5b8880fd5b8680fd5b8380fd5b8280fd5b67ffffffffffffffff811161041657604052565b634e487b7160e01b600052604160045260246000fdfea26469706673582212207ac950536af4b6f9d723497d784c16f6ce97524d6f1f65cfb263b2a6f19d79a464736f6c63430008120033";

type StargateRouterETHMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StargateRouterETHMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StargateRouterETHMock__factory extends ContractFactory {
  constructor(...args: StargateRouterETHMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "StargateRouterETHMock";
  }

  override deploy(
    _router: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StargateRouterETHMock> {
    return super.deploy(
      _router,
      _token,
      overrides || {}
    ) as Promise<StargateRouterETHMock>;
  }
  override getDeployTransaction(
    _router: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_router, _token, overrides || {});
  }
  override attach(address: string): StargateRouterETHMock {
    return super.attach(address) as StargateRouterETHMock;
  }
  override connect(signer: Signer): StargateRouterETHMock__factory {
    return super.connect(signer) as StargateRouterETHMock__factory;
  }
  static readonly contractName: "StargateRouterETHMock";

  public readonly contractName: "StargateRouterETHMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StargateRouterETHMockInterface {
    return new utils.Interface(_abi) as StargateRouterETHMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StargateRouterETHMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as StargateRouterETHMock;
  }
}
