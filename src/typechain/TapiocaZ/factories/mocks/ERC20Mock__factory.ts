/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { ERC20Mock, ERC20MockInterface } from "../../mocks/ERC20Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x610140604052346200006a576200002062000019620001ae565b90620001d5565b6040516112d2620005b8823960805181611057015260a051816110e7015260c05181611024015260e0518161109f0152610100518161107e015261012051816110c001526112d290f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b03821117620000a757604052565b6200006f565b90620000c4620000bc60405190565b928362000085565b565b6001600160401b038111620000a757602090601f01601f19160190565b60005b838110620000f75750506000910152565b8181015183820152602001620000e6565b90929192620001216200011b82620000c6565b620000ad565b938185526020850190828401116200006a57620000c492620000e3565b9080601f830112156200006a5781516200015b9260200162000108565b90565b9190916040818403126200006a5780516001600160401b0381116200006a57836200018b9183016200013e565b60208201519093906001600160401b0381116200006a576200015b92016200013e565b620001d16200188a80380380620001c581620000ad565b9283398101906200015e565b9091565b90620000c491806200021a565b90620001f26200011b83620000c6565b918252565b620002036001620001e2565b603160f81b602082015290565b6200015b620001f7565b90620000c492916200022b62000210565b906200026a565b6200015b9062000248906001600160a01b031682565b6001600160a01b031690565b6200015b9062000232565b6200015b9062000254565b62000284906200015b6200029d9395620002e195620002f8565b6200029862000291825190565b9160200190565b209290565b620002aa62000291825190565b207f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f928060e05281610100524660a0528362000569565b608052620002ef306200025f565b60c05261012052565b90620000c491620004fa565b634e487b7160e01b600052602260045260246000fd5b90600160028304921680156200033d575b60208310146200033757565b62000304565b91607f16916200032b565b6200015b6200015b6200015b9290565b91906200036d6200015b620003859362000348565b90835460001960089290920291821b191691901b1790565b9055565b620000c49160009162000358565b818110620003a3575050565b80620003b3600060019362000389565b0162000397565b9190601f8111620003ca57505050565b620003de620000c493600052602060002090565b906020601f84018190048301931062000402575b6020601f90910104019062000397565b9091508190620003f2565b9062000417815190565b906001600160401b038211620000a7576200043f826200043885546200031a565b85620003ba565b602090601f83116001146200047e576200038592916000918362000472575b5050600019600883021c1916906002021790565b0151905038806200045e565b601f198316916200049485600052602060002090565b9260005b818110620004d557509160029391856001969410620004bb575b50505002019055565b01516000196008601f8516021c19169055388080620004b2565b9193602060018192878701518155019501920162000498565b90620000c4916200040d565b906200050c620000c4926003620004ee565b6004620004ee565b9052565b620005149062000248565b90959492620000c4946200055a6200056192620005536080966200054c60a088019c6000890152565b6020870152565b6040850152565b6060830152565b019062000518565b620005a6919062000599466200057f306200025f565b906200058a60405190565b96879560208701958662000523565b9081038252038262000085565b620005b362000291825190565b209056fe6080604052600436101561001257600080fd5b60003560e01c806306fdde0314610102578063095ea7b3146100fd57806318160ddd146100f857806323b872dd146100f3578063313ce567146100ee5780633644e515146100e957806339509351146100e457806340c10f19146100df57806370a08231146100da5780637ecebe00146100d557806395d89b41146100d0578063a457c2d7146100cb578063a9059cbb146100c6578063d505accf146100c15763dd62ed3e0361011257610499565b610457565b6103bf565b6103a3565b610388565b61036d565b610352565b610320565b610304565b6102e9565b6102ba565b61029e565b610242565b610214565b610186565b600091031261011257565b600080fd5b60005b83811061012a5750506000910152565b818101518382015260200161011a565b61015b61016460209361016e9361014f815190565b80835293849260200190565b95869101610117565b601f01601f191690565b0190565b60208082526101839291019061013a565b90565b3461011257610196366004610107565b6101ad6101a16105ea565b60405191829182610172565b0390f35b6001600160a01b031690565b6001600160a01b0381165b0361011257565b905035906101dc826101bd565b565b806101c8565b905035906101dc826101de565b9190604083820312610112576101839061020b81856101cf565b936020016101e4565b34610112576101ad61023061022a3660046101f1565b906106a8565b60405191829182901515815260200190565b3461011257610252366004610107565b6101ad61025d61060f565b6040515b9182918290815260200190565b90916060828403126101125761018361028784846101cf565b9361029581602086016101cf565b936040016101e4565b34610112576101ad6102306102b436600461026e565b916106b8565b34610112576102ca366004610107565b6101ad6102d5611292565b6040519182918260ff909116815260200190565b34610112576102f9366004610107565b6101ad61025d610d28565b34610112576101ad61023061031a3660046101f1565b906106f1565b34610112576103396103333660046101f1565b906111e0565b604051005b9060208282031261011257610183916101cf565b34610112576101ad61025d61036836600461033e565b610657565b34610112576101ad61025d61038336600461033e565b610d09565b3461011257610398366004610107565b6101ad6101a16105f4565b34610112576101ad6102306103b93660046101f1565b9061076a565b34610112576101ad6102306103d53660046101f1565b90610673565b60ff81166101c8565b905035906101dc826103db565b60e0818303126101125761040582826101cf565b9261041383602084016101cf565b9261042181604085016101e4565b9261042f82606083016101e4565b9261018361044084608085016103e4565b9361044e8160a086016101e4565b9360c0016101e4565b346101125761033961046a3660046103f1565b95949094939193610c47565b9190604083820312610112576101839061049081856101cf565b936020016101cf565b34610112576101ad61025d6104af366004610476565b90610688565b634e487b7160e01b600052602260045260246000fd5b90600160028304921680156104eb575b60208310146104e657565b6104b5565b91607f16916104db565b80546000939291610512610508836104cb565b8085529360200190565b9160018116908115610564575060011461052b57505050565b61053e9192939450600052602060002090565b916000925b8184106105505750500190565b805484840152602090930192600101610543565b92949550505060ff1916825215156020020190565b90610183916104f5565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176105bb57604052565b610583565b906101dc6105da926105d160405190565b93848092610579565b0383610599565b610183906105c0565b61018360036105e1565b61018360046105e1565b6101839081565b61018390546105fe565b6101836002610605565b610183906101b1906001600160a01b031682565b61018390610619565b6101839061062d565b9061064990610636565b600052602052604060002090565b61066e61018391610666600090565b50600061063f565b610605565b6106839190336108d2565b6108d2565b600190565b610183916106a361066e9261069b600090565b50600161063f565b61063f565b610683919033610a4f565b610a4f565b61068392919061067e833383610b1d565b634e487b7160e01b600052601160045260246000fd5b919082018092116106ec57565b6106c9565b610683919061070a33926107058385610688565b6106df565b91610a4f565b1561071757565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b610683919061070a339261077e8385610688565b61078a82821015610710565b0390565b6101b16101836101839290565b6101839061078e565b156107ab57565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b1561080557565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b1561085d57565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b6101836101836101839290565b906101836101836108ce926108b1565b9055565b61095b6109488360006109196109086108ea8361079b565b6101b16001600160a01b0382166001600160a01b038a1614156107a4565b6001600160a01b03841614156107fe565b6106a36109398861092d61066e898661063f565b61078a82821015610856565b610943878461063f565b6108be565b6109558561016e83610605565b906108be565b61099b61099161098b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610636565b93610636565b9361026160405190565b0390a3565b156109a757565b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b156109ff57565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b610a8e610a7d610a5f600061079b565b6101b16001600160a01b0382166001600160a01b03861614156109a0565b6001600160a01b03841614156109f8565b610aa183610943846106a385600161063f565b61099b61099161098b7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610636565b15610ad857565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b90610b288183610688565b6000198103610b38575b50505050565b610b4c9361070a9161078a82821015610ad1565b38808080610b32565b15610b5c57565b60405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606490fd5b9194610bf0610bf792989795610be960a096610bd96101dc9a610bc960c08a019e60008b0152565b6001600160a01b03166020890152565b6001600160a01b03166040870152565b6060850152565b6080830152565b0152565b15610c0257565b60405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606490fd5b929582958295610ce3610ce894610ccb886106b398610cbf6101dc9e610c7c42610c75610c718490565b9190565b1115610b55565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c992610ca785610d30565b90610cb160405190565b978896602088019687610ba1565b90810382520382610599565b610cdd610cd6825190565b9160200190565b2061118e565b610d86565b610d036001600160a01b0384165b916001600160a01b031690565b14610bfb565b610d2361018361018392610d1b600090565b50600561063f565b610d52565b61018361100e565b610183610d3f91610d1b600090565b906101dc610d4c83610d52565b92610d67565b600061018391610d60600090565b5001610605565b6101dc906109556000610d7a60016108b1565b92019161016e83610605565b916101839391610d9e93610d98600090565b50610f59565b919091610dd5565b634e487b7160e01b600052602160045260246000fd5b60051115610dc657565b610da6565b906101dc82610dbc565b610ddf6000610dcb565b610de882610dcb565b03610df05750565b610dfa6001610dcb565b610e0382610dcb565b03610e4d5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b610e576002610dcb565b610e6082610dcb565b03610eaa5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b610ebd610eb76003610dcb565b91610dcb565b14610ec457565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608490fd5b610183906108b1565b610bf76101dc94610f46606094989795610f3c608086019a6000870152565b60ff166020850152565b6040830152565b6040513d6000823e3d90fd5b919291610f6583610f14565b610f91610c717f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a06108b1565b11610ffa57610fb1600093602095610fa860405190565b94859485610f1d565b838052039060015afa15610ff55760005190600091610fcf8361079b565b6001600160a01b0381166001600160a01b03831614610fed57509190565b925050600190565b610f4d565b50505050611008600061079b565b90600390565b61101730610636565b6110496001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610cf6565b14806110e4575b15611079577f000000000000000000000000000000000000000000000000000000000000000090565b6101837f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611155565b507f00000000000000000000000000000000000000000000000000000000000000004614611050565b909594926101dc9461113f6111469261113860809661113160a088019c6000890152565b6020870152565b6040850152565b6060830152565b01906001600160a01b03169052565b61117f9190610cbf4661116730610636565b9061117160405190565b96879560208701958661110d565b61118a610cd6825190565b2090565b6101839061119a61100e565b6111c7565b60208093926111c16111bc61016e9461190160f01b815260020190565b918252565b01918252565b610cbf9161117f9160405193849260208401928361119f565b906101dc91611236565b156111f157565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b600061095b610948836112488461079b565b936112676001600160a01b0386166001600160a01b03841614156111ea565b6106a3611278886107056002610605565b60026108be565b61128c6101836101839290565b60ff1690565b610183601261127f56fea2646970667358221220542121ac22fd92ad36622a46c2a8340b1ca6829572de928a80bee662ff6bee9664736f6c63430008120033";

type ERC20MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Mock__factory extends ContractFactory {
  constructor(...args: ERC20MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC20Mock";
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20Mock> {
    return super.deploy(_name, _symbol, overrides || {}) as Promise<ERC20Mock>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, overrides || {});
  }
  override attach(address: string): ERC20Mock {
    return super.attach(address) as ERC20Mock;
  }
  override connect(signer: Signer): ERC20Mock__factory {
    return super.connect(signer) as ERC20Mock__factory;
  }
  static readonly contractName: "ERC20Mock";

  public readonly contractName: "ERC20Mock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20MockInterface {
    return new utils.Interface(_abi) as ERC20MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC20Mock;
  }
}
