/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { TOFTMinter, TOFTMinterInterface } from "../../mocks/TOFTMinter";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ILegacyOFT",
        name: "_oft",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "OFT",
    outputs: [
      {
        internalType: "contract ILegacyOFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_val",
        type: "uint256",
      },
    ],
    name: "freeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mintLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mintTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mintWindow",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "mintedAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20WithDecimal",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transferToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newVal",
        type: "uint256",
      },
    ],
    name: "updateMintLimit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newVal",
        type: "uint256",
      },
    ],
    name: "updateMintWindow",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523462000030576200001e62000018620000d4565b6200020d565b6040516109ce620003ec82396109ce90f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200006d57604052565b62000035565b906200008a6200008260405190565b92836200004b565b565b6001600160a01b031690565b90565b6001600160a01b0381165b036200003057565b905051906200008a826200009b565b9060208282031262000030576200009891620000ae565b6200009862000dba80380380620000eb8162000073565b928339810190620000bd565b90600019905b9181191691161790565b6200009862000098620000989290565b906200012b62000098620001339262000107565b8254620000f7565b9055565b906001600160a01b0390620000fd565b62000098906200008c906001600160a01b031682565b620000989062000147565b62000098906200015d565b906200018762000098620001339262000168565b825462000137565b6040513d6000823e3d90fd5b60ff8116620000a6565b905051906200008a826200019b565b9060208282031262000030576200009891620001a5565b634e487b7160e01b600052601160045260246000fd5b60ff16604d8111620001f357600a0a90565b620001cb565b81810292918115918404141715620001f357565b6020620002456200025e92620002226200037d565b6200023262015180600462000117565b6200023f81600162000173565b62000168565b63785e9e86906200025560405190565b93849260e01b90565b825260049082905afa801562000342576200023f6200028c91620002949360009162000348575b5062000168565b600262000173565b620002c16020620002b16200023f6002546001600160a01b031690565b63313ce567906200025560405190565b825260049082905afa90811562000342576200008a9162000305916000916200030d575b50620002ff620002f86103e892620001e1565b9162000107565b620001f9565b600562000117565b62000333915060203d81116200033a575b6200032a81836200004b565b810190620001b4565b38620002e5565b503d6200031e565b6200018f565b6200036e915060203d811162000375575b6200036581836200004b565b810190620000bd565b3862000285565b503d62000359565b6200008a33620003956000546001600160a01b031690565b90620003a381600062000173565b620003da620003d37f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09362000168565b9162000168565b91620003e560405190565b600090a356fe6080604052600436101561001257600080fd5b60003560e01c80631072cbea146100e25780631ed0993d146100dd57806321442ec9146100d8578063449a52f8146100d35780636404f035146100ce578063715018a6146100c95780637c928fe9146100c45780638da5cb5b146100bf578063996517cf146100ba5780639ce93edf146100b5578063e01d55c5146100b0578063f2fde38b146100ab5763fc0c546a03610108576103cc565b6103a8565b610390565b610375565b61034e565b61030d565b6102f5565b6102dd565b6102c5565b610298565b61026d565b6101ed565b610152565b6001600160a01b031690565b90565b6001600160a01b0381165b0361010857565b600080fd5b9050359061011a826100f6565b565b80610101565b9050359061011a8261011c565b9190604083820312610108576100f390610149818561010d565b93602001610122565b346101085761016b61016536600461012f565b90610896565b604051005b0390f35b600091031261010857565b6100f3916008021c6001600160a01b031690565b906100f3915461017f565b6100f360006001610193565b6100f3906100e7906001600160a01b031682565b6100f3906101aa565b6100f3906101be565b6101d9906101c7565b9052565b60208101929161011a91906101d0565b34610108576101fd366004610174565b61017061020861019e565b604051918291826101dd565b90602082820312610108576100f39161010d565b90610232906101c7565b600052602052604060002090565b6100f3916008021c81565b906100f39154610240565b6100f390610268600391600092610228565b61024b565b3461010857610170610288610283366004610214565b610256565b6040519182918290815260200190565b346101085761016b6102ab36600461012f565b90610768565b90602082820312610108576100f391610122565b346101085761016b6102d83660046102b1565b61098f565b34610108576102ed366004610174565b61016b61043c565b346101085761016b6103083660046102b1565b6106dc565b346101085761031d366004610174565b6101706103286103fa565b604051918291826001600160a01b03909116815260200190565b6100f36000600561024b565b346101085761035e366004610174565b610170610288610342565b6100f36000600461024b565b3461010857610385366004610174565b610170610288610369565b346101085761016b6103a33660046102b1565b61096f565b346101085761016b6103bb366004610214565b610553565b6100f360006002610193565b34610108576103dc366004610174565b6101706102086103c0565b6100f3906100e7565b6100f390546103e7565b6100f360006103f0565b61040c610498565b61011a61042a565b6100e76100f36100f39290565b6100f390610414565b61011a6104376000610421565b61058c565b61011a610404565b1561044b57565b60405162461bcd60e51b815280610494600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b61011a6104a36103fa565b6104bc6104af336100e7565b916001600160a01b031690565b14610444565b61011a906104ce610498565b61052e565b156104da57565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b61011a906104376105426100e76000610421565b6001600160a01b03831614156104d3565b61011a906104c2565b906001600160a01b03905b9181191691161790565b906105816100f3610588926101c7565b825461055c565b9055565b61059660006103f0565b906105a2816000610571565b6105d56105cf7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936101c7565b916101c7565b916105df60405190565b600090a3565b6100f39081565b6100f390546105e5565b156105fd57565b60405162461bcd60e51b815260206004820152601a60248201527f544f46544d696e7465723a20616d6f756e7420746f6f206269670000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b9190820180921161066557565b610642565b1561067157565b60405162461bcd60e51b8152602060048201526015602482015274544f46544d696e7465723a20746f6f206561726c7960581b6044820152606490fd5b9060001990610567565b6100f36100f36100f39290565b906106d56100f3610588926106b8565b82546106ae565b61011a906106f86106f06100f360056105ec565b8211156105f6565b3361074c6003610747836107276107176107128386610228565b6105ec565b61072160046105ec565b90610658565b92610742429461073b6107378790565b9190565b111561066a565b610228565b6106c5565b6108a0565b9061011a9161075e610498565b9061011a916108a0565b9061011a91610751565b9061011a9161077f610498565b610813565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176107bc57604052565b610784565b801515610101565b9050519061011a826107c1565b90602082820312610108576100f3916107c9565b6001600160a01b03909116815260408101929161011a9160200152565b6040513d6000823e3d90fd5b60209061082861082360026103f0565b6101c7565b61084b600063a9059cbb61085661083e60405190565b9788968795869460e01b90565b8452600484016107ea565b03925af18015610891576108675750565b6108879060203d811161088a575b61087f818361079a565b8101906107d6565b50565b503d610875565b610807565b9061011a91610772565b8160206108b061082360026103f0565b63095ea7b39061084b60006108c861082360016103f0565b936108d561083e60405190565b03925af180156108915761093c575b506108f261082360016103f0565b9063bf376c7a91803b156101085761084b6000809461091361083e60405190565b03925af18015610891576109245750565b61011a906000610934818361079a565b810190610174565b6109539060203d811161088a5761087f818361079a565b6108e4565b61011a90610964610498565b61011a9060046106c5565b61011a90610958565b61011a90610984610498565b61011a9060056106c5565b61011a9061097856fea2646970667358221220b86f44bbd1a48fe987d549185855f6954157137e11d904b517d447491cdc80b764736f6c63430008120033";

type TOFTMinterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TOFTMinterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TOFTMinter__factory extends ContractFactory {
  constructor(...args: TOFTMinterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TOFTMinter";
  }

  override deploy(
    _oft: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TOFTMinter> {
    return super.deploy(_oft, overrides || {}) as Promise<TOFTMinter>;
  }
  override getDeployTransaction(
    _oft: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_oft, overrides || {});
  }
  override attach(address: string): TOFTMinter {
    return super.attach(address) as TOFTMinter;
  }
  override connect(signer: Signer): TOFTMinter__factory {
    return super.connect(signer) as TOFTMinter__factory;
  }
  static readonly contractName: "TOFTMinter";

  public readonly contractName: "TOFTMinter";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TOFTMinterInterface {
    return new utils.Interface(_abi) as TOFTMinterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TOFTMinter {
    return new Contract(address, _abi, signerOrProvider) as TOFTMinter;
  }
}
