/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CurveSwapper,
  CurveSwapperInterface,
} from "../../Swapper/CurveSwapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ICurvePool",
        name: "_curvePool",
        type: "address",
      },
      {
        internalType: "contract YieldBox",
        name: "_yieldBox",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "curvePool",
    outputs: [
      {
        internalType: "contract ICurvePool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "getInputAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenInId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shareIn",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "dexData",
        type: "bytes",
      },
    ],
    name: "getOutputAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenInId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenOutId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shareIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "dexData",
        type: "bytes",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shareOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0346100ab57601f610af038819003918201601f19168301916001600160401b038311848410176100b05780849260409485528339810103126100ab5780516001600160a01b0391828216918290036100ab576020015191821682036100ab57600080546001600160a01b031916919091179055608052604051610a2990816100c78239608051818181610138015281816102fc0152818161034f015281816103ce01526107490152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c908163218751b21461085a57508063532bb192146106f757806355a68e10146100a65763c6fe95491461004d57600080fd5b346100a35761005b366108ab565b50505050606460405162461bcd60e51b815260206004820152600f60248201527f4e6f7420696d706c656d656e74656400000000000000000000000000000000006044820152fd5b80fd5b50346100a35760c03660031901126100a3576064356001600160a01b03811681036104eb5760a43567ffffffffffffffff81116106f3576100ee6100f691369060040161087d565b81019061091a565b90604051916311a5cc7760e31b83526004356004840152306024840152306044840152836064840152604435608484015260408360a481876001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af19283156105945784936106d1575b5061017f61017582610996565b51600f0b916109b9565b51926001600160a01b038554166040519463c661065760e01b86526fffffffffffffffffffffffffffffffff81166004870152602086602481855afa9586156106c6578796610686575b50604051635e0d443f60e01b8152600f85810b600483015282900b602482015260448101849052602081606481865afa90811561067b578891610645575b5060843511610600576040516370a0823160e01b8152306004820152938792906020866024816001600160a01b038c165afa9586156105945784966105cc575b50813b1561047757836084926040519687958694630f7c084960e21b86526004860152600f0b60248501526044840152833560648401525af180156104875761059f575b5060206001600160a01b03936024604051809681936370a0823160e01b8352306004840152165afa92831561059457849361055b575b50808311156105165782039182116105025760405190630cf35bdd60e41b825283602435928360048201526080816024816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa9081156104f7578291610492575b506001600160a01b036044602092604051948593849263095ea7b360e01b8452817f00000000000000000000000000000000000000000000000000000000000000001660048501528a6024850152165af1801561048757610447575b506001600160a01b039060405192634d4d7cbd60e11b8452600484015230602484015216604482015281606482015282608482015260408160a481866001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af190811561043c576040939161040d575b5082519182526020820152f35b61042d9150833d8511610435575b61042581836108e2565b8101906109c9565b905038610400565b503d61041b565b6040513d85823e3d90fd5b6020813d60201161047f575b81610460602093836108e2565b8101031261047b5751801515036104775738610388565b8380fd5b8480fd5b3d9150610453565b6040513d87823e3d90fd5b90506080813d82116104ef575b816104ac608093836108e2565b810103126104eb576005815110156104eb5760406104cc602083016109df565b9101516001600160a01b038116036104eb576001600160a01b0361032c565b5080fd5b3d915061049f565b6040513d84823e3d90fd5b634e487b7160e01b83526011600452602483fd5b60405162461bcd60e51b815260206004820152600b60248201527f73776170206661696c65640000000000000000000000000000000000000000006044820152606490fd5b9092506020813d60201161058c575b81610577602093836108e2565b81010312610587575191386102c1565b600080fd5b3d915061056a565b6040513d86823e3d90fd5b67ffffffffffffffff81116105b857604052602061028b565b634e487b7160e01b85526041600452602485fd5b9095506020813d6020116105f8575b816105e8602093836108e2565b8101031261047757519438610247565b3d91506105db565b60405162461bcd60e51b815260206004820152601760248201527f696e73756666696369656e742d616d6f756e742d6f75740000000000000000006044820152606490fd5b90506020813d602011610673575b81610660602093836108e2565b8101031261066f575138610207565b8780fd5b3d9150610653565b6040513d8a823e3d90fd5b9095506020813d6020116106be575b816106a2602093836108e2565b810103126106ba576106b3906109df565b94386101c9565b8680fd5b3d9150610695565b6040513d89823e3d90fd5b6106eb91935060403d6040116104355761042581836108e2565b509138610168565b8280fd5b50346100a3576107169061070a366108ab565b8195929395019061091a565b906040519363442c159960e01b8552600485015260248401528160448401526020926001600160a01b03918482606481867f0000000000000000000000000000000000000000000000000000000000000000165afa91821561059457908592918592610828575b506107d0938554169061079961079282610996565b51916109b9565b51604051635e0d443f60e01b8152600f92830b6004820152910b602482015260448101929092529092839190829081906064820190565b03915afa91821561081c5780926107ec575b5050604051908152f35b9091508282813d8311610815575b61080481836108e2565b810103126100a357505138806107e2565b503d6107fa565b604051903d90823e3d90fd5b8092508391933d8311610853575b61084081836108e2565b81010312610477575184916107d061077d565b503d610836565b9050346104eb57816003193601126104eb576001600160a01b0360209254168152f35b9181601f840112156105875782359167ffffffffffffffff8311610587576020838186019501011161058757565b60606003198201126105875760043591602435916044359067ffffffffffffffff8211610587576108de9160040161087d565b9091565b90601f8019910116810190811067ffffffffffffffff82111761090457604052565b634e487b7160e01b600052604160045260246000fd5b90602090818382031261058757823567ffffffffffffffff93848211610587570181601f82011215610587578035938411610904578360051b9060405194610964858401876108e2565b85528380860192820101928311610587578301905b828210610987575050505090565b81358152908301908301610979565b8051156109a35760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156109a35760400190565b9190826040910312610587576020825192015190565b51906001600160a01b03821682036105875756fea26469706673582212203da369d8045263960e21715ad96038bcdc4e7ed1bf63f61da9d7e658a8039e8e64736f6c63430008120033";

type CurveSwapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveSwapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveSwapper__factory extends ContractFactory {
  constructor(...args: CurveSwapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CurveSwapper";
  }

  override deploy(
    _curvePool: PromiseOrValue<string>,
    _yieldBox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurveSwapper> {
    return super.deploy(
      _curvePool,
      _yieldBox,
      overrides || {}
    ) as Promise<CurveSwapper>;
  }
  override getDeployTransaction(
    _curvePool: PromiseOrValue<string>,
    _yieldBox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_curvePool, _yieldBox, overrides || {});
  }
  override attach(address: string): CurveSwapper {
    return super.attach(address) as CurveSwapper;
  }
  override connect(signer: Signer): CurveSwapper__factory {
    return super.connect(signer) as CurveSwapper__factory;
  }
  static readonly contractName: "CurveSwapper";

  public readonly contractName: "CurveSwapper";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveSwapperInterface {
    return new utils.Interface(_abi) as CurveSwapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveSwapper {
    return new Contract(address, _abi, signerOrProvider) as CurveSwapper;
  }
}
