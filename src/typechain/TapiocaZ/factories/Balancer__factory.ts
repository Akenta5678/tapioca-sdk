/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Balancer, BalancerInterface } from "../Balancer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_routerETH",
        type: "address",
      },
      {
        internalType: "address",
        name: "_router",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DestinationNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "DestinationOftNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "ExceedsBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "FeeAmountNotSet",
    type: "error",
  },
  {
    inputs: [],
    name: "PoolInfoRequired",
    type: "error",
  },
  {
    inputs: [],
    name: "RebalanceAmountNotSet",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterNotValid",
    type: "error",
  },
  {
    inputs: [],
    name: "SlippageNotValid",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_srcOft",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "_dstChainId",
        type: "uint16",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_dstOft",
        type: "address",
      },
    ],
    name: "ConnectedChainUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "_srcOft",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "_dstChainId",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_totalAmount",
        type: "uint256",
      },
    ],
    name: "RebalanceAmountUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_srcOft",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "_dstChainId",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_slippage",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "_isNative",
        type: "bool",
      },
    ],
    name: "Rebalanced",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_srcOft",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_dstChainId",
        type: "uint16",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "addRebalanceAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_srcOft",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_dstChainId",
        type: "uint16",
      },
    ],
    name: "checker",
    outputs: [
      {
        internalType: "bool",
        name: "canExec",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "execPayload",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    name: "connectedOFTs",
    outputs: [
      {
        internalType: "uint256",
        name: "srcPoolId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dstPoolId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "dstOft",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "rebalanceable",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_srcOft",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_dstChainId",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "_dstOft",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_ercData",
        type: "bytes",
      },
    ],
    name: "initConnectedOFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_srcOft",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_dstChainId",
        type: "uint16",
      },
      {
        internalType: "uint256",
        name: "_slippage",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_ercData",
        type: "bytes",
      },
    ],
    name: "rebalance",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60c06040523462000043576200001f6200001862000106565b9162000175565b6040516115a462000286823960805181611034015260a051816113ab01526115a490f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200008057604052565b62000048565b906200009d6200009560405190565b92836200005e565b565b6001600160a01b031690565b90565b6001600160a01b038116036200004357565b905051906200009d82620000ae565b90916060828403126200004357620000ab620000ec8484620000c0565b93620000fc8160208601620000c0565b93604001620000c0565b620001296200182a803803806200011d8162000086565b928339810190620000cf565b909192565b6200009f620000ab620000ab9290565b620000ab906200012e565b620000ab906200009f906001600160a01b031682565b620000ab9062000149565b620000ab906200015f565b91620001819062000223565b6200018d60006200013e565b6001600160a01b0381166001600160a01b03831614620001dd576001600160a01b03166001600160a01b03831614620001dd57620001cf620001d8926200016a565b6080526200016a565b60a052565b604051630801eaf160e01b8152600490fd5b9062000203620000ab6200021f926200016a565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b62000230816000620001ef565b6200023c60006200013e565b90620002746200026d7f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76936200016a565b916200016a565b916200027f60405190565b600090a356fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806303d569261461008b57806313af4035146100865780635dd94d4e14610081578063623c12f81461007c57806380fd8987146100775780638da5cb5b1461007257639c25e27d0361000e57610561565b6104cc565b610485565b610413565b61036e565b61022d565b6101f4565b6001600160a01b031690565b90565b6001600160a01b0381165b036100b157565b600080fd5b905035906100c38261009f565b565b61ffff81166100aa565b905035906100c3826100c5565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761011457604052565b6100dc565b906100c361012660405190565b92836100f2565b67ffffffffffffffff811161011457602090601f01601f19160190565b0190565b90826000939282370152565b9092919261016f61016a8261012d565b610119565b938185526020850190828401116100b1576100c39261014e565b9080601f830112156100b15781602061009c9335910161015a565b906080828203126100b1576101b981836100b6565b926101c782602085016100cf565b926101d583604083016100b6565b92606082013567ffffffffffffffff81116100b15761009c9201610189565b346100b1576102106102073660046101a4565b92919091610dd0565b604051005b0390f35b906020828203126100b15761009c916100b6565b346100b157610210610240366004610219565b610664565b91906040838203126100b15761009c9061025f81856100b6565b936020016100cf565b61009c90610090906001600160a01b031682565b61009c90610268565b61009c9061027c565b9061029890610285565b600052602052604060002090565b6102b761009c61009c9261ffff1690565b61ffff1690565b90610298906102a6565b61009c9081565b61009c90546102c8565b61009c90610090565b61009c90546102d9565b906102fb61030092600161028e565b6102be565b9061030a826102cf565b91610317600182016102cf565b9161009c6003610329600285016102e2565b93016102cf565b9052565b61036a6100c39461035a606094989795610353608086019a6000870152565b6020850152565b6001600160a01b03166040830152565b0152565b346100b15761021561038a610384366004610245565b906102ec565b9061039794929460405190565b94859485610334565b60005b8381106103b35750506000910152565b81810151838201526020016103a3565b6103e46103ed60209361014a936103d8815190565b80835293849260200190565b958691016103a0565b601f01601f191690565b901515815261009c9160408201915b60208184039101526103c3565b346100b15761042c610426366004610245565b90610720565b9061021561043960405190565b928392836103f7565b806100aa565b905035906100c382610442565b90916060828403126100b15761009c61046e84846100b6565b9361047c81602086016100cf565b93604001610448565b346100b157610210610498366004610455565b91610edc565b60009103126100b157565b61009c916008021c610090565b9061009c91546104a9565b61009c6000806104b6565b346100b1576104dc36600461049e565b6102156104e76104c1565b604051918291826001600160a01b03909116815260200190565b91909160a0818403126100b15761051883826100b6565b9261052681602084016100cf565b926105348260408501610448565b926105428360608301610448565b92608082013567ffffffffffffffff81116100b15761009c9201610189565b61021061056f366004610501565b93929092610bc0565b1561057f57565b60405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606490fd5b6100c3906105de336105d86105cb61009060006102e2565b916001600160a01b031690565b14610578565b610613565b906001600160a01b03905b9181191691161790565b9061060861009c61060f92610285565b82546105e3565b9055565b61061e8160006105f8565b7f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769061065261064c33610285565b91610285565b9161065c60405190565b80805b0390a3565b6100c3906105b3565b8015156100aa565b905051906100c38261066d565b906020828203126100b15761009c91610675565b6040513d6000823e3d90fd5b9081526040810192916100c39160200152565b61009c61009c61009c9290565b610330906106b5565b919361070c61009c969461070261071394976106f760a088019960008901906001600160a01b03169052565b61ffff166020870152565b60408501906106c2565b6060830152565b60808184039101526103c3565b9190606092610753602061073b61073684610285565b610285565b6373cfc6b29061074a60405190565b93849260e01b90565b825260049082905afa90811561087b5760009161084d575b506107ef575b61009c906107e0600195610794600361078e876102fb878c61028e565b016102cf565b6107a56107a160006106b5565b9190565b11966107bd600361078e886102fb886103e89661028e565b906107c760405190565b639c25e27d60e01b6020820152968795602487016106cb565b602082018103825203826100f2565b925061009c6108396108456001610821610812600061078e886102fb8c8761028e565b9161078e876102fb8b8461028e565b9061082b60405190565b9384926020840192836106a2565b908103825203826100f2565b939050610771565b61086e915060203d8111610874575b61086681836100f2565b810190610682565b3861076b565b503d61085c565b610696565b906100c39493929161089c336105d86105cb61009060006102e2565b6108b7565b61009061009c61009c9290565b61009c906108a1565b939291906108dd60026108d7836102fb6108d08a610285565b600161028e565b016102e2565b6108ed6105cb61009060006108ae565b146108fb576100c39461090d565b6040516304889dcf60e01b8152600490fd5b9392919061091d620186a06106b5565b82101561092d576100c3946109bc565b604051631224b81560e01b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b9190820391821161096257565b61093f565b90600019906105ee565b9061098161009c61060f926106b5565b8254610967565b6109b46100c3946109ad606094989795610353608086019a600087019061ffff169052565b6040830152565b019015159052565b6001946109d2600361078e856102fb868b61028e565b8511610bae576109eb60026108d7856102fb868b61028e565b95610a07610a03856109fc86610285565b998a610f2a565b1590565b610b9c57610a1761073684610285565b91638232a1e692803b156100b157610a38610a3160405190565b9460e01b90565b84526004840188905260008460248183855af190811561087b57610a7794602092610b76575b506373cfc6b290610a6e60405190565b95869260e01b90565b825260049082905afa92831561087b57600093610b56575b508215610b25575085341115610b13576003610ac1856102fb86610ada95610abc8b858e610b0e9c61101b565b61028e565b01610ad487610acf836102cf565b610955565b90610971565b7f7007030f22ba868c6abdfc92d9c47da38dca4e3c200c2d47043b5f5406bd0c0c94610b0560405190565b94859485610988565b0390a2565b604051637b063a8960e11b8152600490fd5b34610b336107a160006106b5565b14610b1357610ac1856102fb86610ada95610abc6003968c868f610b0e9d61123b565b610b6f91935060203d81116108745761086681836100f2565b9138610a8f565b610b8f9060005b610b8781836100f2565b81019061049e565b38610a5e565b503d610b7d565b604051635e8ea7db60e01b8152600490fd5b60405163bb6a783760e01b8152600490fd5b906100c394939291610880565b906100c3939291610be8336105d86105cb61009060006102e2565b610c84565b905051906100c382610442565b91906040838203126100b15761009c90610c148185610bed565b93602001610bed565b61009c6080610119565b6100c39190610ad490606090600390610c408185875190565b610c5260018201610ad4602088015190565b610c7360028201610c6d60408801516001600160a01b031690565b906105f8565b0192015190565b906100c391610c27565b9092610c97602061073b61073685610285565b825260049082905afa801561087b57610cb691600091610db857501590565b80610da2575b610d9057610cce610a03858585610f2a565b610b9c5761070c610d2a610cf4836020610ce9610d3e965190565b818301019101610bfa565b610d16600094929491610d0f610d08610c1d565b9684880152565b6020860152565b6001600160a01b03871660408501526106b5565b610d39856102fb85600161028e565b610c7a565b61065f610d74610d6e7f977b844ab5bd8c7c7282986679102e8c18c4374f0560736566e586613272191793610285565b93610285565b93610d7e60405190565b9182918261ffff909116815260200190565b60405163c804944560e01b8152600490fd5b508051610db26107a160006106b5565b14610cbc565b610a03915060203d81116108745761086681836100f2565b906100c3939291610bcd565b9190610df260026108d7836102fb87600161028e565b610e026105cb61009060006108ae565b146108fb576100c392906100c39291610e25336105d86105cb61009060006102e2565b610e6c565b9190820180921161096257565b61036a6100c3946109ad606094989795610e61608086019a60008701906001600160a01b03169052565b61ffff166020850152565b610ed7610ea3600361078e856102fb866001610abc86610e90866102fb868661028e565b01610ad48d610e9e836102cf565b610e2a565b7f3b100c278a9436e8a77b205a5395872158b05a3f1a0bc5e6052c1d92827c7bd594610ece60405190565b94859485610e37565b0390a1565b906100c39291610ddc565b610330906001600160a01b031660601b90565b601481610f0c61014a93839695610ee7565b018092610ee7565b61ffff909116815261009c916040820191610406565b91610f6661073660209394610f3d600090565b50610736610f4a60405190565b8097610f5a848984019283610efa565b908103825203876100f2565b610f87633d8b38f6610f92610f7a60405190565b9687958694859460e01b90565b845260048401610f14565b03915afa90811561087b57600091610fa8575090565b61009c915060203d81116108745761086681836100f2565b61014a81601493610ee7565b9061101361036a916100c396989795611006608096610ff660a0880194600089019061ffff169052565b6001600160a01b03166020870152565b84820360408601526103c3565b966060830152565b92919061102730610285565b819031106110fc576110587f0000000000000000000000000000000000000000000000000000000000000000610285565b90631114cd2a906110a561107660026108d7876102fb8b600161028e565b9561109f61108360405190565b8098611093602083019182610fc0565b908103825203886100f2565b82611541565b91833b156100b1576110db6110d0936000979388946110c360405190565b9a8b998a98899760e01b90565b875260048701610fcc565b03925af1801561087b576110ec5750565b6100c3906000610b8781836100f2565b604051637fa62f9d60e01b8152600490fd5b6100aa816102d9565b905051906100c38261110e565b906020828203126100b15761009c91611117565b906020828203126100b15761009c91610bed565b61009c6060610119565b6001600160a01b0390911681526040810192916100c39160200152565b8051825261009c91606081019160409061119260208201516020850152565b01519060408184039101526103c3565b9691956111fa61009c99966111f361120e976111e3611201969860408e61036a61121c9f6111dc61012084019e600085019061ffff169052565b6020830152565b6001600160a01b031660608c0152565b60808a0152565b60a0880152565b85820360c0870152611173565b9083820360e08501526103c3565b906101008183039101526002815261060f60f31b602082015260400190565b91909161124a61073682610285565b9263785e9e869561125a60405190565b6112648860e01b90565b8152602081600481895afa801561087b5761128d6020916112cd936000916114e6575b50610285565b6370a08231906112b661129f30610285565b926112a960405190565b9586948593849360e01b90565b83526001600160a01b031660048301526024820190565b03915afa90811561087b576000916114b8575b5082116110fc578051602082010190602001906112fc91610bfa565b929095600097349686846001906113129161028e565b9061131c916102be565b600201611328906102e2565b604080516001600160a01b0392909216602080840191909152825261134d90826100f2565b61135561114c565b9861135f8c6106b5565b8c8b015260208a015260408901526040519160e01b825281806004810103815a93602094fa801561087b5761139b9160009161148a5750610285565b936113d9602063095ea7b36113cf7f0000000000000000000000000000000000000000000000000000000000000000610285565b9761074a60405190565b8252818d816113ec8b8d60048401611156565b03925af1801561087b5761146e575b5061140b639fbf10fc9285611541565b96604081015190863b156100b1578a9861143b968a966114469561142e60405190565b9d8e9c8d9b8c9a60e01b90565b8a5260048a016111a2565b03925af1801561087b57611458575050565b816100c392903d10610b9557610b8781836100f2565b6114859060203d81116108745761086681836100f2565b6113fb565b6114ab915060203d81116114b1575b6114a381836100f2565b810190611124565b38611287565b503d611499565b6114d9915060203d81116114df575b6114d181836100f2565b810190611138565b386112e0565b503d6114c7565b6114ab9150833d81116114b1576114a381836100f2565b8181029291811591840414171561096257565b61009c620186a06106b5565b634e487b7160e01b600052601260045260246000fd5b811561153c570490565b61151c565b61156861155a61009c93611553600090565b50836114fd565b611562611510565b90611532565b9061095556fea264697066735822122015ee357f37bf3b9ffe0e4a944768145eab4893b6476fee106fd3ce3dc2b3cbdd64736f6c63430008120033";

type BalancerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BalancerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Balancer__factory extends ContractFactory {
  constructor(...args: BalancerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Balancer";
  }

  override deploy(
    _routerETH: PromiseOrValue<string>,
    _router: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Balancer> {
    return super.deploy(
      _routerETH,
      _router,
      _owner,
      overrides || {}
    ) as Promise<Balancer>;
  }
  override getDeployTransaction(
    _routerETH: PromiseOrValue<string>,
    _router: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _routerETH,
      _router,
      _owner,
      overrides || {}
    );
  }
  override attach(address: string): Balancer {
    return super.attach(address) as Balancer;
  }
  override connect(signer: Signer): Balancer__factory {
    return super.connect(signer) as Balancer__factory;
  }
  static readonly contractName: "Balancer";

  public readonly contractName: "Balancer";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BalancerInterface {
    return new utils.Interface(_abi) as BalancerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Balancer {
    return new Contract(address, _abi, signerOrProvider) as Balancer;
  }
}
