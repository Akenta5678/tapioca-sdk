/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  TapiocaWrapper,
  TapiocaWrapperInterface,
} from "../TapiocaWrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_erc20",
        type: "address",
      },
    ],
    name: "TapiocaWrapper__AlreadyDeployed",
    type: "error",
  },
  {
    inputs: [],
    name: "TapiocaWrapper__FailedDeploy",
    type: "error",
  },
  {
    inputs: [],
    name: "TapiocaWrapper__MngmtFeeTooHigh",
    type: "error",
  },
  {
    inputs: [],
    name: "TapiocaWrapper__NoTOFTDeployed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "TapiocaWrapper__TOFTExecutionFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract ITapiocaOFT",
        name: "_tapiocaOFT",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_erc20",
        type: "address",
      },
    ],
    name: "CreateOFT",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_caller",
        type: "address",
      },
    ],
    name: "HarvestFees",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_newFee",
        type: "uint256",
      },
    ],
    name: "SetFees",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_erc20",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_bytecode",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "_salt",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "_linked",
        type: "bool",
      },
    ],
    name: "createTOFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "toft",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "bytecode",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "revertOnFailure",
            type: "bool",
          },
        ],
        internalType: "struct TapiocaWrapper.ExecutionCall[]",
        name: "_call",
        type: "tuple[]",
      },
    ],
    name: "executeCalls",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_toft",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_bytecode",
        type: "bytes",
      },
      {
        internalType: "bool",
        name: "_revertOnFailure",
        type: "bool",
      },
    ],
    name: "executeTOFT",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "harvestFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "harvestableTapiocaOFTsLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastTOFT",
    outputs: [
      {
        internalType: "contract ITapiocaOFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tapiocaOFTLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tapiocaOFTs",
    outputs: [
      {
        internalType: "contract ITapiocaOFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tapiocaOFTsByErc20",
    outputs: [
      {
        internalType: "contract ITapiocaOFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523462000030576200001e62000018620000d3565b620000f6565b604051611270620001e6823961127090f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176200006d57604052565b62000035565b906200008a6200008260405190565b92836200004b565b565b6001600160a01b031690565b90565b6001600160a01b038116036200003057565b905051906200008a826200009b565b9060208282031262000030576200009891620000ad565b620000986200145680380380620000ea8162000073565b928339810190620000bc565b6200008a90620001056200010b565b62000183565b6200008a3362000183565b546001600160a01b031690565b62000098906200008c906001600160a01b031682565b620000989062000123565b620000989062000139565b9062000163620000986200017f9262000144565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b6200018f600062000116565b906200019d8160006200014f565b620001d4620001cd7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09362000144565b9162000144565b91620001df60405190565b600090a356fe6080604052600436101561001257600080fd5b60003560e01c8063138cc18f146100d25780632f3e1b91146100cd57806339930d73146100c85780633b6ac5a3146100c3578063715018a6146100be5780638da5cb5b146100b9578063b3c7d6a3146100b4578063b8454db8146100af578063c5181c70146100aa578063c99e12b2146100a5578063e4c47206146100a05763f2fde38b036100e257610605565b6105db565b6104d6565b61043f565b610412565b61033d565b61025d565b610245565b61021e565b61013a565b61010e565b6100e7565b60009103126100e257565b600080fd5b346100e2576100f73660046100d7565b6100ff6108fb565b604051005b0390f35b9052565b565b346100e25761011e3660046100d7565b61010461012a60015490565b6040519182918290815260200190565b346100e25761014a3660046100d7565b61010461012a60025490565b6001600160a01b031690565b90565b6001600160a01b0381165b036100e257565b9050359061010c82610165565b906020828203126100e25761016291610177565b61016290610156906001600160a01b031682565b61016290610198565b610162906101ac565b906101c8906101b5565b600052602052604060002090565b610162916008021c610156565b9061016291546101d6565b610162906102006003916000926101be565b6101e3565b610108906101b5565b60208101929161010c9190610205565b346100e257610104610239610234366004610184565b6101ee565b6040519182918261020e565b346100e2576102553660046100d7565b6100ff610672565b346100e25761026d3660046100d7565b610104610278610630565b604051918291826001600160a01b03909116815260200190565b909182601f830112156100e25781359167ffffffffffffffff83116100e25760200192600183028401116100e257565b80610170565b9050359061010c826102c2565b801515610170565b9050359061010c826102d5565b916080838303126100e2576102ff8284610177565b9260208101359167ffffffffffffffff83116100e25761032484610162948401610292565b93909461033481604086016102c8565b936060016102dd565b346100e2576100ff6103503660046102ea565b93929092610fbe565b906060828203126100e25761036e8183610177565b92602083013567ffffffffffffffff81116100e25761039283610162928601610292565b9390946040016102dd565b60005b8381106103b05750506000910152565b81810151838201526020016103a0565b6103e16103ea6020936103f4936103d5815190565b80835293849260200190565b9586910161039d565b601f01601f191690565b0190565b9015158152604060208201819052610162929101906103c0565b610429610420366004610359565b92919091610b18565b9061010461043660405190565b928392836103f8565b346100e25761044f3660046100d7565b610104610239610850565b906020828203126100e257610162916102c8565b634e487b7160e01b600052603260045260246000fd5b80548210156104a75761049e600191600052602060002090565b91020190600090565b61046e565b600160006104b8825490565b8310156104d35750610162916104cd91610484565b906101e3565b80fd5b346100e2576101046102396104ec36600461045a565b6104ac565b909182601f830112156100e25781359167ffffffffffffffff83116100e25760200192602083028401116100e257565b906020828203126100e257813567ffffffffffffffff81116100e25761054792016104f1565b9091565b90610162916103c0565b9061056b610561835190565b8083529160200190565b908161057d6020830284019460200190565b926000915b83831061059157505050505090565b909192939460206105b46105ad8385600195038752895161054b565b9760200190565b9301930191939290610582565b901515815260406020820181905261016292910190610555565b6105ef6105e9366004610521565b90610d16565b906101046105fc60405190565b928392836105c1565b346100e2576100ff610618366004610184565b610789565b61016290610156565b610162905461061d565b6101626000610626565b6106426106ce565b61010c610660565b6101566101626101629290565b6101629061064a565b61010c61066d6000610657565b6107c2565b61010c61063a565b1561068157565b60405162461bcd60e51b8152806106ca600482016020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b0390fd5b61010c6106d9610630565b6106f26106e533610156565b916001600160a01b031690565b1461067a565b61010c906107046106ce565b610764565b1561071057565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b61010c9061066d6107786101566000610657565b6001600160a01b0383161415610709565b61010c906106f8565b906001600160a01b03905b9181191691161790565b906107b76101626107be926101b5565b8254610792565b9055565b6107cc6000610626565b906107d88160006107a7565b61080b6108057f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0936101b5565b916101b5565b9161081560405190565b600090a3565b6101626101626101629290565b634e487b7160e01b600052601160045260246000fd5b9190820391821161084b57565b610828565b60018054610865610861600061081b565b9190565b14610891576104cd8161088b61087c610162945490565b6108858361081b565b9061083e565b90610484565b604051634df930f160e01b8152600490fd5b600019811461084b5760010190565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176108ea57604052565b6108b2565b6040513d6000823e3d90fd5b6000906109078261081b565b6002610914610162825490565b8210156109ad5761092b6104cd8361093093610484565b6101b5565b9063138cc18f91803b156100e25761095692859161094d60405190565b94859260e01b90565b8252600490829084905af19182156109a8576109779261097c575b506108a3565b610907565b61099b90853d87116109a1575b61099381836108c8565b8101906100d7565b38610971565b503d610989565b6108ef565b50509050336109dc7ffafa110fb81a7f88423c7aa6e23116f2fbbc14aa953f81c5b5bf1571647f76b9916101b5565b906109e660405190565b600090a2565b9061054795949392916109fd6106ce565b610aa0565b90826000939282370152565b90916103f49083908093610a02565b909161016292610a0e565b9061010c610a3560405190565b92836108c8565b67ffffffffffffffff81116108ea57602090601f01601f19160190565b90610a6b610a6683610a3c565b610a28565b918252565b3d15610a8a57610a7f3d610a59565b903d6000602084013e565b606090565b6020808252610162929101906103c0565b61092b6000959293869594610ab69350506101b5565b913490610ace610ac560405190565b93849283610a1d565b03925af191610adb610a70565b80928481610b0f575b50610aec5750565b6106ca90610af960405190565b6310847b0960e01b815291829160048301610a8f565b15905038610ae4565b61054793929190606060006109ec565b90610547939291610b376106ce565b610c31565b67ffffffffffffffff81116108ea5760208091020190565b90610a6b610a6683610b3c565b60005b828110610b7057505050565b606082820152602001610b64565b9061010c610b94610b8e84610b54565b93610b3c565b601f190160208401610b61565b903590605e1936829003018212156100e2570190565b908210156104a75760206101629202810190610ba1565b3561016281610165565b903590601e1936829003018212156100e2570180359067ffffffffffffffff82116100e257602001913682900383136100e257565b90610c16825190565b8110156104a7576020809102010190565b35610162816102d5565b9290508093610c3f85610b7e565b9384600092610c4d8461081b565b925b885b841015610d0b57508380610c7661092b61092b83610c70898c8e610bb7565b01610bce565b34610c8f610c85888b8d610bb7565b6020810190610bd8565b9190610c9d610ac560405190565b03925af192610caa610a70565b610cb4828a610c0d565b5283610ccc6040610cc6848a8c610bb7565b01610c27565b9081610d02575b50610cec57610ce4610c51916108a3565b939050610c4f565b610cf96106ca9189610c0d565b51604051610af9565b15905038610cd3565b975094509450505050565b610547919060606000610b28565b9061010c94939291610d346106ce565b610de4565b6101708161061d565b9050519061010c82610d39565b906020828203126100e25761016291610d42565b916001600160a01b0360089290920291821b911b61079d565b9190610d8d6101626107be936101b5565b908354610d63565b90815491680100000000000000008310156108ea5782610dbd91600161010c95018155610484565b90610d7c565b9050519061010c826102d5565b906020828203126100e25761016291610dc3565b92909391600394610e0061092b610dfb87896101be565b610626565b610e106106e56101566000610657565b03610f8d5791610e25939161092b9386611021565b91610e2f836101b5565b9063785e9e86610e48610e4160405190565b9160e01b90565b8152602081600481865afa80156109a857610e6b91600091610f5f575b506101b5565b610e7d6001600160a01b0385166106e5565b03610f4d57610ec491610eac85610ea786602095610ea284610e9d600190565b610d95565b6101be565b6107a7565b63c77c297290610ebb60405190565b93849260e01b90565b825260049082905afa9081156109a857600091610f1f575b50610f0f575b61080b6108057f7512d1d2a31be00735451a10b76db5dca1e1581b1cb23d7910b4741e8eb14876936101b5565b610f1a826002610d95565b610ee2565b610f40915060203d8111610f46575b610f3881836108c8565b810190610dd0565b38610edc565b503d610f2e565b60405163f083e5f760e01b8152600490fd5b610f80915060203d8111610f86575b610f7881836108c8565b810190610d4f565b38610e65565b503d610f6e565b6106ca85610f9a60405190565b638a8d142560e01b8152918291600483016001600160a01b03909116815260200190565b9061010c94939291610d24565b90929192610fdb610a6682610a3c565b938185526020850190828401116100e25761010c92610a02565b610162913691610fcb565b610108906001600160a01b031660601b90565b018092611000565b01918252565b90936110c5576101629361092b936110bf61092b946110b961092b956110a760009561104d8589610ff5565b61105f611058825190565b9160200190565b2061109b61106c306101b5565b9261107660405190565b9586946020860194859261101b60146103f494611013602088611013829b9a86999052565b908103825203826108c8565b6110b2611058825190565b209361081b565b93610ff5565b916111d3565b6101629361092b936110bf61092b946110b961092b956110a760009561104d8589610ff5565b156110f257565b60405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b1561113e57565b60405162461bcd60e51b8152806106ca600482016020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b1561118e57565b60405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606490fd5b929161015661010c92611229926111e8600090565b506111ff6111f5306101b5565b88903110156110eb565b80519661121b6000986112146108618b61081b565b1415611137565b60208251920190f594610657565b6001600160a01b038416141561118756fea2646970667358221220ebcf418f1c6a2c2ff0972b4e220fcbf9564edf64da7d56208b930d00e2e617a964736f6c63430008120033";

type TapiocaWrapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TapiocaWrapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TapiocaWrapper__factory extends ContractFactory {
  constructor(...args: TapiocaWrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TapiocaWrapper";
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TapiocaWrapper> {
    return super.deploy(_owner, overrides || {}) as Promise<TapiocaWrapper>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, overrides || {});
  }
  override attach(address: string): TapiocaWrapper {
    return super.attach(address) as TapiocaWrapper;
  }
  override connect(signer: Signer): TapiocaWrapper__factory {
    return super.connect(signer) as TapiocaWrapper__factory;
  }
  static readonly contractName: "TapiocaWrapper";

  public readonly contractName: "TapiocaWrapper";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TapiocaWrapperInterface {
    return new utils.Interface(_abi) as TapiocaWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TapiocaWrapper {
    return new Contract(address, _abi, signerOrProvider) as TapiocaWrapper;
  }
}
