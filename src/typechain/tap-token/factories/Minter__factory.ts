/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Minter, MinterInterface } from "../Minter";

const _abi = [
  {
    name: "Minted",
    inputs: [
      {
        type: "address",
        name: "recipient",
        indexed: true,
      },
      {
        type: "address",
        name: "gauge",
        indexed: false,
      },
      {
        type: "uint256",
        name: "minted",
        indexed: false,
      },
    ],
    anonymous: false,
    type: "event",
  },
  {
    name: "CommitOwnership",
    inputs: [
      {
        type: "address",
        name: "admin",
        indexed: false,
      },
    ],
    anonymous: false,
    type: "event",
  },
  {
    name: "ApplyOwnership",
    inputs: [
      {
        type: "address",
        name: "admin",
        indexed: false,
      },
    ],
    anonymous: false,
    type: "event",
  },
  {
    outputs: [],
    inputs: [
      {
        type: "address",
        name: "_token",
      },
      {
        type: "address",
        name: "_controller",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    name: "mint_for_test",
    outputs: [
      {
        type: "uint256",
        name: "",
      },
    ],
    inputs: [
      {
        type: "address",
        name: "gauge_addr",
      },
      {
        type: "address",
        name: "_for",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    name: "commit_transfer_ownership",
    outputs: [],
    inputs: [
      {
        type: "address",
        name: "addr",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    name: "apply_transfer_ownership",
    outputs: [],
    inputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    name: "mint",
    outputs: [],
    inputs: [
      {
        type: "address",
        name: "gauge_addr",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    name: "mint_many",
    outputs: [],
    inputs: [
      {
        type: "address[8]",
        name: "gauge_addrs",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    name: "mint_for",
    outputs: [],
    inputs: [
      {
        type: "address",
        name: "gauge_addr",
      },
      {
        type: "address",
        name: "_for",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    name: "toggle_approve_mint",
    outputs: [],
    inputs: [
      {
        type: "address",
        name: "minting_user",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    name: "token",
    outputs: [
      {
        type: "address",
        name: "",
      },
    ],
    inputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    name: "controller",
    outputs: [
      {
        type: "address",
        name: "",
      },
    ],
    inputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    name: "admin",
    outputs: [
      {
        type: "address",
        name: "",
      },
    ],
    inputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    name: "future_admin",
    outputs: [
      {
        type: "address",
        name: "",
      },
    ],
    inputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    name: "minted",
    outputs: [
      {
        type: "uint256",
        name: "",
      },
    ],
    inputs: [
      {
        type: "address",
        name: "arg0",
      },
      {
        type: "address",
        name: "arg1",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    name: "allowed_to_mint_for",
    outputs: [
      {
        type: "bool",
        name: "",
      },
    ],
    inputs: [
      {
        type: "address",
        name: "arg0",
      },
      {
        type: "address",
        name: "arg1",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x604061087961014039602061087960c03960c05160a01c1561002057600080fd5b602060206108790160c03960c05160a01c1561003b57600080fd5b61014051600055610160516001553360025561086156341561000a57600080fd5b600436101561001857610809565b600035601c5263c469a4c360005114156101145760043560a01c1561003c57600080fd5b60243560a01c1561004c57600080fd5b60206101c06024634b820093610140526024356101605261015c60006004355af161007657600080fd5b601f3d1161008357600080fd5b6000506101c05060206101e060246309400707610160526024356101805261017c6004355afa6100b257600080fd5b601f3d116100bf57600080fd5b6000506101e0516101405261014051600460243560e05260c052604060c02060043560e05260c052604060c02054808210156100fa57600080fd5b80820390509050610160526101405160005260206000f350005b600015610325575b610180526101405261016052600060206102206024633f9095b76101a052610140516101c0526101bc6001545afa61015357600080fd5b601f3d1161016057600080fd5b60005061022051121515156101b4576308c379a061024052602061026052600f610280527f6761756765206e6f742076616c696400000000000000000000000000000000006102a05261028050606461025cfd5b60206102206024634b8200936101a052610160516101c0526101bc6000610140515af16101e057600080fd5b601f3d116101ed57600080fd5b600050610220506020610240602463094007076101c052610160516101e0526101dc610140515afa61021e57600080fd5b601f3d1161022b57600080fd5b600050610240516101a0526101a05160046101605160e05260c052604060c0206101405160e05260c052604060c020548082101561026857600080fd5b808203905090506101c05260006101c051181561031f576000543b61028c57600080fd5b6000600060446399cf576e6101e05261016051610200526101c051610220526101fc60006000545af16102be57600080fd5b6101a05160046101605160e05260c052604060c0206101405160e05260c052604060c02055610140516101e0526101a05161020052610160517f9d228d69b5fdb8d273a2336f8fb8612d039631024ea9bf09c424a9503aa078f060406101e0a25b61018051565b636b441a4060005114156103c95760043560a01c1561034357600080fd5b60025433141515610393576308c379a061014052602061016052600c610180527f756e617574686f72697a656400000000000000000000000000000000000000006101a05261018050606461015cfd5b600435600355600435610140527f2f56810a6bf40af059b96d3aea4db54081f378029a518390491093a7b67032e96020610140a1005b636a1c05ae60005114156104b95760025433141515610427576308c379a061014052602061016052600c610180527f756e617574686f72697a656400000000000000000000000000000000000000006101a05261018050606461015cfd5b6003546101405260006101405114151515610481576308c379a061016052602061018052600f6101a0527f61646d696e206e6f742076616c696400000000000000000000000000000000006101c0526101a050606461017cfd5b6101405160025561014051610160527febee2d5739011062cb4f14113f3b36bf0ffe3da5c0568f64189d1012a11891056020610160a1005b636a62784260005114156105165762ffffff54156104d657600080fd5b600162ffffff5560043560a01c156104ed57600080fd5b60043561014052336101605261016051610140516006580161011c565b600050600062ffffff55005b63a51e190460005114156105fb5762ffffff541561053357600080fd5b600162ffffff556000610120525b610120516004013560a01c1561055657600080fd5b602061012051016101205261010061012051101561057357610541565b61014060006008818352015b6004610140516008811061059257600080fd5b602002013515156105a2576105f0565b61014051600461014051600881106105b957600080fd5b602002013561016052336101805261018051610160516006580161011c565b610140526000505b815160010180835281141561057f575b5050600062ffffff55005b6327f18ae3600051141561068d5762ffffff541561061857600080fd5b600162ffffff5560043560a01c1561062f57600080fd5b60243560a01c1561063f57600080fd5b60053360e05260c052604060c02060243560e05260c052604060c020541561068457600435610140526024356101605261016051610140516006580161011c565b6000505b600062ffffff55005b63dd289d6060005114156106e85760043560a01c156106ab57600080fd5b600560043560e05260c052604060c0203360e05260c052604060c0205415600560043560e05260c052604060c0203360e05260c052604060c02055005b63fc0c546a60005114156107045760005460005260206000f350005b63f77c479160005114156107205760015460005260206000f350005b63f851a440600051141561073c5760025460005260206000f350005b6317f7182a60005114156107585760035460005260206000f350005b638b752bb060005114156107b05760043560a01c1561077657600080fd5b60243560a01c1561078657600080fd5b600460043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b63a099003360005114156108085760043560a01c156107ce57600080fd5b60243560a01c156107de57600080fd5b600560043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b5b60006000fd5b61005261086103610052600039610052610861036000f3";

export class Minter__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _token: string,
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Minter> {
    return super.deploy(
      _token,
      _controller,
      overrides || {}
    ) as Promise<Minter>;
  }
  getDeployTransaction(
    _token: string,
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, _controller, overrides || {});
  }
  attach(address: string): Minter {
    return super.attach(address) as Minter;
  }
  connect(signer: Signer): Minter__factory {
    return super.connect(signer) as Minter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MinterInterface {
    return new utils.Interface(_abi) as MinterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Minter {
    return new Contract(address, _abi, signerOrProvider) as Minter;
  }
}
