/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "TapOFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapOFT__factory>;
    getContractFactory(
      name: "FeeDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeDistributor__factory>;
    getContractFactory(
      name: "GaugeController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GaugeController__factory>;
    getContractFactory(
      name: "IFeeDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeDistributor__factory>;
    getContractFactory(
      name: "IGaugeController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGaugeController__factory>;
    getContractFactory(
      name: "ILiquidityGauge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidityGauge__factory>;
    getContractFactory(
      name: "LiquidityGauge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityGauge__factory>;
    getContractFactory(
      name: "Minter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Minter__factory>;
    getContractFactory(
      name: "VeTap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VeTap__factory>;

    getContractAt(
      name: "TapOFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapOFT>;
    getContractAt(
      name: "FeeDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeDistributor>;
    getContractAt(
      name: "GaugeController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GaugeController>;
    getContractAt(
      name: "IFeeDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeDistributor>;
    getContractAt(
      name: "IGaugeController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGaugeController>;
    getContractAt(
      name: "ILiquidityGauge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidityGauge>;
    getContractAt(
      name: "LiquidityGauge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityGauge>;
    getContractAt(
      name: "Minter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Minter>;
    getContractAt(
      name: "VeTap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VeTap>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
