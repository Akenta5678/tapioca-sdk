/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MasterContractFullCycleMockInterface extends utils.Interface {
  contractName: "MasterContractFullCycleMock";
  functions: {
    "deployer()": FunctionFragment;
    "erc1155()": FunctionFragment;
    "erc1155Strategy()": FunctionFragment;
    "ethStrategy()": FunctionFragment;
    "init(bytes)": FunctionFragment;
    "run()": FunctionFragment;
    "token()": FunctionFragment;
    "tokenStrategy()": FunctionFragment;
    "yieldBox()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(functionFragment: "erc1155", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "erc1155Strategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "init", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "run", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "yieldBox", values?: undefined): string;

  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "erc1155", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc1155Strategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "run", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yieldBox", data: BytesLike): Result;

  events: {};
}

export interface MasterContractFullCycleMock extends BaseContract {
  contractName: "MasterContractFullCycleMock";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MasterContractFullCycleMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployer(overrides?: CallOverrides): Promise<[string]>;

    erc1155(overrides?: CallOverrides): Promise<[string]>;

    erc1155Strategy(overrides?: CallOverrides): Promise<[string]>;

    ethStrategy(overrides?: CallOverrides): Promise<[string]>;

    init(
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    run(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenStrategy(overrides?: CallOverrides): Promise<[string]>;

    yieldBox(overrides?: CallOverrides): Promise<[string]>;
  };

  deployer(overrides?: CallOverrides): Promise<string>;

  erc1155(overrides?: CallOverrides): Promise<string>;

  erc1155Strategy(overrides?: CallOverrides): Promise<string>;

  ethStrategy(overrides?: CallOverrides): Promise<string>;

  init(
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  run(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenStrategy(overrides?: CallOverrides): Promise<string>;

  yieldBox(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deployer(overrides?: CallOverrides): Promise<string>;

    erc1155(overrides?: CallOverrides): Promise<string>;

    erc1155Strategy(overrides?: CallOverrides): Promise<string>;

    ethStrategy(overrides?: CallOverrides): Promise<string>;

    init(data: BytesLike, overrides?: CallOverrides): Promise<void>;

    run(overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenStrategy(overrides?: CallOverrides): Promise<string>;

    yieldBox(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    erc1155(overrides?: CallOverrides): Promise<BigNumber>;

    erc1155Strategy(overrides?: CallOverrides): Promise<BigNumber>;

    ethStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    run(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    yieldBox(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc1155(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc1155Strategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    run(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
