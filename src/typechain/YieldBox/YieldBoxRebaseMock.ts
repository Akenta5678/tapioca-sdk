/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface YieldBoxRebaseMockInterface extends utils.Interface {
  contractName: "YieldBoxRebaseMock";
  functions: {
    "deposit(uint256,uint256)": FunctionFragment;
    "gain(uint256)": FunctionFragment;
    "lose(uint256)": FunctionFragment;
    "toAmount(uint256,bool)": FunctionFragment;
    "toShare(uint256,bool)": FunctionFragment;
    "totalAmount()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gain", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "lose", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "toAmount",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toShare",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface YieldBoxRebaseMock extends BaseContract {
  contractName: "YieldBoxRebaseMock";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YieldBoxRebaseMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      share: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gain(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lose(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toAmount(
      share: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    toShare(
      amount: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { share: BigNumber }>;

    totalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      share: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    share: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gain(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lose(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toAmount(
    share: BigNumberish,
    roundUp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toShare(
    amount: BigNumberish,
    roundUp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    share: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      share: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { shareOut: BigNumber; amountOut: BigNumber }
    >;

    gain(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    lose(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    toAmount(
      share: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toShare(
      amount: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      share: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { shareOut: BigNumber; amountOut: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    deposit(
      share: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gain(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lose(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toAmount(
      share: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toShare(
      amount: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      share: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      share: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gain(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lose(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toAmount(
      share: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toShare(
      amount: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      share: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
