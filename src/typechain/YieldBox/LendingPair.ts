/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type RebaseStruct = { elastic: BigNumberish; base: BigNumberish };

export type RebaseStructOutput = [BigNumber, BigNumber] & {
  elastic: BigNumber;
  base: BigNumber;
};

export interface LendingPairInterface extends utils.Interface {
  contractName: "LendingPair";
  functions: {
    "accrue(uint256)": FunctionFragment;
    "addAsset(uint256,address,uint256)": FunctionFragment;
    "addCollateral(uint256,address,uint256)": FunctionFragment;
    "borrow(uint256,address,uint256)": FunctionFragment;
    "createMarket(uint32,uint32,address,bytes)": FunctionFragment;
    "init(bytes)": FunctionFragment;
    "liquidate(uint256,address,uint256,address,address)": FunctionFragment;
    "marketList(uint256)": FunctionFragment;
    "markets(uint256)": FunctionFragment;
    "masterContract()": FunctionFragment;
    "removeAsset(uint256,address,uint256)": FunctionFragment;
    "removeCollateral(uint256,address,uint256)": FunctionFragment;
    "repay(uint256,address,uint256)": FunctionFragment;
    "updateExchangeRate(uint256)": FunctionFragment;
    "yieldBox()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accrue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addAsset",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "masterContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAsset",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "yieldBox", values?: undefined): string;

  decodeFunctionResult(functionFragment: "accrue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yieldBox", data: BytesLike): Result;

  events: {
    "LogAccrue(uint256,uint64,uint256)": EventFragment;
    "LogAddAsset(address,address,uint256,uint256)": EventFragment;
    "LogAddCollateral(address,address,uint256)": EventFragment;
    "LogBorrow(address,address,uint256,uint256)": EventFragment;
    "LogExchangeRate(uint256)": EventFragment;
    "LogLiquidate(uint256,address,uint256,address,address)": EventFragment;
    "LogRemoveAsset(address,address,uint256,uint256)": EventFragment;
    "LogRemoveCollateral(address,address,uint256)": EventFragment;
    "LogRepay(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAccrue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAddAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAddCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogExchangeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogLiquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoveAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoveCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRepay"): EventFragment;
}

export type LogAccrueEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { accruedAmount: BigNumber; rate: BigNumber; utilization: BigNumber }
>;

export type LogAccrueEventFilter = TypedEventFilter<LogAccrueEvent>;

export type LogAddAssetEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { from: string; to: string; share: BigNumber; fraction: BigNumber }
>;

export type LogAddAssetEventFilter = TypedEventFilter<LogAddAssetEvent>;

export type LogAddCollateralEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; share: BigNumber }
>;

export type LogAddCollateralEventFilter =
  TypedEventFilter<LogAddCollateralEvent>;

export type LogBorrowEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { from: string; to: string; amount: BigNumber; part: BigNumber }
>;

export type LogBorrowEventFilter = TypedEventFilter<LogBorrowEvent>;

export type LogExchangeRateEvent = TypedEvent<[BigNumber], { rate: BigNumber }>;

export type LogExchangeRateEventFilter = TypedEventFilter<LogExchangeRateEvent>;

export type LogLiquidateEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string],
  {
    marketId: BigNumber;
    user: string;
    borrowPart: BigNumber;
    to: string;
    swapper: string;
  }
>;

export type LogLiquidateEventFilter = TypedEventFilter<LogLiquidateEvent>;

export type LogRemoveAssetEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { from: string; to: string; share: BigNumber; fraction: BigNumber }
>;

export type LogRemoveAssetEventFilter = TypedEventFilter<LogRemoveAssetEvent>;

export type LogRemoveCollateralEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; share: BigNumber }
>;

export type LogRemoveCollateralEventFilter =
  TypedEventFilter<LogRemoveCollateralEvent>;

export type LogRepayEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { from: string; to: string; amount: BigNumber; part: BigNumber }
>;

export type LogRepayEventFilter = TypedEventFilter<LogRepayEvent>;

export interface LendingPair extends BaseContract {
  contractName: "LendingPair";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LendingPairInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accrue(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAsset(
      marketId: BigNumberish,
      to: string,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addCollateral(
      marketId: BigNumberish,
      to: string,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrow(
      marketId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createMarket(
      collateral_: BigNumberish,
      asset_: BigNumberish,
      oracle_: string,
      oracleData_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      arg0: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      marketId: BigNumberish,
      user: string,
      maxBorrowPart: BigNumberish,
      to: string,
      swapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    markets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        RebaseStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        collateral: number;
        asset: number;
        oracle: string;
        oracleData: string;
        totalCollateralShare: BigNumber;
        totalAssetShares: BigNumber;
        totalBorrow: RebaseStructOutput;
        exchangeRate: BigNumber;
        interestPerSecond: BigNumber;
        lastAccrued: BigNumber;
        assetId: number;
      }
    >;

    masterContract(overrides?: CallOverrides): Promise<[string]>;

    removeAsset(
      marketId: BigNumberish,
      to: string,
      fraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeCollateral(
      marketId: BigNumberish,
      to: string,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      marketId: BigNumberish,
      to: string,
      part: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateExchangeRate(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<[string]>;
  };

  accrue(
    marketId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAsset(
    marketId: BigNumberish,
    to: string,
    share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addCollateral(
    marketId: BigNumberish,
    to: string,
    share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrow(
    marketId: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createMarket(
    collateral_: BigNumberish,
    asset_: BigNumberish,
    oracle_: string,
    oracleData_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    arg0: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    marketId: BigNumberish,
    user: string,
    maxBorrowPart: BigNumberish,
    to: string,
    swapper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  markets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      string,
      string,
      BigNumber,
      BigNumber,
      RebaseStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      collateral: number;
      asset: number;
      oracle: string;
      oracleData: string;
      totalCollateralShare: BigNumber;
      totalAssetShares: BigNumber;
      totalBorrow: RebaseStructOutput;
      exchangeRate: BigNumber;
      interestPerSecond: BigNumber;
      lastAccrued: BigNumber;
      assetId: number;
    }
  >;

  masterContract(overrides?: CallOverrides): Promise<string>;

  removeAsset(
    marketId: BigNumberish,
    to: string,
    fraction: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeCollateral(
    marketId: BigNumberish,
    to: string,
    share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    marketId: BigNumberish,
    to: string,
    part: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateExchangeRate(
    marketId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yieldBox(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accrue(marketId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    addAsset(
      marketId: BigNumberish,
      to: string,
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addCollateral(
      marketId: BigNumberish,
      to: string,
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrow(
      marketId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { part: BigNumber; share: BigNumber }>;

    createMarket(
      collateral_: BigNumberish,
      asset_: BigNumberish,
      oracle_: string,
      oracleData_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    init(arg0: BytesLike, overrides?: CallOverrides): Promise<void>;

    liquidate(
      marketId: BigNumberish,
      user: string,
      maxBorrowPart: BigNumberish,
      to: string,
      swapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    marketList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        RebaseStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        collateral: number;
        asset: number;
        oracle: string;
        oracleData: string;
        totalCollateralShare: BigNumber;
        totalAssetShares: BigNumber;
        totalBorrow: RebaseStructOutput;
        exchangeRate: BigNumber;
        interestPerSecond: BigNumber;
        lastAccrued: BigNumber;
        assetId: number;
      }
    >;

    masterContract(overrides?: CallOverrides): Promise<string>;

    removeAsset(
      marketId: BigNumberish,
      to: string,
      fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCollateral(
      marketId: BigNumberish,
      to: string,
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      marketId: BigNumberish,
      to: string,
      part: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateExchangeRate(
      marketId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { updated: boolean; rate: BigNumber }>;

    yieldBox(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LogAccrue(uint256,uint64,uint256)"(
      accruedAmount?: null,
      rate?: null,
      utilization?: null
    ): LogAccrueEventFilter;
    LogAccrue(
      accruedAmount?: null,
      rate?: null,
      utilization?: null
    ): LogAccrueEventFilter;

    "LogAddAsset(address,address,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      share?: null,
      fraction?: null
    ): LogAddAssetEventFilter;
    LogAddAsset(
      from?: string | null,
      to?: string | null,
      share?: null,
      fraction?: null
    ): LogAddAssetEventFilter;

    "LogAddCollateral(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      share?: null
    ): LogAddCollateralEventFilter;
    LogAddCollateral(
      from?: string | null,
      to?: string | null,
      share?: null
    ): LogAddCollateralEventFilter;

    "LogBorrow(address,address,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null,
      part?: null
    ): LogBorrowEventFilter;
    LogBorrow(
      from?: string | null,
      to?: string | null,
      amount?: null,
      part?: null
    ): LogBorrowEventFilter;

    "LogExchangeRate(uint256)"(rate?: null): LogExchangeRateEventFilter;
    LogExchangeRate(rate?: null): LogExchangeRateEventFilter;

    "LogLiquidate(uint256,address,uint256,address,address)"(
      marketId?: BigNumberish | null,
      user?: string | null,
      borrowPart?: null,
      to?: null,
      swapper?: null
    ): LogLiquidateEventFilter;
    LogLiquidate(
      marketId?: BigNumberish | null,
      user?: string | null,
      borrowPart?: null,
      to?: null,
      swapper?: null
    ): LogLiquidateEventFilter;

    "LogRemoveAsset(address,address,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      share?: null,
      fraction?: null
    ): LogRemoveAssetEventFilter;
    LogRemoveAsset(
      from?: string | null,
      to?: string | null,
      share?: null,
      fraction?: null
    ): LogRemoveAssetEventFilter;

    "LogRemoveCollateral(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      share?: null
    ): LogRemoveCollateralEventFilter;
    LogRemoveCollateral(
      from?: string | null,
      to?: string | null,
      share?: null
    ): LogRemoveCollateralEventFilter;

    "LogRepay(address,address,uint256,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null,
      part?: null
    ): LogRepayEventFilter;
    LogRepay(
      from?: string | null,
      to?: string | null,
      amount?: null,
      part?: null
    ): LogRepayEventFilter;
  };

  estimateGas: {
    accrue(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addAsset(
      marketId: BigNumberish,
      to: string,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addCollateral(
      marketId: BigNumberish,
      to: string,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrow(
      marketId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createMarket(
      collateral_: BigNumberish,
      asset_: BigNumberish,
      oracle_: string,
      oracleData_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      arg0: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      marketId: BigNumberish,
      user: string,
      maxBorrowPart: BigNumberish,
      to: string,
      swapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    masterContract(overrides?: CallOverrides): Promise<BigNumber>;

    removeAsset(
      marketId: BigNumberish,
      to: string,
      fraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeCollateral(
      marketId: BigNumberish,
      to: string,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      marketId: BigNumberish,
      to: string,
      part: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateExchangeRate(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yieldBox(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accrue(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAsset(
      marketId: BigNumberish,
      to: string,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addCollateral(
      marketId: BigNumberish,
      to: string,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      marketId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createMarket(
      collateral_: BigNumberish,
      asset_: BigNumberish,
      oracle_: string,
      oracleData_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      arg0: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      marketId: BigNumberish,
      user: string,
      maxBorrowPart: BigNumberish,
      to: string,
      swapper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAsset(
      marketId: BigNumberish,
      to: string,
      fraction: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeCollateral(
      marketId: BigNumberish,
      to: string,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      marketId: BigNumberish,
      to: string,
      part: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateExchangeRate(
      marketId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
