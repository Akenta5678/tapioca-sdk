/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SalaryInterface extends utils.Interface {
  contractName: "Salary";
  functions: {
    "available(uint256)": FunctionFragment;
    "batch(bytes[],bool)": FunctionFragment;
    "cancel(uint256,address)": FunctionFragment;
    "create(address,uint256,uint32,uint32,uint32,uint128)": FunctionFragment;
    "info(uint256)": FunctionFragment;
    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "salaries(uint256)": FunctionFragment;
    "salaryCount()": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "yieldBox()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "available",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batch",
    values: [BytesLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "info", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "permitToken",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "salaries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "salaryCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "yieldBox", values?: undefined): string;

  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salaries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "salaryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yieldBox", data: BytesLike): Result;

  events: {
    "LogCancel(uint256,address,uint256)": EventFragment;
    "LogCreate(address,address,uint256,uint32,uint32,uint32,uint256,uint256)": EventFragment;
    "LogWithdraw(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogCancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogCreate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdraw"): EventFragment;
}

export type LogCancelEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { salaryId: BigNumber; to: string; share: BigNumber }
>;

export type LogCancelEventFilter = TypedEventFilter<LogCancelEvent>;

export type LogCreateEvent = TypedEvent<
  [string, string, BigNumber, number, number, number, BigNumber, BigNumber],
  {
    funder: string;
    recipient: string;
    assetId: BigNumber;
    cliffTimestamp: number;
    endTimestamp: number;
    cliffPercent: number;
    totalShare: BigNumber;
    salaryId: BigNumber;
  }
>;

export type LogCreateEventFilter = TypedEventFilter<LogCreateEvent>;

export type LogWithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { salaryId: BigNumber; to: string; share: BigNumber }
>;

export type LogWithdrawEventFilter = TypedEventFilter<LogWithdrawEvent>;

export interface Salary extends BaseContract {
  contractName: "Salary";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SalaryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    available(
      salaryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { share: BigNumber }>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(
      salaryId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    create(
      recipient: string,
      assetId: BigNumberish,
      cliffTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      cliffPercent: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    info(
      salaryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        funder: string;
        recipient: string;
        assetId: BigNumber;
        withdrawnAmount: BigNumber;
        cliffTimestamp: number;
        endTimestamp: number;
        cliffPercent: BigNumber;
        amount: BigNumber;
        availableAmount: BigNumber;
      }
    >;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    salaries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber
      ] & {
        funder: string;
        recipient: string;
        assetId: BigNumber;
        withdrawnShare: BigNumber;
        cliffTimestamp: number;
        endTimestamp: number;
        cliffPercent: BigNumber;
        share: BigNumber;
      }
    >;

    salaryCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      salaryId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<[string]>;
  };

  available(
    salaryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batch(
    calls: BytesLike[],
    revertOnFail: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(
    salaryId: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  create(
    recipient: string,
    assetId: BigNumberish,
    cliffTimestamp: BigNumberish,
    endTimestamp: BigNumberish,
    cliffPercent: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  info(
    salaryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      funder: string;
      recipient: string;
      assetId: BigNumber;
      withdrawnAmount: BigNumber;
      cliffTimestamp: number;
      endTimestamp: number;
      cliffPercent: BigNumber;
      amount: BigNumber;
      availableAmount: BigNumber;
    }
  >;

  permitToken(
    token: string,
    from: string,
    to: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  salaries(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      number,
      BigNumber,
      BigNumber
    ] & {
      funder: string;
      recipient: string;
      assetId: BigNumber;
      withdrawnShare: BigNumber;
      cliffTimestamp: number;
      endTimestamp: number;
      cliffPercent: BigNumber;
      share: BigNumber;
    }
  >;

  salaryCount(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    salaryId: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yieldBox(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    available(
      salaryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(
      salaryId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    create(
      recipient: string,
      assetId: BigNumberish,
      cliffTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      cliffPercent: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { salaryId: BigNumber; share: BigNumber }
    >;

    info(
      salaryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        funder: string;
        recipient: string;
        assetId: BigNumber;
        withdrawnAmount: BigNumber;
        cliffTimestamp: number;
        endTimestamp: number;
        cliffPercent: BigNumber;
        amount: BigNumber;
        availableAmount: BigNumber;
      }
    >;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    salaries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber
      ] & {
        funder: string;
        recipient: string;
        assetId: BigNumber;
        withdrawnShare: BigNumber;
        cliffTimestamp: number;
        endTimestamp: number;
        cliffPercent: BigNumber;
        share: BigNumber;
      }
    >;

    salaryCount(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      salaryId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    yieldBox(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LogCancel(uint256,address,uint256)"(
      salaryId?: BigNumberish | null,
      to?: string | null,
      share?: null
    ): LogCancelEventFilter;
    LogCancel(
      salaryId?: BigNumberish | null,
      to?: string | null,
      share?: null
    ): LogCancelEventFilter;

    "LogCreate(address,address,uint256,uint32,uint32,uint32,uint256,uint256)"(
      funder?: string | null,
      recipient?: string | null,
      assetId?: BigNumberish | null,
      cliffTimestamp?: null,
      endTimestamp?: null,
      cliffPercent?: null,
      totalShare?: null,
      salaryId?: null
    ): LogCreateEventFilter;
    LogCreate(
      funder?: string | null,
      recipient?: string | null,
      assetId?: BigNumberish | null,
      cliffTimestamp?: null,
      endTimestamp?: null,
      cliffPercent?: null,
      totalShare?: null,
      salaryId?: null
    ): LogCreateEventFilter;

    "LogWithdraw(uint256,address,uint256)"(
      salaryId?: BigNumberish | null,
      to?: string | null,
      share?: null
    ): LogWithdrawEventFilter;
    LogWithdraw(
      salaryId?: BigNumberish | null,
      to?: string | null,
      share?: null
    ): LogWithdrawEventFilter;
  };

  estimateGas: {
    available(
      salaryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(
      salaryId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    create(
      recipient: string,
      assetId: BigNumberish,
      cliffTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      cliffPercent: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    info(salaryId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    salaries(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    salaryCount(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      salaryId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yieldBox(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    available(
      salaryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      salaryId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    create(
      recipient: string,
      assetId: BigNumberish,
      cliffTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      cliffPercent: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    info(
      salaryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    salaries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    salaryCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      salaryId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
