/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type AssetStruct = {
  tokenType: BigNumberish;
  contractAddress: string;
  strategy: string;
  tokenId: BigNumberish;
};

export type AssetStructOutput = [number, string, string, BigNumber] & {
  tokenType: number;
  contractAddress: string;
  strategy: string;
  tokenId: BigNumber;
};

export type NativeTokenStruct = {
  name: string;
  symbol: string;
  decimals: BigNumberish;
  uri: string;
};

export type NativeTokenStructOutput = [string, string, number, string] & {
  name: string;
  symbol: string;
  decimals: number;
  uri: string;
};

export interface YieldBoxURIBuilderInterface extends utils.Interface {
  contractName: "YieldBoxURIBuilder";
  functions: {
    "decimals((uint8,address,address,uint256),uint8)": FunctionFragment;
    "name((uint8,address,address,uint256),string)": FunctionFragment;
    "symbol((uint8,address,address,uint256),string)": FunctionFragment;
    "uri((uint8,address,address,uint256),(string,string,uint8,string),uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decimals",
    values: [AssetStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "name",
    values: [AssetStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "symbol",
    values: [AssetStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "uri",
    values: [AssetStruct, NativeTokenStruct, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {};
}

export interface YieldBoxURIBuilder extends BaseContract {
  contractName: "YieldBoxURIBuilder";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YieldBoxURIBuilderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decimals(
      asset: AssetStruct,
      nativeDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    name(
      asset: AssetStruct,
      nativeName: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    symbol(
      asset: AssetStruct,
      nativeSymbol: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    uri(
      asset: AssetStruct,
      nativeToken: NativeTokenStruct,
      totalSupply: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  decimals(
    asset: AssetStruct,
    nativeDecimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  name(
    asset: AssetStruct,
    nativeName: string,
    overrides?: CallOverrides
  ): Promise<string>;

  symbol(
    asset: AssetStruct,
    nativeSymbol: string,
    overrides?: CallOverrides
  ): Promise<string>;

  uri(
    asset: AssetStruct,
    nativeToken: NativeTokenStruct,
    totalSupply: BigNumberish,
    owner: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    decimals(
      asset: AssetStruct,
      nativeDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    name(
      asset: AssetStruct,
      nativeName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    symbol(
      asset: AssetStruct,
      nativeSymbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    uri(
      asset: AssetStruct,
      nativeToken: NativeTokenStruct,
      totalSupply: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    decimals(
      asset: AssetStruct,
      nativeDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(
      asset: AssetStruct,
      nativeName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(
      asset: AssetStruct,
      nativeSymbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(
      asset: AssetStruct,
      nativeToken: NativeTokenStruct,
      totalSupply: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decimals(
      asset: AssetStruct,
      nativeDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(
      asset: AssetStruct,
      nativeName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(
      asset: AssetStruct,
      nativeSymbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uri(
      asset: AssetStruct,
      nativeToken: NativeTokenStruct,
      totalSupply: BigNumberish,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
