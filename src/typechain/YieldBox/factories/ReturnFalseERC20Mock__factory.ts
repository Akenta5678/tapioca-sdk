/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ReturnFalseERC20Mock,
  ReturnFalseERC20MockInterface,
} from "../ReturnFalseERC20Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162000f9838038062000f988339810160408190526200003491620001f9565b83516200004990600190602087019062000086565b5082516200005f90600090602086019062000086565b5060ff90911660805260028190553360009081526003602052604090205550620002c19050565b828054620000949062000284565b90600052602060002090601f016020900481019282620000b8576000855562000103565b82601f10620000d357805160ff191683800117855562000103565b8280016001018555821562000103579182015b8281111562000103578251825591602001919060010190620000e6565b506200011192915062000115565b5090565b5b8082111562000111576000815560010162000116565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200015457600080fd5b81516001600160401b03808211156200017157620001716200012c565b604051601f8301601f19908116603f011681019082821181831017156200019c576200019c6200012c565b81604052838152602092508683858801011115620001b957600080fd5b600091505b83821015620001dd5785820183015181830184015290820190620001be565b83821115620001ef5760008385830101525b9695505050505050565b600080600080608085870312156200021057600080fd5b84516001600160401b03808211156200022857600080fd5b620002368883890162000142565b955060208701519150808211156200024d57600080fd5b506200025c8782880162000142565b935050604085015160ff811681146200027457600080fd5b6060959095015193969295505050565b600181811c908216806200029957607f821691505b60208210811415620002bb57634e487b7160e01b600052602260045260246000fd5b50919050565b608051610cbb620002dd60003960006101490152610cbb6000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806370a0823111610081578063a9059cbb1161005b578063a9059cbb14610222578063d505accf14610235578063dd62ed3e1461024a57600080fd5b806370a08231146101da5780637ecebe00146101fa57806395d89b411461021a57600080fd5b806323b872dd116100b257806323b872dd14610131578063313ce567146101445780633644e5151461017d57600080fd5b806306fdde03146100d9578063095ea7b3146100f757806318160ddd1461011a575b600080fd5b6100e1610275565b6040516100ee91906109d7565b60405180910390f35b61010a610105366004610a73565b610303565b60405190151581526020016100ee565b61012360025481565b6040519081526020016100ee565b61010a61013f366004610a9d565b61037d565b61016b7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016100ee565b610123604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218602082015246918101829052306060820152600091906080016040516020818303038152906040528051906020012091505090565b6101236101e8366004610ad9565b60036020526000908152604090205481565b610123610208366004610ad9565b60056020526000908152604090205481565b6100e1610556565b61010a610230366004610a73565b610563565b610248610243366004610af4565b610670565b005b610123610258366004610b67565b600460209081526000928352604080842090915290825290205481565b6001805461028290610b9a565b80601f01602080910402602001604051908101604052809291908181526020018280546102ae90610b9a565b80156102fb5780601f106102d0576101008083540402835291602001916102fb565b820191906000526020600020905b8154815290600101906020018083116102de57829003601f168201915b505050505081565b33600081815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061036b9086815260200190565b60405180910390a35060015b92915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526003602052604081205482118015906103e2575073ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091529020548211155b801561041c575073ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260409020546104198382610c1d565b10155b1561054b5773ffffffffffffffffffffffffffffffffffffffff841660009081526003602052604081208054849290610456908490610c35565b909155505073ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091528120805484929061049b908490610c35565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040812080548492906104d5908490610c1d565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161053b91815260200190565b60405180910390a350600161054f565b5060005b9392505050565b6000805461028290610b9a565b3360009081526003602052604081205482118015906105b0575073ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260409020546105ad8382610c1d565b10155b156106685733600090815260036020526040812080548492906105d4908490610c35565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260408120805484929061060e908490610c1d565b909155505060405182815273ffffffffffffffffffffffffffffffffffffffff84169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3506001610377565b506000610377565b8342106106de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f52657475726e46616c736545524332303a20457870697265640000000000000060448201526064015b60405180910390fd5b600061073d604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218602082015246918101829052306060820152600091906080016040516020818303038152906040528051906020012091505090565b73ffffffffffffffffffffffffffffffffffffffff8916600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c9290919061079883610c4c565b9091555060408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016108399291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156108c2573d6000803e3d6000fd5b5050506020604051035190508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f52657475726e46616c736545524332303a20496e76616c69642053696700000060448201526064016106d5565b73ffffffffffffffffffffffffffffffffffffffff8981166000818152600460209081526040808320948d16808452948252918290208b905590518a81527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050505050505050565b600060208083528351808285015260005b81811015610a04578581018301518582016040015282016109e8565b81811115610a16576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a6e57600080fd5b919050565b60008060408385031215610a8657600080fd5b610a8f83610a4a565b946020939093013593505050565b600080600060608486031215610ab257600080fd5b610abb84610a4a565b9250610ac960208501610a4a565b9150604084013590509250925092565b600060208284031215610aeb57600080fd5b61054f82610a4a565b600080600080600080600060e0888a031215610b0f57600080fd5b610b1888610a4a565b9650610b2660208901610a4a565b95506040880135945060608801359350608088013560ff81168114610b4a57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610b7a57600080fd5b610b8383610a4a565b9150610b9160208401610a4a565b90509250929050565b600181811c90821680610bae57607f821691505b60208210811415610be8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610c3057610c30610bee565b500190565b600082821015610c4757610c47610bee565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c7e57610c7e610bee565b506001019056fea26469706673582212203fe48c2e159b5134996f201f2a250349915f8989fdff286ff5bf0ebbb67bf31c64736f6c63430008090033";

type ReturnFalseERC20MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReturnFalseERC20MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReturnFalseERC20Mock__factory extends ContractFactory {
  constructor(...args: ReturnFalseERC20MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ReturnFalseERC20Mock";
  }

  deploy(
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    supply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ReturnFalseERC20Mock> {
    return super.deploy(
      name_,
      symbol_,
      decimals_,
      supply,
      overrides || {}
    ) as Promise<ReturnFalseERC20Mock>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    supply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      decimals_,
      supply,
      overrides || {}
    );
  }
  attach(address: string): ReturnFalseERC20Mock {
    return super.attach(address) as ReturnFalseERC20Mock;
  }
  connect(signer: Signer): ReturnFalseERC20Mock__factory {
    return super.connect(signer) as ReturnFalseERC20Mock__factory;
  }
  static readonly contractName: "ReturnFalseERC20Mock";
  public readonly contractName: "ReturnFalseERC20Mock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReturnFalseERC20MockInterface {
    return new utils.Interface(_abi) as ReturnFalseERC20MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReturnFalseERC20Mock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ReturnFalseERC20Mock;
  }
}
