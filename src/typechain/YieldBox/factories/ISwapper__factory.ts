/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { ISwapper, ISwapperInterface } from "../ISwapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fromAssetId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "toAssetId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "shareToMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shareFrom",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "extraShare",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shareReturned",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fromAssetId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "toAssetId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "refundTo",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "shareFromSupplied",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shareToExact",
        type: "uint256",
      },
    ],
    name: "swapExact",
    outputs: [
      {
        internalType: "uint256",
        name: "shareUsed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shareReturned",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class ISwapper__factory {
  static readonly abi = _abi;
  static createInterface(): ISwapperInterface {
    return new utils.Interface(_abi) as ISwapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISwapper {
    return new Contract(address, _abi, signerOrProvider) as ISwapper;
  }
}
