/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RevertingERC20Mock,
  RevertingERC20MockInterface,
} from "../RevertingERC20Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162000cc138038062000cc183398101604081905262000034916200022d565b835162000049906001906020870190620000ba565b5082516200005f906000906020860190620000ba565b5060ff82166080526002819055336000818152600360209081526040808320859055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a350505050620002f5565b828054620000c890620002b8565b90600052602060002090601f016020900481019282620000ec576000855562000137565b82601f106200010757805160ff191683800117855562000137565b8280016001018555821562000137579182015b82811115620001375782518255916020019190600101906200011a565b506200014592915062000149565b5090565b5b808211156200014557600081556001016200014a565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200018857600080fd5b81516001600160401b0380821115620001a557620001a562000160565b604051601f8301601f19908116603f01168101908282118183101715620001d057620001d062000160565b81604052838152602092508683858801011115620001ed57600080fd5b600091505b83821015620002115785820183015181830184015290820190620001f2565b83821115620002235760008385830101525b9695505050505050565b600080600080608085870312156200024457600080fd5b84516001600160401b03808211156200025c57600080fd5b6200026a8883890162000176565b955060208701519150808211156200028157600080fd5b50620002908782880162000176565b935050604085015160ff81168114620002a857600080fd5b6060959095015193969295505050565b600181811c90821680620002cd57607f821691505b60208210811415620002ef57634e487b7160e01b600052602260045260246000fd5b50919050565b6080516109b062000311600039600061011801526109b06000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063313ce5671161007657806395d89b411161005b57806395d89b411461016c578063a9059cbb14610174578063dd62ed3e1461018757600080fd5b8063313ce5671461011357806370a082311461014c57600080fd5b806306fdde03146100a8578063095ea7b3146100c657806318160ddd146100e957806323b872dd14610100575b600080fd5b6100b06101b2565b6040516100bd9190610771565b60405180910390f35b6100d96100d436600461080d565b610240565b60405190151581526020016100bd565b6100f260025481565b6040519081526020016100bd565b6100d961010e366004610837565b6102b9565b61013a7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016100bd565b6100f261015a366004610873565b60036020526000908152604090205481565b6100b06105ab565b6100d961018236600461080d565b6105b8565b6100f2610195366004610895565b600460209081526000928352604080842090915290825290205481565b600180546101bf906108c8565b80601f01602080910402602001604051908101604052809291908181526020018280546101eb906108c8565b80156102385780601f1061020d57610100808354040283529160200191610238565b820191906000526020600020905b81548152906001019060200180831161021b57829003601f168201915b505050505081565b33600081815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102a89086815260200190565b60405180910390a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526003602052604081205482111561034d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f546f6b656e423a2062616c616e636520746f6f206c6f7700000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff841660009081526004602090815260408083203384529091529020548211156103e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f546f6b656e423a20616c6c6f77616e636520746f6f206c6f77000000000000006044820152606401610344565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040902054610417838261094b565b101561047f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f546f6b656e423a206f766572666c6f77206465746563746564000000000000006044820152606401610344565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260036020526040812080548492906104b4908490610963565b909155505073ffffffffffffffffffffffffffffffffffffffff84166000908152600460209081526040808320338452909152812080548492906104f9908490610963565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260408120805484929061053390849061094b565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161059991815260200190565b60405180910390a35060019392505050565b600080546101bf906108c8565b33600090815260036020526040812054821115610631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f546f6b656e423a2062616c616e636520746f6f206c6f770000000000000000006044820152606401610344565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040902054610661838261094b565b10156106c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f546f6b656e423a206f766572666c6f77206465746563746564000000000000006044820152606401610344565b33600090815260036020526040812080548492906106e8908490610963565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260408120805484929061072290849061094b565b909155505060405182815273ffffffffffffffffffffffffffffffffffffffff84169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016102a8565b600060208083528351808285015260005b8181101561079e57858101830151858201604001528201610782565b818111156107b0576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461080857600080fd5b919050565b6000806040838503121561082057600080fd5b610829836107e4565b946020939093013593505050565b60008060006060848603121561084c57600080fd5b610855846107e4565b9250610863602085016107e4565b9150604084013590509250925092565b60006020828403121561088557600080fd5b61088e826107e4565b9392505050565b600080604083850312156108a857600080fd5b6108b1836107e4565b91506108bf602084016107e4565b90509250929050565b600181811c908216806108dc57607f821691505b60208210811415610916577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561095e5761095e61091c565b500190565b6000828210156109755761097561091c565b50039056fea264697066735822122011432f36a2f480fec78c2c604aa6677fc59f89589ede7149f145c7fba517793164736f6c63430008090033";

type RevertingERC20MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RevertingERC20MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RevertingERC20Mock__factory extends ContractFactory {
  constructor(...args: RevertingERC20MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "RevertingERC20Mock";
  }

  deploy(
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    supply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RevertingERC20Mock> {
    return super.deploy(
      name_,
      symbol_,
      decimals_,
      supply,
      overrides || {}
    ) as Promise<RevertingERC20Mock>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    supply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      decimals_,
      supply,
      overrides || {}
    );
  }
  attach(address: string): RevertingERC20Mock {
    return super.attach(address) as RevertingERC20Mock;
  }
  connect(signer: Signer): RevertingERC20Mock__factory {
    return super.connect(signer) as RevertingERC20Mock__factory;
  }
  static readonly contractName: "RevertingERC20Mock";
  public readonly contractName: "RevertingERC20Mock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RevertingERC20MockInterface {
    return new utils.Interface(_abi) as RevertingERC20MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RevertingERC20Mock {
    return new Contract(address, _abi, signerOrProvider) as RevertingERC20Mock;
  }
}
