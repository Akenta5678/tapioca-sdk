/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC20Mock, ERC20MockInterface } from "../ERC20Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_initialAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610e63380380610e6383398101604081905261002f916100b0565b4660a081905261009281604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152908101829052306060820152600090608001604051602081830303815290604052805190602001209050919050565b608052503360009081526020819052604090208190556003556100c9565b6000602082840312156100c257600080fd5b5051919050565b60805160a051610d756100ee60003960006109ff01526000610a340152610d756000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c806370a0823111610076578063a9059cbb1161005b578063a9059cbb14610142578063d505accf14610155578063dd62ed3e1461016a57600080fd5b806370a08231146101025780637ecebe001461012257600080fd5b8063095ea7b3146100a857806318160ddd146100d057806323b872dd146100e75780633644e515146100fa575b600080fd5b6100bb6100b6366004610b34565b610195565b60405190151581526020015b60405180910390f35b6100d960035481565b6040519081526020016100c7565b6100bb6100f5366004610b5e565b61020e565b6100d9610520565b6100d9610110366004610b9a565b60006020819052908152604090205481565b6100d9610130366004610b9a565b60026020526000908152604090205481565b6100bb610150366004610b34565b61052f565b610168610163366004610bbc565b610709565b005b6100d9610178366004610c2f565b600160209081526000928352604080842090915290825290205481565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906101fd9086815260200190565b60405180910390a350600192915050565b600081156104af5773ffffffffffffffffffffffffffffffffffffffff8416600090815260208190526040902054828110156102ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45524332303a2062616c616e636520746f6f206c6f770000000000000000000060448201526064015b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146104ad5773ffffffffffffffffffffffffffffffffffffffff851660009081526001602090815260408083203384529091529020547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146103dc57838110156103a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45524332303a20616c6c6f77616e636520746f6f206c6f77000000000000000060448201526064016102a2565b6103aa8482610c91565b73ffffffffffffffffffffffffffffffffffffffff871660009081526001602090815260408083203384529091529020555b73ffffffffffffffffffffffffffffffffffffffff8516610459576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45524332303a206e6f207a65726f20616464726573730000000000000000000060448201526064016102a2565b6104638483610c91565b73ffffffffffffffffffffffffffffffffffffffff80881660009081526020819052604080822093909355908716815290812080548692906104a6908490610ca8565b9091555050505b505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161050e91815260200190565b60405180910390a35060019392505050565b600061052a6109fa565b905090565b60008115158061055457503373ffffffffffffffffffffffffffffffffffffffff8416145b156106bf5733600090815260208190526040902054828110156105d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45524332303a2062616c616e636520746f6f206c6f770000000000000000000060448201526064016102a2565b3373ffffffffffffffffffffffffffffffffffffffff8516146106bd5773ffffffffffffffffffffffffffffffffffffffff841661066d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f45524332303a206e6f207a65726f20616464726573730000000000000000000060448201526064016102a2565b6106778382610c91565b336000908152602081905260408082209290925573ffffffffffffffffffffffffffffffffffffffff8616815290812080548592906106b7908490610ca8565b90915550505b505b60405182815273ffffffffffffffffffffffffffffffffffffffff84169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016101fd565b73ffffffffffffffffffffffffffffffffffffffff8716610786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45524332303a204f776e65722063616e6e6f742062652030000000000000000060448201526064016102a2565b8342106107ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f45524332303a204578706972656400000000000000000000000000000000000060448201526064016102a2565b73ffffffffffffffffffffffffffffffffffffffff8716600081815260026020526040812080546001926108b3927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d929161084f83610cc0565b9091555060408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810188905260e00160405160208183030381529060405280519060200120610a5a565b6040805160008152602081018083529290925260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015610901573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff1614610988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45524332303a20496e76616c6964205369676e6174757265000000000000000060448201526064016102a2565b73ffffffffffffffffffffffffffffffffffffffff8781166000818152600160209081526040808320948b168084529482529182902089905590518881527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6000467f00000000000000000000000000000000000000000000000000000000000000008114610a3257610a2d81610aca565b610a54565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b60006040518060400160405280600281526020017f1901000000000000000000000000000000000000000000000000000000000000815250610a9a6109fa565b83604051602001610aad93929190610cf9565b604051602081830303815290604052805190602001209050919050565b604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152908101829052306060820152600090608001610aad565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b2f57600080fd5b919050565b60008060408385031215610b4757600080fd5b610b5083610b0b565b946020939093013593505050565b600080600060608486031215610b7357600080fd5b610b7c84610b0b565b9250610b8a60208501610b0b565b9150604084013590509250925092565b600060208284031215610bac57600080fd5b610bb582610b0b565b9392505050565b600080600080600080600060e0888a031215610bd757600080fd5b610be088610b0b565b9650610bee60208901610b0b565b95506040880135945060608801359350608088013560ff81168114610c1257600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610c4257600080fd5b610c4b83610b0b565b9150610c5960208401610b0b565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610ca357610ca3610c62565b500390565b60008219821115610cbb57610cbb610c62565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cf257610cf2610c62565b5060010190565b6000845160005b81811015610d1a5760208188018101518583015201610d00565b81811115610d29576000828501525b509190910192835250602082015260400191905056fea2646970667358221220c32362cdbe98ab3acb1660eb0659d0e65d9632a95dbc20a3c2cb2645232e9e6e64736f6c63430008090033";

type ERC20MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Mock__factory extends ContractFactory {
  constructor(...args: ERC20MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC20Mock";
  }

  deploy(
    _initialAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20Mock> {
    return super.deploy(_initialAmount, overrides || {}) as Promise<ERC20Mock>;
  }
  getDeployTransaction(
    _initialAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_initialAmount, overrides || {});
  }
  attach(address: string): ERC20Mock {
    return super.attach(address) as ERC20Mock;
  }
  connect(signer: Signer): ERC20Mock__factory {
    return super.connect(signer) as ERC20Mock__factory;
  }
  static readonly contractName: "ERC20Mock";
  public readonly contractName: "ERC20Mock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20MockInterface {
    return new utils.Interface(_abi) as ERC20MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC20Mock;
  }
}
