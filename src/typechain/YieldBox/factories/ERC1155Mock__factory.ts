/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC1155Mock, ERC1155MockInterface } from "../ERC1155Mock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "_approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "_ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "_values",
        type: "uint256[]",
      },
    ],
    name: "TransferBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "TransferSingle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "_value",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "URI",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "owners",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceID",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "transferBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferSingle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061127d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c80632eb2c2d61161008c578063bd85b03911610066578063bd85b039146101e3578063e985e9c514610203578063f242432a1461022e578063f5298aca1461024157600080fd5b80632eb2c2d61461019d5780634e1273f4146101b0578063a22cb465146101d057600080fd5b8062fdd58e146100d357806301ffc9a7146101115780630731a369146101345780630e89341c14610149578063156e29f6146101775780631aec811b1461018a575b600080fd5b6100fe6100e1366004610b78565b600160209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61012461011f366004610bbb565b610254565b6040519015158152602001610108565b610147610142366004610c2b565b6102a6565b005b61016a610157366004610cbc565b5060408051602081019091526000815290565b6040516101089190610cd5565b610147610185366004610d2a565b6102bc565b610147610198366004610d5d565b6102cc565b6101476101ab366004610de1565b6102de565b6101c36101be366004610e9c565b61043a565b6040516101089190610f08565b6101476101de366004610f4c565b610585565b6100fe6101f1366004610cbc565b60026020526000908152604090205481565b610124610211366004610f88565b600060208181529281526040808220909352908152205460ff1681565b61014761023c366004610fbb565b6105ef565b61014761024f366004610d2a565b6106ec565b60006001600160e01b031982166301ffc9a760e01b14806102855750636cdb3d1360e11b6001600160e01b03198316145b806102a057506303a24d0760e21b6001600160e01b03198316145b92915050565b6102b48686868686866106f7565b505050505050565b6102c7838383610852565b505050565b6102d884848484610922565b50505050565b84831461032d5760405162461bcd60e51b815260206004820152601860248201527708aa48662626a6a744098cadccee8d040dad2e6dac2e8c6d60431b60448201526064015b60405180910390fd5b610338886000610a09565b6103468888888888886106f7565b6001600160a01b0387163b156104305760405163bc197c8160e01b808252906001600160a01b0389169063bc197c81906103929033908d908c908c908c908c908c908c90600401611080565b602060405180830381600087803b1580156103ac57600080fd5b505af11580156103c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e491906110e4565b6001600160e01b031916146104305760405162461bcd60e51b815260206004820152601260248201527157726f6e672072657475726e2076616c756560701b6044820152606401610324565b5050505050505050565b6060838281146104875760405162461bcd60e51b815260206004820152601860248201527708aa48662626a6a744098cadccee8d040dad2e6dac2e8c6d60431b6044820152606401610324565b8067ffffffffffffffff8111156104a0576104a0611101565b6040519080825280602002602001820160405280156104c9578160200160208202803683370190505b50915060005b8181101561057b57600160008888848181106104ed576104ed611117565b9050602002016020810190610502919061112d565b6001600160a01b03166001600160a01b03168152602001908152602001600020600086868481811061053657610536611117565b9050602002013581526020019081526020016000205483828151811061055e5761055e611117565b6020908102919091010152806105738161115e565b9150506104cf565b5050949350505050565b336000818152602081815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6105fa866000610a09565b61060686868686610922565b6001600160a01b0385163b156102b45760405163f23a6e6160e01b808252906001600160a01b0387169063f23a6e619061064e9033908b908a908a908a908a90600401611179565b602060405180830381600087803b15801561066857600080fd5b505af115801561067c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a091906110e4565b6001600160e01b031916146102b45760405162461bcd60e51b815260206004820152601260248201527157726f6e672072657475726e2076616c756560701b6044820152606401610324565b6102c7838383610a95565b6001600160a01b03851661071d5760405162461bcd60e51b8152600401610324906111c0565b8260005b818110156107ed57600086868381811061073d5761073d611117565b905060200201359050600085858481811061075a5761075a611117565b6001600160a01b038d166000908152600160209081526040808320888452825282208054939091029490940135945084939250906107999084906111e6565b90915550506001600160a01b0389166000908152600160209081526040808320858452909152812080548392906107d19084906111fd565b92505081905550505080806107e59061115e565b915050610721565b50856001600160a01b0316876001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb888888886040516108419493929190611215565b60405180910390a450505050505050565b6001600160a01b0383166108785760405162461bcd60e51b8152600401610324906111c0565b6001600160a01b0383166000908152600160209081526040808320858452909152812080548392906108ab9084906111fd565b9091555050600082815260026020526040812080548392906108ce9084906111fd565b909155505060408051838152602081018390526001600160a01b0385169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b6001600160a01b0383166109485760405162461bcd60e51b8152600401610324906111c0565b6001600160a01b03841660009081526001602090815260408083208584529091528120805483929061097b9084906111e6565b90915550506001600160a01b0383166000908152600160209081526040808320858452909152812080548392906109b39084906111fd565b909155505060408051838152602081018390526001600160a01b03808616929087169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a450505050565b6001600160a01b038216331480610a1d5750805b80610a4e57506001600160a01b03821660009081526020818152604080832033845290915290205460ff1615156001145b610a915760405162461bcd60e51b8152602060048201526014602482015273151c985b9cd9995c881b9bdd08185b1b1bddd95960621b6044820152606401610324565b5050565b6001600160a01b038316610abb5760405162461bcd60e51b8152600401610324906111c0565b6001600160a01b038316600090815260016020908152604080832085845290915281208054839290610aee9084906111e6565b909155505060008281526002602052604081208054839290610b119084906111e6565b909155505060408051838152602081018390526000916001600160a01b0386169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610915565b80356001600160a01b0381168114610b7357600080fd5b919050565b60008060408385031215610b8b57600080fd5b610b9483610b5c565b946020939093013593505050565b6001600160e01b031981168114610bb857600080fd5b50565b600060208284031215610bcd57600080fd5b8135610bd881610ba2565b9392505050565b60008083601f840112610bf157600080fd5b50813567ffffffffffffffff811115610c0957600080fd5b6020830191508360208260051b8501011115610c2457600080fd5b9250929050565b60008060008060008060808789031215610c4457600080fd5b610c4d87610b5c565b9550610c5b60208801610b5c565b9450604087013567ffffffffffffffff80821115610c7857600080fd5b610c848a838b01610bdf565b90965094506060890135915080821115610c9d57600080fd5b50610caa89828a01610bdf565b979a9699509497509295939492505050565b600060208284031215610cce57600080fd5b5035919050565b600060208083528351808285015260005b81811015610d0257858101830151858201604001528201610ce6565b81811115610d14576000604083870101525b50601f01601f1916929092016040019392505050565b600080600060608486031215610d3f57600080fd5b610d4884610b5c565b95602085013595506040909401359392505050565b60008060008060808587031215610d7357600080fd5b610d7c85610b5c565b9350610d8a60208601610b5c565b93969395505050506040820135916060013590565b60008083601f840112610db157600080fd5b50813567ffffffffffffffff811115610dc957600080fd5b602083019150836020828501011115610c2457600080fd5b60008060008060008060008060a0898b031215610dfd57600080fd5b610e0689610b5c565b9750610e1460208a01610b5c565b9650604089013567ffffffffffffffff80821115610e3157600080fd5b610e3d8c838d01610bdf565b909850965060608b0135915080821115610e5657600080fd5b610e628c838d01610bdf565b909650945060808b0135915080821115610e7b57600080fd5b50610e888b828c01610d9f565b999c989b5096995094979396929594505050565b60008060008060408587031215610eb257600080fd5b843567ffffffffffffffff80821115610eca57600080fd5b610ed688838901610bdf565b90965094506020870135915080821115610eef57600080fd5b50610efc87828801610bdf565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b81811015610f4057835183529284019291840191600101610f24565b50909695505050505050565b60008060408385031215610f5f57600080fd5b610f6883610b5c565b915060208301358015158114610f7d57600080fd5b809150509250929050565b60008060408385031215610f9b57600080fd5b610fa483610b5c565b9150610fb260208401610b5c565b90509250929050565b60008060008060008060a08789031215610fd457600080fd5b610fdd87610b5c565b9550610feb60208801610b5c565b94506040870135935060608701359250608087013567ffffffffffffffff81111561101557600080fd5b610caa89828a01610d9f565b81835260006001600160fb1b0383111561103a57600080fd5b8260051b8083602087013760009401602001938452509192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0389811682528816602082015260a0604082018190526000906110ad908301888a611021565b82810360608401526110c0818789611021565b905082810360808401526110d5818587611057565b9b9a5050505050505050505050565b6000602082840312156110f657600080fd5b8151610bd881610ba2565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561113f57600080fd5b610bd882610b5c565b634e487b7160e01b600052601160045260246000fd5b600060001982141561117257611172611148565b5060010190565b6001600160a01b03878116825286166020820152604081018590526060810184905260a0608082018190526000906111b49083018486611057565b98975050505050505050565b6020808252600c908201526b4e6f2030206164647265737360a01b604082015260600190565b6000828210156111f8576111f8611148565b500390565b6000821982111561121057611210611148565b500190565b604081526000611229604083018688611021565b828103602084015261123c818587611021565b97965050505050505056fea2646970667358221220946286a91053301c4a704ed110a8645b31bb4cdfba8bdeea5bd56bcca3b3ff2c64736f6c63430008090033";

type ERC1155MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1155MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1155Mock__factory extends ContractFactory {
  constructor(...args: ERC1155MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC1155Mock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC1155Mock> {
    return super.deploy(overrides || {}) as Promise<ERC1155Mock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC1155Mock {
    return super.attach(address) as ERC1155Mock;
  }
  connect(signer: Signer): ERC1155Mock__factory {
    return super.connect(signer) as ERC1155Mock__factory;
  }
  static readonly contractName: "ERC1155Mock";
  public readonly contractName: "ERC1155Mock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1155MockInterface {
    return new utils.Interface(_abi) as ERC1155MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1155Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC1155Mock;
  }
}
