/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    Signer,
    utils,
    Contract,
    ContractFactory,
    BigNumberish,
    Overrides,
  } from "ethers";
  import type { Provider, TransactionRequest } from "@ethersproject/providers";
  import type { PromiseOrValue } from "../../common";
  import type {
    MultisigMock,
    MultisigMockInterface,
  } from "../MultisigMock";
  
  const _abi = [
    {
      inputs: [
        {
          internalType: "uint256",
          name: "_numConfirmationsRequired",
          type: "uint256",
        },
      ],
      stateMutability: "nonpayable",
      type: "constructor",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "_owner",
          type: "address",
        },
      ],
      name: "addOwner",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "_txIndex",
          type: "uint256",
        },
      ],
      name: "confirmTransaction",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "_txIndex",
          type: "uint256",
        },
      ],
      name: "executeTransaction",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [],
      name: "getOwners",
      outputs: [
        {
          internalType: "address[]",
          name: "",
          type: "address[]",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "_txIndex",
          type: "uint256",
        },
      ],
      name: "getTransaction",
      outputs: [
        {
          internalType: "address",
          name: "to",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "value",
          type: "uint256",
        },
        {
          internalType: "bytes",
          name: "data",
          type: "bytes",
        },
        {
          internalType: "bool",
          name: "executed",
          type: "bool",
        },
        {
          internalType: "uint256",
          name: "numConfirmations",
          type: "uint256",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [],
      name: "getTransactionCount",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
        {
          internalType: "address",
          name: "",
          type: "address",
        },
      ],
      name: "isConfirmed",
      outputs: [
        {
          internalType: "bool",
          name: "",
          type: "bool",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "",
          type: "address",
        },
      ],
      name: "isOwner",
      outputs: [
        {
          internalType: "bool",
          name: "",
          type: "bool",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [],
      name: "numConfirmationsRequired",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      name: "owners",
      outputs: [
        {
          internalType: "address",
          name: "",
          type: "address",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "_to",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "_value",
          type: "uint256",
        },
        {
          internalType: "bytes",
          name: "_data",
          type: "bytes",
        },
      ],
      name: "submitTransaction",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256",
        },
      ],
      name: "transactions",
      outputs: [
        {
          internalType: "address",
          name: "to",
          type: "address",
        },
        {
          internalType: "uint256",
          name: "value",
          type: "uint256",
        },
        {
          internalType: "bytes",
          name: "data",
          type: "bytes",
        },
        {
          internalType: "bool",
          name: "executed",
          type: "bool",
        },
        {
          internalType: "uint256",
          name: "numConfirmations",
          type: "uint256",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
  ] as const;
  
  const _bytecode =
    "0x6080346100cc57601f610d5b38819003918201601f19168301916001600160401b038311848410176100d1578084926020946040528339810103126100cc57516000338152600160205260408120600160ff19825416179055805490680100000000000000008210156100b857600182018082558210156100a457808052602090200180546001600160a01b03191633179055600255604051610c7390816100e88239f35b634e487b7160e01b81526032600452602490fd5b634e487b7160e01b81526041600452602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe60406080815260048036101561001457600080fd5b600091823560e01c8063025e7c27146108c25780632e7700f0146108a45780632f54bf6e1461086857806333ea3dc8146108115780637065cb481461078a57806380f59a65146107405780639ace38c2146106d9578063a0e67e2b14610613578063c01a8c8414610520578063c642747414610293578063d0549b85146102705763ee22610b146100a457600080fd5b3461026c57602090816003193601126102685782353385526100ff6001918285526100d460ff8589205416610b5c565b6100e086548210610ba7565b6100fa60ff60036100f0846109d7565b5001541615610bf2565b6109d7565b508481015460025411610225578060038792019260ff199381858254161790556001600160a01b03825416916002828201549101948651928596805461014481610a28565b9381841691821561020f5750506001146101d8575b50505081849503925af13d156101d3573d61017381610b40565b9061018084519283610a62565b815285843d92013e5b15610192578380f35b60649350519162461bcd60e51b8352820152600960248201527f7478206661696c656400000000000000000000000000000000000000000000006044820152fd5b610189565b8652888620965085905b898383106101f95750505082019450818438610159565b885483870152978101978c9750909101906101e2565b1686525050508015150282019450818438610159565b505060649350519162461bcd60e51b8352820152601160248201527f63616e6e6f7420657865637574652074780000000000000000000000000000006044820152fd5b8380fd5b8280fd5b83823461028f578160031936011261028f576020906002549051908152f35b5080fd5b50903461026c57606036600319011261026c576102ae61094d565b6044359267ffffffffffffffff80851161051c573660238601121561051c57848401356102da81610b40565b916102e784519384610a62565b818352876024973689858301011161028f57838994602095869301838801378501015233885260019182815261032260ff868b205416610b5c565b84519760a089018981108482111761050a5786526001600160a01b0380971689528189019581358752890194855260608901958a875260808a01978b89528954680100000000000000008110156104f857808761038192018c556109d7565b9b909b6104e75751167fffffffffffffffffffffffff00000000000000000000000000000000000000008b5416178a5551848a01556002890194519081519384116104d657506103d18554610a28565b601f8111610490575b5081601f841160011461042d57509282939183928b94610422575b50501b916000199060031b1c19161790555b600384019051151560ff801983541691161790555191015580f35b0151925038806103f5565b919083601f198116878d52848d20948d905b88838310610476575050501061045d575b505050811b019055610407565b015160001960f88460031b161c19169055388080610450565b85870151885590960195948501948793509081019061043f565b858b52828b20601f850160051c8101918486106104cc575b601f0160051c019085905b8281106104c15750506103da565b8c81550185906104b3565b90915081906104a8565b8a60418a634e487b7160e01b835252fd5b838d808d634e487b7160e01b825252fd5b838d60418d634e487b7160e01b835252fd5b5089604189634e487b7160e01b835252fd5b8580fd5b50903461026c5760209081600319360112610268578035903385526001835261054e60ff8587205416610b5c565b61055a81548310610ba7565b61056a60ff60036100f0856109d7565b81855260038352838520338652835260ff84862054166105d1578061058e836109d7565b5001805491600183018093116105be57505583526003815281832033845290528120805460ff1916600117905580f35b866011602492634e487b7160e01b835252fd5b6064908385519162461bcd60e51b8352820152601460248201527f747820616c726561647920636f6e6669726d65640000000000000000000000006044820152fd5b5082346106d657806003193601126106d657908051918290805491828552602080950180938380527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390845b8181106106b95750505081610675910382610a62565b83519485948186019282875251809352850193925b82811061069957505050500390f35b83516001600160a01b03168552869550938101939281019260010161068a565b82546001600160a01b03168452928801926001928301920161065f565b80fd5b5082346106d65760203660031901126106d65782359083548210156106d6575061070561073c916109d7565b50916001600160a01b038354169260018101549461072560028301610a9a565b9060ff600384015416920154925195869586610968565b0390f35b50903461026c578160031936011261026c57602435906001600160a01b0382168092036102685760209360ff92849235825260038652828220908252855220541690519015158152f35b503461026c57602036600319011261026c576001600160a01b0391826107ae61094d565b169182855260016020528420600160ff19825416179055835490680100000000000000008210156107fe57508060016107e992018555610903565b909283549160031b92831b921b191617905580f35b846041602492634e487b7160e01b835252fd5b5091346106d65760203660031901126106d6575061073c61083282356109d7565b506001600160a01b038154169260018201549461085d600260ff600386015416938501549401610a9a565b905195869586610968565b83823461028f57602036600319011261028f5760ff816020936001600160a01b0361089161094d565b1681526001855220541690519015158152f35b50903461026c578260031936011261026c5760209250549051908152f35b50903461026c57602036600319011261026c57359180548310156106d657506001600160a01b036108f4602093610903565b92905490519260031b1c168152f35b906000918254811015610939578280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563019190565b602483634e487b7160e01b81526032600452fd5b600435906001600160a01b038216820361096357565b600080fd5b9291906001600160a01b0390969594961683526020908184015260a060408401528151918260a085015260005b8381106109c3575050509060c08260008260809585010152601f801991011682010194151560608201520152565b81810183015185820160c001528201610995565b600454811015610a12576005906004600052027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c92168015610a58575b6020831014610a4257565b634e487b7160e01b600052602260045260246000fd5b91607f1691610a37565b90601f8019910116810190811067ffffffffffffffff821117610a8457604052565b634e487b7160e01b600052604160045260246000fd5b9060405191826000825492610aae84610a28565b908184526001948581169081600014610b1d5750600114610ada575b5050610ad892500383610a62565b565b9093915060005260209081600020936000915b818310610b05575050610ad893508201013880610aca565b85548884018501529485019487945091830191610aed565b915050610ad894506020925060ff191682840152151560051b8201013880610aca565b67ffffffffffffffff8111610a8457601f01601f191660200190565b15610b6357565b606460405162461bcd60e51b815260206004820152600960248201527f6e6f74206f776e657200000000000000000000000000000000000000000000006044820152fd5b15610bae57565b606460405162461bcd60e51b815260206004820152601160248201527f747820646f6573206e6f742065786973740000000000000000000000000000006044820152fd5b15610bf957565b606460405162461bcd60e51b815260206004820152601360248201527f747820616c7265616479206578656375746564000000000000000000000000006044820152fdfea26469706673582212207bd528743c2fb84064d7c961366bb6ced2bddc67f5932df99ee7035c80165b2464736f6c63430008120033";
  
  type MultisigMockConstructorParams =
    | [signer?: Signer]
    | ConstructorParameters<typeof ContractFactory>;
  
  const isSuperArgs = (
    xs: MultisigMockConstructorParams
  ): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;
  
  export class MultisigMock__factory extends ContractFactory {
    constructor(...args: MultisigMockConstructorParams) {
      if (isSuperArgs(args)) {
        super(...args);
      } else {
        super(_abi, _bytecode, args[0]);
      }
    }
  
    override deploy(
      _numConfirmationsRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<MultisigMock> {
      return super.deploy(
        _numConfirmationsRequired,
        overrides || {}
      ) as Promise<MultisigMock>;
    }
    override getDeployTransaction(
      _numConfirmationsRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): TransactionRequest {
      return super.getDeployTransaction(
        _numConfirmationsRequired,
        overrides || {}
      );
    }
    override attach(address: string): MultisigMock {
      return super.attach(address) as MultisigMock;
    }
    override connect(signer: Signer): MultisigMock__factory {
      return super.connect(signer) as MultisigMock__factory;
    }
  
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MultisigMockInterface {
      return new utils.Interface(_abi) as MultisigMockInterface;
    }
    static connect(
      address: string,
      signerOrProvider: Signer | Provider
    ): MultisigMock {
      return new Contract(address, _abi, signerOrProvider) as MultisigMock;
    }
  }
  