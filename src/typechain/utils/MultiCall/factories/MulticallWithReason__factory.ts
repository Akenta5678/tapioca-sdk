/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MulticallWithReason,
  MulticallWithReasonInterface,
} from "../MulticallWithReason";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "innerError",
        type: "bytes",
      },
    ],
    name: "BatchError",
    type: "error",
  },
  {
    inputs: [],
    name: "getBasefee",
    outputs: [
      {
        internalType: "uint256",
        name: "basefee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "chainid",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct MulticallWithReason.Call3[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct MulticallWithReason.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct MulticallWithReason.Call3Value[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "multicallValue",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct MulticallWithReason.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610787908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80630f28c97d146100d757806327e86d6e146100d25780633408e470146100cd5780633e64a696146100c857806342cbb15c146100c35780634d2301cc146100be5780636e5a9cbb146100b957806372425d9d146100b457806386d516e8146100af578063a8b0574e146100aa578063e8bbf5d7146100a55763ee82ac5e146100a057600080fd5b610464565b6103e3565b6103c8565b6103ad565b610392565b6102ba565b610186565b61014d565b610132565b610117565b6100f7565b346100f25760003660031901126100f2576020604051428152f35b600080fd5b346100f25760003660031901126100f25760206040516000194301408152f35b346100f25760003660031901126100f2576020604051468152f35b346100f25760003660031901126100f2576020604051488152f35b346100f25760003660031901126100f2576020604051438152f35b73ffffffffffffffffffffffffffffffffffffffff8116036100f257565b346100f25760203660031901126100f25760206004356101a581610168565b31604051908152f35b9060206003198301126100f25760043567ffffffffffffffff928382116100f257806023830112156100f25781600401359384116100f25760248460051b830101116100f2576024019190565b60005b83811061020e5750506000910152565b81810151838201526020016101fe565b90602091610237815180928185528580860191016101fb565b601f01601f1916010190565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610278575050505050505090565b9091929394959685806102a9600193603f1986820301885286838d518051151584520151918185820152019061021e565b990194019401929594939190610267565b6102c3366101ae565b906000916102d0816104db565b91835b8281106102f9576102f5846102e98734146106e0565b60405191829182610243565b0390f35b6103038185610544565b518160051b830135607e19843603018112156100f25761037b60008061037f93870161035760409b8c8301358091019c61034a61033f8561056e565b94606081019061057b565b93909151809481936105ae565b03925af1926103756103676105d8565b602083019081529415158252565b51151590565b1590565b61038c57506001016102d3565b5161060f565b346100f25760003660031901126100f2576020604051448152f35b346100f25760003660031901126100f2576020604051458152f35b346100f25760003660031901126100f2576020604051418152f35b6103ec366101ae565b6103f5816104db565b9060005b81811061040e57604051806102f58582610243565b6104188184610544565b518160051b850135605e19863603018112156100f25761037b600080610457938901610357826104478361056e565b9261034a6040918281019061057b565b61038c57506001016103f9565b346100f25760203660031901126100f2576020604051600435408152f35b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff8111838210176104be57604052565b610482565b67ffffffffffffffff81116104be5760051b60200190565b906104ed6104e8836104c3565b610498565b82815280926104fe601f19916104c3565b016000805b8281106105105750505050565b604090815182810181811067ffffffffffffffff8211176104be576020935283815282606081830152828701015201610503565b80518210156105585760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b3561057881610168565b90565b903590601e19813603018212156100f2570180359067ffffffffffffffff82116100f2576020019181360383136100f257565b908092918237016000815290565b67ffffffffffffffff81116104be57601f01601f191660200190565b3d156105f9573d906105ec6104e8836105bc565b9182523d6000602084013e565b606090565b90602061057892818152019061021e565b60448151106106a2576004810151810190602081602484019303126100f25760248101519067ffffffffffffffff82116100f2570190806043830112156100f2576024820151916106626104e8846105bc565b91838352604484830101116100f25761069e926106869160446020850191016101fb565b60405191829162461bcd60e51b8352600483016105fe565b0390fd5b61069e906040519182917fd935448500000000000000000000000000000000000000000000000000000000835260206004840152602483019061021e565b156106e757565b608460405162461bcd60e51b815260206004820152602360248201527f4d756c746963616c6c57697468526561736f6e3a2076616c7565206d69736d6160448201527f74636800000000000000000000000000000000000000000000000000000000006064820152fdfea2646970667358221220944fa38195800d40364d5bdf9ff26f7d7b55a259582c304de230dcba9399c2ba64736f6c63430008120033";

type MulticallWithReasonConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MulticallWithReasonConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MulticallWithReason__factory extends ContractFactory {
  constructor(...args: MulticallWithReasonConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MulticallWithReason> {
    return super.deploy(overrides || {}) as Promise<MulticallWithReason>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MulticallWithReason {
    return super.attach(address) as MulticallWithReason;
  }
  override connect(signer: Signer): MulticallWithReason__factory {
    return super.connect(signer) as MulticallWithReason__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallWithReasonInterface {
    return new utils.Interface(_abi) as MulticallWithReasonInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MulticallWithReason {
    return new Contract(address, _abi, signerOrProvider) as MulticallWithReason;
  }
}
