/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Multicall3 {
  export type CallStruct = {
    target: PromiseOrValue<string>;
    callData: PromiseOrValue<BytesLike>;
  };

  export type CallStructOutput = [string, string] & {
    target: string;
    callData: string;
  };

  export type Call3Struct = {
    target: PromiseOrValue<string>;
    allowFailure: PromiseOrValue<boolean>;
    callData: PromiseOrValue<BytesLike>;
  };

  export type Call3StructOutput = [string, boolean, string] & {
    target: string;
    allowFailure: boolean;
    callData: string;
  };

  export type ResultStruct = {
    success: PromiseOrValue<boolean>;
    returnData: PromiseOrValue<BytesLike>;
  };

  export type ResultStructOutput = [boolean, string] & {
    success: boolean;
    returnData: string;
  };

  export type Call3ValueStruct = {
    target: PromiseOrValue<string>;
    allowFailure: PromiseOrValue<boolean>;
    value: PromiseOrValue<BigNumberish>;
    callData: PromiseOrValue<BytesLike>;
  };

  export type Call3ValueStructOutput = [string, boolean, BigNumber, string] & {
    target: string;
    allowFailure: boolean;
    value: BigNumber;
    callData: string;
  };
}

export interface Multicall3Interface extends utils.Interface {
  functions: {
    "addTargets(address[])": FunctionFragment;
    "aggregate((address,bytes)[])": FunctionFragment;
    "aggregate3((address,bool,bytes)[])": FunctionFragment;
    "aggregate3Value((address,bool,uint256,bytes)[])": FunctionFragment;
    "availableTargets(address)": FunctionFragment;
    "blockAndAggregate((address,bytes)[])": FunctionFragment;
    "getBasefee()": FunctionFragment;
    "getBlockHash(uint256)": FunctionFragment;
    "getBlockNumber()": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getCurrentBlockCoinbase()": FunctionFragment;
    "getCurrentBlockDifficulty()": FunctionFragment;
    "getCurrentBlockGasLimit()": FunctionFragment;
    "getCurrentBlockTimestamp()": FunctionFragment;
    "getEthBalance(address)": FunctionFragment;
    "getLastBlockHash()": FunctionFragment;
    "multicall((address,bool,bytes)[])": FunctionFragment;
    "multicallValue((address,bool,uint256,bytes)[])": FunctionFragment;
    "owner()": FunctionFragment;
    "removeTargets(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "tryAggregate(bool,(address,bytes)[])": FunctionFragment;
    "tryBlockAndAggregate(bool,(address,bytes)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addTargets"
      | "addTargets(address[])"
      | "aggregate"
      | "aggregate((address,bytes)[])"
      | "aggregate3"
      | "aggregate3((address,bool,bytes)[])"
      | "aggregate3Value"
      | "aggregate3Value((address,bool,uint256,bytes)[])"
      | "availableTargets"
      | "availableTargets(address)"
      | "blockAndAggregate"
      | "blockAndAggregate((address,bytes)[])"
      | "getBasefee"
      | "getBasefee()"
      | "getBlockHash"
      | "getBlockHash(uint256)"
      | "getBlockNumber"
      | "getBlockNumber()"
      | "getChainId"
      | "getChainId()"
      | "getCurrentBlockCoinbase"
      | "getCurrentBlockCoinbase()"
      | "getCurrentBlockDifficulty"
      | "getCurrentBlockDifficulty()"
      | "getCurrentBlockGasLimit"
      | "getCurrentBlockGasLimit()"
      | "getCurrentBlockTimestamp"
      | "getCurrentBlockTimestamp()"
      | "getEthBalance"
      | "getEthBalance(address)"
      | "getLastBlockHash"
      | "getLastBlockHash()"
      | "multicall"
      | "multicall((address,bool,bytes)[])"
      | "multicallValue"
      | "multicallValue((address,bool,uint256,bytes)[])"
      | "owner"
      | "owner()"
      | "removeTargets"
      | "removeTargets(address[])"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "transferOwnership"
      | "transferOwnership(address)"
      | "tryAggregate"
      | "tryAggregate(bool,(address,bytes)[])"
      | "tryBlockAndAggregate"
      | "tryBlockAndAggregate(bool,(address,bytes)[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTargets",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addTargets(address[])",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate",
    values: [Multicall3.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate((address,bytes)[])",
    values: [Multicall3.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate3",
    values: [Multicall3.Call3Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate3((address,bool,bytes)[])",
    values: [Multicall3.Call3Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate3Value",
    values: [Multicall3.Call3ValueStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregate3Value((address,bool,uint256,bytes)[])",
    values: [Multicall3.Call3ValueStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "availableTargets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "availableTargets(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "blockAndAggregate",
    values: [Multicall3.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "blockAndAggregate((address,bytes)[])",
    values: [Multicall3.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasefee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBasefee()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockHash(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockCoinbase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockCoinbase()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockDifficulty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockDifficulty()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockGasLimit()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlockTimestamp()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthBalance(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastBlockHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastBlockHash()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [Multicall3.Call3Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall((address,bool,bytes)[])",
    values: [Multicall3.Call3Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multicallValue",
    values: [Multicall3.Call3ValueStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multicallValue((address,bool,uint256,bytes)[])",
    values: [Multicall3.Call3ValueStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeTargets",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTargets(address[])",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tryAggregate",
    values: [PromiseOrValue<boolean>, Multicall3.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tryAggregate(bool,(address,bytes)[])",
    values: [PromiseOrValue<boolean>, Multicall3.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tryBlockAndAggregate",
    values: [PromiseOrValue<boolean>, Multicall3.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tryBlockAndAggregate(bool,(address,bytes)[])",
    values: [PromiseOrValue<boolean>, Multicall3.CallStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "addTargets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTargets(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aggregate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aggregate((address,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aggregate3", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aggregate3((address,bool,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregate3Value",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregate3Value((address,bool,uint256,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableTargets(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockAndAggregate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockAndAggregate((address,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBasefee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBasefee()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHash(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChainId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockCoinbase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockCoinbase()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockDifficulty()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockGasLimit()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlockTimestamp()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthBalance(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastBlockHash()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multicall((address,bool,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multicallValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multicallValue((address,bool,uint256,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTargets(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryAggregate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryAggregate(bool,(address,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryBlockAndAggregate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryBlockAndAggregate(bool,(address,bytes)[])",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Multicall3 extends BaseContract {
  contractName: "Multicall3";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Multicall3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTargets(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addTargets(address[])"(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    aggregate(
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "aggregate((address,bytes)[])"(
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    aggregate3(
      calls: Multicall3.Call3Struct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "aggregate3((address,bool,bytes)[])"(
      calls: Multicall3.Call3Struct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    aggregate3Value(
      calls: Multicall3.Call3ValueStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "aggregate3Value((address,bool,uint256,bytes)[])"(
      calls: Multicall3.Call3ValueStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    availableTargets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "availableTargets(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    blockAndAggregate(
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "blockAndAggregate((address,bytes)[])"(
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBasefee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { basefee: BigNumber }>;

    "getBasefee()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { basefee: BigNumber }>;

    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { blockHash: string }>;

    "getBlockHash(uint256)"(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { blockHash: string }>;

    getBlockNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { blockNumber: BigNumber }>;

    "getBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { blockNumber: BigNumber }>;

    getChainId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { chainid: BigNumber }>;

    "getChainId()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { chainid: BigNumber }>;

    getCurrentBlockCoinbase(
      overrides?: CallOverrides
    ): Promise<[string] & { coinbase: string }>;

    "getCurrentBlockCoinbase()"(
      overrides?: CallOverrides
    ): Promise<[string] & { coinbase: string }>;

    getCurrentBlockDifficulty(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { difficulty: BigNumber }>;

    "getCurrentBlockDifficulty()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { difficulty: BigNumber }>;

    getCurrentBlockGasLimit(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { gaslimit: BigNumber }>;

    "getCurrentBlockGasLimit()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { gaslimit: BigNumber }>;

    getCurrentBlockTimestamp(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    "getCurrentBlockTimestamp()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    getEthBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    "getEthBalance(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getLastBlockHash(
      overrides?: CallOverrides
    ): Promise<[string] & { blockHash: string }>;

    "getLastBlockHash()"(
      overrides?: CallOverrides
    ): Promise<[string] & { blockHash: string }>;

    multicall(
      calls: Multicall3.Call3Struct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "multicall((address,bool,bytes)[])"(
      calls: Multicall3.Call3Struct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multicallValue(
      calls: Multicall3.Call3ValueStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "multicallValue((address,bool,uint256,bytes)[])"(
      calls: Multicall3.Call3ValueStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeTargets(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeTargets(address[])"(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tryAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "tryAggregate(bool,(address,bytes)[])"(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tryBlockAndAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "tryBlockAndAggregate(bool,(address,bytes)[])"(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addTargets(
    addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addTargets(address[])"(
    addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  aggregate(
    calls: Multicall3.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "aggregate((address,bytes)[])"(
    calls: Multicall3.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  aggregate3(
    calls: Multicall3.Call3Struct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "aggregate3((address,bool,bytes)[])"(
    calls: Multicall3.Call3Struct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  aggregate3Value(
    calls: Multicall3.Call3ValueStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "aggregate3Value((address,bool,uint256,bytes)[])"(
    calls: Multicall3.Call3ValueStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  availableTargets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "availableTargets(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  blockAndAggregate(
    calls: Multicall3.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "blockAndAggregate((address,bytes)[])"(
    calls: Multicall3.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBasefee(overrides?: CallOverrides): Promise<BigNumber>;

  "getBasefee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getBlockHash(
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getBlockHash(uint256)"(
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  "getBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  "getChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<string>;

  "getCurrentBlockCoinbase()"(overrides?: CallOverrides): Promise<string>;

  getCurrentBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentBlockDifficulty()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentBlockGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentBlockTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  getEthBalance(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getEthBalance(address)"(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLastBlockHash(overrides?: CallOverrides): Promise<string>;

  "getLastBlockHash()"(overrides?: CallOverrides): Promise<string>;

  multicall(
    calls: Multicall3.Call3Struct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "multicall((address,bool,bytes)[])"(
    calls: Multicall3.Call3Struct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multicallValue(
    calls: Multicall3.Call3ValueStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "multicallValue((address,bool,uint256,bytes)[])"(
    calls: Multicall3.Call3ValueStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeTargets(
    addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeTargets(address[])"(
    addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tryAggregate(
    requireSuccess: PromiseOrValue<boolean>,
    calls: Multicall3.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "tryAggregate(bool,(address,bytes)[])"(
    requireSuccess: PromiseOrValue<boolean>,
    calls: Multicall3.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tryBlockAndAggregate(
    requireSuccess: PromiseOrValue<boolean>,
    calls: Multicall3.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "tryBlockAndAggregate(bool,(address,bytes)[])"(
    requireSuccess: PromiseOrValue<boolean>,
    calls: Multicall3.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTargets(
      addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addTargets(address[])"(
      addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    aggregate(
      calls: Multicall3.CallStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[]] & { blockNumber: BigNumber; returnData: string[] }
    >;

    "aggregate((address,bytes)[])"(
      calls: Multicall3.CallStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[]] & { blockNumber: BigNumber; returnData: string[] }
    >;

    aggregate3(
      calls: Multicall3.Call3Struct[],
      overrides?: CallOverrides
    ): Promise<Multicall3.ResultStructOutput[]>;

    "aggregate3((address,bool,bytes)[])"(
      calls: Multicall3.Call3Struct[],
      overrides?: CallOverrides
    ): Promise<Multicall3.ResultStructOutput[]>;

    aggregate3Value(
      calls: Multicall3.Call3ValueStruct[],
      overrides?: CallOverrides
    ): Promise<Multicall3.ResultStructOutput[]>;

    "aggregate3Value((address,bool,uint256,bytes)[])"(
      calls: Multicall3.Call3ValueStruct[],
      overrides?: CallOverrides
    ): Promise<Multicall3.ResultStructOutput[]>;

    availableTargets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "availableTargets(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    blockAndAggregate(
      calls: Multicall3.CallStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, Multicall3.ResultStructOutput[]] & {
        blockNumber: BigNumber;
        blockHash: string;
        returnData: Multicall3.ResultStructOutput[];
      }
    >;

    "blockAndAggregate((address,bytes)[])"(
      calls: Multicall3.CallStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, Multicall3.ResultStructOutput[]] & {
        blockNumber: BigNumber;
        blockHash: string;
        returnData: Multicall3.ResultStructOutput[];
      }
    >;

    getBasefee(overrides?: CallOverrides): Promise<BigNumber>;

    "getBasefee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getBlockHash(uint256)"(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "getBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    "getChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<string>;

    "getCurrentBlockCoinbase()"(overrides?: CallOverrides): Promise<string>;

    getCurrentBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentBlockDifficulty()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentBlockGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentBlockTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEthBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEthBalance(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastBlockHash(overrides?: CallOverrides): Promise<string>;

    "getLastBlockHash()"(overrides?: CallOverrides): Promise<string>;

    multicall(
      calls: Multicall3.Call3Struct[],
      overrides?: CallOverrides
    ): Promise<Multicall3.ResultStructOutput[]>;

    "multicall((address,bool,bytes)[])"(
      calls: Multicall3.Call3Struct[],
      overrides?: CallOverrides
    ): Promise<Multicall3.ResultStructOutput[]>;

    multicallValue(
      calls: Multicall3.Call3ValueStruct[],
      overrides?: CallOverrides
    ): Promise<Multicall3.ResultStructOutput[]>;

    "multicallValue((address,bool,uint256,bytes)[])"(
      calls: Multicall3.Call3ValueStruct[],
      overrides?: CallOverrides
    ): Promise<Multicall3.ResultStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeTargets(
      addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "removeTargets(address[])"(
      addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tryAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: CallOverrides
    ): Promise<Multicall3.ResultStructOutput[]>;

    "tryAggregate(bool,(address,bytes)[])"(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: CallOverrides
    ): Promise<Multicall3.ResultStructOutput[]>;

    tryBlockAndAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, Multicall3.ResultStructOutput[]] & {
        blockNumber: BigNumber;
        blockHash: string;
        returnData: Multicall3.ResultStructOutput[];
      }
    >;

    "tryBlockAndAggregate(bool,(address,bytes)[])"(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, Multicall3.ResultStructOutput[]] & {
        blockNumber: BigNumber;
        blockHash: string;
        returnData: Multicall3.ResultStructOutput[];
      }
    >;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addTargets(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addTargets(address[])"(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    aggregate(
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "aggregate((address,bytes)[])"(
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    aggregate3(
      calls: Multicall3.Call3Struct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "aggregate3((address,bool,bytes)[])"(
      calls: Multicall3.Call3Struct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    aggregate3Value(
      calls: Multicall3.Call3ValueStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "aggregate3Value((address,bool,uint256,bytes)[])"(
      calls: Multicall3.Call3ValueStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    availableTargets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "availableTargets(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blockAndAggregate(
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "blockAndAggregate((address,bytes)[])"(
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBasefee(overrides?: CallOverrides): Promise<BigNumber>;

    "getBasefee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBlockHash(uint256)"(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "getBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    "getChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentBlockCoinbase()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentBlockDifficulty()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentBlockGasLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentBlockTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEthBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEthBalance(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastBlockHash(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastBlockHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      calls: Multicall3.Call3Struct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "multicall((address,bool,bytes)[])"(
      calls: Multicall3.Call3Struct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multicallValue(
      calls: Multicall3.Call3ValueStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "multicallValue((address,bool,uint256,bytes)[])"(
      calls: Multicall3.Call3ValueStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeTargets(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeTargets(address[])"(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tryAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "tryAggregate(bool,(address,bytes)[])"(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tryBlockAndAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "tryBlockAndAggregate(bool,(address,bytes)[])"(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTargets(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addTargets(address[])"(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    aggregate(
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "aggregate((address,bytes)[])"(
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    aggregate3(
      calls: Multicall3.Call3Struct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "aggregate3((address,bool,bytes)[])"(
      calls: Multicall3.Call3Struct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    aggregate3Value(
      calls: Multicall3.Call3ValueStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "aggregate3Value((address,bool,uint256,bytes)[])"(
      calls: Multicall3.Call3ValueStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    availableTargets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "availableTargets(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockAndAggregate(
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "blockAndAggregate((address,bytes)[])"(
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBasefee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBasefee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBlockHash(uint256)"(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getChainId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentBlockCoinbase(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentBlockCoinbase()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentBlockDifficulty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentBlockDifficulty()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentBlockGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentBlockGasLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentBlockTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentBlockTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthBalance(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEthBalance(address)"(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastBlockHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLastBlockHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      calls: Multicall3.Call3Struct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "multicall((address,bool,bytes)[])"(
      calls: Multicall3.Call3Struct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multicallValue(
      calls: Multicall3.Call3ValueStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "multicallValue((address,bool,uint256,bytes)[])"(
      calls: Multicall3.Call3ValueStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTargets(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeTargets(address[])"(
      addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tryAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "tryAggregate(bool,(address,bytes)[])"(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tryBlockAndAggregate(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "tryBlockAndAggregate(bool,(address,bytes)[])"(
      requireSuccess: PromiseOrValue<boolean>,
      calls: Multicall3.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
