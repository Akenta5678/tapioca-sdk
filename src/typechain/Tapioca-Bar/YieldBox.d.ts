/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface YieldBoxInterface extends ethers.utils.Interface {
  functions: {
    "amountOf(address,uint256)": FunctionFragment;
    "assetCount()": FunctionFragment;
    "assets(uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "batch(bytes[],bool)": FunctionFragment;
    "batchTransfer(address,address,uint256[],uint256[])": FunctionFragment;
    "burn(uint256,address,uint256)": FunctionFragment;
    "claimOwnership(uint256)": FunctionFragment;
    "clonesOf(address,uint256)": FunctionFragment;
    "clonesOfCount(address)": FunctionFragment;
    "createToken(string,string,uint8)": FunctionFragment;
    "decimals(uint256)": FunctionFragment;
    "deploy(address,bytes,bool)": FunctionFragment;
    "deposit(uint8,address,address,uint256,address,address,uint256,uint256)": FunctionFragment;
    "depositAsset(uint256,address,address,uint256,uint256)": FunctionFragment;
    "depositETH(address,address,uint256)": FunctionFragment;
    "depositETHAsset(uint256,address,uint256)": FunctionFragment;
    "ids(uint8,address,address,uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "masterContractOf(address)": FunctionFragment;
    "mint(uint256,address,uint256)": FunctionFragment;
    "name(uint256)": FunctionFragment;
    "nativeTokens(uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "pendingTokenOwner(uint256)": FunctionFragment;
    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "registerAsset(uint8,address,address,uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol(uint256)": FunctionFragment;
    "toAmount(uint256,uint256,bool)": FunctionFragment;
    "toShare(uint256,uint256,bool)": FunctionFragment;
    "tokenOwner(uint256)": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "transfer(address,address,uint256,uint256)": FunctionFragment;
    "transferMultiple(address,address[],uint256,uint256[])": FunctionFragment;
    "transferOwnership(uint256,address,bool,bool)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "uriBuilder()": FunctionFragment;
    "withdraw(uint256,address,address,uint256,uint256)": FunctionFragment;
    "wrappedNative()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "amountOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batch",
    values: [BytesLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransfer",
    values: [string, string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clonesOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clonesOfCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decimals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [string, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAsset",
    values: [BigNumberish, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETHAsset",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ids",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "masterContractOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nativeTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingTokenOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permitToken",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsset",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "symbol",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toAmount",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toShare",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferMultiple",
    values: [string, string[], BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [BigNumberish, string, boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "uriBuilder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedNative",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "amountOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clonesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clonesOfCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositETHAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterContractOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingTokenOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uriBuilder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrappedNative",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "AssetRegistered(uint8,address,address,uint256,uint256)": EventFragment;
    "LogDeploy(address,bytes,address)": EventFragment;
    "OwnershipTransferred(uint256,address,address)": EventFragment;
    "TokenCreated(address,string,string,uint8,uint256)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDeploy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    _owner: string;
    _operator: string;
    _approved: boolean;
  }
>;

export type AssetRegisteredEvent = TypedEvent<
  [number, string, string, BigNumber, BigNumber] & {
    tokenType: number;
    contractAddress: string;
    strategy: string;
    tokenId: BigNumber;
    assetId: BigNumber;
  }
>;

export type LogDeployEvent = TypedEvent<
  [string, string, string] & {
    masterContract: string;
    data: string;
    cloneAddress: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [BigNumber, string, string] & {
    tokenId: BigNumber;
    previousTokenOwner: string;
    newTokenOwner: string;
  }
>;

export type TokenCreatedEvent = TypedEvent<
  [string, string, string, number, BigNumber] & {
    creator: string;
    name: string;
    symbol: string;
    decimals: number;
    tokenId: BigNumber;
  }
>;

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]] & {
    _operator: string;
    _from: string;
    _to: string;
    _ids: BigNumber[];
    _values: BigNumber[];
  }
>;

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    _operator: string;
    _from: string;
    _to: string;
    _id: BigNumber;
    _value: BigNumber;
  }
>;

export type URIEvent = TypedEvent<
  [string, BigNumber] & { _value: string; _id: BigNumber }
>;

export class YieldBox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: YieldBoxInterface;

  functions: {
    amountOf(
      user: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "amountOf(address,uint256)"(
      user: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    assetCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "assetCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, BigNumber] & {
        tokenType: number;
        contractAddress: string;
        strategy: string;
        tokenId: BigNumber;
      }
    >;

    "assets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, BigNumber] & {
        tokenType: number;
        contractAddress: string;
        strategy: string;
        tokenId: BigNumber;
      }
    >;

    balanceOf(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { balances: BigNumber[] }>;

    "balanceOfBatch(address[],uint256[])"(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { balances: BigNumber[] }>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "batch(bytes[],bool)"(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchTransfer(
      from: string,
      to: string,
      assetIds_: BigNumberish[],
      shares_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "batchTransfer(address,address,uint256[],uint256[])"(
      from: string,
      to: string,
      assetIds_: BigNumberish[],
      shares_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      tokenId: BigNumberish,
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "burn(uint256,address,uint256)"(
      tokenId: BigNumberish,
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimOwnership(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clonesOf(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "clonesOf(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    clonesOfCount(
      masterContract: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cloneCount: BigNumber }>;

    "clonesOfCount(address)"(
      masterContract: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cloneCount: BigNumber }>;

    createToken(
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createToken(string,string,uint8)"(
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "decimals(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    deploy(
      masterContract: string,
      data: BytesLike,
      useCreate2: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deploy(address,bytes,bool)"(
      masterContract: string,
      data: BytesLike,
      useCreate2: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      tokenType: BigNumberish,
      contractAddress: string,
      strategy: string,
      tokenId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint8,address,address,uint256,address,address,uint256,uint256)"(
      tokenType: BigNumberish,
      contractAddress: string,
      strategy: string,
      tokenId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAsset(
      assetId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositAsset(uint256,address,address,uint256,uint256)"(
      assetId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositETH(
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositETH(address,address,uint256)"(
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositETHAsset(
      assetId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositETHAsset(uint256,address,uint256)"(
      assetId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ids(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "ids(uint8,address,address,uint256)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    masterContractOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "masterContractOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    mint(
      tokenId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint(uint256,address,uint256)"(
      tokenId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(assetId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "name(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nativeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        name: string;
        symbol: string;
        decimals: number;
      }
    >;

    "nativeTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        name: string;
        symbol: string;
        decimals: number;
      }
    >;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pendingTokenOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "pendingTokenOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAsset(
      tokenType: BigNumberish,
      contractAddress: string,
      strategy: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerAsset(uint8,address,address,uint256)"(
      tokenType: BigNumberish,
      contractAddress: string,
      strategy: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(assetId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "symbol(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    toAmount(
      assetId: BigNumberish,
      share: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "toAmount(uint256,uint256,bool)"(
      assetId: BigNumberish,
      share: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    toShare(
      assetId: BigNumberish,
      amount: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { share: BigNumber }>;

    "toShare(uint256,uint256,bool)"(
      assetId: BigNumberish,
      amount: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { share: BigNumber }>;

    tokenOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalSupply(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transfer(
      from: string,
      to: string,
      assetId: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,address,uint256,uint256)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferMultiple(
      from: string,
      tos: string[],
      assetId: BigNumberish,
      shares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferMultiple(address,address[],uint256,uint256[])"(
      from: string,
      tos: string[],
      assetId: BigNumberish,
      shares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      tokenId: BigNumberish,
      newTokenOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(uint256,address,bool,bool)"(
      tokenId: BigNumberish,
      newTokenOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(assetId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "uri(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    uriBuilder(overrides?: CallOverrides): Promise<[string]>;

    "uriBuilder()"(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      assetId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address,address,uint256,uint256)"(
      assetId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrappedNative(overrides?: CallOverrides): Promise<[string]>;

    "wrappedNative()"(overrides?: CallOverrides): Promise<[string]>;
  };

  amountOf(
    user: string,
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "amountOf(address,uint256)"(
    user: string,
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assetCount(overrides?: CallOverrides): Promise<BigNumber>;

  "assetCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  assets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, BigNumber] & {
      tokenType: number;
      contractAddress: string;
      strategy: string;
      tokenId: BigNumber;
    }
  >;

  "assets(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, BigNumber] & {
      tokenType: number;
      contractAddress: string;
      strategy: string;
      tokenId: BigNumber;
    }
  >;

  balanceOf(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    owners: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "balanceOfBatch(address[],uint256[])"(
    owners: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  batch(
    calls: BytesLike[],
    revertOnFail: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "batch(bytes[],bool)"(
    calls: BytesLike[],
    revertOnFail: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchTransfer(
    from: string,
    to: string,
    assetIds_: BigNumberish[],
    shares_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "batchTransfer(address,address,uint256[],uint256[])"(
    from: string,
    to: string,
    assetIds_: BigNumberish[],
    shares_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    tokenId: BigNumberish,
    from: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "burn(uint256,address,uint256)"(
    tokenId: BigNumberish,
    from: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimOwnership(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clonesOf(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "clonesOf(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  clonesOfCount(
    masterContract: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "clonesOfCount(address)"(
    masterContract: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createToken(
    name: string,
    symbol: string,
    decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createToken(string,string,uint8)"(
    name: string,
    symbol: string,
    decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(assetId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "decimals(uint256)"(
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  deploy(
    masterContract: string,
    data: BytesLike,
    useCreate2: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deploy(address,bytes,bool)"(
    masterContract: string,
    data: BytesLike,
    useCreate2: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    tokenType: BigNumberish,
    contractAddress: string,
    strategy: string,
    tokenId: BigNumberish,
    from: string,
    to: string,
    amount: BigNumberish,
    share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint8,address,address,uint256,address,address,uint256,uint256)"(
    tokenType: BigNumberish,
    contractAddress: string,
    strategy: string,
    tokenId: BigNumberish,
    from: string,
    to: string,
    amount: BigNumberish,
    share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAsset(
    assetId: BigNumberish,
    from: string,
    to: string,
    amount: BigNumberish,
    share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositAsset(uint256,address,address,uint256,uint256)"(
    assetId: BigNumberish,
    from: string,
    to: string,
    amount: BigNumberish,
    share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositETH(
    strategy: string,
    to: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositETH(address,address,uint256)"(
    strategy: string,
    to: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositETHAsset(
    assetId: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositETHAsset(uint256,address,uint256)"(
    assetId: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ids(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    arg3: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "ids(uint8,address,address,uint256)"(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    arg3: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isApprovedForAll(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  masterContractOf(arg0: string, overrides?: CallOverrides): Promise<string>;

  "masterContractOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  mint(
    tokenId: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint(uint256,address,uint256)"(
    tokenId: BigNumberish,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(assetId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "name(uint256)"(
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  nativeTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      name: string;
      symbol: string;
      decimals: number;
    }
  >;

  "nativeTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      name: string;
      symbol: string;
      decimals: number;
    }
  >;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  pendingTokenOwner(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "pendingTokenOwner(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  permitToken(
    token: string,
    from: string,
    to: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    token: string,
    from: string,
    to: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAsset(
    tokenType: BigNumberish,
    contractAddress: string,
    strategy: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerAsset(uint8,address,address,uint256)"(
    tokenType: BigNumberish,
    contractAddress: string,
    strategy: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(assetId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "symbol(uint256)"(
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  toAmount(
    assetId: BigNumberish,
    share: BigNumberish,
    roundUp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "toAmount(uint256,uint256,bool)"(
    assetId: BigNumberish,
    share: BigNumberish,
    roundUp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toShare(
    assetId: BigNumberish,
    amount: BigNumberish,
    roundUp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "toShare(uint256,uint256,bool)"(
    assetId: BigNumberish,
    amount: BigNumberish,
    roundUp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenOwner(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupply(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer(
    from: string,
    to: string,
    assetId: BigNumberish,
    share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,address,uint256,uint256)"(
    from: string,
    to: string,
    assetId: BigNumberish,
    share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferMultiple(
    from: string,
    tos: string[],
    assetId: BigNumberish,
    shares: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferMultiple(address,address[],uint256,uint256[])"(
    from: string,
    tos: string[],
    assetId: BigNumberish,
    shares: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    tokenId: BigNumberish,
    newTokenOwner: string,
    direct: boolean,
    renounce: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(uint256,address,bool,bool)"(
    tokenId: BigNumberish,
    newTokenOwner: string,
    direct: boolean,
    renounce: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(assetId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "uri(uint256)"(
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  uriBuilder(overrides?: CallOverrides): Promise<string>;

  "uriBuilder()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    assetId: BigNumberish,
    from: string,
    to: string,
    amount: BigNumberish,
    share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address,address,uint256,uint256)"(
    assetId: BigNumberish,
    from: string,
    to: string,
    amount: BigNumberish,
    share: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrappedNative(overrides?: CallOverrides): Promise<string>;

  "wrappedNative()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    amountOf(
      user: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "amountOf(address,uint256)"(
      user: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetCount(overrides?: CallOverrides): Promise<BigNumber>;

    "assetCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, BigNumber] & {
        tokenType: number;
        contractAddress: string;
        strategy: string;
        tokenId: BigNumber;
      }
    >;

    "assets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, BigNumber] & {
        tokenType: number;
        contractAddress: string;
        strategy: string;
        tokenId: BigNumber;
      }
    >;

    balanceOf(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "balanceOfBatch(address[],uint256[])"(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "batch(bytes[],bool)"(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    batchTransfer(
      from: string,
      to: string,
      assetIds_: BigNumberish[],
      shares_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchTransfer(address,address,uint256[],uint256[])"(
      from: string,
      to: string,
      assetIds_: BigNumberish[],
      shares_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      tokenId: BigNumberish,
      from: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(uint256,address,uint256)"(
      tokenId: BigNumberish,
      from: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimOwnership(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimOwnership(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    clonesOf(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "clonesOf(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    clonesOfCount(
      masterContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "clonesOfCount(address)"(
      masterContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createToken(
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createToken(string,string,uint8)"(
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(assetId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "decimals(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    deploy(
      masterContract: string,
      data: BytesLike,
      useCreate2: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "deploy(address,bytes,bool)"(
      masterContract: string,
      data: BytesLike,
      useCreate2: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    deposit(
      tokenType: BigNumberish,
      contractAddress: string,
      strategy: string,
      tokenId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; shareOut: BigNumber }
    >;

    "deposit(uint8,address,address,uint256,address,address,uint256,uint256)"(
      tokenType: BigNumberish,
      contractAddress: string,
      strategy: string,
      tokenId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; shareOut: BigNumber }
    >;

    depositAsset(
      assetId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; shareOut: BigNumber }
    >;

    "depositAsset(uint256,address,address,uint256,uint256)"(
      assetId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; shareOut: BigNumber }
    >;

    depositETH(
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; shareOut: BigNumber }
    >;

    "depositETH(address,address,uint256)"(
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; shareOut: BigNumber }
    >;

    depositETHAsset(
      assetId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; shareOut: BigNumber }
    >;

    "depositETHAsset(uint256,address,uint256)"(
      assetId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; shareOut: BigNumber }
    >;

    ids(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ids(uint8,address,address,uint256)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    masterContractOf(arg0: string, overrides?: CallOverrides): Promise<string>;

    "masterContractOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    mint(
      tokenId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(uint256,address,uint256)"(
      tokenId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(assetId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "name(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    nativeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        name: string;
        symbol: string;
        decimals: number;
      }
    >;

    "nativeTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        name: string;
        symbol: string;
        decimals: number;
      }
    >;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    pendingTokenOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "pendingTokenOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAsset(
      tokenType: BigNumberish,
      contractAddress: string,
      strategy: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "registerAsset(uint8,address,address,uint256)"(
      tokenType: BigNumberish,
      contractAddress: string,
      strategy: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(assetId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "symbol(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    toAmount(
      assetId: BigNumberish,
      share: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toAmount(uint256,uint256,bool)"(
      assetId: BigNumberish,
      share: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toShare(
      assetId: BigNumberish,
      amount: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toShare(uint256,uint256,bool)"(
      assetId: BigNumberish,
      amount: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      from: string,
      to: string,
      assetId: BigNumberish,
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transfer(address,address,uint256,uint256)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferMultiple(
      from: string,
      tos: string[],
      assetId: BigNumberish,
      shares: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "transferMultiple(address,address[],uint256,uint256[])"(
      from: string,
      tos: string[],
      assetId: BigNumberish,
      shares: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      tokenId: BigNumberish,
      newTokenOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(uint256,address,bool,bool)"(
      tokenId: BigNumberish,
      newTokenOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(assetId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "uri(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    uriBuilder(overrides?: CallOverrides): Promise<string>;

    "uriBuilder()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      assetId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; shareOut: BigNumber }
    >;

    "withdraw(uint256,address,address,uint256,uint256)"(
      assetId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; shareOut: BigNumber }
    >;

    wrappedNative(overrides?: CallOverrides): Promise<string>;

    "wrappedNative()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      _owner?: string | null,
      _operator?: string | null,
      _approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { _owner: string; _operator: string; _approved: boolean }
    >;

    ApprovalForAll(
      _owner?: string | null,
      _operator?: string | null,
      _approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { _owner: string; _operator: string; _approved: boolean }
    >;

    "AssetRegistered(uint8,address,address,uint256,uint256)"(
      tokenType?: BigNumberish | null,
      contractAddress?: string | null,
      strategy?: null,
      tokenId?: BigNumberish | null,
      assetId?: null
    ): TypedEventFilter<
      [number, string, string, BigNumber, BigNumber],
      {
        tokenType: number;
        contractAddress: string;
        strategy: string;
        tokenId: BigNumber;
        assetId: BigNumber;
      }
    >;

    AssetRegistered(
      tokenType?: BigNumberish | null,
      contractAddress?: string | null,
      strategy?: null,
      tokenId?: BigNumberish | null,
      assetId?: null
    ): TypedEventFilter<
      [number, string, string, BigNumber, BigNumber],
      {
        tokenType: number;
        contractAddress: string;
        strategy: string;
        tokenId: BigNumber;
        assetId: BigNumber;
      }
    >;

    "LogDeploy(address,bytes,address)"(
      masterContract?: string | null,
      data?: null,
      cloneAddress?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { masterContract: string; data: string; cloneAddress: string }
    >;

    LogDeploy(
      masterContract?: string | null,
      data?: null,
      cloneAddress?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { masterContract: string; data: string; cloneAddress: string }
    >;

    "OwnershipTransferred(uint256,address,address)"(
      tokenId?: BigNumberish | null,
      previousTokenOwner?: string | null,
      newTokenOwner?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { tokenId: BigNumber; previousTokenOwner: string; newTokenOwner: string }
    >;

    OwnershipTransferred(
      tokenId?: BigNumberish | null,
      previousTokenOwner?: string | null,
      newTokenOwner?: string | null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { tokenId: BigNumber; previousTokenOwner: string; newTokenOwner: string }
    >;

    "TokenCreated(address,string,string,uint8,uint256)"(
      creator?: string | null,
      name?: null,
      symbol?: null,
      decimals?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, string, string, number, BigNumber],
      {
        creator: string;
        name: string;
        symbol: string;
        decimals: number;
        tokenId: BigNumber;
      }
    >;

    TokenCreated(
      creator?: string | null,
      name?: null,
      symbol?: null,
      decimals?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, string, string, number, BigNumber],
      {
        creator: string;
        name: string;
        symbol: string;
        decimals: number;
        tokenId: BigNumber;
      }
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      _operator?: string | null,
      _from?: string | null,
      _to?: string | null,
      _ids?: null,
      _values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        _operator: string;
        _from: string;
        _to: string;
        _ids: BigNumber[];
        _values: BigNumber[];
      }
    >;

    TransferBatch(
      _operator?: string | null,
      _from?: string | null,
      _to?: string | null,
      _ids?: null,
      _values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        _operator: string;
        _from: string;
        _to: string;
        _ids: BigNumber[];
        _values: BigNumber[];
      }
    >;

    "TransferSingle(address,address,address,uint256,uint256)"(
      _operator?: string | null,
      _from?: string | null,
      _to?: string | null,
      _id?: null,
      _value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        _operator: string;
        _from: string;
        _to: string;
        _id: BigNumber;
        _value: BigNumber;
      }
    >;

    TransferSingle(
      _operator?: string | null,
      _from?: string | null,
      _to?: string | null,
      _id?: null,
      _value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        _operator: string;
        _from: string;
        _to: string;
        _id: BigNumber;
        _value: BigNumber;
      }
    >;

    "URI(string,uint256)"(
      _value?: null,
      _id?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { _value: string; _id: BigNumber }
    >;

    URI(
      _value?: null,
      _id?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { _value: string; _id: BigNumber }
    >;
  };

  estimateGas: {
    amountOf(
      user: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "amountOf(address,uint256)"(
      user: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetCount(overrides?: CallOverrides): Promise<BigNumber>;

    "assetCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "assets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfBatch(address[],uint256[])"(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "batch(bytes[],bool)"(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchTransfer(
      from: string,
      to: string,
      assetIds_: BigNumberish[],
      shares_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "batchTransfer(address,address,uint256[],uint256[])"(
      from: string,
      to: string,
      assetIds_: BigNumberish[],
      shares_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "burn(uint256,address,uint256)"(
      tokenId: BigNumberish,
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimOwnership(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimOwnership(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clonesOf(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "clonesOf(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clonesOfCount(
      masterContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "clonesOfCount(address)"(
      masterContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createToken(
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createToken(string,string,uint8)"(
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decimals(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploy(
      masterContract: string,
      data: BytesLike,
      useCreate2: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deploy(address,bytes,bool)"(
      masterContract: string,
      data: BytesLike,
      useCreate2: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      tokenType: BigNumberish,
      contractAddress: string,
      strategy: string,
      tokenId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint8,address,address,uint256,address,address,uint256,uint256)"(
      tokenType: BigNumberish,
      contractAddress: string,
      strategy: string,
      tokenId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAsset(
      assetId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositAsset(uint256,address,address,uint256,uint256)"(
      assetId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositETH(
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositETH(address,address,uint256)"(
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositETHAsset(
      assetId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositETHAsset(uint256,address,uint256)"(
      assetId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ids(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ids(uint8,address,address,uint256)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterContractOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "masterContractOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      tokenId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint(uint256,address,uint256)"(
      tokenId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(assetId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "name(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nativeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nativeTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingTokenOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingTokenOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAsset(
      tokenType: BigNumberish,
      contractAddress: string,
      strategy: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerAsset(uint8,address,address,uint256)"(
      tokenType: BigNumberish,
      contractAddress: string,
      strategy: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "symbol(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toAmount(
      assetId: BigNumberish,
      share: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toAmount(uint256,uint256,bool)"(
      assetId: BigNumberish,
      share: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toShare(
      assetId: BigNumberish,
      amount: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toShare(uint256,uint256,bool)"(
      assetId: BigNumberish,
      amount: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      from: string,
      to: string,
      assetId: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,address,uint256,uint256)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferMultiple(
      from: string,
      tos: string[],
      assetId: BigNumberish,
      shares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferMultiple(address,address[],uint256,uint256[])"(
      from: string,
      tos: string[],
      assetId: BigNumberish,
      shares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      tokenId: BigNumberish,
      newTokenOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(uint256,address,bool,bool)"(
      tokenId: BigNumberish,
      newTokenOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(assetId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "uri(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uriBuilder(overrides?: CallOverrides): Promise<BigNumber>;

    "uriBuilder()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      assetId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,address,address,uint256,uint256)"(
      assetId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrappedNative(overrides?: CallOverrides): Promise<BigNumber>;

    "wrappedNative()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    amountOf(
      user: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "amountOf(address,uint256)"(
      user: string,
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfBatch(address[],uint256[])"(
      owners: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batch(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "batch(bytes[],bool)"(
      calls: BytesLike[],
      revertOnFail: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchTransfer(
      from: string,
      to: string,
      assetIds_: BigNumberish[],
      shares_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "batchTransfer(address,address,uint256[],uint256[])"(
      from: string,
      to: string,
      assetIds_: BigNumberish[],
      shares_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "burn(uint256,address,uint256)"(
      tokenId: BigNumberish,
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clonesOf(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "clonesOf(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clonesOfCount(
      masterContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "clonesOfCount(address)"(
      masterContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createToken(
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createToken(string,string,uint8)"(
      name: string,
      symbol: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decimals(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploy(
      masterContract: string,
      data: BytesLike,
      useCreate2: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deploy(address,bytes,bool)"(
      masterContract: string,
      data: BytesLike,
      useCreate2: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      tokenType: BigNumberish,
      contractAddress: string,
      strategy: string,
      tokenId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint8,address,address,uint256,address,address,uint256,uint256)"(
      tokenType: BigNumberish,
      contractAddress: string,
      strategy: string,
      tokenId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAsset(
      assetId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositAsset(uint256,address,address,uint256,uint256)"(
      assetId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositETH(
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositETH(address,address,uint256)"(
      strategy: string,
      to: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositETHAsset(
      assetId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositETHAsset(uint256,address,uint256)"(
      assetId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ids(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ids(uint8,address,address,uint256)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterContractOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "masterContractOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      tokenId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint(uint256,address,uint256)"(
      tokenId: BigNumberish,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "name(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nativeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nativeTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingTokenOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingTokenOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAsset(
      tokenType: BigNumberish,
      contractAddress: string,
      strategy: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerAsset(uint8,address,address,uint256)"(
      tokenType: BigNumberish,
      contractAddress: string,
      strategy: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "symbol(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toAmount(
      assetId: BigNumberish,
      share: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toAmount(uint256,uint256,bool)"(
      assetId: BigNumberish,
      share: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toShare(
      assetId: BigNumberish,
      amount: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toShare(uint256,uint256,bool)"(
      assetId: BigNumberish,
      amount: BigNumberish,
      roundUp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenOwner(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupply(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      from: string,
      to: string,
      assetId: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,address,uint256,uint256)"(
      from: string,
      to: string,
      assetId: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferMultiple(
      from: string,
      tos: string[],
      assetId: BigNumberish,
      shares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferMultiple(address,address[],uint256,uint256[])"(
      from: string,
      tos: string[],
      assetId: BigNumberish,
      shares: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      tokenId: BigNumberish,
      newTokenOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(uint256,address,bool,bool)"(
      tokenId: BigNumberish,
      newTokenOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uri(uint256)"(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uriBuilder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uriBuilder()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      assetId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address,address,uint256,uint256)"(
      assetId: BigNumberish,
      from: string,
      to: string,
      amount: BigNumberish,
      share: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrappedNative(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wrappedNative()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
