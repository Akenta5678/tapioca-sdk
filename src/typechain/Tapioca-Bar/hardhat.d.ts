/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "CurveStableToUsdoBidder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveStableToUsdoBidder__factory>;
    getContractFactory(
      name: "UniUsdoToWethBidder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniUsdoToWethBidder__factory>;
    getContractFactory(
      name: "LiquidationQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidationQueue__factory>;
    getContractFactory(
      name: "MarketsHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketsHelper__factory>;
    getContractFactory(
      name: "MarketsProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketsProxy__factory>;
    getContractFactory(
      name: "Penrose",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Penrose__factory>;
    getContractFactory(
      name: "ProxyDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyDeployer__factory>;
    getContractFactory(
      name: "SGLCommon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SGLCommon__factory>;
    getContractFactory(
      name: "SGLERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SGLERC20__factory>;
    getContractFactory(
      name: "SGLLendingBorrowing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SGLLendingBorrowing__factory>;
    getContractFactory(
      name: "SGLLiquidation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SGLLiquidation__factory>;
    getContractFactory(
      name: "SGLStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SGLStorage__factory>;
    getContractFactory(
      name: "Singularity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Singularity__factory>;
    getContractFactory(
      name: "CurveSwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveSwapper__factory>;
    getContractFactory(
      name: "MultiSwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiSwapper__factory>;
    getContractFactory(
      name: "NonYieldBoxMultiSwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonYieldBoxMultiSwapper__factory>;
    getContractFactory(
      name: "UniswapV3Swapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3Swapper__factory>;
    getContractFactory(
      name: "BaseOFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseOFT__factory>;
    getContractFactory(
      name: "BigBang",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BigBang__factory>;
    getContractFactory(
      name: "USDO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDO__factory>;

    getContractAt(
      name: "CurveStableToUsdoBidder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveStableToUsdoBidder>;
    getContractAt(
      name: "UniUsdoToWethBidder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniUsdoToWethBidder>;
    getContractAt(
      name: "LiquidationQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidationQueue>;
    getContractAt(
      name: "MarketsHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketsHelper>;
    getContractAt(
      name: "MarketsProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketsProxy>;
    getContractAt(
      name: "Penrose",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Penrose>;
    getContractAt(
      name: "ProxyDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyDeployer>;
    getContractAt(
      name: "SGLCommon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SGLCommon>;
    getContractAt(
      name: "SGLERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SGLERC20>;
    getContractAt(
      name: "SGLLendingBorrowing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SGLLendingBorrowing>;
    getContractAt(
      name: "SGLLiquidation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SGLLiquidation>;
    getContractAt(
      name: "SGLStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SGLStorage>;
    getContractAt(
      name: "Singularity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Singularity>;
    getContractAt(
      name: "CurveSwapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveSwapper>;
    getContractAt(
      name: "MultiSwapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiSwapper>;
    getContractAt(
      name: "NonYieldBoxMultiSwapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonYieldBoxMultiSwapper>;
    getContractAt(
      name: "UniswapV3Swapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3Swapper>;
    getContractAt(
      name: "BaseOFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseOFT>;
    getContractAt(
      name: "BigBang",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BigBang>;
    getContractAt(
      name: "USDO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.USDO>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
