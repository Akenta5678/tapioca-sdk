/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace ITapiocaOptionLiquidityProvision {
  export type IOptionsLockDataStruct = {
    lock: PromiseOrValue<boolean>;
    target: PromiseOrValue<string>;
    lockDuration: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type IOptionsLockDataStructOutput = [
    boolean,
    string,
    BigNumber,
    BigNumber
  ] & {
    lock: boolean;
    target: string;
    lockDuration: BigNumber;
    amount: BigNumber;
  };

  export type IOptionsUnlockDataStruct = {
    unlock: PromiseOrValue<boolean>;
    target: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type IOptionsUnlockDataStructOutput = [boolean, string, BigNumber] & {
    unlock: boolean;
    target: string;
    tokenId: BigNumber;
  };
}

export declare namespace ITapiocaOptionsBroker {
  export type IOptionsParticipateDataStruct = {
    participate: PromiseOrValue<boolean>;
    target: PromiseOrValue<string>;
  };

  export type IOptionsParticipateDataStructOutput = [boolean, string] & {
    participate: boolean;
    target: string;
  };

  export type IOptionsExitDataStruct = {
    exit: PromiseOrValue<boolean>;
    target: PromiseOrValue<string>;
    oTAPTokenID: PromiseOrValue<BigNumberish>;
  };

  export type IOptionsExitDataStructOutput = [boolean, string, BigNumber] & {
    exit: boolean;
    target: string;
    oTAPTokenID: BigNumber;
  };
}

export declare namespace IUSDOBase {
  export type IRemoveAndRepayExternalContractsStruct = {
    magnetar: PromiseOrValue<string>;
    singularity: PromiseOrValue<string>;
    bigBang: PromiseOrValue<string>;
  };

  export type IRemoveAndRepayExternalContractsStructOutput = [
    string,
    string,
    string
  ] & { magnetar: string; singularity: string; bigBang: string };

  export type IWithdrawParamsStruct = {
    withdraw: PromiseOrValue<boolean>;
    withdrawLzFeeAmount: PromiseOrValue<BigNumberish>;
    withdrawOnOtherChain: PromiseOrValue<boolean>;
    withdrawLzChainId: PromiseOrValue<BigNumberish>;
    withdrawAdapterParams: PromiseOrValue<BytesLike>;
  };

  export type IWithdrawParamsStructOutput = [
    boolean,
    BigNumber,
    boolean,
    number,
    string
  ] & {
    withdraw: boolean;
    withdrawLzFeeAmount: BigNumber;
    withdrawOnOtherChain: boolean;
    withdrawLzChainId: number;
    withdrawAdapterParams: string;
  };

  export type IRemoveAndRepayStruct = {
    removeAssetFromSGL: PromiseOrValue<boolean>;
    removeShare: PromiseOrValue<BigNumberish>;
    repayAssetOnBB: PromiseOrValue<boolean>;
    repayAmount: PromiseOrValue<BigNumberish>;
    removeCollateralFromBB: PromiseOrValue<boolean>;
    collateralShare: PromiseOrValue<BigNumberish>;
    exitData: ITapiocaOptionsBroker.IOptionsExitDataStruct;
    unlockData: ITapiocaOptionLiquidityProvision.IOptionsUnlockDataStruct;
    assetWithdrawData: IUSDOBase.IWithdrawParamsStruct;
    collateralWithdrawData: IUSDOBase.IWithdrawParamsStruct;
  };

  export type IRemoveAndRepayStructOutput = [
    boolean,
    BigNumber,
    boolean,
    BigNumber,
    boolean,
    BigNumber,
    ITapiocaOptionsBroker.IOptionsExitDataStructOutput,
    ITapiocaOptionLiquidityProvision.IOptionsUnlockDataStructOutput,
    IUSDOBase.IWithdrawParamsStructOutput,
    IUSDOBase.IWithdrawParamsStructOutput
  ] & {
    removeAssetFromSGL: boolean;
    removeShare: BigNumber;
    repayAssetOnBB: boolean;
    repayAmount: BigNumber;
    removeCollateralFromBB: boolean;
    collateralShare: BigNumber;
    exitData: ITapiocaOptionsBroker.IOptionsExitDataStructOutput;
    unlockData: ITapiocaOptionLiquidityProvision.IOptionsUnlockDataStructOutput;
    assetWithdrawData: IUSDOBase.IWithdrawParamsStructOutput;
    collateralWithdrawData: IUSDOBase.IWithdrawParamsStructOutput;
  };
}

export interface MagnetarMarketModuleInterface extends utils.Interface {
  functions: {
    "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)": FunctionFragment;
    "depositAndAddAsset(address,address,uint256,bool,bool,(bool,address,uint128,uint128),(bool,address))": FunctionFragment;
    "depositAndRepay(address,address,uint256,uint256,bool,bool)": FunctionFragment;
    "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mintAndLend(address,address,address,uint256,uint256,bool,bool)": FunctionFragment;
    "removeAssetAndRepay(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))": FunctionFragment;
    "withdrawTo(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositAddCollateralAndBorrow"
      | "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)"
      | "depositAndAddAsset"
      | "depositAndAddAsset(address,address,uint256,bool,bool,(bool,address,uint128,uint128),(bool,address))"
      | "depositAndRepay"
      | "depositAndRepay(address,address,uint256,uint256,bool,bool)"
      | "depositRepayAndRemoveCollateral"
      | "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)"
      | "isApprovedForAll"
      | "isApprovedForAll(address,address)"
      | "mintAndLend"
      | "mintAndLend(address,address,address,uint256,uint256,bool,bool)"
      | "removeAssetAndRepay"
      | "removeAssetAndRepay(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))"
      | "withdrawTo"
      | "withdrawTo(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositAddCollateralAndBorrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndAddAsset",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      ITapiocaOptionsBroker.IOptionsParticipateDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndAddAsset(address,address,uint256,bool,bool,(bool,address,uint128,uint128),(bool,address))",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      ITapiocaOptionsBroker.IOptionsParticipateDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndRepay",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndRepay(address,address,uint256,uint256,bool,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRepayAndRemoveCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndLend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndLend(address,address,address,uint256,uint256,bool,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetAndRepay",
    values: [
      PromiseOrValue<string>,
      IUSDOBase.IRemoveAndRepayExternalContractsStruct,
      IUSDOBase.IRemoveAndRepayStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetAndRepay(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))",
    values: [
      PromiseOrValue<string>,
      IUSDOBase.IRemoveAndRepayExternalContractsStruct,
      IUSDOBase.IRemoveAndRepayStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositAddCollateralAndBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndAddAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndAddAsset(address,address,uint256,bool,bool,(bool,address,uint128,uint128),(bool,address))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndRepay(address,address,uint256,uint256,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRepayAndRemoveCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndLend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndLend(address,address,address,uint256,uint256,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetAndRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetAndRepay(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTo(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ApprovalForAll(address,address,bool)"
  ): EventFragment;
}

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface MagnetarMarketModule extends BaseContract {
  contractName: "MagnetarMarketModule";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MagnetarMarketModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositAddCollateralAndBorrow(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAndAddAsset(
      singularity: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositAndAddAsset(address,address,uint256,bool,bool,(bool,address,uint128,uint128),(bool,address))"(
      singularity: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAndRepay(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositAndRepay(address,address,uint256,uint256,bool,bool)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositRepayAndRemoveCollateral(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintAndLend(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintAndLend(address,address,address,uint256,uint256,bool,bool)"(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAssetAndRepay(
      user: PromiseOrValue<string>,
      externalData: IUSDOBase.IRemoveAndRepayExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeAssetAndRepay(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))"(
      user: PromiseOrValue<string>,
      externalData: IUSDOBase.IRemoveAndRepayExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTo(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawTo(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  depositAddCollateralAndBorrow(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    extractFromSender: PromiseOrValue<boolean>,
    deposit: PromiseOrValue<boolean>,
    withdraw: PromiseOrValue<boolean>,
    withdrawData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)"(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    extractFromSender: PromiseOrValue<boolean>,
    deposit: PromiseOrValue<boolean>,
    withdraw: PromiseOrValue<boolean>,
    withdrawData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAndAddAsset(
    singularity: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    deposit: PromiseOrValue<boolean>,
    extractFromSender: PromiseOrValue<boolean>,
    lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
    participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositAndAddAsset(address,address,uint256,bool,bool,(bool,address,uint128,uint128),(bool,address))"(
    singularity: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    deposit: PromiseOrValue<boolean>,
    extractFromSender: PromiseOrValue<boolean>,
    lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
    participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAndRepay(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    repayAmount: PromiseOrValue<BigNumberish>,
    deposit: PromiseOrValue<boolean>,
    extractFromSender: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositAndRepay(address,address,uint256,uint256,bool,bool)"(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    repayAmount: PromiseOrValue<BigNumberish>,
    deposit: PromiseOrValue<boolean>,
    extractFromSender: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositRepayAndRemoveCollateral(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    repayAmount: PromiseOrValue<BigNumberish>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    deposit: PromiseOrValue<boolean>,
    withdraw: PromiseOrValue<boolean>,
    extractFromSender: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)"(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    repayAmount: PromiseOrValue<BigNumberish>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    deposit: PromiseOrValue<boolean>,
    withdraw: PromiseOrValue<boolean>,
    extractFromSender: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintAndLend(
    singularity: PromiseOrValue<string>,
    bingBang: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    deposit: PromiseOrValue<boolean>,
    extractFromSender: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintAndLend(address,address,address,uint256,uint256,bool,bool)"(
    singularity: PromiseOrValue<string>,
    bingBang: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    deposit: PromiseOrValue<boolean>,
    extractFromSender: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAssetAndRepay(
    user: PromiseOrValue<string>,
    externalData: IUSDOBase.IRemoveAndRepayExternalContractsStruct,
    removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeAssetAndRepay(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))"(
    user: PromiseOrValue<string>,
    externalData: IUSDOBase.IRemoveAndRepayExternalContractsStruct,
    removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTo(
    yieldBox: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    dstChainId: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    share: PromiseOrValue<BigNumberish>,
    adapterParams: PromiseOrValue<BytesLike>,
    refundAddress: PromiseOrValue<string>,
    gas: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawTo(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"(
    yieldBox: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    dstChainId: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    share: PromiseOrValue<BigNumberish>,
    adapterParams: PromiseOrValue<BytesLike>,
    refundAddress: PromiseOrValue<string>,
    gas: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositAddCollateralAndBorrow(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndAddAsset(
      singularity: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAndAddAsset(address,address,uint256,bool,bool,(bool,address,uint128,uint128),(bool,address))"(
      singularity: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndRepay(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAndRepay(address,address,uint256,uint256,bool,bool)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositRepayAndRemoveCollateral(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintAndLend(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintAndLend(address,address,address,uint256,uint256,bool,bool)"(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAssetAndRepay(
      user: PromiseOrValue<string>,
      externalData: IUSDOBase.IRemoveAndRepayExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAssetAndRepay(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))"(
      user: PromiseOrValue<string>,
      externalData: IUSDOBase.IRemoveAndRepayExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTo(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawTo(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      owner?: null,
      operator?: null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: null,
      operator?: null,
      approved?: null
    ): ApprovalForAllEventFilter;
  };

  estimateGas: {
    depositAddCollateralAndBorrow(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAndAddAsset(
      singularity: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositAndAddAsset(address,address,uint256,bool,bool,(bool,address,uint128,uint128),(bool,address))"(
      singularity: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAndRepay(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositAndRepay(address,address,uint256,uint256,bool,bool)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositRepayAndRemoveCollateral(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAndLend(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintAndLend(address,address,address,uint256,uint256,bool,bool)"(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAssetAndRepay(
      user: PromiseOrValue<string>,
      externalData: IUSDOBase.IRemoveAndRepayExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeAssetAndRepay(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))"(
      user: PromiseOrValue<string>,
      externalData: IUSDOBase.IRemoveAndRepayExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTo(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawTo(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositAddCollateralAndBorrow(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAndAddAsset(
      singularity: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositAndAddAsset(address,address,uint256,bool,bool,(bool,address,uint128,uint128),(bool,address))"(
      singularity: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      lockData: ITapiocaOptionLiquidityProvision.IOptionsLockDataStruct,
      participateData: ITapiocaOptionsBroker.IOptionsParticipateDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAndRepay(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositAndRepay(address,address,uint256,uint256,bool,bool)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositRepayAndRemoveCollateral(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintAndLend(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintAndLend(address,address,address,uint256,uint256,bool,bool)"(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAssetAndRepay(
      user: PromiseOrValue<string>,
      externalData: IUSDOBase.IRemoveAndRepayExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeAssetAndRepay(address,(address,address,address),(bool,uint256,bool,uint256,bool,uint256,(bool,address,uint256),(bool,address,uint256),(bool,uint256,bool,uint16,bytes),(bool,uint256,bool,uint16,bytes)))"(
      user: PromiseOrValue<string>,
      externalData: IUSDOBase.IRemoveAndRepayExternalContractsStruct,
      removeAndRepayData: IUSDOBase.IRemoveAndRepayStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTo(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawTo(address,address,uint256,uint16,bytes32,uint256,uint256,bytes,address,uint256)"(
      yieldBox: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
