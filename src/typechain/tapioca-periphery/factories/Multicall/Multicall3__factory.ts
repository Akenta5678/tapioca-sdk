/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Multicall3,
  Multicall3Interface,
} from "../../Multicall/Multicall3";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.CallValue[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "multicallValue",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a36108ee90816100618239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c9182636e5a9cbb1461006d5750508063715018a6146100685780638da5cb5b14610063578063e8bbf5d71461005e5763f2fde38b1461005957600080fd5b61037d565b6102bc565b610293565b610247565b61007636610136565b829161008182610530565b9361008a6106cd565b50805b8381106100b2576100ae86886100a4883414610773565b51918291826101d0565b0390f35b6100bc81876105b0565b5161012361011f6100d66100d18589896106f0565b610712565b9261011986808d870151809c019b60606100f6895160018060a01b031690565b980151978851916020809a01915af161010d6106a7565b95830195865215158252565b51151590565b1590565b610130575060010161008d565b516107d0565b906020600319830112610183576001600160401b03916004359083821161018357806023830112156101835781600401359384116101835760248460051b83010111610183576024019190565b600080fd5b60005b83811061019b5750506000910152565b818101518382015260200161018b565b906020916101c481518092818552858086019101610188565b601f01601f1916010190565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610205575050505050505090565b909192939495968580610236600193603f1986820301885286838d51805115158452015191818582015201906101ab565b9901940194019295949391906101f4565b34610183576000806003193601126102905761026161040e565b80546001600160a01b03198116825581906001600160a01b03166000805160206108998339815191528280a380f35b80fd5b34610183576000366003190112610183576000546040516001600160a01b039091168152602090f35b6102c536610136565b6102ce81610530565b906102d76104b1565b9060009384835260209480868501526060604080950152805b838110610304578451806100ae88826101d0565b61030e81876105b0565b5161035c61011f84808b61032b610326888c8c6105c9565b610650565b8051908c0151805192019083906001600160a01b03165af19261011961034f6106a7565b828d019081529415158252565b61013057506001016102f0565b35906001600160a01b038216820361018357565b34610183576020366003190112610183576004356001600160a01b038116808203610183576103aa61040e565b156103ba576103b890610466565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6000546001600160a01b0316330361042257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600080546001600160a01b039283166001600160a01b03198216811783559216906000805160206108998339815191529080a3565b634e487b7160e01b600052604160045260246000fd5b60405190606082016001600160401b038111838210176104d057604052565b61049b565b60405190608082016001600160401b038111838210176104d057604052565b6040519190601f01601f191682016001600160401b038111838210176104d057604052565b6001600160401b0381116104d05760051b60200190565b9061054261053d83610519565b6104f4565b8281528092610553601f1991610519565b016000805b8281106105655750505050565b604080519091908083016001600160401b038111828210176104d0576020935283815282606081830152828701015201610558565b634e487b7160e01b600052603260045260246000fd5b80518210156105c45760209160051b010190565b61059a565b91908110156105c45760051b81013590605e1981360301821215610183570190565b3590811515820361018357565b6001600160401b0381116104d057601f01601f191660200190565b81601f820112156101835780359061062d61053d836105f8565b928284526020838301011161018357816000926020809301838601378301015290565b606081360312610183576106626104b1565b9061066c81610369565b825261067a602082016105eb565b60208301526040810135906001600160401b0382116101835761069f91369101610613565b604082015290565b3d156106c8573d906106bb61053d836105f8565b9182523d6000602084013e565b606090565b6106d56104d5565b90600082526000602083015260006040830152606080830152565b91908110156105c45760051b81013590607e1981360301821215610183570190565b608081360312610183576107246104d5565b9061072e81610369565b825261073c602082016105eb565b6020830152604081810135908301526060810135906001600160401b0382116101835761076b91369101610613565b606082015290565b1561077a57565b60405162461bcd60e51b815260206004820152601a60248201527909aead8e8d2c6c2d8d8667440ecc2d8eaca40dad2e6dac2e8c6d60331b6044820152606490fd5b9060206107cd9281815201906101ab565b90565b604481511061086257600481015181019060208160248401930312610183576024810151906001600160401b038211610183570190806043830112156101835760248201519161082261053d846105f8565b91838352604484830101116101835761085e92610846916044602085019101610188565b60405162461bcd60e51b8152918291600483016107bc565b0390fd5b60405162461bcd60e51b815260206004820152600e60248201526d2932b0b9b7b7103ab735b737bbb760911b6044820152606490fdfe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220edd79009ddb16b8a72e399bc5de416f58ae4975334404ff284e34d63c4d1886464736f6c63430008120033";

type Multicall3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Multicall3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall3__factory extends ContractFactory {
  constructor(...args: Multicall3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Multicall3";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall3> {
    return super.deploy(overrides || {}) as Promise<Multicall3>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall3 {
    return super.attach(address) as Multicall3;
  }
  override connect(signer: Signer): Multicall3__factory {
    return super.connect(signer) as Multicall3__factory;
  }
  static readonly contractName: "Multicall3";

  public readonly contractName: "Multicall3";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall3Interface {
    return new utils.Interface(_abi) as Multicall3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall3 {
    return new Contract(address, _abi, signerOrProvider) as Multicall3;
  }
}
