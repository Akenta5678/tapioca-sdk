/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Multicall3,
  Multicall3Interface,
} from "../../Multicall/Multicall3";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.CallValue[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "multicallValue",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a36108fc90816100618239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c9182636e5a9cbb1461006d5750508063715018a6146100685780638da5cb5b14610063578063e8bbf5d71461005e5763f2fde38b1461005957600080fd5b61038f565b6102ce565b6102a5565b610247565b61007636610136565b829161008182610558565b9361008a6106f6565b50805b8381106100b2576100ae86886100a488341461079d565b51918291826101d0565b0390f35b6100bc81876105d7565b5161012361011f6100d66100d1858989610719565b61073b565b9261011986808d870151809c019b60606100f6895160018060a01b031690565b980151978851916020809a01915af161010d6106d0565b95830195865215158252565b51151590565b1590565b610130575060010161008d565b516107fd565b9060206003198301126101835760043567ffffffffffffffff9283821161018357806023830112156101835781600401359384116101835760248460051b83010111610183576024019190565b600080fd5b60005b83811061019b5750506000910152565b818101518382015260200161018b565b906020916101c481518092818552858086019101610188565b601f01601f1916010190565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610205575050505050505090565b909192939495968580610236600193603f1986820301885286838d51805115158452015191818582015201906101ab565b9901940194019295949391906101f4565b34610183576000806003193601126102a257610261610420565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b34610183576000366003190112610183576000546040516001600160a01b039091168152602090f35b6102d736610136565b6102e081610558565b906102e96104d5565b9060009384835260209480868501526060604080950152805b838110610316578451806100ae88826101d0565b61032081876105d7565b5161036e61011f84808b61033d610338888c8c6105f0565b610678565b8051908c0151805192019083906001600160a01b03165af1926101196103616106d0565b828d019081529415158252565b6101305750600101610302565b35906001600160a01b038216820361018357565b34610183576020366003190112610183576004356001600160a01b038116808203610183576103bc610420565b156103cc576103ca90610478565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6000546001600160a01b0316330361043457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3565b634e487b7160e01b600052604160045260246000fd5b604051906060820182811067ffffffffffffffff8211176104f557604052565b6104bf565b604051906080820182811067ffffffffffffffff8211176104f557604052565b6040519190601f01601f1916820167ffffffffffffffff8111838210176104f557604052565b67ffffffffffffffff81116104f55760051b60200190565b9061056a61056583610540565b61051a565b828152809261057b601f1991610540565b016000805b82811061058d5750505050565b604090815182810181811067ffffffffffffffff8211176104f5576020935283815282606081830152828701015201610580565b634e487b7160e01b600052603260045260246000fd5b80518210156105eb5760209160051b010190565b6105c1565b91908110156105eb5760051b81013590605e1981360301821215610183570190565b3590811515820361018357565b67ffffffffffffffff81116104f557601f01601f191660200190565b81601f82011215610183578035906106556105658361061f565b928284526020838301011161018357816000926020809301838601378301015290565b6060813603126101835761068a6104d5565b906106948161037b565b82526106a260208201610612565b602083015260408101359067ffffffffffffffff8211610183576106c89136910161063b565b604082015290565b3d156106f1573d906106e46105658361061f565b9182523d6000602084013e565b606090565b6106fe6104fa565b90600082526000602083015260006040830152606080830152565b91908110156105eb5760051b81013590607e1981360301821215610183570190565b6080813603126101835761074d6104fa565b906107578161037b565b825261076560208201610612565b60208301526040810135604083015260608101359067ffffffffffffffff8211610183576107959136910161063b565b606082015290565b156107a457565b60405162461bcd60e51b815260206004820152601a60248201527f4d756c746963616c6c333a2076616c7565206d69736d617463680000000000006044820152606490fd5b9060206107fa9281815201906101ab565b90565b6044815110610890576004810151810190602081602484019303126101835760248101519067ffffffffffffffff821161018357019080604383011215610183576024820151916108506105658461061f565b91838352604484830101116101835761088c92610874916044602085019101610188565b60405162461bcd60e51b8152918291600483016107e9565b0390fd5b60405162461bcd60e51b815260206004820152600e60248201526d2932b0b9b7b7103ab735b737bbb760911b6044820152606490fdfea2646970667358221220ec83d386b3435687277403c9d4c2c62a16d1c87e47c9aa0287cdee092b282a9f64736f6c63430008120033";

type Multicall3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Multicall3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall3__factory extends ContractFactory {
  constructor(...args: Multicall3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Multicall3";
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall3> {
    return super.deploy(overrides || {}) as Promise<Multicall3>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall3 {
    return super.attach(address) as Multicall3;
  }
  override connect(signer: Signer): Multicall3__factory {
    return super.connect(signer) as Multicall3__factory;
  }
  static readonly contractName: "Multicall3";

  public readonly contractName: "Multicall3";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall3Interface {
    return new utils.Interface(_abi) as Multicall3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall3 {
    return new Contract(address, _abi, signerOrProvider) as Multicall3;
  }
}
