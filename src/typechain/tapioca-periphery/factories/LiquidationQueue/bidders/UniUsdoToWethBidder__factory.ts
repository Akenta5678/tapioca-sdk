/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  UniUsdoToWethBidder,
  UniUsdoToWethBidderInterface,
} from "../../../LiquidationQueue/bidders/UniUsdoToWethBidder";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ISwapper",
        name: "uniV2Swapper_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_wethAssetId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_old",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_new",
        type: "address",
      },
    ],
    name: "UniV2SwapperUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "claimOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISingularity",
        name: "singularity",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenInId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "getInputAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISingularity",
        name: "singularity",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenInId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "getOutputAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISwapper",
        name: "_swapper",
        type: "address",
      },
    ],
    name: "setUniswapSwapper",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ISingularity",
        name: "singularity",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenInId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
      {
        internalType: "bool",
        name: "direct",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "renounce",
        type: "bool",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "univ2Swapper",
    outputs: [
      {
        internalType: "contract ISwapper",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080346100ab57601f61171938819003918201601f19168301916001600160401b038311848410176100b05780849260409485528339810103126100ab5780516001600160a01b03811691908290036100ab576020015160008054336001600160a01b03199182168117835560405194927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a3600254161760025560035561165290816100c78239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c90816306fdde03146111b257508063078dfbe71461109c5780634e71e0c814610ff05780635dd82b3614610bbe57806385267a0114610b955780638da5cb5b14610b6e578063b691d78c146103f6578063b6aebf3614610380578063e30c3978146103575763fef744fa1461008f57600080fd5b346103545761009d36611244565b5050604051636c3d8b8f60e01b8152602094936001600160a01b0391908216908681600481855afa90811561030e57839188918891610319575b506004604051809481936386c8e21d60e01b8352165afa90811561030e5790879187916102dd575b509161010e6004938714611394565b60405163de40657760e01b815292839182905afa908115610276578291879187916102b0575b506064600354956040519586938492638eb22cdd60e01b845289600485015260248401528a6044840152165afa918215610276578592610281575b50600254169160405193633d9545e960e11b85526004850152602484015283604484015283606484015260016084840152600160a484015261014092838160c481865afa93841561027657918693916101ef95938794610247575b50506060848401510152604051808095819463071e388d60e51b835260048301611555565b03915afa91821561023b5791610209575b50604051908152f35b90508181813d8311610234575b610220818361135e565b8101031261022f575138610200565b600080fd5b503d610216565b604051903d90823e3d90fd5b610267929450803d1061026f575b61025f818361135e565b8101906113fe565b9138806101ca565b503d610255565b6040513d87823e3d90fd5b9091508581813d83116102a9575b610299818361135e565b8101031261022f5751903861016f565b503d61028f565b6102d09150823d84116102d6575b6102c8818361135e565b8101906113d2565b38610134565b503d6102be565b82819392503d8311610307575b6102f4818361135e565b8101031261022f5751869061010e6100ff565b503d6102ea565b6040513d88823e3d90fd5b92505081813d831161034d575b610330818361135e565b8101031261034957866103438492611380565b386100d7565b8580fd5b503d610326565b80fd5b50346103545780600319360112610354576001546040516001600160a01b039091168152602090f35b5034610354576020366003190112610354576004356001600160a01b03818116918290036103f2576103b68184541633146112a9565b816002549182167f1226a5d51aea8884fdf5761c8e63e98532d3eedcc0a3d56ebe98e3080fcf96dd8580a36001600160a01b0319161760025580f35b8280fd5b50346103545761040536611244565b604051636c3d8b8f60e01b808252919591949293926001600160a01b039092169190602081600481865afa9081156109f0578891610b34575b50604051631192124760e11b81526001600160a01b039190911690602081600481855afa908115610961578991610aef575b5060249160209161048b906001600160a01b03161515611575565b6040519283809263473ec51560e11b82528760048301525afa9081156109f0578891610ab5575b5015610a7d5760405163de40657760e01b815293602085600481865afa9485156109f0578895610a5c575b5060405163c23ea21f60e01b815295602087600481875afa968715610961578997610a3a575b5060209060046040518096819382525afa9283156109f05788936109fb575b506040516386c8e21d60e01b815292602090849060049082906001600160a01b03165afa9283156109f05788936109b8575b50610560838314611394565b6001600160a01b03861633036109895787968061096c575b5050600254604051638eb22cdd60e01b81526004810183905260248101859052604481018990526001600160a01b03918216929091602090839060649082908a165afa91821561096157899261092d575b506001600160a01b0386163b1561092957604051630208d92960e11b81523060048201526024810193909352604483015260648201528681608481836001600160a01b0389165af1801561091e576108ee575b50600354604051630cf35bdd60e41b8082526004820184905291938892916080816024816001600160a01b038b165afa9081156108c05784916108cb575b50604051928352600483018690526080836024816001600160a01b038b165afa9081156108c0576020938592610887575b506040516106c29161069c82611342565b60028252604036878401376106b0826115e9565b6001600160a01b03909116905261160c565b6001600160a01b039182169052604051638eb22cdd60e01b815260048101869052602481019290925260448201849052909586916064918391165afa91821561084257819261084f575b600254604051633d9545e960e11b81526004810192909252602482019490945260006044820152606481019290925260016084830181905260a4830152909250610140916001600160a01b03169082848060c481015b0381855afa9182156108425760409561079d956101c4958495610823575b5050865163efa84c6d60e01b8152978896879560048701906114e9565b6101448501526001600160a01b03166101648401526101a06101848401526101a483018290525af19081156108185782916107de575b602082604051908152f35b90506040813d604011610810575b816107f96040938361135e565b8101031261080c576020915051386107d3565b5080fd5b3d91506107ec565b6040513d84823e3d90fd5b61083a929550803d1061026f5761025f818361135e565b923880610780565b50604051903d90823e3d90fd5b9150506020833d60201161087f575b8161086b6020938361135e565b8101031261022f578561076293519161070c565b3d915061085e565b6106c29192506108ae9060803d6080116108b9575b6108a6818361135e565b8101906115b0565b50509050919061068b565b503d61089c565b6040513d86823e3d90fd5b6108e4915060803d6080116108b9576108a6818361135e565b505090503861065a565b67ffffffffffffffff819792971161090a57604052943861061c565b634e487b7160e01b82526041600452602482fd5b6040513d89823e3d90fd5b8880fd5b9091506020813d602011610959575b816109496020938361135e565b81010312610929575190386105c9565b3d915061093c565b6040513d8b823e3d90fd5b8192975090602091810103126109855735943880610578565b8680fd5b60405162461bcd60e51b81526020600482015260076024820152666f6e6c79204c5160c81b6044820152606490fd5b9092506020813d6020116109e8575b816109d46020938361135e565b810103126109e457519138610554565b8780fd5b3d91506109c7565b6040513d8a823e3d90fd5b92506020833d602011610a32575b81610a166020938361135e565b810103126109e4576020610a2b600494611380565b9350610522565b3d9150610a09565b6020919750610a5590823d84116102d6576102c8818361135e565b9690610503565b610a7691955060203d6020116102d6576102c8818361135e565b93386104dd565b60405162461bcd60e51b815260206004820152601060248201526f13585c9ad95d081b9bdd081d985b1a5960821b6044820152606490fd5b90506020813d602011610ae7575b81610ad06020938361135e565b810103126109e457610ae1906113f1565b386104b2565b3d9150610ac3565b90506020813d602011610b2c575b81610b0a6020938361135e565b810103126109295760249161048b610b23602093611380565b92505091610470565b3d9150610afd565b90506020813d602011610b66575b81610b4f6020938361135e565b810103126109e457610b6090611380565b3861043e565b3d9150610b42565b5034610354578060031936011261035457546040516001600160a01b039091168152602090f35b50346103545780600319360112610354576002546040516001600160a01b039091168152602090f35b503461035457610bcd36611244565b5050604051636c3d8b8f60e01b8082526020959492936001600160a01b0393909290841691908781600481865afa90811561091e57859189918991610fb9575b50600460405180948193631192124760e11b8352165afa801561091e5785908890610f81575b610c409250161515611575565b6040519081528681600481855afa90811561030e5784929188918891610f48575b506004604051809581936386c8e21d60e01b8352165afa91821561030e579087918793610f15575b50610c98836004949514611394565b60405163de40657760e01b815292839182905afa908115610276579083918691610ef8575b50169160035493604051630cf35bdd60e41b9081815284600482015260809182826024818a5afa918215610961578992610ed5575b5060405190815287600482015282816024818a5afa928315610961579185918b9594938b94610eac575b5050604051610d4c91610d2e82611342565b600282526040368884013783610d43836115e9565b9116905261160c565b91169052606460405180968193638eb22cdd60e01b835287600484015260248301528960448301525afa928315610276578593610e77575b5090610dd491600254169260405180938192633d9545e960e11b83526101409788956004850160a091949360019360c0830196835260208301526000604083015260608201528260808201520152565b0381855afa9283156108c05791610e0c939186938693610e58575b50506040518080958194630b7ecdc960e31b835260048301611555565b03915afa91821561023b578092610e28575b5050604051908152f35b9091508282813d8311610e51575b610e40818361135e565b810103126103545750513880610e1e565b503d610e36565b610e6f929350803d1061026f5761025f818361135e565b903880610def565b9092508581813d8311610ea5575b610e8f818361135e565b81010312610ea1575191610dd4610d84565b8480fd5b503d610e85565b610d4c9294509081610ec992903d106108b9576108a6818361135e565b50509050929038610d1c565b610eed919250833d85116108b9576108a6818361135e565b505090509038610cf2565b610f0f9150873d89116102d6576102c8818361135e565b38610cbd565b8281939294503d8311610f41575b610f2d818361135e565b810103126103495751908690610c98610c89565b503d610f23565b9293505081813d8311610f7a575b610f60818361135e565b81010312610349579086610f748593611380565b38610c61565b503d610f56565b50508781813d8311610fb2575b610f98818361135e565b810103126109855784610fad610c4092611380565b610c33565b503d610f8e565b92505081813d8311610fe9575b610fd0818361135e565b810103126109855787610fe38692611380565b38610c0d565b503d610fc6565b50346103545780600319360112610354576001546001600160a01b039081811633819003611058578084549384167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08680a36001600160a01b03199283161783551660015580f35b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e65726044820152fd5b5034610354576060366003190112610354576001600160a01b03600435818116908190036103f25760243580151581036111ae57604435908115158203610ea1576110eb8486541633146112a9565b1561119057811590811591611188575b501561114b578083549283167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08580a36bffffffffffffffffffffffff60a01b8092161782556001541660015580f35b60405162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b6044820152606490fd5b9050386110fb565b5090506bffffffffffffffffffffffff60a01b600154161760015580f35b8380fd5b90503461080c578160031936011261080c576111cd816112f4565b601981526020917f5553444f202d3e20574554482028556e69737761702056322900000000000000838301526040519283918183528351918281850152815b83811061122d57505060408094508284010152601f80199101168101030190f35b80860182015187820160400152869450810161120c565b608060031982011261022f576004356001600160a01b038116810361022f5791602435916044359160643567ffffffffffffffff9283821161022f578060238301121561022f57816004013593841161022f576024848301011161022f576024019190565b156112b057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6040810190811067ffffffffffffffff82111761131057604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761131057604052565b6060810190811067ffffffffffffffff82111761131057604052565b90601f8019910116810190811067ffffffffffffffff82111761131057604052565b51906001600160a01b038216820361022f57565b1561139b57565b60405162461bcd60e51b815260206004820152600f60248201526e1d1bdad95b881b9bdd081d985b1a59608a1b6044820152606490fd5b9081602091031261022f57516001600160a01b038116810361022f5790565b5190811515820361022f57565b80910390610140821261022f5760408051926060840184811067ffffffffffffffff821117611310578083526080821261022f5761143b81611326565b61144484611380565b81526020840151608086015261145b838501611380565b60a0860152606084015160c086015284526080607f1982011261022f578190815161148581611326565b6080850151815260a0850151602082015260c08501518382015260e08501516060820152602086015260ff19011261022f576114de6101208251936114c9856112f4565b6114d661010082016113f1565b8552016113f1565b602083015282015290565b60206040610120926060815160018060a01b03808251168852858201518689015284820151168488015201516060860152606083820151805160808801528481015160a08801528381015160c0880152015160e086015201518051151561010085015201511515910152565b61156281610180936114e9565b6000610160806101408401528201520190565b1561157c57565b60405162461bcd60e51b815260206004820152600c60248201526b1554d113c81b9bdd081cd95d60a21b6044820152606490fd5b919082608091031261022f578151600581101561022f57916115d460208201611380565b9160606115e360408401611380565b92015190565b8051156115f65760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156115f6576040019056fea26469706673582212205d2aded719eb7c3aafa098a033bc3d69ecd359318384a46b87035026cd60c72364736f6c63430008120033";

type UniUsdoToWethBidderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniUsdoToWethBidderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniUsdoToWethBidder__factory extends ContractFactory {
  constructor(...args: UniUsdoToWethBidderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "UniUsdoToWethBidder";
  }

  override deploy(
    uniV2Swapper_: PromiseOrValue<string>,
    _wethAssetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UniUsdoToWethBidder> {
    return super.deploy(
      uniV2Swapper_,
      _wethAssetId,
      overrides || {}
    ) as Promise<UniUsdoToWethBidder>;
  }
  override getDeployTransaction(
    uniV2Swapper_: PromiseOrValue<string>,
    _wethAssetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      uniV2Swapper_,
      _wethAssetId,
      overrides || {}
    );
  }
  override attach(address: string): UniUsdoToWethBidder {
    return super.attach(address) as UniUsdoToWethBidder;
  }
  override connect(signer: Signer): UniUsdoToWethBidder__factory {
    return super.connect(signer) as UniUsdoToWethBidder__factory;
  }
  static readonly contractName: "UniUsdoToWethBidder";

  public readonly contractName: "UniUsdoToWethBidder";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniUsdoToWethBidderInterface {
    return new utils.Interface(_abi) as UniUsdoToWethBidderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniUsdoToWethBidder {
    return new Contract(address, _abi, signerOrProvider) as UniUsdoToWethBidder;
  }
}
