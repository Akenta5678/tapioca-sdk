/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type RebaseStruct = {
  elastic: PromiseOrValue<BigNumberish>;
  base: PromiseOrValue<BigNumberish>;
};

export type RebaseStructOutput = [BigNumber, BigNumber] & {
  elastic: BigNumber;
  base: BigNumber;
};

export declare namespace MagnetarV2Operations {
  export type MarketInfoStruct = {
    collateral: PromiseOrValue<string>;
    collateralId: PromiseOrValue<BigNumberish>;
    asset: PromiseOrValue<string>;
    assetId: PromiseOrValue<BigNumberish>;
    oracle: PromiseOrValue<string>;
    oracleData: PromiseOrValue<BytesLike>;
    totalCollateralShare: PromiseOrValue<BigNumberish>;
    userCollateralShare: PromiseOrValue<BigNumberish>;
    totalBorrow: RebaseStruct;
    userBorrowPart: PromiseOrValue<BigNumberish>;
    currentExchangeRate: PromiseOrValue<BigNumberish>;
    spotExchangeRate: PromiseOrValue<BigNumberish>;
    oracleExchangeRate: PromiseOrValue<BigNumberish>;
    totalBorrowCap: PromiseOrValue<BigNumberish>;
  };

  export type MarketInfoStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    RebaseStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    collateral: string;
    collateralId: BigNumber;
    asset: string;
    assetId: BigNumber;
    oracle: string;
    oracleData: string;
    totalCollateralShare: BigNumber;
    userCollateralShare: BigNumber;
    totalBorrow: RebaseStructOutput;
    userBorrowPart: BigNumber;
    currentExchangeRate: BigNumber;
    spotExchangeRate: BigNumber;
    oracleExchangeRate: BigNumber;
    totalBorrowCap: BigNumber;
  };

  export type BigBangInfoStruct = {
    market: MagnetarV2Operations.MarketInfoStruct;
    accrueInfo: IBigBang.AccrueInfoStruct;
  };

  export type BigBangInfoStructOutput = [
    MagnetarV2Operations.MarketInfoStructOutput,
    IBigBang.AccrueInfoStructOutput
  ] & {
    market: MagnetarV2Operations.MarketInfoStructOutput;
    accrueInfo: IBigBang.AccrueInfoStructOutput;
  };

  export type SingularityInfoStruct = {
    market: MagnetarV2Operations.MarketInfoStruct;
    totalAsset: RebaseStruct;
    userAssetFraction: PromiseOrValue<BigNumberish>;
    accrueInfo: ISingularity.AccrueInfoStruct;
  };

  export type SingularityInfoStructOutput = [
    MagnetarV2Operations.MarketInfoStructOutput,
    RebaseStructOutput,
    BigNumber,
    ISingularity.AccrueInfoStructOutput
  ] & {
    market: MagnetarV2Operations.MarketInfoStructOutput;
    totalAsset: RebaseStructOutput;
    userAssetFraction: BigNumber;
    accrueInfo: ISingularity.AccrueInfoStructOutput;
  };
}

export declare namespace IBigBang {
  export type AccrueInfoStruct = {
    debtRate: PromiseOrValue<BigNumberish>;
    lastAccrued: PromiseOrValue<BigNumberish>;
  };

  export type AccrueInfoStructOutput = [BigNumber, BigNumber] & {
    debtRate: BigNumber;
    lastAccrued: BigNumber;
  };
}

export declare namespace MagnetarV2ActionsData {
  export type CallStruct = {
    id: PromiseOrValue<BigNumberish>;
    target: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    allowFailure: PromiseOrValue<boolean>;
    call: PromiseOrValue<BytesLike>;
  };

  export type CallStructOutput = [
    number,
    string,
    BigNumber,
    boolean,
    string
  ] & {
    id: number;
    target: string;
    value: BigNumber;
    allowFailure: boolean;
    call: string;
  };

  export type ResultStruct = {
    success: PromiseOrValue<boolean>;
    returnData: PromiseOrValue<BytesLike>;
  };

  export type ResultStructOutput = [boolean, string] & {
    success: boolean;
    returnData: string;
  };
}

export declare namespace ISingularity {
  export type AccrueInfoStruct = {
    interestPerSecond: PromiseOrValue<BigNumberish>;
    lastAccrued: PromiseOrValue<BigNumberish>;
    feesEarnedFraction: PromiseOrValue<BigNumberish>;
  };

  export type AccrueInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    interestPerSecond: BigNumber;
    lastAccrued: BigNumber;
    feesEarnedFraction: BigNumber;
  };
}

export interface MagnetarV2Interface extends utils.Interface {
  functions: {
    "bigBangMarketInfo(address,address[])": FunctionFragment;
    "burst((uint16,address,uint256,bool,bytes)[])": FunctionFragment;
    "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)": FunctionFragment;
    "depositAndAddAsset(address,address,uint256,bool,bool)": FunctionFragment;
    "depositAndRepay(address,address,uint256,uint256,bool,bool)": FunctionFragment;
    "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)": FunctionFragment;
    "getAmountForAssetFraction(address,uint256)": FunctionFragment;
    "getAmountForBorrowPart(address,uint256)": FunctionFragment;
    "getCollateralAmountForShare(address,uint256)": FunctionFragment;
    "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)": FunctionFragment;
    "mintAndLend(address,address,address,uint256,uint256,bool,bool)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeAssetAndRepay(address,address,address,uint256,uint256,uint256,bool,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "singularityMarketInfo(address,address[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bigBangMarketInfo"
      | "bigBangMarketInfo(address,address[])"
      | "burst"
      | "burst((uint16,address,uint256,bool,bytes)[])"
      | "depositAddCollateralAndBorrow"
      | "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)"
      | "depositAndAddAsset"
      | "depositAndAddAsset(address,address,uint256,bool,bool)"
      | "depositAndRepay"
      | "depositAndRepay(address,address,uint256,uint256,bool,bool)"
      | "depositRepayAndRemoveCollateral"
      | "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)"
      | "getAmountForAssetFraction"
      | "getAmountForAssetFraction(address,uint256)"
      | "getAmountForBorrowPart"
      | "getAmountForBorrowPart(address,uint256)"
      | "getCollateralAmountForShare"
      | "getCollateralAmountForShare(address,uint256)"
      | "getCollateralSharesForBorrowPart"
      | "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"
      | "mintAndLend"
      | "mintAndLend(address,address,address,uint256,uint256,bool,bool)"
      | "owner"
      | "owner()"
      | "removeAssetAndRepay"
      | "removeAssetAndRepay(address,address,address,uint256,uint256,uint256,bool,bytes)"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "singularityMarketInfo"
      | "singularityMarketInfo(address,address[])"
      | "transferOwnership"
      | "transferOwnership(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bigBangMarketInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bigBangMarketInfo(address,address[])",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burst",
    values: [MagnetarV2ActionsData.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burst((uint16,address,uint256,bool,bytes)[])",
    values: [MagnetarV2ActionsData.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAddCollateralAndBorrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndAddAsset",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndAddAsset(address,address,uint256,bool,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndRepay",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndRepay(address,address,uint256,uint256,bool,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRepayAndRemoveCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountForAssetFraction",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountForAssetFraction(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountForBorrowPart",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountForBorrowPart(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralAmountForShare",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralAmountForShare(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralSharesForBorrowPart",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndLend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndLend(address,address,address,uint256,uint256,bool,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAssetAndRepay",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetAndRepay(address,address,address,uint256,uint256,uint256,bool,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "singularityMarketInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "singularityMarketInfo(address,address[])",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "bigBangMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBangMarketInfo(address,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burst", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burst((uint16,address,uint256,bool,bytes)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAddCollateralAndBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndAddAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndAddAsset(address,address,uint256,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndRepay(address,address,uint256,uint256,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRepayAndRemoveCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountForAssetFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountForAssetFraction(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountForBorrowPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountForBorrowPart(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralAmountForShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralAmountForShare(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralSharesForBorrowPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndLend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndLend(address,address,address,uint256,uint256,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetAndRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetAndRepay(address,address,address,uint256,uint256,uint256,bool,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityMarketInfo(address,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface MagnetarV2 extends BaseContract {
  contractName: "MagnetarV2";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MagnetarV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bigBangMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[MagnetarV2Operations.BigBangInfoStructOutput[]]>;

    "bigBangMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[MagnetarV2Operations.BigBangInfoStructOutput[]]>;

    burst(
      calls: MagnetarV2ActionsData.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "burst((uint16,address,uint256,bool,bytes)[])"(
      calls: MagnetarV2ActionsData.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAddCollateralAndBorrow(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAndAddAsset(
      singularity: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositAndAddAsset(address,address,uint256,bool,bool)"(
      singularity: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAndRepay(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositAndRepay(address,address,uint256,uint256,bool,bool)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositRepayAndRemoveCollateral(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAmountForAssetFraction(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "getAmountForAssetFraction(address,uint256)"(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getAmountForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "getAmountForBorrowPart(address,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getCollateralAmountForShare(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "getCollateralAmountForShare(address,uint256)"(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getCollateralSharesForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralShares: BigNumber }>;

    "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralShares: BigNumber }>;

    mintAndLend(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintAndLend(address,address,address,uint256,uint256,bool,bool)"(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeAssetAndRepay(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      removeShare: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralShare: PromiseOrValue<BigNumberish>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeAssetAndRepay(address,address,address,uint256,uint256,uint256,bool,bytes)"(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      removeShare: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralShare: PromiseOrValue<BigNumberish>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    singularityMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[MagnetarV2Operations.SingularityInfoStructOutput[]]>;

    "singularityMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[MagnetarV2Operations.SingularityInfoStructOutput[]]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bigBangMarketInfo(
    who: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MagnetarV2Operations.BigBangInfoStructOutput[]>;

  "bigBangMarketInfo(address,address[])"(
    who: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MagnetarV2Operations.BigBangInfoStructOutput[]>;

  burst(
    calls: MagnetarV2ActionsData.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "burst((uint16,address,uint256,bool,bytes)[])"(
    calls: MagnetarV2ActionsData.CallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAddCollateralAndBorrow(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    extractFromSender: PromiseOrValue<boolean>,
    deposit: PromiseOrValue<boolean>,
    withdraw: PromiseOrValue<boolean>,
    withdrawData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)"(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    extractFromSender: PromiseOrValue<boolean>,
    deposit: PromiseOrValue<boolean>,
    withdraw: PromiseOrValue<boolean>,
    withdrawData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAndAddAsset(
    singularity: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    deposit_: PromiseOrValue<boolean>,
    extractFromSender: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositAndAddAsset(address,address,uint256,bool,bool)"(
    singularity: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    deposit_: PromiseOrValue<boolean>,
    extractFromSender: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAndRepay(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    repayAmount: PromiseOrValue<BigNumberish>,
    deposit: PromiseOrValue<boolean>,
    extractFromSender: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositAndRepay(address,address,uint256,uint256,bool,bool)"(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    repayAmount: PromiseOrValue<BigNumberish>,
    deposit: PromiseOrValue<boolean>,
    extractFromSender: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositRepayAndRemoveCollateral(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    repayAmount: PromiseOrValue<BigNumberish>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    deposit: PromiseOrValue<boolean>,
    withdraw: PromiseOrValue<boolean>,
    extractFromSender: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)"(
    market: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    depositAmount: PromiseOrValue<BigNumberish>,
    repayAmount: PromiseOrValue<BigNumberish>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    deposit: PromiseOrValue<boolean>,
    withdraw: PromiseOrValue<boolean>,
    extractFromSender: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAmountForAssetFraction(
    singularity: PromiseOrValue<string>,
    fraction: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountForAssetFraction(address,uint256)"(
    singularity: PromiseOrValue<string>,
    fraction: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountForBorrowPart(
    market: PromiseOrValue<string>,
    borrowPart: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAmountForBorrowPart(address,uint256)"(
    market: PromiseOrValue<string>,
    borrowPart: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralAmountForShare(
    market: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCollateralAmountForShare(address,uint256)"(
    market: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralSharesForBorrowPart(
    market: PromiseOrValue<string>,
    borrowPart: PromiseOrValue<BigNumberish>,
    liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
    exchangeRatePrecision: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"(
    market: PromiseOrValue<string>,
    borrowPart: PromiseOrValue<BigNumberish>,
    liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
    exchangeRatePrecision: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintAndLend(
    singularity: PromiseOrValue<string>,
    bingBang: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    deposit: PromiseOrValue<boolean>,
    extractFromSender: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintAndLend(address,address,address,uint256,uint256,bool,bool)"(
    singularity: PromiseOrValue<string>,
    bingBang: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    deposit: PromiseOrValue<boolean>,
    extractFromSender: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeAssetAndRepay(
    singularity: PromiseOrValue<string>,
    bingBang: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    removeShare: PromiseOrValue<BigNumberish>,
    repayAmount: PromiseOrValue<BigNumberish>,
    collateralShare: PromiseOrValue<BigNumberish>,
    withdraw: PromiseOrValue<boolean>,
    withdrawData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeAssetAndRepay(address,address,address,uint256,uint256,uint256,bool,bytes)"(
    singularity: PromiseOrValue<string>,
    bingBang: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    removeShare: PromiseOrValue<BigNumberish>,
    repayAmount: PromiseOrValue<BigNumberish>,
    collateralShare: PromiseOrValue<BigNumberish>,
    withdraw: PromiseOrValue<boolean>,
    withdrawData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  singularityMarketInfo(
    who: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MagnetarV2Operations.SingularityInfoStructOutput[]>;

  "singularityMarketInfo(address,address[])"(
    who: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MagnetarV2Operations.SingularityInfoStructOutput[]>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bigBangMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MagnetarV2Operations.BigBangInfoStructOutput[]>;

    "bigBangMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MagnetarV2Operations.BigBangInfoStructOutput[]>;

    burst(
      calls: MagnetarV2ActionsData.CallStruct[],
      overrides?: CallOverrides
    ): Promise<MagnetarV2ActionsData.ResultStructOutput[]>;

    "burst((uint16,address,uint256,bool,bytes)[])"(
      calls: MagnetarV2ActionsData.CallStruct[],
      overrides?: CallOverrides
    ): Promise<MagnetarV2ActionsData.ResultStructOutput[]>;

    depositAddCollateralAndBorrow(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndAddAsset(
      singularity: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAndAddAsset(address,address,uint256,bool,bool)"(
      singularity: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndRepay(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositAndRepay(address,address,uint256,uint256,bool,bool)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositRepayAndRemoveCollateral(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmountForAssetFraction(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountForAssetFraction(address,uint256)"(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountForBorrowPart(address,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralAmountForShare(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateralAmountForShare(address,uint256)"(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralSharesForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAndLend(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintAndLend(address,address,address,uint256,uint256,bool,bool)"(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeAssetAndRepay(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      removeShare: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralShare: PromiseOrValue<BigNumberish>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAssetAndRepay(address,address,address,uint256,uint256,uint256,bool,bytes)"(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      removeShare: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralShare: PromiseOrValue<BigNumberish>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    singularityMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MagnetarV2Operations.SingularityInfoStructOutput[]>;

    "singularityMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MagnetarV2Operations.SingularityInfoStructOutput[]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    bigBangMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bigBangMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burst(
      calls: MagnetarV2ActionsData.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "burst((uint16,address,uint256,bool,bytes)[])"(
      calls: MagnetarV2ActionsData.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAddCollateralAndBorrow(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAndAddAsset(
      singularity: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositAndAddAsset(address,address,uint256,bool,bool)"(
      singularity: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAndRepay(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositAndRepay(address,address,uint256,uint256,bool,bool)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositRepayAndRemoveCollateral(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAmountForAssetFraction(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountForAssetFraction(address,uint256)"(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmountForBorrowPart(address,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralAmountForShare(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateralAmountForShare(address,uint256)"(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralSharesForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAndLend(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintAndLend(address,address,address,uint256,uint256,bool,bool)"(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAssetAndRepay(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      removeShare: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralShare: PromiseOrValue<BigNumberish>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeAssetAndRepay(address,address,address,uint256,uint256,uint256,bool,bytes)"(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      removeShare: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralShare: PromiseOrValue<BigNumberish>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    singularityMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "singularityMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bigBangMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bigBangMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burst(
      calls: MagnetarV2ActionsData.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "burst((uint16,address,uint256,bool,bytes)[])"(
      calls: MagnetarV2ActionsData.CallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAddCollateralAndBorrow(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositAddCollateralAndBorrow(address,address,uint256,uint256,bool,bool,bool,bytes)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      extractFromSender: PromiseOrValue<boolean>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAndAddAsset(
      singularity: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositAndAddAsset(address,address,uint256,bool,bool)"(
      singularity: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAndRepay(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositAndRepay(address,address,uint256,uint256,bool,bool)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositRepayAndRemoveCollateral(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositRepayAndRemoveCollateral(address,address,uint256,uint256,uint256,bool,bool,bool)"(
      market: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      depositAmount: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      withdraw: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAmountForAssetFraction(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountForAssetFraction(address,uint256)"(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmountForBorrowPart(address,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralAmountForShare(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollateralAmountForShare(address,uint256)"(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralSharesForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)"(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintAndLend(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintAndLend(address,address,address,uint256,uint256,bool,bool)"(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      deposit: PromiseOrValue<boolean>,
      extractFromSender: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAssetAndRepay(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      removeShare: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralShare: PromiseOrValue<BigNumberish>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeAssetAndRepay(address,address,address,uint256,uint256,uint256,bool,bytes)"(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      removeShare: PromiseOrValue<BigNumberish>,
      repayAmount: PromiseOrValue<BigNumberish>,
      collateralShare: PromiseOrValue<BigNumberish>,
      withdraw: PromiseOrValue<boolean>,
      withdrawData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    singularityMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "singularityMarketInfo(address,address[])"(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
