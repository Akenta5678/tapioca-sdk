/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  LQSingularityMock,
  LQSingularityMockInterface,
} from "../LQSingularityMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IPenroseMock",
        name: "_penrose",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_assetId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract ILiquidationQueueMock",
        name: "liquidationQueue",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "activationTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minBidAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "feeCollector",
            type: "address",
          },
          {
            internalType: "contract IBidderMock",
            name: "bidExecutionSwapper",
            type: "address",
          },
          {
            internalType: "contract IBidderMock",
            name: "usdoSwapper",
            type: "address",
          },
        ],
        internalType: "struct ILiquidationQueueMock.LiquidationQueueMeta",
        name: "lqMeta",
        type: "tuple",
      },
    ],
    name: "initLq",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c03461007657601f6101e638819003918201601f19168301916001600160401b0383118484101761007b578084926040948552833981010312610076578051906001600160a01b038216820361007657602001519060805260a0526040516101549081610092823960805181505060a051815050f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c63f9b84cb01461002a57600080fd5b3461011a5760c036600319011261011a578160043573ffffffffffffffffffffffffffffffffffffffff8082168092036101125760a036602319011261011257813b156101125763f50f78cd60e01b84526024356004850152604435602485015260643581811680910361011657604485015260843581811680910361011657606485015260a435908116809103610112578383819360c49360848401523060a48401525af18015610107576100de575080f35b67ffffffffffffffff81116100f35760405280f35b634e487b7160e01b82526041600452602482fd5b6040513d84823e3d90fd5b8280fd5b8380fd5b5080fdfea264697066735822122015a7b4d827b2db3951af57b47f65a02e0baa68883c67cc2f8ad6284157fc129464736f6c63430008120033";

type LQSingularityMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LQSingularityMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LQSingularityMock__factory extends ContractFactory {
  constructor(...args: LQSingularityMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "LQSingularityMock";
  }

  override deploy(
    _penrose: PromiseOrValue<string>,
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LQSingularityMock> {
    return super.deploy(
      _penrose,
      _assetId,
      overrides || {}
    ) as Promise<LQSingularityMock>;
  }
  override getDeployTransaction(
    _penrose: PromiseOrValue<string>,
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_penrose, _assetId, overrides || {});
  }
  override attach(address: string): LQSingularityMock {
    return super.attach(address) as LQSingularityMock;
  }
  override connect(signer: Signer): LQSingularityMock__factory {
    return super.connect(signer) as LQSingularityMock__factory;
  }
  static readonly contractName: "LQSingularityMock";

  public readonly contractName: "LQSingularityMock";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LQSingularityMockInterface {
    return new utils.Interface(_abi) as LQSingularityMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LQSingularityMock {
    return new Contract(address, _abi, signerOrProvider) as LQSingularityMock;
  }
}
