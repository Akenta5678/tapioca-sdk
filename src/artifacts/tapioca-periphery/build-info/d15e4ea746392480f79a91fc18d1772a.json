{"id":"d15e4ea746392480f79a91fc18d1772a","_format":"hh-sol-build-info-1","solcVersion":"0.8.18","solcLongVersion":"0.8.18+commit.87f61d96","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"},"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"},"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"},"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title QuoterV2 Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IQuoterV2 {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (\n            uint256 amountOut,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    struct QuoteExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amountIn;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountIn The desired input amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\n        external\n        returns (\n            uint256 amountOut,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256 gasEstimate\n        );\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (\n            uint256 amountIn,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    struct QuoteExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amount;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountOut The desired output amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\n        external\n        returns (\n            uint256 amountIn,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256 gasEstimate\n        );\n}\n"},"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"},"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"},"contracts/interfaces/ISwapper.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\ninterface ISwapper {\r\n    /// @notice returns the possible output amount for input share\r\n    /// @param tokenInId YieldBox asset id\r\n    /// @param shareIn Shares to get the amount for\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    ///     - for Curve, it should contain uint256[] tokenIndexes\r\n    function getOutputAmount(\r\n        uint256 tokenInId,\r\n        uint256 shareIn,\r\n        bytes calldata dexData\r\n    ) external view returns (uint256 amountOut);\r\n\r\n    /// @notice returns necessary input amount for a fixed output amount\r\n    /// @param tokenOutId YieldBox asset id\r\n    /// @param shareOut Shares out to compute the amount for\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    function getInputAmount(\r\n        uint256 tokenOutId,\r\n        uint256 shareOut,\r\n        bytes calldata dexData\r\n    ) external view returns (uint256 amountIn);\r\n\r\n    /// @notice swaps token in with token out\r\n    /// @dev returns both amount and shares\r\n    /// @param tokenInId YieldBox asset id\r\n    /// @param tokenOutId YieldBox asset id\r\n    /// @param shareIn Shares to be swapped\r\n    /// @param to Receiver address\r\n    /// @param amountOutMin Minimum amount to be received\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    ///     - for Curve, it should contain uint256[] tokenIndexes\r\n    function swap(\r\n        uint256 tokenInId,\r\n        uint256 tokenOutId,\r\n        uint256 shareIn,\r\n        address to,\r\n        uint256 amountOutMin,\r\n        bytes calldata dexData\r\n    ) external returns (uint256 amountOut, uint256 shareOut);\r\n}\r\n"},"contracts/Swapper/libraries/FullMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        uint256 twos = denominator & (~denominator + 1);\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"},"contracts/Swapper/libraries/OracleLibrary.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.18;\n\nimport \"./FullMath.sol\";\nimport \"./TickMath.sol\";\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\n\n/// @title Oracle library\n/// @notice Provides functions to integrate with V3 pool oracle\nlibrary OracleLibrary {\n    /// @notice Calculates time-weighted means of tick and liquidity for a given Uniswap V3 pool\n    /// @param pool Address of the pool that we want to observe\n    /// @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\n    /// @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\n    /// @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp\n    function consult(\n        address pool,\n        uint32 secondsAgo\n    )\n        internal\n        view\n        returns (int24 arithmeticMeanTick, uint128 harmonicMeanLiquidity)\n    {\n        require(secondsAgo != 0, \"BP\");\n\n        uint32[] memory secondsAgos = new uint32[](2);\n        secondsAgos[0] = secondsAgo;\n        secondsAgos[1] = 0;\n\n        (\n            int56[] memory tickCumulatives,\n            uint160[] memory secondsPerLiquidityCumulativeX128s\n        ) = IUniswapV3Pool(pool).observe(secondsAgos);\n\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n        uint160 secondsPerLiquidityCumulativesDelta = secondsPerLiquidityCumulativeX128s[\n                1\n            ] - secondsPerLiquidityCumulativeX128s[0];\n\n        arithmeticMeanTick = int24(tickCumulativesDelta / int32(secondsAgo));\n        // Always round to negative infinity\n        if (\n            tickCumulativesDelta < 0 &&\n            (tickCumulativesDelta % int32(secondsAgo) != 0)\n        ) arithmeticMeanTick--;\n\n        // We are multiplying here instead of shifting to ensure that harmonicMeanLiquidity doesn't overflow uint128\n        uint192 secondsAgoX160 = uint192(secondsAgo) * type(uint160).max;\n        harmonicMeanLiquidity = uint128(\n            secondsAgoX160 /\n                (uint192(secondsPerLiquidityCumulativesDelta) << 32)\n        );\n    }\n\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\n    /// @param tick Tick value used to calculate the quote\n    /// @param baseAmount Amount of token to be converted\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\n    function getQuoteAtTick(\n        int24 tick,\n        uint128 baseAmount,\n        address baseToken,\n        address quoteToken\n    ) internal pure returns (uint256 quoteAmount) {\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\n\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\n        if (sqrtRatioX96 <= type(uint128).max) {\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\n        } else {\n            uint256 ratioX128 = FullMath.mulDiv(\n                sqrtRatioX96,\n                sqrtRatioX96,\n                1 << 64\n            );\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\n        }\n    }\n\n    /// @notice Given a pool, it returns the number of seconds ago of the oldest stored observation\n    /// @param pool Address of Uniswap V3 pool that we want to observe\n    /// @return secondsAgo The number of seconds ago of the oldest observation stored for the pool\n    function getOldestObservationSecondsAgo(\n        address pool\n    ) internal view returns (uint32 secondsAgo) {\n        (\n            ,\n            ,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            ,\n            ,\n\n        ) = IUniswapV3Pool(pool).slot0();\n        require(observationCardinality > 0, \"NI\");\n\n        (uint32 observationTimestamp, , , bool initialized) = IUniswapV3Pool(\n            pool\n        ).observations((observationIndex + 1) % observationCardinality);\n\n        // The next index might not be initialized if the cardinality is in the process of increasing\n        // In this case the oldest observation is always in index 0\n        if (!initialized) {\n            (observationTimestamp, , , ) = IUniswapV3Pool(pool).observations(0);\n        }\n\n        secondsAgo = uint32(block.timestamp) - observationTimestamp;\n    }\n\n    /// @notice Given a pool, it returns the tick value as of the start of the current block\n    /// @param pool Address of Uniswap V3 pool\n    /// @return The tick that the pool was in at the start of the current block\n    function getBlockStartingTickAndLiquidity(\n        address pool\n    ) internal view returns (int24, uint128) {\n        (\n            ,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            ,\n            ,\n\n        ) = IUniswapV3Pool(pool).slot0();\n\n        // 2 observations are needed to reliably calculate the block starting tick\n        require(observationCardinality > 1, \"NEO\");\n\n        // If the latest observation occurred in the past, then no tick-changing trades have happened in this block\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\n        // We don't need to check if this observation is initialized - it is guaranteed to be.\n        (\n            uint32 observationTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n\n        ) = IUniswapV3Pool(pool).observations(observationIndex);\n        if (observationTimestamp != uint32(block.timestamp)) {\n            return (tick, IUniswapV3Pool(pool).liquidity());\n        }\n\n        uint256 prevIndex = (uint256(observationIndex) +\n            observationCardinality -\n            1) % observationCardinality;\n        (\n            uint32 prevObservationTimestamp,\n            int56 prevTickCumulative,\n            uint160 prevSecondsPerLiquidityCumulativeX128,\n            bool prevInitialized\n        ) = IUniswapV3Pool(pool).observations(prevIndex);\n\n        require(prevInitialized, \"ONI\");\n\n        uint32 delta = observationTimestamp - prevObservationTimestamp;\n        tick = int24((tickCumulative - prevTickCumulative) / int32(delta));\n        uint128 liquidity = uint128(\n            (uint192(delta) * type(uint160).max) /\n                (uint192(\n                    secondsPerLiquidityCumulativeX128 -\n                        prevSecondsPerLiquidityCumulativeX128\n                ) << 32)\n        );\n        return (tick, liquidity);\n    }\n\n    /// @notice Information for calculating a weighted arithmetic mean tick\n    struct WeightedTickData {\n        int24 tick;\n        uint128 weight;\n    }\n\n    /// @notice Given an array of ticks and weights, calculates the weighted arithmetic mean tick\n    /// @param weightedTickData An array of ticks and weights\n    /// @return weightedArithmeticMeanTick The weighted arithmetic mean tick\n    /// @dev Each entry of `weightedTickData` should represents ticks from pools with the same underlying pool tokens. If they do not,\n    /// extreme care must be taken to ensure that ticks are comparable (including decimal differences).\n    /// @dev Note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price.\n    function getWeightedArithmeticMeanTick(\n        WeightedTickData[] memory weightedTickData\n    ) internal pure returns (int24 weightedArithmeticMeanTick) {\n        // Accumulates the sum of products between each tick and its weight\n        int256 numerator;\n\n        // Accumulates the sum of the weights\n        uint256 denominator;\n\n        // Products fit in 152 bits, so it would take an array of length ~2**104 to overflow this logic\n        for (uint256 i; i < weightedTickData.length; i++) {\n            numerator +=\n                weightedTickData[i].tick *\n                int256(uint256(weightedTickData[i].weight));\n            denominator += weightedTickData[i].weight;\n        }\n\n        weightedArithmeticMeanTick = int24(numerator / int256(denominator));\n        // Always round to negative infinity\n        if (numerator < 0 && (numerator % int256(denominator) != 0))\n            weightedArithmeticMeanTick--;\n    }\n\n    /// @notice Returns the \"synthetic\" tick which represents the price of the first entry in `tokens` in terms of the last\n    /// @dev Useful for calculating relative prices along routes.\n    /// @dev There must be one tick for each pairwise set of tokens.\n    /// @param tokens The token contract addresses\n    /// @param ticks The ticks, representing the price of each token pair in `tokens`\n    /// @return syntheticTick The synthetic tick, representing the relative price of the outermost tokens in `tokens`\n    function getChainedPrice(\n        address[] memory tokens,\n        int24[] memory ticks\n    ) internal pure returns (int256 syntheticTick) {\n        require(tokens.length - 1 == ticks.length, \"DL\");\n        for (uint256 i = 1; i <= ticks.length; i++) {\n            // check the tokens for address sort order, then accumulate the\n            // ticks into the running synthetic tick, ensuring that intermediate tokens \"cancel out\"\n            tokens[i - 1] < tokens[i]\n                ? syntheticTick += ticks[i - 1]\n                : syntheticTick -= ticks[i - 1];\n        }\n    }\n}\n"},"contracts/Swapper/libraries/TickMath.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.18;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO =\n        1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(\n        int24 tick\n    ) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0\n            ? uint256(-int256(tick))\n            : uint256(int256(tick));\n        require(absTick <= uint256(uint24(MAX_TICK)), \"T\");\n\n        uint256 ratio = absTick & 0x1 != 0\n            ? 0xfffcb933bd6fad37aa2d162d1a594001\n            : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0)\n            ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0)\n            ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0)\n            ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0)\n            ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0)\n            ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0)\n            ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0)\n            ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0)\n            ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0)\n            ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0)\n            ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0)\n            ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0)\n            ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0)\n            ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0)\n            ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0)\n            ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0)\n            ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0)\n            ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0)\n            ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0)\n            ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160(\n            (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\n        );\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(\n        uint160 sqrtPriceX96\n    ) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(\n            sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\n            \"R\"\n        );\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24(\n            (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\n        );\n        int24 tickHi = int24(\n            (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\n        );\n\n        tick = tickLow == tickHi\n            ? tickLow\n            : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\n            ? tickHi\n            : tickLow;\n    }\n}\n"},"contracts/Swapper/UniswapV3Swapper.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\r\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\r\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\r\nimport \"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol\";\r\n\r\nimport \"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol\";\r\n\r\nimport \"../interfaces/ISwapper.sol\";\r\nimport \"./libraries/OracleLibrary.sol\";\r\n\r\n/*\r\n\r\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\____        \r\n _\\///////\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\/////////\\\\\\_\\/////\\\\\\///______/\\\\\\///\\\\\\________/\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__       \r\n  _______\\/\\\\\\________/\\\\\\/////////\\\\\\_\\/\\\\\\_______\\/\\\\\\_____\\/\\\\\\_______/\\\\\\/__\\///\\\\\\____/\\\\\\/____________/\\\\\\/////////\\\\\\_      \r\n   _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\/\\\\\\______/\\\\\\______\\//\\\\\\__/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_     \r\n    _______\\/\\\\\\_______\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\/////////________\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \r\n     _______\\/\\\\\\_______\\/\\\\\\/////////\\\\\\_\\/\\\\\\_________________\\/\\\\\\_____\\//\\\\\\______/\\\\\\__\\//\\\\\\____________\\/\\\\\\/////////\\\\\\_   \r\n      _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_________________\\/\\\\\\______\\///\\\\\\__/\\\\\\_____\\///\\\\\\__________\\/\\\\\\_______\\/\\\\\\_  \r\n       _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\____\\///\\\\\\\\\\/________\\////\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_ \r\n        _______\\///________\\///________\\///__\\///______________\\///////////_______\\/////_____________\\/////////__\\///________\\///__\r\n*/\r\n\r\n/// @title UniswapV3 swapper contract\r\ncontract UniswapV3Swapper is ISwapper {\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n    IYieldBox private immutable yieldBox;\r\n    ISwapRouter public immutable swapRouter;\r\n    IUniswapV3Factory public immutable factory;\r\n    address public owner;\r\n\r\n    uint24 public poolFee = 3000;\r\n\r\n    // ************** //\r\n    // *** EVENTS *** //\r\n    // ************** //\r\n    event PoolFee(uint256 _old, uint256 _new);\r\n\r\n    /// @notice creates a new UniswapV3Swapper contract\r\n    constructor(\r\n        IYieldBox _yieldBox,\r\n        ISwapRouter _swapRouter,\r\n        IUniswapV3Factory _factory\r\n    ) {\r\n        yieldBox = _yieldBox;\r\n        swapRouter = _swapRouter;\r\n        factory = _factory;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice sets a new pool fee\r\n    /// @param _newFee the new value\r\n    function setPoolFee(uint24 _newFee) external {\r\n        require(msg.sender == owner, \"UniswapV3Swapper: not authorized\");\r\n        emit PoolFee(poolFee, _newFee);\r\n        poolFee = _newFee;\r\n    }\r\n\r\n    /// @notice returns the possible output amount for input share\r\n    /// @param tokenInId YieldBox asset id\r\n    /// @param shareIn Shares to get the amount for\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    ///     - for Curve, it should contain uint256[] tokenIndexes\r\n    ///     - for UniV3, it should contain uint256 tokenOutId\r\n    function getOutputAmount(\r\n        uint256 tokenInId,\r\n        uint256 shareIn,\r\n        bytes calldata dexData\r\n    ) external view override returns (uint256 amountOut) {\r\n        uint256 tokenOutId = abi.decode(dexData, (uint256));\r\n\r\n        (, address tokenIn, , ) = yieldBox.assets(tokenInId);\r\n        (, address tokenOut, , ) = yieldBox.assets(tokenOutId);\r\n\r\n        uint256 amountIn = yieldBox.toAmount(tokenInId, shareIn, false);\r\n\r\n        address pool = factory.getPool(tokenIn, tokenOut, poolFee);\r\n        (int24 tick, ) = OracleLibrary.consult(pool, 60);\r\n\r\n        amountOut = OracleLibrary.getQuoteAtTick(\r\n            tick,\r\n            uint128(amountIn),\r\n            tokenIn,\r\n            tokenOut\r\n        );\r\n    }\r\n\r\n    /// @notice returns necessary input amount for a fixed output amount\r\n    /// @param tokenOutId YieldBox asset id\r\n    /// @param shareOut Shares out to compute the amount for\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    ///     - for UniV3, it should contain uint256 tokenInId\r\n    function getInputAmount(\r\n        uint256 tokenOutId,\r\n        uint256 shareOut,\r\n        bytes calldata dexData\r\n    ) external view override returns (uint256 amountIn) {\r\n        uint256 tokenInId = abi.decode(dexData, (uint256));\r\n\r\n        (, address tokenIn, , ) = yieldBox.assets(tokenInId);\r\n        (, address tokenOut, , ) = yieldBox.assets(tokenOutId);\r\n\r\n        uint256 amountOut = yieldBox.toAmount(tokenOutId, shareOut, false);\r\n\r\n        address pool = factory.getPool(tokenIn, tokenOut, poolFee);\r\n\r\n        (int24 tick, ) = OracleLibrary.consult(pool, 60);\r\n        amountIn = OracleLibrary.getQuoteAtTick(\r\n            tick,\r\n            uint128(amountOut),\r\n            tokenOut,\r\n            tokenIn\r\n        );\r\n    }\r\n\r\n    /// @notice swaps token in with token out\r\n    /// @dev returns both amount and shares\r\n    /// @param tokenInId YieldBox asset id\r\n    /// @param tokenOutId YieldBox asset id\r\n    /// @param shareIn Shares to be swapped\r\n    /// @param to Receiver address\r\n    /// @param amountOutMin Minimum amount to be received\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    ///     - for Curve, it should contain uint256[] tokenIndexes\r\n    ///     - for UniV3, it should contain uint256 deadline\r\n    function swap(\r\n        uint256 tokenInId,\r\n        uint256 tokenOutId,\r\n        uint256 shareIn,\r\n        address to,\r\n        uint256 amountOutMin,\r\n        bytes calldata dexData\r\n    ) external override returns (uint256 amountOut, uint256 shareOut) {\r\n        (, address tokenIn, , ) = yieldBox.assets(tokenInId);\r\n        (, address tokenOut, , ) = yieldBox.assets(tokenOutId);\r\n\r\n        (uint256 amountIn, ) = yieldBox.withdraw(\r\n            tokenInId,\r\n            address(this),\r\n            address(this),\r\n            0,\r\n            shareIn\r\n        );\r\n\r\n        TransferHelper.safeApprove(tokenIn, address(swapRouter), amountIn);\r\n\r\n        uint256 deadline = abi.decode(dexData, (uint256));\r\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\r\n            .ExactInputSingleParams({\r\n                tokenIn: tokenIn,\r\n                tokenOut: tokenOut,\r\n                fee: poolFee,\r\n                recipient: address(this),\r\n                deadline: deadline,\r\n                amountIn: amountIn,\r\n                amountOutMinimum: amountOutMin,\r\n                sqrtPriceLimitX96: 0\r\n            });\r\n\r\n        amountOut = swapRouter.exactInputSingle(params);\r\n\r\n        IERC20(tokenOut).approve(address(yieldBox), amountOut);\r\n        (, shareOut) = yieldBox.depositAsset(\r\n            tokenOutId,\r\n            address(this),\r\n            to,\r\n            amountOut,\r\n            0\r\n        );\r\n    }\r\n}\r\n"},"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/// @title TokenType\n/// @author BoringCrypto (@Boring_Crypto)\n/// @notice The YieldBox can hold different types of tokens:\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\nenum TokenType {\n    Native,\n    ERC20,\n    ERC721,\n    ERC1155,\n    None\n}\n"},"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"../enums/YieldBoxTokenType.sol\";\n\ninterface IYieldBox {\n    function wrappedNative() external view returns (address wrappedNative);\n\n    function assets(uint256 assetId)\n        external\n        view\n        returns (\n            TokenType tokenType,\n            address contractAddress,\n            address strategy,\n            uint256 tokenId\n        );\n\n    function nativeTokens(uint256 assetId)\n        external\n        view\n        returns (\n            string memory name,\n            string memory symbol,\n            uint8 decimals\n        );\n\n    function owner(uint256 assetId) external view returns (address owner);\n\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\n\n    function setApprovalForAsset(\n        address operator,\n        uint256 assetId,\n        bool approved\n    ) external;\n\n    function depositAsset(\n        uint256 assetId,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n\n    function withdraw(\n        uint256 assetId,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n\n    function transfer(\n        address from,\n        address to,\n        uint256 assetId,\n        uint256 share\n    ) external;\n\n    function batchTransfer(\n        address from,\n        address to,\n        uint256[] calldata assetIds_,\n        uint256[] calldata shares_\n    ) external;\n\n    function transferMultiple(\n        address from,\n        address[] calldata tos,\n        uint256 assetId,\n        uint256[] calldata shares\n    ) external;\n\n    function toShare(\n        uint256 assetId,\n        uint256 amount,\n        bool roundUp\n    ) external view returns (uint256 share);\n\n    function toAmount(\n        uint256 assetId,\n        uint256 share,\n        bool roundUp\n    ) external view returns (uint256 amount);\n}\n"}},"settings":{"viaIR":true,"optimizer":{"enabled":true,"runs":700},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates","devdoc","userdoc"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[77]},"id":78,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"131:70:0","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":77,"linearizedBaseContracts":[77],"name":"IERC20","nameLocation":"212:6:0","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"225:158:0","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":11,"name":"Transfer","nameLocation":"394:8:0","nodeType":"EventDefinition","parameters":{"id":10,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:0","nodeType":"VariableDeclaration","scope":11,"src":"403:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:0","nodeType":"VariableDeclaration","scope":11,"src":"425:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:0","nodeType":"VariableDeclaration","scope":11,"src":"445:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:0"},"src":"388:72:0"},{"anonymous":false,"documentation":{"id":12,"nodeType":"StructuredDocumentation","src":"466:148:0","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":20,"name":"Approval","nameLocation":"625:8:0","nodeType":"EventDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":14,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:0","nodeType":"VariableDeclaration","scope":20,"src":"634:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":16,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:0","nodeType":"VariableDeclaration","scope":20,"src":"657:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":18,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:0","nodeType":"VariableDeclaration","scope":20,"src":"682:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":17,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:0"},"src":"619:78:0"},{"documentation":{"id":21,"nodeType":"StructuredDocumentation","src":"703:66:0","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":26,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:0","nodeType":"FunctionDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"794:2:0"},"returnParameters":{"id":25,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":26,"src":"820:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":23,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:0"},"scope":77,"src":"774:55:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":27,"nodeType":"StructuredDocumentation","src":"835:72:0","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":34,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:0","nodeType":"FunctionDefinition","parameters":{"id":30,"nodeType":"ParameterList","parameters":[{"constant":false,"id":29,"mutability":"mutable","name":"account","nameLocation":"939:7:0","nodeType":"VariableDeclaration","scope":34,"src":"931:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":28,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:0"},"returnParameters":{"id":33,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":34,"src":"971:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":31,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:0"},"scope":77,"src":"912:68:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":35,"nodeType":"StructuredDocumentation","src":"986:202:0","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":44,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:0","nodeType":"FunctionDefinition","parameters":{"id":40,"nodeType":"ParameterList","parameters":[{"constant":false,"id":37,"mutability":"mutable","name":"to","nameLocation":"1219:2:0","nodeType":"VariableDeclaration","scope":44,"src":"1211:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":36,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":39,"mutability":"mutable","name":"amount","nameLocation":"1231:6:0","nodeType":"VariableDeclaration","scope":44,"src":"1223:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":38,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":44,"src":"1257:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":41,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:0"},"scope":77,"src":"1193:70:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":45,"nodeType":"StructuredDocumentation","src":"1269:264:0","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":54,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:0","nodeType":"FunctionDefinition","parameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47,"mutability":"mutable","name":"owner","nameLocation":"1565:5:0","nodeType":"VariableDeclaration","scope":54,"src":"1557:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":46,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":49,"mutability":"mutable","name":"spender","nameLocation":"1580:7:0","nodeType":"VariableDeclaration","scope":54,"src":"1572:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:0"},"returnParameters":{"id":53,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":54,"src":"1612:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:0"},"scope":77,"src":"1538:83:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1627:642:0","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":64,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57,"mutability":"mutable","name":"spender","nameLocation":"2299:7:0","nodeType":"VariableDeclaration","scope":64,"src":"2291:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":56,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":59,"mutability":"mutable","name":"amount","nameLocation":"2316:6:0","nodeType":"VariableDeclaration","scope":64,"src":"2308:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":64,"src":"2342:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":61,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:0"},"scope":77,"src":"2274:74:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":65,"nodeType":"StructuredDocumentation","src":"2354:287:0","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":76,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67,"mutability":"mutable","name":"from","nameLocation":"2685:4:0","nodeType":"VariableDeclaration","scope":76,"src":"2677:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":66,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":69,"mutability":"mutable","name":"to","nameLocation":"2707:2:0","nodeType":"VariableDeclaration","scope":76,"src":"2699:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":68,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":71,"mutability":"mutable","name":"amount","nameLocation":"2727:6:0","nodeType":"VariableDeclaration","scope":76,"src":"2719:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":70,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:72:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":74,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":76,"src":"2758:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":73,"name":"bool","nodeType":"ElementaryTypeName","src":"2758:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2757:6:0"},"scope":77,"src":"2646:118:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":78,"src":"202:2564:0","usedErrors":[]}],"src":"106:2661:0"},"id":0},"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol","exportedSymbols":{"IUniswapV3Factory":[160]},"id":161,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":79,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IUniswapV3Factory","contractDependencies":[],"contractKind":"interface","documentation":{"id":80,"nodeType":"StructuredDocumentation","src":"71:163:1","text":"@title The interface for the Uniswap V3 Factory\n @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees"},"fullyImplemented":false,"id":160,"linearizedBaseContracts":[160],"name":"IUniswapV3Factory","nameLocation":"244:17:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":81,"nodeType":"StructuredDocumentation","src":"268:185:1","text":"@notice Emitted when the owner of the factory is changed\n @param oldOwner The owner before the owner was changed\n @param newOwner The owner after the owner was changed"},"eventSelector":"b532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c","id":87,"name":"OwnerChanged","nameLocation":"464:12:1","nodeType":"EventDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":83,"indexed":true,"mutability":"mutable","name":"oldOwner","nameLocation":"493:8:1","nodeType":"VariableDeclaration","scope":87,"src":"477:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":82,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":85,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"519:8:1","nodeType":"VariableDeclaration","scope":87,"src":"503:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"503:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"476:52:1"},"src":"458:71:1"},{"anonymous":false,"documentation":{"id":88,"nodeType":"StructuredDocumentation","src":"535:421:1","text":"@notice Emitted when a pool is created\n @param token0 The first token of the pool by address sort order\n @param token1 The second token of the pool by address sort order\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks\n @param pool The address of the created pool"},"eventSelector":"783cca1c0412dd0d695e784568c96da2e9c22ff989357a2e8b1d9b2b4e6b7118","id":100,"name":"PoolCreated","nameLocation":"967:11:1","nodeType":"EventDefinition","parameters":{"id":99,"nodeType":"ParameterList","parameters":[{"constant":false,"id":90,"indexed":true,"mutability":"mutable","name":"token0","nameLocation":"1004:6:1","nodeType":"VariableDeclaration","scope":100,"src":"988:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":89,"name":"address","nodeType":"ElementaryTypeName","src":"988:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":92,"indexed":true,"mutability":"mutable","name":"token1","nameLocation":"1036:6:1","nodeType":"VariableDeclaration","scope":100,"src":"1020:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":94,"indexed":true,"mutability":"mutable","name":"fee","nameLocation":"1067:3:1","nodeType":"VariableDeclaration","scope":100,"src":"1052:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":93,"name":"uint24","nodeType":"ElementaryTypeName","src":"1052:6:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":96,"indexed":false,"mutability":"mutable","name":"tickSpacing","nameLocation":"1086:11:1","nodeType":"VariableDeclaration","scope":100,"src":"1080:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":95,"name":"int24","nodeType":"ElementaryTypeName","src":"1080:5:1","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":98,"indexed":false,"mutability":"mutable","name":"pool","nameLocation":"1115:4:1","nodeType":"VariableDeclaration","scope":100,"src":"1107:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"1107:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"978:147:1"},"src":"961:165:1"},{"anonymous":false,"documentation":{"id":101,"nodeType":"StructuredDocumentation","src":"1132:275:1","text":"@notice Emitted when a new fee amount is enabled for pool creation via the factory\n @param fee The enabled fee, denominated in hundredths of a bip\n @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee"},"eventSelector":"c66a3fdf07232cdd185febcc6579d408c241b47ae2f9907d84be655141eeaecc","id":107,"name":"FeeAmountEnabled","nameLocation":"1418:16:1","nodeType":"EventDefinition","parameters":{"id":106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103,"indexed":true,"mutability":"mutable","name":"fee","nameLocation":"1450:3:1","nodeType":"VariableDeclaration","scope":107,"src":"1435:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":102,"name":"uint24","nodeType":"ElementaryTypeName","src":"1435:6:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":105,"indexed":true,"mutability":"mutable","name":"tickSpacing","nameLocation":"1469:11:1","nodeType":"VariableDeclaration","scope":107,"src":"1455:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":104,"name":"int24","nodeType":"ElementaryTypeName","src":"1455:5:1","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"1434:47:1"},"src":"1412:70:1"},{"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"1488:163:1","text":"@notice Returns the current owner of the factory\n @dev Can be changed by the current owner via setOwner\n @return The address of the factory owner"},"functionSelector":"8da5cb5b","id":113,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1665:5:1","nodeType":"FunctionDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[],"src":"1670:2:1"},"returnParameters":{"id":112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":111,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":113,"src":"1696:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":110,"name":"address","nodeType":"ElementaryTypeName","src":"1696:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1695:9:1"},"scope":160,"src":"1656:49:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":114,"nodeType":"StructuredDocumentation","src":"1711:348:1","text":"@notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n @return The tick spacing"},"functionSelector":"22afcccb","id":121,"implemented":false,"kind":"function","modifiers":[],"name":"feeAmountTickSpacing","nameLocation":"2073:20:1","nodeType":"FunctionDefinition","parameters":{"id":117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":116,"mutability":"mutable","name":"fee","nameLocation":"2101:3:1","nodeType":"VariableDeclaration","scope":121,"src":"2094:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":115,"name":"uint24","nodeType":"ElementaryTypeName","src":"2094:6:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"2093:12:1"},"returnParameters":{"id":120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":119,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":121,"src":"2129:5:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":118,"name":"int24","nodeType":"ElementaryTypeName","src":"2129:5:1","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"2128:7:1"},"scope":160,"src":"2064:72:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"2142:471:1","text":"@notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n @param tokenA The contract address of either token0 or token1\n @param tokenB The contract address of the other token\n @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n @return pool The pool address"},"functionSelector":"1698ee82","id":133,"implemented":false,"kind":"function","modifiers":[],"name":"getPool","nameLocation":"2627:7:1","nodeType":"FunctionDefinition","parameters":{"id":129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"mutability":"mutable","name":"tokenA","nameLocation":"2652:6:1","nodeType":"VariableDeclaration","scope":133,"src":"2644:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":123,"name":"address","nodeType":"ElementaryTypeName","src":"2644:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":126,"mutability":"mutable","name":"tokenB","nameLocation":"2676:6:1","nodeType":"VariableDeclaration","scope":133,"src":"2668:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":125,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":128,"mutability":"mutable","name":"fee","nameLocation":"2699:3:1","nodeType":"VariableDeclaration","scope":133,"src":"2692:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":127,"name":"uint24","nodeType":"ElementaryTypeName","src":"2692:6:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"2634:74:1"},"returnParameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":131,"mutability":"mutable","name":"pool","nameLocation":"2740:4:1","nodeType":"VariableDeclaration","scope":133,"src":"2732:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":130,"name":"address","nodeType":"ElementaryTypeName","src":"2732:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2731:14:1"},"scope":160,"src":"2618:128:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":134,"nodeType":"StructuredDocumentation","src":"2752:554:1","text":"@notice Creates a pool for the given two tokens and fee\n @param tokenA One of the two tokens in the desired pool\n @param tokenB The other of the two tokens in the desired pool\n @param fee The desired fee for the pool\n @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n are invalid.\n @return pool The address of the newly created pool"},"functionSelector":"a1671295","id":145,"implemented":false,"kind":"function","modifiers":[],"name":"createPool","nameLocation":"3320:10:1","nodeType":"FunctionDefinition","parameters":{"id":141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":136,"mutability":"mutable","name":"tokenA","nameLocation":"3348:6:1","nodeType":"VariableDeclaration","scope":145,"src":"3340:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":135,"name":"address","nodeType":"ElementaryTypeName","src":"3340:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":138,"mutability":"mutable","name":"tokenB","nameLocation":"3372:6:1","nodeType":"VariableDeclaration","scope":145,"src":"3364:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":137,"name":"address","nodeType":"ElementaryTypeName","src":"3364:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":140,"mutability":"mutable","name":"fee","nameLocation":"3395:3:1","nodeType":"VariableDeclaration","scope":145,"src":"3388:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":139,"name":"uint24","nodeType":"ElementaryTypeName","src":"3388:6:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"3330:74:1"},"returnParameters":{"id":144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":143,"mutability":"mutable","name":"pool","nameLocation":"3431:4:1","nodeType":"VariableDeclaration","scope":145,"src":"3423:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":142,"name":"address","nodeType":"ElementaryTypeName","src":"3423:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3422:14:1"},"scope":160,"src":"3311:126:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":146,"nodeType":"StructuredDocumentation","src":"3443:144:1","text":"@notice Updates the owner of the factory\n @dev Must be called by the current owner\n @param _owner The new owner of the factory"},"functionSelector":"13af4035","id":151,"implemented":false,"kind":"function","modifiers":[],"name":"setOwner","nameLocation":"3601:8:1","nodeType":"FunctionDefinition","parameters":{"id":149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":148,"mutability":"mutable","name":"_owner","nameLocation":"3618:6:1","nodeType":"VariableDeclaration","scope":151,"src":"3610:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":147,"name":"address","nodeType":"ElementaryTypeName","src":"3610:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3609:16:1"},"returnParameters":{"id":150,"nodeType":"ParameterList","parameters":[],"src":"3634:0:1"},"scope":160,"src":"3592:43:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":152,"nodeType":"StructuredDocumentation","src":"3641:326:1","text":"@notice Enables a fee amount with the given tickSpacing\n @dev Fee amounts may never be removed once enabled\n @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount"},"functionSelector":"8a7c195f","id":159,"implemented":false,"kind":"function","modifiers":[],"name":"enableFeeAmount","nameLocation":"3981:15:1","nodeType":"FunctionDefinition","parameters":{"id":157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":154,"mutability":"mutable","name":"fee","nameLocation":"4004:3:1","nodeType":"VariableDeclaration","scope":159,"src":"3997:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":153,"name":"uint24","nodeType":"ElementaryTypeName","src":"3997:6:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":156,"mutability":"mutable","name":"tickSpacing","nameLocation":"4015:11:1","nodeType":"VariableDeclaration","scope":159,"src":"4009:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":155,"name":"int24","nodeType":"ElementaryTypeName","src":"4009:5:1","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"3996:31:1"},"returnParameters":{"id":158,"nodeType":"ParameterList","parameters":[],"src":"4036:0:1"},"scope":160,"src":"3972:65:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":161,"src":"234:3805:1","usedErrors":[]}],"src":"45:3995:1"},"id":1},"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol","exportedSymbols":{"IUniswapV3Pool":[182],"IUniswapV3PoolActions":[292],"IUniswapV3PoolDerivedState":[323],"IUniswapV3PoolEvents":[442],"IUniswapV3PoolImmutables":[482],"IUniswapV3PoolOwnerActions":[508],"IUniswapV3PoolState":[616]},"id":183,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":162,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:2"},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol","file":"./pool/IUniswapV3PoolImmutables.sol","id":163,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":483,"src":"71:45:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol","file":"./pool/IUniswapV3PoolState.sol","id":164,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":617,"src":"117:40:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol","file":"./pool/IUniswapV3PoolDerivedState.sol","id":165,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":324,"src":"158:47:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol","file":"./pool/IUniswapV3PoolActions.sol","id":166,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":293,"src":"206:42:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol","file":"./pool/IUniswapV3PoolOwnerActions.sol","id":167,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":509,"src":"249:47:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol","file":"./pool/IUniswapV3PoolEvents.sol","id":168,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":183,"sourceUnit":443,"src":"297:41:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":170,"name":"IUniswapV3PoolImmutables","nameLocations":["637:24:2"],"nodeType":"IdentifierPath","referencedDeclaration":482,"src":"637:24:2"},"id":171,"nodeType":"InheritanceSpecifier","src":"637:24:2"},{"baseName":{"id":172,"name":"IUniswapV3PoolState","nameLocations":["667:19:2"],"nodeType":"IdentifierPath","referencedDeclaration":616,"src":"667:19:2"},"id":173,"nodeType":"InheritanceSpecifier","src":"667:19:2"},{"baseName":{"id":174,"name":"IUniswapV3PoolDerivedState","nameLocations":["692:26:2"],"nodeType":"IdentifierPath","referencedDeclaration":323,"src":"692:26:2"},"id":175,"nodeType":"InheritanceSpecifier","src":"692:26:2"},{"baseName":{"id":176,"name":"IUniswapV3PoolActions","nameLocations":["724:21:2"],"nodeType":"IdentifierPath","referencedDeclaration":292,"src":"724:21:2"},"id":177,"nodeType":"InheritanceSpecifier","src":"724:21:2"},{"baseName":{"id":178,"name":"IUniswapV3PoolOwnerActions","nameLocations":["751:26:2"],"nodeType":"IdentifierPath","referencedDeclaration":508,"src":"751:26:2"},"id":179,"nodeType":"InheritanceSpecifier","src":"751:26:2"},{"baseName":{"id":180,"name":"IUniswapV3PoolEvents","nameLocations":["783:20:2"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"783:20:2"},"id":181,"nodeType":"InheritanceSpecifier","src":"783:20:2"}],"canonicalName":"IUniswapV3Pool","contractDependencies":[],"contractKind":"interface","documentation":{"id":169,"nodeType":"StructuredDocumentation","src":"340:265:2","text":"@title The interface for a Uniswap V3 Pool\n @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n to the ERC20 specification\n @dev The pool interface is broken up into many smaller pieces"},"fullyImplemented":false,"id":182,"linearizedBaseContracts":[182,442,508,292,323,616,482],"name":"IUniswapV3Pool","nameLocation":"615:14:2","nodeType":"ContractDefinition","nodes":[],"scope":183,"src":"605:203:2","usedErrors":[]}],"src":"45:764:2"},"id":2},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol","exportedSymbols":{"IUniswapV3SwapCallback":[196]},"id":197,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":184,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IUniswapV3SwapCallback","contractDependencies":[],"contractKind":"interface","documentation":{"id":185,"nodeType":"StructuredDocumentation","src":"71:144:3","text":"@title Callback for IUniswapV3PoolActions#swap\n @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface"},"fullyImplemented":false,"id":196,"linearizedBaseContracts":[196],"name":"IUniswapV3SwapCallback","nameLocation":"225:22:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":186,"nodeType":"StructuredDocumentation","src":"254:898:3","text":"@notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call"},"functionSelector":"fa461e33","id":195,"implemented":false,"kind":"function","modifiers":[],"name":"uniswapV3SwapCallback","nameLocation":"1166:21:3","nodeType":"FunctionDefinition","parameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":188,"mutability":"mutable","name":"amount0Delta","nameLocation":"1204:12:3","nodeType":"VariableDeclaration","scope":195,"src":"1197:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":187,"name":"int256","nodeType":"ElementaryTypeName","src":"1197:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":190,"mutability":"mutable","name":"amount1Delta","nameLocation":"1233:12:3","nodeType":"VariableDeclaration","scope":195,"src":"1226:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":189,"name":"int256","nodeType":"ElementaryTypeName","src":"1226:6:3","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":192,"mutability":"mutable","name":"data","nameLocation":"1270:4:3","nodeType":"VariableDeclaration","scope":195,"src":"1255:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":191,"name":"bytes","nodeType":"ElementaryTypeName","src":"1255:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1187:93:3"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"1289:0:3"},"scope":196,"src":"1157:133:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":197,"src":"215:1077:3","usedErrors":[]}],"src":"45:1248:3"},"id":3},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol","exportedSymbols":{"IUniswapV3PoolActions":[292]},"id":293,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":198,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IUniswapV3PoolActions","contractDependencies":[],"contractKind":"interface","documentation":{"id":199,"nodeType":"StructuredDocumentation","src":"71:102:4","text":"@title Permissionless pool actions\n @notice Contains pool methods that can be called by anyone"},"fullyImplemented":false,"id":292,"linearizedBaseContracts":[292],"name":"IUniswapV3PoolActions","nameLocation":"183:21:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":200,"nodeType":"StructuredDocumentation","src":"211:206:4","text":"@notice Sets the initial price for the pool\n @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96"},"functionSelector":"f637731d","id":205,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"431:10:4","nodeType":"FunctionDefinition","parameters":{"id":203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":202,"mutability":"mutable","name":"sqrtPriceX96","nameLocation":"450:12:4","nodeType":"VariableDeclaration","scope":205,"src":"442:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":201,"name":"uint160","nodeType":"ElementaryTypeName","src":"442:7:4","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"441:22:4"},"returnParameters":{"id":204,"nodeType":"ParameterList","parameters":[],"src":"472:0:4"},"scope":292,"src":"422:51:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":206,"nodeType":"StructuredDocumentation","src":"479:1029:4","text":"@notice Adds liquidity for the given recipient/tickLower/tickUpper position\n @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n on tickLower, tickUpper, the amount of liquidity, and the current price.\n @param recipient The address for which the liquidity will be created\n @param tickLower The lower tick of the position in which to add liquidity\n @param tickUpper The upper tick of the position in which to add liquidity\n @param amount The amount of liquidity to mint\n @param data Any data that should be passed through to the callback\n @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"},"functionSelector":"3c8a7d8d","id":223,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"1522:4:4","nodeType":"FunctionDefinition","parameters":{"id":217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":208,"mutability":"mutable","name":"recipient","nameLocation":"1544:9:4","nodeType":"VariableDeclaration","scope":223,"src":"1536:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":207,"name":"address","nodeType":"ElementaryTypeName","src":"1536:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":210,"mutability":"mutable","name":"tickLower","nameLocation":"1569:9:4","nodeType":"VariableDeclaration","scope":223,"src":"1563:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":209,"name":"int24","nodeType":"ElementaryTypeName","src":"1563:5:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":212,"mutability":"mutable","name":"tickUpper","nameLocation":"1594:9:4","nodeType":"VariableDeclaration","scope":223,"src":"1588:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":211,"name":"int24","nodeType":"ElementaryTypeName","src":"1588:5:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":214,"mutability":"mutable","name":"amount","nameLocation":"1621:6:4","nodeType":"VariableDeclaration","scope":223,"src":"1613:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":213,"name":"uint128","nodeType":"ElementaryTypeName","src":"1613:7:4","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":216,"mutability":"mutable","name":"data","nameLocation":"1652:4:4","nodeType":"VariableDeclaration","scope":223,"src":"1637:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":215,"name":"bytes","nodeType":"ElementaryTypeName","src":"1637:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1526:136:4"},"returnParameters":{"id":222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":219,"mutability":"mutable","name":"amount0","nameLocation":"1689:7:4","nodeType":"VariableDeclaration","scope":223,"src":"1681:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":218,"name":"uint256","nodeType":"ElementaryTypeName","src":"1681:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":221,"mutability":"mutable","name":"amount1","nameLocation":"1706:7:4","nodeType":"VariableDeclaration","scope":223,"src":"1698:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":220,"name":"uint256","nodeType":"ElementaryTypeName","src":"1698:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1680:34:4"},"scope":292,"src":"1513:202:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":224,"nodeType":"StructuredDocumentation","src":"1721:1053:4","text":"@notice Collects tokens owed to a position\n @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n @param recipient The address which should receive the fees collected\n @param tickLower The lower tick of the position for which to collect fees\n @param tickUpper The upper tick of the position for which to collect fees\n @param amount0Requested How much token0 should be withdrawn from the fees owed\n @param amount1Requested How much token1 should be withdrawn from the fees owed\n @return amount0 The amount of fees collected in token0\n @return amount1 The amount of fees collected in token1"},"functionSelector":"4f1eb3d8","id":241,"implemented":false,"kind":"function","modifiers":[],"name":"collect","nameLocation":"2788:7:4","nodeType":"FunctionDefinition","parameters":{"id":235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":226,"mutability":"mutable","name":"recipient","nameLocation":"2813:9:4","nodeType":"VariableDeclaration","scope":241,"src":"2805:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":225,"name":"address","nodeType":"ElementaryTypeName","src":"2805:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":228,"mutability":"mutable","name":"tickLower","nameLocation":"2838:9:4","nodeType":"VariableDeclaration","scope":241,"src":"2832:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":227,"name":"int24","nodeType":"ElementaryTypeName","src":"2832:5:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":230,"mutability":"mutable","name":"tickUpper","nameLocation":"2863:9:4","nodeType":"VariableDeclaration","scope":241,"src":"2857:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":229,"name":"int24","nodeType":"ElementaryTypeName","src":"2857:5:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":232,"mutability":"mutable","name":"amount0Requested","nameLocation":"2890:16:4","nodeType":"VariableDeclaration","scope":241,"src":"2882:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":231,"name":"uint128","nodeType":"ElementaryTypeName","src":"2882:7:4","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":234,"mutability":"mutable","name":"amount1Requested","nameLocation":"2924:16:4","nodeType":"VariableDeclaration","scope":241,"src":"2916:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":233,"name":"uint128","nodeType":"ElementaryTypeName","src":"2916:7:4","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2795:151:4"},"returnParameters":{"id":240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":237,"mutability":"mutable","name":"amount0","nameLocation":"2973:7:4","nodeType":"VariableDeclaration","scope":241,"src":"2965:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":236,"name":"uint128","nodeType":"ElementaryTypeName","src":"2965:7:4","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":239,"mutability":"mutable","name":"amount1","nameLocation":"2990:7:4","nodeType":"VariableDeclaration","scope":241,"src":"2982:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":238,"name":"uint128","nodeType":"ElementaryTypeName","src":"2982:7:4","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2964:34:4"},"scope":292,"src":"2779:220:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":242,"nodeType":"StructuredDocumentation","src":"3005:631:4","text":"@notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n @dev Fees must be collected separately via a call to #collect\n @param tickLower The lower tick of the position for which to burn liquidity\n @param tickUpper The upper tick of the position for which to burn liquidity\n @param amount How much liquidity to burn\n @return amount0 The amount of token0 sent to the recipient\n @return amount1 The amount of token1 sent to the recipient"},"functionSelector":"a34123a7","id":255,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"3650:4:4","nodeType":"FunctionDefinition","parameters":{"id":249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":244,"mutability":"mutable","name":"tickLower","nameLocation":"3670:9:4","nodeType":"VariableDeclaration","scope":255,"src":"3664:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":243,"name":"int24","nodeType":"ElementaryTypeName","src":"3664:5:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":246,"mutability":"mutable","name":"tickUpper","nameLocation":"3695:9:4","nodeType":"VariableDeclaration","scope":255,"src":"3689:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":245,"name":"int24","nodeType":"ElementaryTypeName","src":"3689:5:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":248,"mutability":"mutable","name":"amount","nameLocation":"3722:6:4","nodeType":"VariableDeclaration","scope":255,"src":"3714:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":247,"name":"uint128","nodeType":"ElementaryTypeName","src":"3714:7:4","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"3654:80:4"},"returnParameters":{"id":254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":251,"mutability":"mutable","name":"amount0","nameLocation":"3761:7:4","nodeType":"VariableDeclaration","scope":255,"src":"3753:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":250,"name":"uint256","nodeType":"ElementaryTypeName","src":"3753:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":253,"mutability":"mutable","name":"amount1","nameLocation":"3778:7:4","nodeType":"VariableDeclaration","scope":255,"src":"3770:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":252,"name":"uint256","nodeType":"ElementaryTypeName","src":"3770:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3752:34:4"},"scope":292,"src":"3641:146:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":256,"nodeType":"StructuredDocumentation","src":"3793:1015:4","text":"@notice Swap token0 for token1, or token1 for token0\n @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n @param recipient The address to receive the output of the swap\n @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n value after the swap. If one for zero, the price cannot be greater than this value after the swap\n @param data Any data to be passed through to the callback\n @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive"},"functionSelector":"128acb08","id":273,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nameLocation":"4822:4:4","nodeType":"FunctionDefinition","parameters":{"id":267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":258,"mutability":"mutable","name":"recipient","nameLocation":"4844:9:4","nodeType":"VariableDeclaration","scope":273,"src":"4836:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":257,"name":"address","nodeType":"ElementaryTypeName","src":"4836:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":260,"mutability":"mutable","name":"zeroForOne","nameLocation":"4868:10:4","nodeType":"VariableDeclaration","scope":273,"src":"4863:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":259,"name":"bool","nodeType":"ElementaryTypeName","src":"4863:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":262,"mutability":"mutable","name":"amountSpecified","nameLocation":"4895:15:4","nodeType":"VariableDeclaration","scope":273,"src":"4888:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":261,"name":"int256","nodeType":"ElementaryTypeName","src":"4888:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":264,"mutability":"mutable","name":"sqrtPriceLimitX96","nameLocation":"4928:17:4","nodeType":"VariableDeclaration","scope":273,"src":"4920:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":263,"name":"uint160","nodeType":"ElementaryTypeName","src":"4920:7:4","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":266,"mutability":"mutable","name":"data","nameLocation":"4970:4:4","nodeType":"VariableDeclaration","scope":273,"src":"4955:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":265,"name":"bytes","nodeType":"ElementaryTypeName","src":"4955:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4826:154:4"},"returnParameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"mutability":"mutable","name":"amount0","nameLocation":"5006:7:4","nodeType":"VariableDeclaration","scope":273,"src":"4999:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":268,"name":"int256","nodeType":"ElementaryTypeName","src":"4999:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":271,"mutability":"mutable","name":"amount1","nameLocation":"5022:7:4","nodeType":"VariableDeclaration","scope":273,"src":"5015:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":270,"name":"int256","nodeType":"ElementaryTypeName","src":"5015:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"4998:32:4"},"scope":292,"src":"4813:218:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":274,"nodeType":"StructuredDocumentation","src":"5037:657:4","text":"@notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n with 0 amount{0,1} and sending the donation amount(s) from the callback\n @param recipient The address which will receive the token0 and token1 amounts\n @param amount0 The amount of token0 to send\n @param amount1 The amount of token1 to send\n @param data Any data to be passed through to the callback"},"functionSelector":"490e6cbc","id":285,"implemented":false,"kind":"function","modifiers":[],"name":"flash","nameLocation":"5708:5:4","nodeType":"FunctionDefinition","parameters":{"id":283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":276,"mutability":"mutable","name":"recipient","nameLocation":"5731:9:4","nodeType":"VariableDeclaration","scope":285,"src":"5723:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":275,"name":"address","nodeType":"ElementaryTypeName","src":"5723:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":278,"mutability":"mutable","name":"amount0","nameLocation":"5758:7:4","nodeType":"VariableDeclaration","scope":285,"src":"5750:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":277,"name":"uint256","nodeType":"ElementaryTypeName","src":"5750:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":280,"mutability":"mutable","name":"amount1","nameLocation":"5783:7:4","nodeType":"VariableDeclaration","scope":285,"src":"5775:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":279,"name":"uint256","nodeType":"ElementaryTypeName","src":"5775:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":282,"mutability":"mutable","name":"data","nameLocation":"5815:4:4","nodeType":"VariableDeclaration","scope":285,"src":"5800:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":281,"name":"bytes","nodeType":"ElementaryTypeName","src":"5800:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5713:112:4"},"returnParameters":{"id":284,"nodeType":"ParameterList","parameters":[],"src":"5834:0:4"},"scope":292,"src":"5699:136:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":286,"nodeType":"StructuredDocumentation","src":"5841:367:4","text":"@notice Increase the maximum number of price and liquidity observations that this pool will store\n @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n the input observationCardinalityNext.\n @param observationCardinalityNext The desired minimum number of observations for the pool to store"},"functionSelector":"32148f67","id":291,"implemented":false,"kind":"function","modifiers":[],"name":"increaseObservationCardinalityNext","nameLocation":"6222:34:4","nodeType":"FunctionDefinition","parameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":288,"mutability":"mutable","name":"observationCardinalityNext","nameLocation":"6264:26:4","nodeType":"VariableDeclaration","scope":291,"src":"6257:33:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":287,"name":"uint16","nodeType":"ElementaryTypeName","src":"6257:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"6256:35:4"},"returnParameters":{"id":290,"nodeType":"ParameterList","parameters":[],"src":"6300:0:4"},"scope":292,"src":"6213:88:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":293,"src":"173:6130:4","usedErrors":[]}],"src":"45:6259:4"},"id":4},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol","exportedSymbols":{"IUniswapV3PoolDerivedState":[323]},"id":324,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":294,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IUniswapV3PoolDerivedState","contractDependencies":[],"contractKind":"interface","documentation":{"id":295,"nodeType":"StructuredDocumentation","src":"71:222:5","text":"@title Pool state that is not stored\n @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n blockchain. The functions here may have variable gas costs."},"fullyImplemented":false,"id":323,"linearizedBaseContracts":[323],"name":"IUniswapV3PoolDerivedState","nameLocation":"303:26:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":296,"nodeType":"StructuredDocumentation","src":"336:1045:5","text":"@notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n you must call it with secondsAgos = [3600, 0].\n @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n timestamp"},"functionSelector":"883bdbfd","id":308,"implemented":false,"kind":"function","modifiers":[],"name":"observe","nameLocation":"1395:7:5","nodeType":"FunctionDefinition","parameters":{"id":300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":299,"mutability":"mutable","name":"secondsAgos","nameLocation":"1421:11:5","nodeType":"VariableDeclaration","scope":308,"src":"1403:29:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_calldata_ptr","typeString":"uint32[]"},"typeName":{"baseType":{"id":297,"name":"uint32","nodeType":"ElementaryTypeName","src":"1403:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":298,"nodeType":"ArrayTypeName","src":"1403:8:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_storage_ptr","typeString":"uint32[]"}},"visibility":"internal"}],"src":"1402:31:5"},"returnParameters":{"id":307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":303,"mutability":"mutable","name":"tickCumulatives","nameLocation":"1496:15:5","nodeType":"VariableDeclaration","scope":308,"src":"1481:30:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int56_$dyn_memory_ptr","typeString":"int56[]"},"typeName":{"baseType":{"id":301,"name":"int56","nodeType":"ElementaryTypeName","src":"1481:5:5","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"id":302,"nodeType":"ArrayTypeName","src":"1481:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_int56_$dyn_storage_ptr","typeString":"int56[]"}},"visibility":"internal"},{"constant":false,"id":306,"mutability":"mutable","name":"secondsPerLiquidityCumulativeX128s","nameLocation":"1530:34:5","nodeType":"VariableDeclaration","scope":308,"src":"1513:51:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint160_$dyn_memory_ptr","typeString":"uint160[]"},"typeName":{"baseType":{"id":304,"name":"uint160","nodeType":"ElementaryTypeName","src":"1513:7:5","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":305,"nodeType":"ArrayTypeName","src":"1513:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_uint160_$dyn_storage_ptr","typeString":"uint160[]"}},"visibility":"internal"}],"src":"1480:85:5"},"scope":323,"src":"1386:180:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"1572:771:5","text":"@notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n snapshot is taken and the second snapshot is taken.\n @param tickLower The lower tick of the range\n @param tickUpper The upper tick of the range\n @return tickCumulativeInside The snapshot of the tick accumulator for the range\n @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n @return secondsInside The snapshot of seconds per liquidity for the range"},"functionSelector":"a38807f2","id":322,"implemented":false,"kind":"function","modifiers":[],"name":"snapshotCumulativesInside","nameLocation":"2357:25:5","nodeType":"FunctionDefinition","parameters":{"id":314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"tickLower","nameLocation":"2389:9:5","nodeType":"VariableDeclaration","scope":322,"src":"2383:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":310,"name":"int24","nodeType":"ElementaryTypeName","src":"2383:5:5","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":313,"mutability":"mutable","name":"tickUpper","nameLocation":"2406:9:5","nodeType":"VariableDeclaration","scope":322,"src":"2400:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":312,"name":"int24","nodeType":"ElementaryTypeName","src":"2400:5:5","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"2382:34:5"},"returnParameters":{"id":321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":316,"mutability":"mutable","name":"tickCumulativeInside","nameLocation":"2483:20:5","nodeType":"VariableDeclaration","scope":322,"src":"2477:26:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":315,"name":"int56","nodeType":"ElementaryTypeName","src":"2477:5:5","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":318,"mutability":"mutable","name":"secondsPerLiquidityInsideX128","nameLocation":"2525:29:5","nodeType":"VariableDeclaration","scope":322,"src":"2517:37:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":317,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:5","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":320,"mutability":"mutable","name":"secondsInside","nameLocation":"2575:13:5","nodeType":"VariableDeclaration","scope":322,"src":"2568:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":319,"name":"uint32","nodeType":"ElementaryTypeName","src":"2568:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2463:135:5"},"scope":323,"src":"2348:251:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":324,"src":"293:2308:5","usedErrors":[]}],"src":"45:2557:5"},"id":5},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol","exportedSymbols":{"IUniswapV3PoolEvents":[442]},"id":443,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":325,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IUniswapV3PoolEvents","contractDependencies":[],"contractKind":"interface","documentation":{"id":326,"nodeType":"StructuredDocumentation","src":"71:88:6","text":"@title Events emitted by a pool\n @notice Contains all events emitted by the pool"},"fullyImplemented":true,"id":442,"linearizedBaseContracts":[442],"name":"IUniswapV3PoolEvents","nameLocation":"169:20:6","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":327,"nodeType":"StructuredDocumentation","src":"196:344:6","text":"@notice Emitted exactly once by a pool when #initialize is first called on the pool\n @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"},"eventSelector":"98636036cb66a9c19a37435efc1e90142190214e8abeb821bdba3f2990dd4c95","id":333,"name":"Initialize","nameLocation":"551:10:6","nodeType":"EventDefinition","parameters":{"id":332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":329,"indexed":false,"mutability":"mutable","name":"sqrtPriceX96","nameLocation":"570:12:6","nodeType":"VariableDeclaration","scope":333,"src":"562:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":328,"name":"uint160","nodeType":"ElementaryTypeName","src":"562:7:6","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":331,"indexed":false,"mutability":"mutable","name":"tick","nameLocation":"590:4:6","nodeType":"VariableDeclaration","scope":333,"src":"584:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":330,"name":"int24","nodeType":"ElementaryTypeName","src":"584:5:6","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"561:34:6"},"src":"545:51:6"},{"anonymous":false,"documentation":{"id":334,"nodeType":"StructuredDocumentation","src":"602:551:6","text":"@notice Emitted when liquidity is minted for a given position\n @param sender The address that minted the liquidity\n @param owner The owner of the position and recipient of any minted liquidity\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity minted to the position range\n @param amount0 How much token0 was required for the minted liquidity\n @param amount1 How much token1 was required for the minted liquidity"},"eventSelector":"7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde","id":350,"name":"Mint","nameLocation":"1164:4:6","nodeType":"EventDefinition","parameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"1186:6:6","nodeType":"VariableDeclaration","scope":350,"src":"1178:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":335,"name":"address","nodeType":"ElementaryTypeName","src":"1178:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":338,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"1218:5:6","nodeType":"VariableDeclaration","scope":350,"src":"1202:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"1202:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":340,"indexed":true,"mutability":"mutable","name":"tickLower","nameLocation":"1247:9:6","nodeType":"VariableDeclaration","scope":350,"src":"1233:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":339,"name":"int24","nodeType":"ElementaryTypeName","src":"1233:5:6","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":342,"indexed":true,"mutability":"mutable","name":"tickUpper","nameLocation":"1280:9:6","nodeType":"VariableDeclaration","scope":350,"src":"1266:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":341,"name":"int24","nodeType":"ElementaryTypeName","src":"1266:5:6","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":344,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1307:6:6","nodeType":"VariableDeclaration","scope":350,"src":"1299:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":343,"name":"uint128","nodeType":"ElementaryTypeName","src":"1299:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":346,"indexed":false,"mutability":"mutable","name":"amount0","nameLocation":"1331:7:6","nodeType":"VariableDeclaration","scope":350,"src":"1323:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":345,"name":"uint256","nodeType":"ElementaryTypeName","src":"1323:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":348,"indexed":false,"mutability":"mutable","name":"amount1","nameLocation":"1356:7:6","nodeType":"VariableDeclaration","scope":350,"src":"1348:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":347,"name":"uint256","nodeType":"ElementaryTypeName","src":"1348:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1168:201:6"},"src":"1158:212:6"},{"anonymous":false,"documentation":{"id":351,"nodeType":"StructuredDocumentation","src":"1376:493:6","text":"@notice Emitted when fees are collected by the owner of a position\n @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n @param owner The owner of the position for which fees are collected\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount0 The amount of token0 fees collected\n @param amount1 The amount of token1 fees collected"},"eventSelector":"70935338e69775456a85ddef226c395fb668b63fa0115f5f20610b388e6ca9c0","id":365,"name":"Collect","nameLocation":"1880:7:6","nodeType":"EventDefinition","parameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":353,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"1913:5:6","nodeType":"VariableDeclaration","scope":365,"src":"1897:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":352,"name":"address","nodeType":"ElementaryTypeName","src":"1897:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":355,"indexed":false,"mutability":"mutable","name":"recipient","nameLocation":"1936:9:6","nodeType":"VariableDeclaration","scope":365,"src":"1928:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":354,"name":"address","nodeType":"ElementaryTypeName","src":"1928:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":357,"indexed":true,"mutability":"mutable","name":"tickLower","nameLocation":"1969:9:6","nodeType":"VariableDeclaration","scope":365,"src":"1955:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":356,"name":"int24","nodeType":"ElementaryTypeName","src":"1955:5:6","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":359,"indexed":true,"mutability":"mutable","name":"tickUpper","nameLocation":"2002:9:6","nodeType":"VariableDeclaration","scope":365,"src":"1988:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":358,"name":"int24","nodeType":"ElementaryTypeName","src":"1988:5:6","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":361,"indexed":false,"mutability":"mutable","name":"amount0","nameLocation":"2029:7:6","nodeType":"VariableDeclaration","scope":365,"src":"2021:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":360,"name":"uint128","nodeType":"ElementaryTypeName","src":"2021:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":363,"indexed":false,"mutability":"mutable","name":"amount1","nameLocation":"2054:7:6","nodeType":"VariableDeclaration","scope":365,"src":"2046:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":362,"name":"uint128","nodeType":"ElementaryTypeName","src":"2046:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1887:180:6"},"src":"1874:194:6"},{"anonymous":false,"documentation":{"id":366,"nodeType":"StructuredDocumentation","src":"2074:523:6","text":"@notice Emitted when a position's liquidity is removed\n @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n @param owner The owner of the position for which liquidity is removed\n @param tickLower The lower tick of the position\n @param tickUpper The upper tick of the position\n @param amount The amount of liquidity to remove\n @param amount0 The amount of token0 withdrawn\n @param amount1 The amount of token1 withdrawn"},"eventSelector":"0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c","id":380,"name":"Burn","nameLocation":"2608:4:6","nodeType":"EventDefinition","parameters":{"id":379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"2638:5:6","nodeType":"VariableDeclaration","scope":380,"src":"2622:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":367,"name":"address","nodeType":"ElementaryTypeName","src":"2622:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":370,"indexed":true,"mutability":"mutable","name":"tickLower","nameLocation":"2667:9:6","nodeType":"VariableDeclaration","scope":380,"src":"2653:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":369,"name":"int24","nodeType":"ElementaryTypeName","src":"2653:5:6","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":372,"indexed":true,"mutability":"mutable","name":"tickUpper","nameLocation":"2700:9:6","nodeType":"VariableDeclaration","scope":380,"src":"2686:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":371,"name":"int24","nodeType":"ElementaryTypeName","src":"2686:5:6","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":374,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2727:6:6","nodeType":"VariableDeclaration","scope":380,"src":"2719:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":373,"name":"uint128","nodeType":"ElementaryTypeName","src":"2719:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":376,"indexed":false,"mutability":"mutable","name":"amount0","nameLocation":"2751:7:6","nodeType":"VariableDeclaration","scope":380,"src":"2743:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":375,"name":"uint256","nodeType":"ElementaryTypeName","src":"2743:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":378,"indexed":false,"mutability":"mutable","name":"amount1","nameLocation":"2776:7:6","nodeType":"VariableDeclaration","scope":380,"src":"2768:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":377,"name":"uint256","nodeType":"ElementaryTypeName","src":"2768:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:177:6"},"src":"2602:188:6"},{"anonymous":false,"documentation":{"id":381,"nodeType":"StructuredDocumentation","src":"2796:600:6","text":"@notice Emitted by the pool for any swaps between token0 and token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the output of the swap\n @param amount0 The delta of the token0 balance of the pool\n @param amount1 The delta of the token1 balance of the pool\n @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n @param liquidity The liquidity of the pool after the swap\n @param tick The log base 1.0001 of price of the pool after the swap"},"eventSelector":"c42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67","id":397,"name":"Swap","nameLocation":"3407:4:6","nodeType":"EventDefinition","parameters":{"id":396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":383,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"3437:6:6","nodeType":"VariableDeclaration","scope":397,"src":"3421:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":382,"name":"address","nodeType":"ElementaryTypeName","src":"3421:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":385,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"3469:9:6","nodeType":"VariableDeclaration","scope":397,"src":"3453:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":384,"name":"address","nodeType":"ElementaryTypeName","src":"3453:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":387,"indexed":false,"mutability":"mutable","name":"amount0","nameLocation":"3495:7:6","nodeType":"VariableDeclaration","scope":397,"src":"3488:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":386,"name":"int256","nodeType":"ElementaryTypeName","src":"3488:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":389,"indexed":false,"mutability":"mutable","name":"amount1","nameLocation":"3519:7:6","nodeType":"VariableDeclaration","scope":397,"src":"3512:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":388,"name":"int256","nodeType":"ElementaryTypeName","src":"3512:6:6","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":391,"indexed":false,"mutability":"mutable","name":"sqrtPriceX96","nameLocation":"3544:12:6","nodeType":"VariableDeclaration","scope":397,"src":"3536:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":390,"name":"uint160","nodeType":"ElementaryTypeName","src":"3536:7:6","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":393,"indexed":false,"mutability":"mutable","name":"liquidity","nameLocation":"3574:9:6","nodeType":"VariableDeclaration","scope":397,"src":"3566:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":392,"name":"uint128","nodeType":"ElementaryTypeName","src":"3566:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":395,"indexed":false,"mutability":"mutable","name":"tick","nameLocation":"3599:4:6","nodeType":"VariableDeclaration","scope":397,"src":"3593:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":394,"name":"int24","nodeType":"ElementaryTypeName","src":"3593:5:6","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"3411:198:6"},"src":"3401:209:6"},{"anonymous":false,"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"3616:562:6","text":"@notice Emitted by the pool for any flashes of token0/token1\n @param sender The address that initiated the swap call, and that received the callback\n @param recipient The address that received the tokens from flash\n @param amount0 The amount of token0 that was flashed\n @param amount1 The amount of token1 that was flashed\n @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee"},"eventSelector":"bdbdb71d7860376ba52b25a5028beea23581364a40522f6bcfb86bb1f2dca633","id":412,"name":"Flash","nameLocation":"4189:5:6","nodeType":"EventDefinition","parameters":{"id":411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"4220:6:6","nodeType":"VariableDeclaration","scope":412,"src":"4204:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":399,"name":"address","nodeType":"ElementaryTypeName","src":"4204:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":402,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"4252:9:6","nodeType":"VariableDeclaration","scope":412,"src":"4236:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":401,"name":"address","nodeType":"ElementaryTypeName","src":"4236:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":404,"indexed":false,"mutability":"mutable","name":"amount0","nameLocation":"4279:7:6","nodeType":"VariableDeclaration","scope":412,"src":"4271:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":403,"name":"uint256","nodeType":"ElementaryTypeName","src":"4271:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":406,"indexed":false,"mutability":"mutable","name":"amount1","nameLocation":"4304:7:6","nodeType":"VariableDeclaration","scope":412,"src":"4296:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":405,"name":"uint256","nodeType":"ElementaryTypeName","src":"4296:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":408,"indexed":false,"mutability":"mutable","name":"paid0","nameLocation":"4329:5:6","nodeType":"VariableDeclaration","scope":412,"src":"4321:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":407,"name":"uint256","nodeType":"ElementaryTypeName","src":"4321:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":410,"indexed":false,"mutability":"mutable","name":"paid1","nameLocation":"4352:5:6","nodeType":"VariableDeclaration","scope":412,"src":"4344:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":409,"name":"uint256","nodeType":"ElementaryTypeName","src":"4344:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4194:169:6"},"src":"4183:181:6"},{"anonymous":false,"documentation":{"id":413,"nodeType":"StructuredDocumentation","src":"4370:451:6","text":"@notice Emitted by the pool for increases to the number of observations that can be stored\n @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n just before a mint/swap/burn.\n @param observationCardinalityNextOld The previous value of the next observation cardinality\n @param observationCardinalityNextNew The updated value of the next observation cardinality"},"eventSelector":"ac49e518f90a358f652e4400164f05a5d8f7e35e7747279bc3a93dbf584e125a","id":419,"name":"IncreaseObservationCardinalityNext","nameLocation":"4832:34:6","nodeType":"EventDefinition","parameters":{"id":418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":415,"indexed":false,"mutability":"mutable","name":"observationCardinalityNextOld","nameLocation":"4883:29:6","nodeType":"VariableDeclaration","scope":419,"src":"4876:36:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":414,"name":"uint16","nodeType":"ElementaryTypeName","src":"4876:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":417,"indexed":false,"mutability":"mutable","name":"observationCardinalityNextNew","nameLocation":"4929:29:6","nodeType":"VariableDeclaration","scope":419,"src":"4922:36:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":416,"name":"uint16","nodeType":"ElementaryTypeName","src":"4922:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"4866:98:6"},"src":"4826:139:6"},{"anonymous":false,"documentation":{"id":420,"nodeType":"StructuredDocumentation","src":"4971:370:6","text":"@notice Emitted when the protocol fee is changed by the pool\n @param feeProtocol0Old The previous value of the token0 protocol fee\n @param feeProtocol1Old The previous value of the token1 protocol fee\n @param feeProtocol0New The updated value of the token0 protocol fee\n @param feeProtocol1New The updated value of the token1 protocol fee"},"eventSelector":"973d8d92bb299f4af6ce49b52a8adb85ae46b9f214c4c4fc06ac77401237b133","id":430,"name":"SetFeeProtocol","nameLocation":"5352:14:6","nodeType":"EventDefinition","parameters":{"id":429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":422,"indexed":false,"mutability":"mutable","name":"feeProtocol0Old","nameLocation":"5373:15:6","nodeType":"VariableDeclaration","scope":430,"src":"5367:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":421,"name":"uint8","nodeType":"ElementaryTypeName","src":"5367:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":424,"indexed":false,"mutability":"mutable","name":"feeProtocol1Old","nameLocation":"5396:15:6","nodeType":"VariableDeclaration","scope":430,"src":"5390:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":423,"name":"uint8","nodeType":"ElementaryTypeName","src":"5390:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":426,"indexed":false,"mutability":"mutable","name":"feeProtocol0New","nameLocation":"5419:15:6","nodeType":"VariableDeclaration","scope":430,"src":"5413:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":425,"name":"uint8","nodeType":"ElementaryTypeName","src":"5413:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":428,"indexed":false,"mutability":"mutable","name":"feeProtocol1New","nameLocation":"5442:15:6","nodeType":"VariableDeclaration","scope":430,"src":"5436:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":427,"name":"uint8","nodeType":"ElementaryTypeName","src":"5436:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"5366:92:6"},"src":"5346:113:6"},{"anonymous":false,"documentation":{"id":431,"nodeType":"StructuredDocumentation","src":"5465:384:6","text":"@notice Emitted when the collected protocol fees are withdrawn by the factory owner\n @param sender The address that collects the protocol fees\n @param recipient The address that receives the collected protocol fees\n @param amount0 The amount of token0 protocol fees that is withdrawn\n @param amount0 The amount of token1 protocol fees that is withdrawn"},"eventSelector":"596b573906218d3411850b26a6b437d6c4522fdb43d2d2386263f86d50b8b151","id":441,"name":"CollectProtocol","nameLocation":"5860:15:6","nodeType":"EventDefinition","parameters":{"id":440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":433,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"5892:6:6","nodeType":"VariableDeclaration","scope":441,"src":"5876:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":432,"name":"address","nodeType":"ElementaryTypeName","src":"5876:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":435,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"5916:9:6","nodeType":"VariableDeclaration","scope":441,"src":"5900:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":434,"name":"address","nodeType":"ElementaryTypeName","src":"5900:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":437,"indexed":false,"mutability":"mutable","name":"amount0","nameLocation":"5935:7:6","nodeType":"VariableDeclaration","scope":441,"src":"5927:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":436,"name":"uint128","nodeType":"ElementaryTypeName","src":"5927:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":439,"indexed":false,"mutability":"mutable","name":"amount1","nameLocation":"5952:7:6","nodeType":"VariableDeclaration","scope":441,"src":"5944:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":438,"name":"uint128","nodeType":"ElementaryTypeName","src":"5944:7:6","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"5875:85:6"},"src":"5854:107:6"}],"scope":443,"src":"159:5804:6","usedErrors":[]}],"src":"45:5919:6"},"id":6},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol","exportedSymbols":{"IUniswapV3PoolImmutables":[482]},"id":483,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":444,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IUniswapV3PoolImmutables","contractDependencies":[],"contractKind":"interface","documentation":{"id":445,"nodeType":"StructuredDocumentation","src":"71:153:7","text":"@title Pool state that never changes\n @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values"},"fullyImplemented":false,"id":482,"linearizedBaseContracts":[482],"name":"IUniswapV3PoolImmutables","nameLocation":"234:24:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":446,"nodeType":"StructuredDocumentation","src":"265:138:7","text":"@notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n @return The contract address"},"functionSelector":"c45a0155","id":451,"implemented":false,"kind":"function","modifiers":[],"name":"factory","nameLocation":"417:7:7","nodeType":"FunctionDefinition","parameters":{"id":447,"nodeType":"ParameterList","parameters":[],"src":"424:2:7"},"returnParameters":{"id":450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":449,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":451,"src":"450:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":448,"name":"address","nodeType":"ElementaryTypeName","src":"450:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"449:9:7"},"scope":482,"src":"408:51:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":452,"nodeType":"StructuredDocumentation","src":"465:113:7","text":"@notice The first of the two tokens of the pool, sorted by address\n @return The token contract address"},"functionSelector":"0dfe1681","id":457,"implemented":false,"kind":"function","modifiers":[],"name":"token0","nameLocation":"592:6:7","nodeType":"FunctionDefinition","parameters":{"id":453,"nodeType":"ParameterList","parameters":[],"src":"598:2:7"},"returnParameters":{"id":456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":455,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":457,"src":"624:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":454,"name":"address","nodeType":"ElementaryTypeName","src":"624:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"623:9:7"},"scope":482,"src":"583:50:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":458,"nodeType":"StructuredDocumentation","src":"639:114:7","text":"@notice The second of the two tokens of the pool, sorted by address\n @return The token contract address"},"functionSelector":"d21220a7","id":463,"implemented":false,"kind":"function","modifiers":[],"name":"token1","nameLocation":"767:6:7","nodeType":"FunctionDefinition","parameters":{"id":459,"nodeType":"ParameterList","parameters":[],"src":"773:2:7"},"returnParameters":{"id":462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":461,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":463,"src":"799:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":460,"name":"address","nodeType":"ElementaryTypeName","src":"799:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"798:9:7"},"scope":482,"src":"758:50:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":464,"nodeType":"StructuredDocumentation","src":"814:84:7","text":"@notice The pool's fee in hundredths of a bip, i.e. 1e-6\n @return The fee"},"functionSelector":"ddca3f43","id":469,"implemented":false,"kind":"function","modifiers":[],"name":"fee","nameLocation":"912:3:7","nodeType":"FunctionDefinition","parameters":{"id":465,"nodeType":"ParameterList","parameters":[],"src":"915:2:7"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":469,"src":"941:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":466,"name":"uint24","nodeType":"ElementaryTypeName","src":"941:6:7","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"940:8:7"},"scope":482,"src":"903:46:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":470,"nodeType":"StructuredDocumentation","src":"955:358:7","text":"@notice The pool tick spacing\n @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n This value is an int24 to avoid casting even though it is always positive.\n @return The tick spacing"},"functionSelector":"d0c93a7c","id":475,"implemented":false,"kind":"function","modifiers":[],"name":"tickSpacing","nameLocation":"1327:11:7","nodeType":"FunctionDefinition","parameters":{"id":471,"nodeType":"ParameterList","parameters":[],"src":"1338:2:7"},"returnParameters":{"id":474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":473,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":475,"src":"1364:5:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":472,"name":"int24","nodeType":"ElementaryTypeName","src":"1364:5:7","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"1363:7:7"},"scope":482,"src":"1318:53:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":476,"nodeType":"StructuredDocumentation","src":"1377:363:7","text":"@notice The maximum amount of position liquidity that can use any tick in the range\n @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n @return The max amount of liquidity per tick"},"functionSelector":"70cf754a","id":481,"implemented":false,"kind":"function","modifiers":[],"name":"maxLiquidityPerTick","nameLocation":"1754:19:7","nodeType":"FunctionDefinition","parameters":{"id":477,"nodeType":"ParameterList","parameters":[],"src":"1773:2:7"},"returnParameters":{"id":480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":479,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":481,"src":"1799:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":478,"name":"uint128","nodeType":"ElementaryTypeName","src":"1799:7:7","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1798:9:7"},"scope":482,"src":"1745:63:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":483,"src":"224:1586:7","usedErrors":[]}],"src":"45:1766:7"},"id":7},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol","exportedSymbols":{"IUniswapV3PoolOwnerActions":[508]},"id":509,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":484,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IUniswapV3PoolOwnerActions","contractDependencies":[],"contractKind":"interface","documentation":{"id":485,"nodeType":"StructuredDocumentation","src":"71:116:8","text":"@title Permissioned pool actions\n @notice Contains pool methods that may only be called by the factory owner"},"fullyImplemented":false,"id":508,"linearizedBaseContracts":[508],"name":"IUniswapV3PoolOwnerActions","nameLocation":"197:26:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":486,"nodeType":"StructuredDocumentation","src":"230:205:8","text":"@notice Set the denominator of the protocol's % share of the fees\n @param feeProtocol0 new protocol fee for token0 of the pool\n @param feeProtocol1 new protocol fee for token1 of the pool"},"functionSelector":"8206a4d1","id":493,"implemented":false,"kind":"function","modifiers":[],"name":"setFeeProtocol","nameLocation":"449:14:8","nodeType":"FunctionDefinition","parameters":{"id":491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":488,"mutability":"mutable","name":"feeProtocol0","nameLocation":"470:12:8","nodeType":"VariableDeclaration","scope":493,"src":"464:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":487,"name":"uint8","nodeType":"ElementaryTypeName","src":"464:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":490,"mutability":"mutable","name":"feeProtocol1","nameLocation":"490:12:8","nodeType":"VariableDeclaration","scope":493,"src":"484:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":489,"name":"uint8","nodeType":"ElementaryTypeName","src":"484:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"463:40:8"},"returnParameters":{"id":492,"nodeType":"ParameterList","parameters":[],"src":"512:0:8"},"scope":508,"src":"440:73:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":494,"nodeType":"StructuredDocumentation","src":"519:483:8","text":"@notice Collect the protocol fee accrued to the pool\n @param recipient The address to which collected protocol fees should be sent\n @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n @return amount0 The protocol fee collected in token0\n @return amount1 The protocol fee collected in token1"},"functionSelector":"85b66729","id":507,"implemented":false,"kind":"function","modifiers":[],"name":"collectProtocol","nameLocation":"1016:15:8","nodeType":"FunctionDefinition","parameters":{"id":501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":496,"mutability":"mutable","name":"recipient","nameLocation":"1049:9:8","nodeType":"VariableDeclaration","scope":507,"src":"1041:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":495,"name":"address","nodeType":"ElementaryTypeName","src":"1041:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":498,"mutability":"mutable","name":"amount0Requested","nameLocation":"1076:16:8","nodeType":"VariableDeclaration","scope":507,"src":"1068:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":497,"name":"uint128","nodeType":"ElementaryTypeName","src":"1068:7:8","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":500,"mutability":"mutable","name":"amount1Requested","nameLocation":"1110:16:8","nodeType":"VariableDeclaration","scope":507,"src":"1102:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":499,"name":"uint128","nodeType":"ElementaryTypeName","src":"1102:7:8","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1031:101:8"},"returnParameters":{"id":506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":503,"mutability":"mutable","name":"amount0","nameLocation":"1159:7:8","nodeType":"VariableDeclaration","scope":507,"src":"1151:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":502,"name":"uint128","nodeType":"ElementaryTypeName","src":"1151:7:8","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":505,"mutability":"mutable","name":"amount1","nameLocation":"1176:7:8","nodeType":"VariableDeclaration","scope":507,"src":"1168:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":504,"name":"uint128","nodeType":"ElementaryTypeName","src":"1168:7:8","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1150:34:8"},"scope":508,"src":"1007:178:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":509,"src":"187:1000:8","usedErrors":[]}],"src":"45:1143:8"},"id":8},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol","exportedSymbols":{"IUniswapV3PoolState":[616]},"id":617,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":510,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IUniswapV3PoolState","contractDependencies":[],"contractKind":"interface","documentation":{"id":511,"nodeType":"StructuredDocumentation","src":"71:169:9","text":"@title Pool state that can change\n @notice These methods compose the pool's state, and can change with any frequency including multiple times\n per transaction"},"fullyImplemented":false,"id":616,"linearizedBaseContracts":[616],"name":"IUniswapV3PoolState","nameLocation":"250:19:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":512,"nodeType":"StructuredDocumentation","src":"276:1140:9","text":"@notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n when accessed externally.\n @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n tick The current tick of the pool, i.e. according to the last tick transition that was run.\n This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n boundary.\n observationIndex The index of the last oracle observation that was written,\n observationCardinality The current maximum number of observations stored in the pool,\n observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n feeProtocol The protocol fee for both tokens of the pool.\n Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n unlocked Whether the pool is currently locked to reentrancy"},"functionSelector":"3850c7bd","id":529,"implemented":false,"kind":"function","modifiers":[],"name":"slot0","nameLocation":"1430:5:9","nodeType":"FunctionDefinition","parameters":{"id":513,"nodeType":"ParameterList","parameters":[],"src":"1435:2:9"},"returnParameters":{"id":528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":515,"mutability":"mutable","name":"sqrtPriceX96","nameLocation":"1506:12:9","nodeType":"VariableDeclaration","scope":529,"src":"1498:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":514,"name":"uint160","nodeType":"ElementaryTypeName","src":"1498:7:9","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":517,"mutability":"mutable","name":"tick","nameLocation":"1538:4:9","nodeType":"VariableDeclaration","scope":529,"src":"1532:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":516,"name":"int24","nodeType":"ElementaryTypeName","src":"1532:5:9","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":519,"mutability":"mutable","name":"observationIndex","nameLocation":"1563:16:9","nodeType":"VariableDeclaration","scope":529,"src":"1556:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":518,"name":"uint16","nodeType":"ElementaryTypeName","src":"1556:6:9","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":521,"mutability":"mutable","name":"observationCardinality","nameLocation":"1600:22:9","nodeType":"VariableDeclaration","scope":529,"src":"1593:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":520,"name":"uint16","nodeType":"ElementaryTypeName","src":"1593:6:9","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":523,"mutability":"mutable","name":"observationCardinalityNext","nameLocation":"1643:26:9","nodeType":"VariableDeclaration","scope":529,"src":"1636:33:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":522,"name":"uint16","nodeType":"ElementaryTypeName","src":"1636:6:9","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":525,"mutability":"mutable","name":"feeProtocol","nameLocation":"1689:11:9","nodeType":"VariableDeclaration","scope":529,"src":"1683:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":524,"name":"uint8","nodeType":"ElementaryTypeName","src":"1683:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":527,"mutability":"mutable","name":"unlocked","nameLocation":"1719:8:9","nodeType":"VariableDeclaration","scope":529,"src":"1714:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":526,"name":"bool","nodeType":"ElementaryTypeName","src":"1714:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1484:253:9"},"scope":616,"src":"1421:317:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":530,"nodeType":"StructuredDocumentation","src":"1744:168:9","text":"@notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"},"functionSelector":"f3058399","id":535,"implemented":false,"kind":"function","modifiers":[],"name":"feeGrowthGlobal0X128","nameLocation":"1926:20:9","nodeType":"FunctionDefinition","parameters":{"id":531,"nodeType":"ParameterList","parameters":[],"src":"1946:2:9"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":535,"src":"1972:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":532,"name":"uint256","nodeType":"ElementaryTypeName","src":"1972:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1971:9:9"},"scope":616,"src":"1917:64:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":536,"nodeType":"StructuredDocumentation","src":"1987:168:9","text":"@notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n @dev This value can overflow the uint256"},"functionSelector":"46141319","id":541,"implemented":false,"kind":"function","modifiers":[],"name":"feeGrowthGlobal1X128","nameLocation":"2169:20:9","nodeType":"FunctionDefinition","parameters":{"id":537,"nodeType":"ParameterList","parameters":[],"src":"2189:2:9"},"returnParameters":{"id":540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":539,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":541,"src":"2215:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":538,"name":"uint256","nodeType":"ElementaryTypeName","src":"2215:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2214:9:9"},"scope":616,"src":"2160:64:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":542,"nodeType":"StructuredDocumentation","src":"2230:147:9","text":"@notice The amounts of token0 and token1 that are owed to the protocol\n @dev Protocol fees will never exceed uint128 max in either token"},"functionSelector":"1ad8b03b","id":549,"implemented":false,"kind":"function","modifiers":[],"name":"protocolFees","nameLocation":"2391:12:9","nodeType":"FunctionDefinition","parameters":{"id":543,"nodeType":"ParameterList","parameters":[],"src":"2403:2:9"},"returnParameters":{"id":548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":545,"mutability":"mutable","name":"token0","nameLocation":"2437:6:9","nodeType":"VariableDeclaration","scope":549,"src":"2429:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":544,"name":"uint128","nodeType":"ElementaryTypeName","src":"2429:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":547,"mutability":"mutable","name":"token1","nameLocation":"2453:6:9","nodeType":"VariableDeclaration","scope":549,"src":"2445:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":546,"name":"uint128","nodeType":"ElementaryTypeName","src":"2445:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2428:32:9"},"scope":616,"src":"2382:79:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":550,"nodeType":"StructuredDocumentation","src":"2467:150:9","text":"@notice The currently in range liquidity available to the pool\n @dev This value has no relationship to the total liquidity across all ticks"},"functionSelector":"1a686502","id":555,"implemented":false,"kind":"function","modifiers":[],"name":"liquidity","nameLocation":"2631:9:9","nodeType":"FunctionDefinition","parameters":{"id":551,"nodeType":"ParameterList","parameters":[],"src":"2640:2:9"},"returnParameters":{"id":554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":553,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":555,"src":"2666:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":552,"name":"uint128","nodeType":"ElementaryTypeName","src":"2666:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2665:9:9"},"scope":616,"src":"2622:53:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":556,"nodeType":"StructuredDocumentation","src":"2681:1244:9","text":"@notice Look up information about a specific tick in the pool\n @param tick The tick to look up\n @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n tick upper,\n liquidityNet how much liquidity changes when the pool price crosses the tick,\n feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n secondsOutside the seconds spent on the other side of the tick from the current tick,\n initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n In addition, these values are only relative and must be used only in comparison to previous snapshots for\n a specific position."},"functionSelector":"f30dba93","id":577,"implemented":false,"kind":"function","modifiers":[],"name":"ticks","nameLocation":"3939:5:9","nodeType":"FunctionDefinition","parameters":{"id":559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":558,"mutability":"mutable","name":"tick","nameLocation":"3951:4:9","nodeType":"VariableDeclaration","scope":577,"src":"3945:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":557,"name":"int24","nodeType":"ElementaryTypeName","src":"3945:5:9","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"3944:12:9"},"returnParameters":{"id":576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"liquidityGross","nameLocation":"4025:14:9","nodeType":"VariableDeclaration","scope":577,"src":"4017:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":560,"name":"uint128","nodeType":"ElementaryTypeName","src":"4017:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":563,"mutability":"mutable","name":"liquidityNet","nameLocation":"4060:12:9","nodeType":"VariableDeclaration","scope":577,"src":"4053:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":562,"name":"int128","nodeType":"ElementaryTypeName","src":"4053:6:9","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"},{"constant":false,"id":565,"mutability":"mutable","name":"feeGrowthOutside0X128","nameLocation":"4094:21:9","nodeType":"VariableDeclaration","scope":577,"src":"4086:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":564,"name":"uint256","nodeType":"ElementaryTypeName","src":"4086:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":567,"mutability":"mutable","name":"feeGrowthOutside1X128","nameLocation":"4137:21:9","nodeType":"VariableDeclaration","scope":577,"src":"4129:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":566,"name":"uint256","nodeType":"ElementaryTypeName","src":"4129:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":569,"mutability":"mutable","name":"tickCumulativeOutside","nameLocation":"4178:21:9","nodeType":"VariableDeclaration","scope":577,"src":"4172:27:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":568,"name":"int56","nodeType":"ElementaryTypeName","src":"4172:5:9","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":571,"mutability":"mutable","name":"secondsPerLiquidityOutsideX128","nameLocation":"4221:30:9","nodeType":"VariableDeclaration","scope":577,"src":"4213:38:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":570,"name":"uint160","nodeType":"ElementaryTypeName","src":"4213:7:9","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":573,"mutability":"mutable","name":"secondsOutside","nameLocation":"4272:14:9","nodeType":"VariableDeclaration","scope":577,"src":"4265:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":572,"name":"uint32","nodeType":"ElementaryTypeName","src":"4265:6:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":575,"mutability":"mutable","name":"initialized","nameLocation":"4305:11:9","nodeType":"VariableDeclaration","scope":577,"src":"4300:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":574,"name":"bool","nodeType":"ElementaryTypeName","src":"4300:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4003:323:9"},"scope":616,"src":"3930:397:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":578,"nodeType":"StructuredDocumentation","src":"4333:99:9","text":"@notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information"},"functionSelector":"5339c296","id":585,"implemented":false,"kind":"function","modifiers":[],"name":"tickBitmap","nameLocation":"4446:10:9","nodeType":"FunctionDefinition","parameters":{"id":581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":580,"mutability":"mutable","name":"wordPosition","nameLocation":"4463:12:9","nodeType":"VariableDeclaration","scope":585,"src":"4457:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":579,"name":"int16","nodeType":"ElementaryTypeName","src":"4457:5:9","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"}],"src":"4456:20:9"},"returnParameters":{"id":584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":583,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":585,"src":"4500:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":582,"name":"uint256","nodeType":"ElementaryTypeName","src":"4500:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4499:9:9"},"scope":616,"src":"4437:72:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":586,"nodeType":"StructuredDocumentation","src":"4515:700:9","text":"@notice Returns the information about a position by the position's key\n @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n @return _liquidity The amount of liquidity in the position,\n Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"},"functionSelector":"514ea4bf","id":601,"implemented":false,"kind":"function","modifiers":[],"name":"positions","nameLocation":"5229:9:9","nodeType":"FunctionDefinition","parameters":{"id":589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":588,"mutability":"mutable","name":"key","nameLocation":"5247:3:9","nodeType":"VariableDeclaration","scope":601,"src":"5239:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":587,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5239:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5238:13:9"},"returnParameters":{"id":600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":591,"mutability":"mutable","name":"_liquidity","nameLocation":"5320:10:9","nodeType":"VariableDeclaration","scope":601,"src":"5312:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":590,"name":"uint128","nodeType":"ElementaryTypeName","src":"5312:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":593,"mutability":"mutable","name":"feeGrowthInside0LastX128","nameLocation":"5352:24:9","nodeType":"VariableDeclaration","scope":601,"src":"5344:32:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":592,"name":"uint256","nodeType":"ElementaryTypeName","src":"5344:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":595,"mutability":"mutable","name":"feeGrowthInside1LastX128","nameLocation":"5398:24:9","nodeType":"VariableDeclaration","scope":601,"src":"5390:32:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":594,"name":"uint256","nodeType":"ElementaryTypeName","src":"5390:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":597,"mutability":"mutable","name":"tokensOwed0","nameLocation":"5444:11:9","nodeType":"VariableDeclaration","scope":601,"src":"5436:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":596,"name":"uint128","nodeType":"ElementaryTypeName","src":"5436:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":599,"mutability":"mutable","name":"tokensOwed1","nameLocation":"5477:11:9","nodeType":"VariableDeclaration","scope":601,"src":"5469:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":598,"name":"uint128","nodeType":"ElementaryTypeName","src":"5469:7:9","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"5298:200:9"},"scope":616,"src":"5220:279:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"5505:749:9","text":"@notice Returns data about a specific observation index\n @param index The element of the observations array to fetch\n @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n ago, rather than at a specific index in the array.\n @return blockTimestamp The timestamp of the observation,\n Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n Returns initialized whether the observation has been initialized and the values are safe to use"},"functionSelector":"252c09d7","id":615,"implemented":false,"kind":"function","modifiers":[],"name":"observations","nameLocation":"6268:12:9","nodeType":"FunctionDefinition","parameters":{"id":605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"index","nameLocation":"6289:5:9","nodeType":"VariableDeclaration","scope":615,"src":"6281:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":603,"name":"uint256","nodeType":"ElementaryTypeName","src":"6281:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6280:15:9"},"returnParameters":{"id":614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":607,"mutability":"mutable","name":"blockTimestamp","nameLocation":"6363:14:9","nodeType":"VariableDeclaration","scope":615,"src":"6356:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":606,"name":"uint32","nodeType":"ElementaryTypeName","src":"6356:6:9","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":609,"mutability":"mutable","name":"tickCumulative","nameLocation":"6397:14:9","nodeType":"VariableDeclaration","scope":615,"src":"6391:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":608,"name":"int56","nodeType":"ElementaryTypeName","src":"6391:5:9","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":611,"mutability":"mutable","name":"secondsPerLiquidityCumulativeX128","nameLocation":"6433:33:9","nodeType":"VariableDeclaration","scope":615,"src":"6425:41:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":610,"name":"uint160","nodeType":"ElementaryTypeName","src":"6425:7:9","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":613,"mutability":"mutable","name":"initialized","nameLocation":"6485:11:9","nodeType":"VariableDeclaration","scope":615,"src":"6480:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":612,"name":"bool","nodeType":"ElementaryTypeName","src":"6480:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6342:164:9"},"scope":616,"src":"6259:248:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":617,"src":"240:6269:9","usedErrors":[]}],"src":"45:6465:9"},"id":9},"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol","exportedSymbols":{"IQuoterV2":[709]},"id":710,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":618,"literals":["solidity",">=","0.7",".5"],"nodeType":"PragmaDirective","src":"45:24:10"},{"id":619,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"70:19:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IQuoterV2","contractDependencies":[],"contractKind":"interface","documentation":{"id":620,"nodeType":"StructuredDocumentation","src":"91:451:10","text":"@title QuoterV2 Interface\n @notice Supports quoting the calculated amounts from exact input or exact output swaps.\n @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\n @dev These functions are not marked view because they rely on calling non-view functions and reverting\n to compute the result. They are also not gas efficient and should not be called on-chain."},"fullyImplemented":false,"id":709,"linearizedBaseContracts":[709],"name":"IQuoterV2","nameLocation":"552:9:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":621,"nodeType":"StructuredDocumentation","src":"568:618:10","text":"@notice Returns the amount out received for a given exact input swap without executing the swap\n @param path The path of the swap, i.e. each token pair and the pool fee\n @param amountIn The amount of the first token to swap\n @return amountOut The amount of the last token that would be received\n @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n @return gasEstimate The estimate of the gas that the swap consumes"},"functionSelector":"cdca1753","id":638,"implemented":false,"kind":"function","modifiers":[],"name":"quoteExactInput","nameLocation":"1200:15:10","nodeType":"FunctionDefinition","parameters":{"id":626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":623,"mutability":"mutable","name":"path","nameLocation":"1229:4:10","nodeType":"VariableDeclaration","scope":638,"src":"1216:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":622,"name":"bytes","nodeType":"ElementaryTypeName","src":"1216:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":625,"mutability":"mutable","name":"amountIn","nameLocation":"1243:8:10","nodeType":"VariableDeclaration","scope":638,"src":"1235:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":624,"name":"uint256","nodeType":"ElementaryTypeName","src":"1235:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1215:37:10"},"returnParameters":{"id":637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":628,"mutability":"mutable","name":"amountOut","nameLocation":"1308:9:10","nodeType":"VariableDeclaration","scope":638,"src":"1300:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":627,"name":"uint256","nodeType":"ElementaryTypeName","src":"1300:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":631,"mutability":"mutable","name":"sqrtPriceX96AfterList","nameLocation":"1348:21:10","nodeType":"VariableDeclaration","scope":638,"src":"1331:38:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint160_$dyn_memory_ptr","typeString":"uint160[]"},"typeName":{"baseType":{"id":629,"name":"uint160","nodeType":"ElementaryTypeName","src":"1331:7:10","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":630,"nodeType":"ArrayTypeName","src":"1331:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint160_$dyn_storage_ptr","typeString":"uint160[]"}},"visibility":"internal"},{"constant":false,"id":634,"mutability":"mutable","name":"initializedTicksCrossedList","nameLocation":"1399:27:10","nodeType":"VariableDeclaration","scope":638,"src":"1383:43:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_memory_ptr","typeString":"uint32[]"},"typeName":{"baseType":{"id":632,"name":"uint32","nodeType":"ElementaryTypeName","src":"1383:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":633,"nodeType":"ArrayTypeName","src":"1383:8:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_storage_ptr","typeString":"uint32[]"}},"visibility":"internal"},{"constant":false,"id":636,"mutability":"mutable","name":"gasEstimate","nameLocation":"1448:11:10","nodeType":"VariableDeclaration","scope":638,"src":"1440:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":635,"name":"uint256","nodeType":"ElementaryTypeName","src":"1440:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1286:183:10"},"scope":709,"src":"1191:279:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"canonicalName":"IQuoterV2.QuoteExactInputSingleParams","id":649,"members":[{"constant":false,"id":640,"mutability":"mutable","name":"tokenIn","nameLocation":"1529:7:10","nodeType":"VariableDeclaration","scope":649,"src":"1521:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":639,"name":"address","nodeType":"ElementaryTypeName","src":"1521:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":642,"mutability":"mutable","name":"tokenOut","nameLocation":"1554:8:10","nodeType":"VariableDeclaration","scope":649,"src":"1546:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":641,"name":"address","nodeType":"ElementaryTypeName","src":"1546:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":644,"mutability":"mutable","name":"amountIn","nameLocation":"1580:8:10","nodeType":"VariableDeclaration","scope":649,"src":"1572:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":643,"name":"uint256","nodeType":"ElementaryTypeName","src":"1572:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":646,"mutability":"mutable","name":"fee","nameLocation":"1605:3:10","nodeType":"VariableDeclaration","scope":649,"src":"1598:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":645,"name":"uint24","nodeType":"ElementaryTypeName","src":"1598:6:10","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":648,"mutability":"mutable","name":"sqrtPriceLimitX96","nameLocation":"1626:17:10","nodeType":"VariableDeclaration","scope":649,"src":"1618:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":647,"name":"uint160","nodeType":"ElementaryTypeName","src":"1618:7:10","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"QuoteExactInputSingleParams","nameLocation":"1483:27:10","nodeType":"StructDefinition","scope":709,"src":"1476:174:10","visibility":"public"},{"documentation":{"id":650,"nodeType":"StructuredDocumentation","src":"1656:790:10","text":"@notice Returns the amount out received for a given exact input but for a swap of a single pool\n @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\n tokenIn The token being swapped in\n tokenOut The token being swapped out\n fee The fee of the token pool to consider for the pair\n amountIn The desired input amount\n sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n @return amountOut The amount of `tokenOut` that would be received\n @return sqrtPriceX96After The sqrt price of the pool after the swap\n @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n @return gasEstimate The estimate of the gas that the swap consumes"},"functionSelector":"c6a5026a","id":664,"implemented":false,"kind":"function","modifiers":[],"name":"quoteExactInputSingle","nameLocation":"2460:21:10","nodeType":"FunctionDefinition","parameters":{"id":654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":653,"mutability":"mutable","name":"params","nameLocation":"2517:6:10","nodeType":"VariableDeclaration","scope":664,"src":"2482:41:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$649_memory_ptr","typeString":"struct IQuoterV2.QuoteExactInputSingleParams"},"typeName":{"id":652,"nodeType":"UserDefinedTypeName","pathNode":{"id":651,"name":"QuoteExactInputSingleParams","nameLocations":["2482:27:10"],"nodeType":"IdentifierPath","referencedDeclaration":649,"src":"2482:27:10"},"referencedDeclaration":649,"src":"2482:27:10","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactInputSingleParams_$649_storage_ptr","typeString":"struct IQuoterV2.QuoteExactInputSingleParams"}},"visibility":"internal"}],"src":"2481:43:10"},"returnParameters":{"id":663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":656,"mutability":"mutable","name":"amountOut","nameLocation":"2580:9:10","nodeType":"VariableDeclaration","scope":664,"src":"2572:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":655,"name":"uint256","nodeType":"ElementaryTypeName","src":"2572:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":658,"mutability":"mutable","name":"sqrtPriceX96After","nameLocation":"2611:17:10","nodeType":"VariableDeclaration","scope":664,"src":"2603:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":657,"name":"uint160","nodeType":"ElementaryTypeName","src":"2603:7:10","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":660,"mutability":"mutable","name":"initializedTicksCrossed","nameLocation":"2649:23:10","nodeType":"VariableDeclaration","scope":664,"src":"2642:30:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":659,"name":"uint32","nodeType":"ElementaryTypeName","src":"2642:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":662,"mutability":"mutable","name":"gasEstimate","nameLocation":"2694:11:10","nodeType":"VariableDeclaration","scope":664,"src":"2686:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":661,"name":"uint256","nodeType":"ElementaryTypeName","src":"2686:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2558:157:10"},"scope":709,"src":"2451:265:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":665,"nodeType":"StructuredDocumentation","src":"2722:654:10","text":"@notice Returns the amount in required for a given exact output swap without executing the swap\n @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n @param amountOut The amount of the last token to receive\n @return amountIn The amount of first token required to be paid\n @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n @return gasEstimate The estimate of the gas that the swap consumes"},"functionSelector":"2f80bb1d","id":682,"implemented":false,"kind":"function","modifiers":[],"name":"quoteExactOutput","nameLocation":"3390:16:10","nodeType":"FunctionDefinition","parameters":{"id":670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":667,"mutability":"mutable","name":"path","nameLocation":"3420:4:10","nodeType":"VariableDeclaration","scope":682,"src":"3407:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":666,"name":"bytes","nodeType":"ElementaryTypeName","src":"3407:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":669,"mutability":"mutable","name":"amountOut","nameLocation":"3434:9:10","nodeType":"VariableDeclaration","scope":682,"src":"3426:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":668,"name":"uint256","nodeType":"ElementaryTypeName","src":"3426:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3406:38:10"},"returnParameters":{"id":681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":672,"mutability":"mutable","name":"amountIn","nameLocation":"3500:8:10","nodeType":"VariableDeclaration","scope":682,"src":"3492:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":671,"name":"uint256","nodeType":"ElementaryTypeName","src":"3492:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":675,"mutability":"mutable","name":"sqrtPriceX96AfterList","nameLocation":"3539:21:10","nodeType":"VariableDeclaration","scope":682,"src":"3522:38:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint160_$dyn_memory_ptr","typeString":"uint160[]"},"typeName":{"baseType":{"id":673,"name":"uint160","nodeType":"ElementaryTypeName","src":"3522:7:10","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":674,"nodeType":"ArrayTypeName","src":"3522:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint160_$dyn_storage_ptr","typeString":"uint160[]"}},"visibility":"internal"},{"constant":false,"id":678,"mutability":"mutable","name":"initializedTicksCrossedList","nameLocation":"3590:27:10","nodeType":"VariableDeclaration","scope":682,"src":"3574:43:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_memory_ptr","typeString":"uint32[]"},"typeName":{"baseType":{"id":676,"name":"uint32","nodeType":"ElementaryTypeName","src":"3574:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":677,"nodeType":"ArrayTypeName","src":"3574:8:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_storage_ptr","typeString":"uint32[]"}},"visibility":"internal"},{"constant":false,"id":680,"mutability":"mutable","name":"gasEstimate","nameLocation":"3639:11:10","nodeType":"VariableDeclaration","scope":682,"src":"3631:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":679,"name":"uint256","nodeType":"ElementaryTypeName","src":"3631:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3478:182:10"},"scope":709,"src":"3381:280:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"canonicalName":"IQuoterV2.QuoteExactOutputSingleParams","id":693,"members":[{"constant":false,"id":684,"mutability":"mutable","name":"tokenIn","nameLocation":"3721:7:10","nodeType":"VariableDeclaration","scope":693,"src":"3713:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":683,"name":"address","nodeType":"ElementaryTypeName","src":"3713:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":686,"mutability":"mutable","name":"tokenOut","nameLocation":"3746:8:10","nodeType":"VariableDeclaration","scope":693,"src":"3738:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":685,"name":"address","nodeType":"ElementaryTypeName","src":"3738:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":688,"mutability":"mutable","name":"amount","nameLocation":"3772:6:10","nodeType":"VariableDeclaration","scope":693,"src":"3764:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":687,"name":"uint256","nodeType":"ElementaryTypeName","src":"3764:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":690,"mutability":"mutable","name":"fee","nameLocation":"3795:3:10","nodeType":"VariableDeclaration","scope":693,"src":"3788:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":689,"name":"uint24","nodeType":"ElementaryTypeName","src":"3788:6:10","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":692,"mutability":"mutable","name":"sqrtPriceLimitX96","nameLocation":"3816:17:10","nodeType":"VariableDeclaration","scope":693,"src":"3808:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":691,"name":"uint160","nodeType":"ElementaryTypeName","src":"3808:7:10","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"QuoteExactOutputSingleParams","nameLocation":"3674:28:10","nodeType":"StructDefinition","scope":709,"src":"3667:173:10","visibility":"public"},{"documentation":{"id":694,"nodeType":"StructuredDocumentation","src":"3846:838:10","text":"@notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\n tokenIn The token being swapped in\n tokenOut The token being swapped out\n fee The fee of the token pool to consider for the pair\n amountOut The desired output amount\n sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n @return sqrtPriceX96After The sqrt price of the pool after the swap\n @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n @return gasEstimate The estimate of the gas that the swap consumes"},"functionSelector":"bd21704a","id":708,"implemented":false,"kind":"function","modifiers":[],"name":"quoteExactOutputSingle","nameLocation":"4698:22:10","nodeType":"FunctionDefinition","parameters":{"id":698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":697,"mutability":"mutable","name":"params","nameLocation":"4757:6:10","nodeType":"VariableDeclaration","scope":708,"src":"4721:42:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$693_memory_ptr","typeString":"struct IQuoterV2.QuoteExactOutputSingleParams"},"typeName":{"id":696,"nodeType":"UserDefinedTypeName","pathNode":{"id":695,"name":"QuoteExactOutputSingleParams","nameLocations":["4721:28:10"],"nodeType":"IdentifierPath","referencedDeclaration":693,"src":"4721:28:10"},"referencedDeclaration":693,"src":"4721:28:10","typeDescriptions":{"typeIdentifier":"t_struct$_QuoteExactOutputSingleParams_$693_storage_ptr","typeString":"struct IQuoterV2.QuoteExactOutputSingleParams"}},"visibility":"internal"}],"src":"4720:44:10"},"returnParameters":{"id":707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":700,"mutability":"mutable","name":"amountIn","nameLocation":"4820:8:10","nodeType":"VariableDeclaration","scope":708,"src":"4812:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":699,"name":"uint256","nodeType":"ElementaryTypeName","src":"4812:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":702,"mutability":"mutable","name":"sqrtPriceX96After","nameLocation":"4850:17:10","nodeType":"VariableDeclaration","scope":708,"src":"4842:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":701,"name":"uint160","nodeType":"ElementaryTypeName","src":"4842:7:10","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":704,"mutability":"mutable","name":"initializedTicksCrossed","nameLocation":"4888:23:10","nodeType":"VariableDeclaration","scope":708,"src":"4881:30:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":703,"name":"uint32","nodeType":"ElementaryTypeName","src":"4881:6:10","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":706,"mutability":"mutable","name":"gasEstimate","nameLocation":"4933:11:10","nodeType":"VariableDeclaration","scope":708,"src":"4925:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":705,"name":"uint256","nodeType":"ElementaryTypeName","src":"4925:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4798:156:10"},"scope":709,"src":"4689:266:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":710,"src":"542:4415:10","usedErrors":[]}],"src":"45:4913:10"},"id":10},"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol","exportedSymbols":{"ISwapRouter":[809],"IUniswapV3SwapCallback":[196]},"id":810,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":711,"literals":["solidity",">=","0.7",".5"],"nodeType":"PragmaDirective","src":"45:24:11"},{"id":712,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"70:19:11"},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol","file":"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol","id":713,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":810,"sourceUnit":197,"src":"91:83:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":715,"name":"IUniswapV3SwapCallback","nameLocations":["305:22:11"],"nodeType":"IdentifierPath","referencedDeclaration":196,"src":"305:22:11"},"id":716,"nodeType":"InheritanceSpecifier","src":"305:22:11"}],"canonicalName":"ISwapRouter","contractDependencies":[],"contractKind":"interface","documentation":{"id":714,"nodeType":"StructuredDocumentation","src":"176:104:11","text":"@title Router token swapping functionality\n @notice Functions for swapping tokens via Uniswap V3"},"fullyImplemented":false,"id":809,"linearizedBaseContracts":[809,196],"name":"ISwapRouter","nameLocation":"290:11:11","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ISwapRouter.ExactInputSingleParams","id":733,"members":[{"constant":false,"id":718,"mutability":"mutable","name":"tokenIn","nameLocation":"382:7:11","nodeType":"VariableDeclaration","scope":733,"src":"374:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":717,"name":"address","nodeType":"ElementaryTypeName","src":"374:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":720,"mutability":"mutable","name":"tokenOut","nameLocation":"407:8:11","nodeType":"VariableDeclaration","scope":733,"src":"399:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":719,"name":"address","nodeType":"ElementaryTypeName","src":"399:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":722,"mutability":"mutable","name":"fee","nameLocation":"432:3:11","nodeType":"VariableDeclaration","scope":733,"src":"425:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":721,"name":"uint24","nodeType":"ElementaryTypeName","src":"425:6:11","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":724,"mutability":"mutable","name":"recipient","nameLocation":"453:9:11","nodeType":"VariableDeclaration","scope":733,"src":"445:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":723,"name":"address","nodeType":"ElementaryTypeName","src":"445:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":726,"mutability":"mutable","name":"deadline","nameLocation":"480:8:11","nodeType":"VariableDeclaration","scope":733,"src":"472:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":725,"name":"uint256","nodeType":"ElementaryTypeName","src":"472:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":728,"mutability":"mutable","name":"amountIn","nameLocation":"506:8:11","nodeType":"VariableDeclaration","scope":733,"src":"498:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":727,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":730,"mutability":"mutable","name":"amountOutMinimum","nameLocation":"532:16:11","nodeType":"VariableDeclaration","scope":733,"src":"524:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":729,"name":"uint256","nodeType":"ElementaryTypeName","src":"524:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":732,"mutability":"mutable","name":"sqrtPriceLimitX96","nameLocation":"566:17:11","nodeType":"VariableDeclaration","scope":733,"src":"558:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":731,"name":"uint160","nodeType":"ElementaryTypeName","src":"558:7:11","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"ExactInputSingleParams","nameLocation":"341:22:11","nodeType":"StructDefinition","scope":809,"src":"334:256:11","visibility":"public"},{"documentation":{"id":734,"nodeType":"StructuredDocumentation","src":"596:250:11","text":"@notice Swaps `amountIn` of one token for as much as possible of another token\n @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n @return amountOut The amount of the received token"},"functionSelector":"414bf389","id":742,"implemented":false,"kind":"function","modifiers":[],"name":"exactInputSingle","nameLocation":"860:16:11","nodeType":"FunctionDefinition","parameters":{"id":738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":737,"mutability":"mutable","name":"params","nameLocation":"909:6:11","nodeType":"VariableDeclaration","scope":742,"src":"877:38:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$733_calldata_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams"},"typeName":{"id":736,"nodeType":"UserDefinedTypeName","pathNode":{"id":735,"name":"ExactInputSingleParams","nameLocations":["877:22:11"],"nodeType":"IdentifierPath","referencedDeclaration":733,"src":"877:22:11"},"referencedDeclaration":733,"src":"877:22:11","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$733_storage_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams"}},"visibility":"internal"}],"src":"876:40:11"},"returnParameters":{"id":741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":740,"mutability":"mutable","name":"amountOut","nameLocation":"951:9:11","nodeType":"VariableDeclaration","scope":742,"src":"943:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":739,"name":"uint256","nodeType":"ElementaryTypeName","src":"943:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"942:19:11"},"scope":809,"src":"851:111:11","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"ISwapRouter.ExactInputParams","id":753,"members":[{"constant":false,"id":744,"mutability":"mutable","name":"path","nameLocation":"1008:4:11","nodeType":"VariableDeclaration","scope":753,"src":"1002:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":743,"name":"bytes","nodeType":"ElementaryTypeName","src":"1002:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":746,"mutability":"mutable","name":"recipient","nameLocation":"1030:9:11","nodeType":"VariableDeclaration","scope":753,"src":"1022:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":745,"name":"address","nodeType":"ElementaryTypeName","src":"1022:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":748,"mutability":"mutable","name":"deadline","nameLocation":"1057:8:11","nodeType":"VariableDeclaration","scope":753,"src":"1049:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":747,"name":"uint256","nodeType":"ElementaryTypeName","src":"1049:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":750,"mutability":"mutable","name":"amountIn","nameLocation":"1083:8:11","nodeType":"VariableDeclaration","scope":753,"src":"1075:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":749,"name":"uint256","nodeType":"ElementaryTypeName","src":"1075:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":752,"mutability":"mutable","name":"amountOutMinimum","nameLocation":"1109:16:11","nodeType":"VariableDeclaration","scope":753,"src":"1101:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":751,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ExactInputParams","nameLocation":"975:16:11","nodeType":"StructDefinition","scope":809,"src":"968:164:11","visibility":"public"},{"documentation":{"id":754,"nodeType":"StructuredDocumentation","src":"1138:273:11","text":"@notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n @return amountOut The amount of the received token"},"functionSelector":"c04b8d59","id":762,"implemented":false,"kind":"function","modifiers":[],"name":"exactInput","nameLocation":"1425:10:11","nodeType":"FunctionDefinition","parameters":{"id":758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"params","nameLocation":"1462:6:11","nodeType":"VariableDeclaration","scope":762,"src":"1436:32:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$753_calldata_ptr","typeString":"struct ISwapRouter.ExactInputParams"},"typeName":{"id":756,"nodeType":"UserDefinedTypeName","pathNode":{"id":755,"name":"ExactInputParams","nameLocations":["1436:16:11"],"nodeType":"IdentifierPath","referencedDeclaration":753,"src":"1436:16:11"},"referencedDeclaration":753,"src":"1436:16:11","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$753_storage_ptr","typeString":"struct ISwapRouter.ExactInputParams"}},"visibility":"internal"}],"src":"1435:34:11"},"returnParameters":{"id":761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":760,"mutability":"mutable","name":"amountOut","nameLocation":"1504:9:11","nodeType":"VariableDeclaration","scope":762,"src":"1496:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":759,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1495:19:11"},"scope":809,"src":"1416:99:11","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"ISwapRouter.ExactOutputSingleParams","id":779,"members":[{"constant":false,"id":764,"mutability":"mutable","name":"tokenIn","nameLocation":"1570:7:11","nodeType":"VariableDeclaration","scope":779,"src":"1562:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":763,"name":"address","nodeType":"ElementaryTypeName","src":"1562:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":766,"mutability":"mutable","name":"tokenOut","nameLocation":"1595:8:11","nodeType":"VariableDeclaration","scope":779,"src":"1587:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":765,"name":"address","nodeType":"ElementaryTypeName","src":"1587:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":768,"mutability":"mutable","name":"fee","nameLocation":"1620:3:11","nodeType":"VariableDeclaration","scope":779,"src":"1613:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":767,"name":"uint24","nodeType":"ElementaryTypeName","src":"1613:6:11","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":770,"mutability":"mutable","name":"recipient","nameLocation":"1641:9:11","nodeType":"VariableDeclaration","scope":779,"src":"1633:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":769,"name":"address","nodeType":"ElementaryTypeName","src":"1633:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":772,"mutability":"mutable","name":"deadline","nameLocation":"1668:8:11","nodeType":"VariableDeclaration","scope":779,"src":"1660:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":771,"name":"uint256","nodeType":"ElementaryTypeName","src":"1660:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":774,"mutability":"mutable","name":"amountOut","nameLocation":"1694:9:11","nodeType":"VariableDeclaration","scope":779,"src":"1686:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":773,"name":"uint256","nodeType":"ElementaryTypeName","src":"1686:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":776,"mutability":"mutable","name":"amountInMaximum","nameLocation":"1721:15:11","nodeType":"VariableDeclaration","scope":779,"src":"1713:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":775,"name":"uint256","nodeType":"ElementaryTypeName","src":"1713:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":778,"mutability":"mutable","name":"sqrtPriceLimitX96","nameLocation":"1754:17:11","nodeType":"VariableDeclaration","scope":779,"src":"1746:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":777,"name":"uint160","nodeType":"ElementaryTypeName","src":"1746:7:11","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"ExactOutputSingleParams","nameLocation":"1528:23:11","nodeType":"StructDefinition","scope":809,"src":"1521:257:11","visibility":"public"},{"documentation":{"id":780,"nodeType":"StructuredDocumentation","src":"1784:250:11","text":"@notice Swaps as little as possible of one token for `amountOut` of another token\n @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n @return amountIn The amount of the input token"},"functionSelector":"db3e2198","id":788,"implemented":false,"kind":"function","modifiers":[],"name":"exactOutputSingle","nameLocation":"2048:17:11","nodeType":"FunctionDefinition","parameters":{"id":784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":783,"mutability":"mutable","name":"params","nameLocation":"2099:6:11","nodeType":"VariableDeclaration","scope":788,"src":"2066:39:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputSingleParams_$779_calldata_ptr","typeString":"struct ISwapRouter.ExactOutputSingleParams"},"typeName":{"id":782,"nodeType":"UserDefinedTypeName","pathNode":{"id":781,"name":"ExactOutputSingleParams","nameLocations":["2066:23:11"],"nodeType":"IdentifierPath","referencedDeclaration":779,"src":"2066:23:11"},"referencedDeclaration":779,"src":"2066:23:11","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputSingleParams_$779_storage_ptr","typeString":"struct ISwapRouter.ExactOutputSingleParams"}},"visibility":"internal"}],"src":"2065:41:11"},"returnParameters":{"id":787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":786,"mutability":"mutable","name":"amountIn","nameLocation":"2141:8:11","nodeType":"VariableDeclaration","scope":788,"src":"2133:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":785,"name":"uint256","nodeType":"ElementaryTypeName","src":"2133:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2132:18:11"},"scope":809,"src":"2039:112:11","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"ISwapRouter.ExactOutputParams","id":799,"members":[{"constant":false,"id":790,"mutability":"mutable","name":"path","nameLocation":"2198:4:11","nodeType":"VariableDeclaration","scope":799,"src":"2192:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":789,"name":"bytes","nodeType":"ElementaryTypeName","src":"2192:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":792,"mutability":"mutable","name":"recipient","nameLocation":"2220:9:11","nodeType":"VariableDeclaration","scope":799,"src":"2212:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":791,"name":"address","nodeType":"ElementaryTypeName","src":"2212:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":794,"mutability":"mutable","name":"deadline","nameLocation":"2247:8:11","nodeType":"VariableDeclaration","scope":799,"src":"2239:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":793,"name":"uint256","nodeType":"ElementaryTypeName","src":"2239:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":796,"mutability":"mutable","name":"amountOut","nameLocation":"2273:9:11","nodeType":"VariableDeclaration","scope":799,"src":"2265:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":795,"name":"uint256","nodeType":"ElementaryTypeName","src":"2265:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":798,"mutability":"mutable","name":"amountInMaximum","nameLocation":"2300:15:11","nodeType":"VariableDeclaration","scope":799,"src":"2292:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":797,"name":"uint256","nodeType":"ElementaryTypeName","src":"2292:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ExactOutputParams","nameLocation":"2164:17:11","nodeType":"StructDefinition","scope":809,"src":"2157:165:11","visibility":"public"},{"documentation":{"id":800,"nodeType":"StructuredDocumentation","src":"2328:284:11","text":"@notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n @return amountIn The amount of the input token"},"functionSelector":"f28c0498","id":808,"implemented":false,"kind":"function","modifiers":[],"name":"exactOutput","nameLocation":"2626:11:11","nodeType":"FunctionDefinition","parameters":{"id":804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":803,"mutability":"mutable","name":"params","nameLocation":"2665:6:11","nodeType":"VariableDeclaration","scope":808,"src":"2638:33:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputParams_$799_calldata_ptr","typeString":"struct ISwapRouter.ExactOutputParams"},"typeName":{"id":802,"nodeType":"UserDefinedTypeName","pathNode":{"id":801,"name":"ExactOutputParams","nameLocations":["2638:17:11"],"nodeType":"IdentifierPath","referencedDeclaration":799,"src":"2638:17:11"},"referencedDeclaration":799,"src":"2638:17:11","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputParams_$799_storage_ptr","typeString":"struct ISwapRouter.ExactOutputParams"}},"visibility":"internal"}],"src":"2637:35:11"},"returnParameters":{"id":807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":806,"mutability":"mutable","name":"amountIn","nameLocation":"2707:8:11","nodeType":"VariableDeclaration","scope":808,"src":"2699:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":805,"name":"uint256","nodeType":"ElementaryTypeName","src":"2699:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2698:18:11"},"scope":809,"src":"2617:100:11","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":810,"src":"280:2439:11","usedErrors":[]}],"src":"45:2675:11"},"id":11},"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol","exportedSymbols":{"IERC20":[77],"TransferHelper":[980]},"id":981,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":811,"literals":["solidity",">=","0.6",".0"],"nodeType":"PragmaDirective","src":"45:24:12"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":812,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":981,"sourceUnit":78,"src":"71:56:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"TransferHelper","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":980,"linearizedBaseContracts":[980],"name":"TransferHelper","nameLocation":"137:14:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":860,"nodeType":"Block","src":"690:229:12","statements":[{"assignments":[825,827],"declarations":[{"constant":false,"id":825,"mutability":"mutable","name":"success","nameLocation":"706:7:12","nodeType":"VariableDeclaration","scope":860,"src":"701:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":824,"name":"bool","nodeType":"ElementaryTypeName","src":"701:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":827,"mutability":"mutable","name":"data","nameLocation":"728:4:12","nodeType":"VariableDeclaration","scope":860,"src":"715:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":826,"name":"bytes","nodeType":"ElementaryTypeName","src":"715:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":840,"initialValue":{"arguments":[{"arguments":[{"expression":{"expression":{"id":832,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"782:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":833,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"789:12:12","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":76,"src":"782:19:12","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function IERC20.transferFrom(address,address,uint256) returns (bool)"}},"id":834,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"802:8:12","memberName":"selector","nodeType":"MemberAccess","src":"782:28:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":835,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":817,"src":"812:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":836,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":819,"src":"818:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":837,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"822:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":830,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"759:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":831,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"763:18:12","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"759:22:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:69:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":828,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"748:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"754:4:12","memberName":"call","nodeType":"MemberAccess","src":"748:10:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"748:81:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"700:129:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":842,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"847:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":843,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"859:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"864:6:12","memberName":"length","nodeType":"MemberAccess","src":"859:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"874:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"859:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":849,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"890:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":851,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"897:4:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":850,"name":"bool","nodeType":"ElementaryTypeName","src":"897:4:12","typeDescriptions":{}}}],"id":852,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"896:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":847,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"879:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":848,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"883:6:12","memberName":"decode","nodeType":"MemberAccess","src":"879:10:12","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"879:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"859:44:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":855,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"858:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"847:57:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"535446","id":857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"906:5:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86","typeString":"literal_string \"STF\""},"value":"STF"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a1c4b1d67db284650e7cfb49cb11ce76848206ad466478425bd3418f8bbb9a86","typeString":"literal_string \"STF\""}],"id":841,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"839:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"839:73:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":859,"nodeType":"ExpressionStatement","src":"839:73:12"}]},"documentation":{"id":813,"nodeType":"StructuredDocumentation","src":"158:398:12","text":"@notice Transfers tokens from the targeted address to the given destination\n @notice Errors with 'STF' if transfer fails\n @param token The contract address of the token to be transferred\n @param from The originating address from which the tokens will be transferred\n @param to The destination address of the transfer\n @param value The amount to be transferred"},"id":861,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"570:16:12","nodeType":"FunctionDefinition","parameters":{"id":822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":815,"mutability":"mutable","name":"token","nameLocation":"604:5:12","nodeType":"VariableDeclaration","scope":861,"src":"596:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":814,"name":"address","nodeType":"ElementaryTypeName","src":"596:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":817,"mutability":"mutable","name":"from","nameLocation":"627:4:12","nodeType":"VariableDeclaration","scope":861,"src":"619:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":816,"name":"address","nodeType":"ElementaryTypeName","src":"619:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":819,"mutability":"mutable","name":"to","nameLocation":"649:2:12","nodeType":"VariableDeclaration","scope":861,"src":"641:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":818,"name":"address","nodeType":"ElementaryTypeName","src":"641:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":821,"mutability":"mutable","name":"value","nameLocation":"669:5:12","nodeType":"VariableDeclaration","scope":861,"src":"661:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":820,"name":"uint256","nodeType":"ElementaryTypeName","src":"661:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"586:94:12"},"returnParameters":{"id":823,"nodeType":"ParameterList","parameters":[],"src":"690:0:12"},"scope":980,"src":"561:358:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":906,"nodeType":"Block","src":"1314:206:12","statements":[{"assignments":[872,874],"declarations":[{"constant":false,"id":872,"mutability":"mutable","name":"success","nameLocation":"1330:7:12","nodeType":"VariableDeclaration","scope":906,"src":"1325:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":871,"name":"bool","nodeType":"ElementaryTypeName","src":"1325:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":874,"mutability":"mutable","name":"data","nameLocation":"1352:4:12","nodeType":"VariableDeclaration","scope":906,"src":"1339:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":873,"name":"bytes","nodeType":"ElementaryTypeName","src":"1339:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":886,"initialValue":{"arguments":[{"arguments":[{"expression":{"expression":{"id":879,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"1394:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":880,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1401:8:12","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":44,"src":"1394:15:12","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function IERC20.transfer(address,uint256) returns (bool)"}},"id":881,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1410:8:12","memberName":"selector","nodeType":"MemberAccess","src":"1394:24:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":882,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":866,"src":"1420:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":883,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"1424:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":877,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1371:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":878,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1375:18:12","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1371:22:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1371:59:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":875,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":864,"src":"1360:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1366:4:12","memberName":"call","nodeType":"MemberAccess","src":"1360:10:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1360:71:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1324:107:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":888,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":872,"src":"1449:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":889,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"1461:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1466:6:12","memberName":"length","nodeType":"MemberAccess","src":"1461:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1476:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1461:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":895,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"1492:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":897,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1499:4:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":896,"name":"bool","nodeType":"ElementaryTypeName","src":"1499:4:12","typeDescriptions":{}}}],"id":898,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1498:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":893,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1481:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":894,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1485:6:12","memberName":"decode","nodeType":"MemberAccess","src":"1481:10:12","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1481:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1461:44:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":901,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1460:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1449:57:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5354","id":903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1508:4:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca","typeString":"literal_string \"ST\""},"value":"ST"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8e992d6a09e3feb7936717fa482f3a7086f18407e19b697f3153d17fd25870ca","typeString":"literal_string \"ST\""}],"id":887,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1441:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1441:72:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":905,"nodeType":"ExpressionStatement","src":"1441:72:12"}]},"documentation":{"id":862,"nodeType":"StructuredDocumentation","src":"925:281:12","text":"@notice Transfers tokens from msg.sender to a recipient\n @dev Errors with ST if transfer fails\n @param token The contract address of the token which will be transferred\n @param to The recipient of the transfer\n @param value The value of the transfer"},"id":907,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"1220:12:12","nodeType":"FunctionDefinition","parameters":{"id":869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":864,"mutability":"mutable","name":"token","nameLocation":"1250:5:12","nodeType":"VariableDeclaration","scope":907,"src":"1242:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":863,"name":"address","nodeType":"ElementaryTypeName","src":"1242:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":866,"mutability":"mutable","name":"to","nameLocation":"1273:2:12","nodeType":"VariableDeclaration","scope":907,"src":"1265:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":865,"name":"address","nodeType":"ElementaryTypeName","src":"1265:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":868,"mutability":"mutable","name":"value","nameLocation":"1293:5:12","nodeType":"VariableDeclaration","scope":907,"src":"1285:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":867,"name":"uint256","nodeType":"ElementaryTypeName","src":"1285:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1232:72:12"},"returnParameters":{"id":870,"nodeType":"ParameterList","parameters":[],"src":"1314:0:12"},"scope":980,"src":"1211:309:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":952,"nodeType":"Block","src":"1975:205:12","statements":[{"assignments":[918,920],"declarations":[{"constant":false,"id":918,"mutability":"mutable","name":"success","nameLocation":"1991:7:12","nodeType":"VariableDeclaration","scope":952,"src":"1986:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":917,"name":"bool","nodeType":"ElementaryTypeName","src":"1986:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":920,"mutability":"mutable","name":"data","nameLocation":"2013:4:12","nodeType":"VariableDeclaration","scope":952,"src":"2000:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":919,"name":"bytes","nodeType":"ElementaryTypeName","src":"2000:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":932,"initialValue":{"arguments":[{"arguments":[{"expression":{"expression":{"id":925,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"2055:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":926,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2062:7:12","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":64,"src":"2055:14:12","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function IERC20.approve(address,uint256) returns (bool)"}},"id":927,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2070:8:12","memberName":"selector","nodeType":"MemberAccess","src":"2055:23:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":928,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"2080:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":929,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":914,"src":"2084:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":923,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2032:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":924,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2036:18:12","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2032:22:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2032:58:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":921,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"2021:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2027:4:12","memberName":"call","nodeType":"MemberAccess","src":"2021:10:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2021:70:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1985:106:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":934,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"2109:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":935,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"2121:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2126:6:12","memberName":"length","nodeType":"MemberAccess","src":"2121:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2136:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2121:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":941,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":920,"src":"2152:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":943,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2159:4:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":942,"name":"bool","nodeType":"ElementaryTypeName","src":"2159:4:12","typeDescriptions":{}}}],"id":944,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2158:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":939,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2141:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2145:6:12","memberName":"decode","nodeType":"MemberAccess","src":"2141:10:12","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2141:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2121:44:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":947,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2120:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2109:57:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5341","id":949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2168:4:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa","typeString":"literal_string \"SA\""},"value":"SA"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0c382912095e7706ed01a66755a50c713445aceaf5a9168954498b03dd381faa","typeString":"literal_string \"SA\""}],"id":933,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2101:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2101:72:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":951,"nodeType":"ExpressionStatement","src":"2101:72:12"}]},"documentation":{"id":908,"nodeType":"StructuredDocumentation","src":"1526:342:12","text":"@notice Approves the stipulated contract to spend the given allowance in the given token\n @dev Errors with 'SA' if transfer fails\n @param token The contract address of the token to be approved\n @param to The target of the approval\n @param value The amount of the given token the target will be allowed to spend"},"id":953,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1882:11:12","nodeType":"FunctionDefinition","parameters":{"id":915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":910,"mutability":"mutable","name":"token","nameLocation":"1911:5:12","nodeType":"VariableDeclaration","scope":953,"src":"1903:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":909,"name":"address","nodeType":"ElementaryTypeName","src":"1903:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":912,"mutability":"mutable","name":"to","nameLocation":"1934:2:12","nodeType":"VariableDeclaration","scope":953,"src":"1926:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":911,"name":"address","nodeType":"ElementaryTypeName","src":"1926:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":914,"mutability":"mutable","name":"value","nameLocation":"1954:5:12","nodeType":"VariableDeclaration","scope":953,"src":"1946:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":913,"name":"uint256","nodeType":"ElementaryTypeName","src":"1946:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1893:72:12"},"returnParameters":{"id":916,"nodeType":"ParameterList","parameters":[],"src":"1975:0:12"},"scope":980,"src":"1873:307:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":978,"nodeType":"Block","src":"2431:104:12","statements":[{"assignments":[962,null],"declarations":[{"constant":false,"id":962,"mutability":"mutable","name":"success","nameLocation":"2447:7:12","nodeType":"VariableDeclaration","scope":978,"src":"2442:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":961,"name":"bool","nodeType":"ElementaryTypeName","src":"2442:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":972,"initialValue":{"arguments":[{"arguments":[{"hexValue":"30","id":969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2492:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":968,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2482:9:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":967,"name":"bytes","nodeType":"ElementaryTypeName","src":"2486:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2482:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":963,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"2460:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2463:4:12","memberName":"call","nodeType":"MemberAccess","src":"2460:7:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":965,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"2475:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2460:21:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2460:35:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2441:54:12"},{"expression":{"arguments":[{"id":974,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"2513:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"535445","id":975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2522:5:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4","typeString":"literal_string \"STE\""},"value":"STE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_48541fce89df928ec30caa1aed6c0cd94b8e2ef76b3c68b10b9a184ceadb93d4","typeString":"literal_string \"STE\""}],"id":973,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2505:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2505:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":977,"nodeType":"ExpressionStatement","src":"2505:23:12"}]},"documentation":{"id":954,"nodeType":"StructuredDocumentation","src":"2186:179:12","text":"@notice Transfers ETH to the recipient address\n @dev Fails with `STE`\n @param to The destination of the transfer\n @param value The value to be transferred"},"id":979,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferETH","nameLocation":"2379:15:12","nodeType":"FunctionDefinition","parameters":{"id":959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":956,"mutability":"mutable","name":"to","nameLocation":"2403:2:12","nodeType":"VariableDeclaration","scope":979,"src":"2395:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":955,"name":"address","nodeType":"ElementaryTypeName","src":"2395:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":958,"mutability":"mutable","name":"value","nameLocation":"2415:5:12","nodeType":"VariableDeclaration","scope":979,"src":"2407:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":957,"name":"uint256","nodeType":"ElementaryTypeName","src":"2407:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:27:12"},"returnParameters":{"id":960,"nodeType":"ParameterList","parameters":[],"src":"2431:0:12"},"scope":980,"src":"2370:165:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":981,"src":"129:2408:12","usedErrors":[]}],"src":"45:2493:12"},"id":12},"contracts/Swapper/UniswapV3Swapper.sol":{"ast":{"absolutePath":"contracts/Swapper/UniswapV3Swapper.sol","exportedSymbols":{"FullMath":[1526],"IERC20":[77],"IQuoterV2":[709],"ISwapRouter":[809],"ISwapper":[2713],"IUniswapV3Factory":[160],"IUniswapV3Pool":[182],"IUniswapV3PoolActions":[292],"IUniswapV3PoolDerivedState":[323],"IUniswapV3PoolEvents":[442],"IUniswapV3PoolImmutables":[482],"IUniswapV3PoolOwnerActions":[508],"IUniswapV3PoolState":[616],"IUniswapV3SwapCallback":[196],"IYieldBox":[2872],"OracleLibrary":[2128],"TickMath":[2666],"TokenType":[2721],"TransferHelper":[980],"UniswapV3Swapper":[1350]},"id":1351,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":982,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"46:24:13"},{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol","file":"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol","id":983,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1351,"sourceUnit":810,"src":"74:68:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol","file":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol","id":984,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1351,"sourceUnit":183,"src":"144:66:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol","file":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol","id":985,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1351,"sourceUnit":161,"src":"212:69:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol","file":"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol","id":986,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1351,"sourceUnit":981,"src":"283:70:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol","file":"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol","id":987,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1351,"sourceUnit":710,"src":"355:66:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol","file":"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol","id":988,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1351,"sourceUnit":2873,"src":"425:80:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/ISwapper.sol","file":"../interfaces/ISwapper.sol","id":989,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1351,"sourceUnit":2714,"src":"509:36:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/Swapper/libraries/OracleLibrary.sol","file":"./libraries/OracleLibrary.sol","id":990,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1351,"sourceUnit":2129,"src":"547:39:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":992,"name":"ISwapper","nameLocations":["1867:8:13"],"nodeType":"IdentifierPath","referencedDeclaration":2713,"src":"1867:8:13"},"id":993,"nodeType":"InheritanceSpecifier","src":"1867:8:13"}],"canonicalName":"UniswapV3Swapper","contractDependencies":[],"contractKind":"contract","documentation":{"id":991,"nodeType":"StructuredDocumentation","src":"1799:39:13","text":"@title UniswapV3 swapper contract"},"fullyImplemented":true,"id":1350,"linearizedBaseContracts":[1350,2713],"name":"UniswapV3Swapper","nameLocation":"1847:16:13","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":996,"mutability":"immutable","name":"yieldBox","nameLocation":"1983:8:13","nodeType":"VariableDeclaration","scope":1350,"src":"1955:36:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"},"typeName":{"id":995,"nodeType":"UserDefinedTypeName","pathNode":{"id":994,"name":"IYieldBox","nameLocations":["1955:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":2872,"src":"1955:9:13"},"referencedDeclaration":2872,"src":"1955:9:13","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}},"visibility":"private"},{"constant":false,"functionSelector":"c31c9c07","id":999,"mutability":"immutable","name":"swapRouter","nameLocation":"2027:10:13","nodeType":"VariableDeclaration","scope":1350,"src":"1998:39:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$809","typeString":"contract ISwapRouter"},"typeName":{"id":998,"nodeType":"UserDefinedTypeName","pathNode":{"id":997,"name":"ISwapRouter","nameLocations":["1998:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":809,"src":"1998:11:13"},"referencedDeclaration":809,"src":"1998:11:13","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$809","typeString":"contract ISwapRouter"}},"visibility":"public"},{"constant":false,"functionSelector":"c45a0155","id":1002,"mutability":"immutable","name":"factory","nameLocation":"2079:7:13","nodeType":"VariableDeclaration","scope":1350,"src":"2044:42:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$160","typeString":"contract IUniswapV3Factory"},"typeName":{"id":1001,"nodeType":"UserDefinedTypeName","pathNode":{"id":1000,"name":"IUniswapV3Factory","nameLocations":["2044:17:13"],"nodeType":"IdentifierPath","referencedDeclaration":160,"src":"2044:17:13"},"referencedDeclaration":160,"src":"2044:17:13","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$160","typeString":"contract IUniswapV3Factory"}},"visibility":"public"},{"constant":false,"functionSelector":"8da5cb5b","id":1004,"mutability":"mutable","name":"owner","nameLocation":"2108:5:13","nodeType":"VariableDeclaration","scope":1350,"src":"2093:20:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1003,"name":"address","nodeType":"ElementaryTypeName","src":"2093:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"089fe6aa","id":1007,"mutability":"mutable","name":"poolFee","nameLocation":"2136:7:13","nodeType":"VariableDeclaration","scope":1350,"src":"2122:28:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1005,"name":"uint24","nodeType":"ElementaryTypeName","src":"2122:6:13","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"value":{"hexValue":"33303030","id":1006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2146:4:13","typeDescriptions":{"typeIdentifier":"t_rational_3000_by_1","typeString":"int_const 3000"},"value":"3000"},"visibility":"public"},{"anonymous":false,"eventSelector":"2bff118b9b9e3deb4fc5204e6ba828351c954685d0b119d0e21add79f8783399","id":1013,"name":"PoolFee","nameLocation":"2243:7:13","nodeType":"EventDefinition","parameters":{"id":1012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1009,"indexed":false,"mutability":"mutable","name":"_old","nameLocation":"2259:4:13","nodeType":"VariableDeclaration","scope":1013,"src":"2251:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1008,"name":"uint256","nodeType":"ElementaryTypeName","src":"2251:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1011,"indexed":false,"mutability":"mutable","name":"_new","nameLocation":"2273:4:13","nodeType":"VariableDeclaration","scope":1013,"src":"2265:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1010,"name":"uint256","nodeType":"ElementaryTypeName","src":"2265:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2250:28:13"},"src":"2237:42:13"},{"body":{"id":1043,"nodeType":"Block","src":"2464:132:13","statements":[{"expression":{"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1026,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"2475:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1027,"name":"_yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"2486:9:13","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}},"src":"2475:20:13","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}},"id":1029,"nodeType":"ExpressionStatement","src":"2475:20:13"},{"expression":{"id":1032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1030,"name":"swapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"2506:10:13","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$809","typeString":"contract ISwapRouter"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1031,"name":"_swapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1020,"src":"2519:11:13","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$809","typeString":"contract ISwapRouter"}},"src":"2506:24:13","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$809","typeString":"contract ISwapRouter"}},"id":1033,"nodeType":"ExpressionStatement","src":"2506:24:13"},{"expression":{"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1034,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"2541:7:13","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$160","typeString":"contract IUniswapV3Factory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1035,"name":"_factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"2551:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$160","typeString":"contract IUniswapV3Factory"}},"src":"2541:18:13","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$160","typeString":"contract IUniswapV3Factory"}},"id":1037,"nodeType":"ExpressionStatement","src":"2541:18:13"},{"expression":{"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1038,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"2570:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1039,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2578:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2582:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2578:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2570:18:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1042,"nodeType":"ExpressionStatement","src":"2570:18:13"}]},"documentation":{"id":1014,"nodeType":"StructuredDocumentation","src":"2287:51:13","text":"@notice creates a new UniswapV3Swapper contract"},"id":1044,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1017,"mutability":"mutable","name":"_yieldBox","nameLocation":"2376:9:13","nodeType":"VariableDeclaration","scope":1044,"src":"2366:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"},"typeName":{"id":1016,"nodeType":"UserDefinedTypeName","pathNode":{"id":1015,"name":"IYieldBox","nameLocations":["2366:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":2872,"src":"2366:9:13"},"referencedDeclaration":2872,"src":"2366:9:13","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}},"visibility":"internal"},{"constant":false,"id":1020,"mutability":"mutable","name":"_swapRouter","nameLocation":"2408:11:13","nodeType":"VariableDeclaration","scope":1044,"src":"2396:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$809","typeString":"contract ISwapRouter"},"typeName":{"id":1019,"nodeType":"UserDefinedTypeName","pathNode":{"id":1018,"name":"ISwapRouter","nameLocations":["2396:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":809,"src":"2396:11:13"},"referencedDeclaration":809,"src":"2396:11:13","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$809","typeString":"contract ISwapRouter"}},"visibility":"internal"},{"constant":false,"id":1023,"mutability":"mutable","name":"_factory","nameLocation":"2448:8:13","nodeType":"VariableDeclaration","scope":1044,"src":"2430:26:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$160","typeString":"contract IUniswapV3Factory"},"typeName":{"id":1022,"nodeType":"UserDefinedTypeName","pathNode":{"id":1021,"name":"IUniswapV3Factory","nameLocations":["2430:17:13"],"nodeType":"IdentifierPath","referencedDeclaration":160,"src":"2430:17:13"},"referencedDeclaration":160,"src":"2430:17:13","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$160","typeString":"contract IUniswapV3Factory"}},"visibility":"internal"}],"src":"2355:108:13"},"returnParameters":{"id":1025,"nodeType":"ParameterList","parameters":[],"src":"2464:0:13"},"scope":1350,"src":"2344:252:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1067,"nodeType":"Block","src":"2724:152:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1051,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2743:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2747:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2743:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1053,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"2757:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2743:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e69737761705633537761707065723a206e6f7420617574686f72697a6564","id":1055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2764:34:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_d2a0b9dc7b6bc6a9c4ad07ffb4203b1f2a334186a3dd8082c8ecac15ca0816c0","typeString":"literal_string \"UniswapV3Swapper: not authorized\""},"value":"UniswapV3Swapper: not authorized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d2a0b9dc7b6bc6a9c4ad07ffb4203b1f2a334186a3dd8082c8ecac15ca0816c0","typeString":"literal_string \"UniswapV3Swapper: not authorized\""}],"id":1050,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2735:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2735:64:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1057,"nodeType":"ExpressionStatement","src":"2735:64:13"},{"eventCall":{"arguments":[{"id":1059,"name":"poolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"2823:7:13","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"id":1060,"name":"_newFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1047,"src":"2832:7:13","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":1058,"name":"PoolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1013,"src":"2815:7:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2815:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1062,"nodeType":"EmitStatement","src":"2810:30:13"},{"expression":{"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1063,"name":"poolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"2851:7:13","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1064,"name":"_newFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1047,"src":"2861:7:13","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"2851:17:13","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"id":1066,"nodeType":"ExpressionStatement","src":"2851:17:13"}]},"documentation":{"id":1045,"nodeType":"StructuredDocumentation","src":"2604:69:13","text":"@notice sets a new pool fee\n @param _newFee the new value"},"functionSelector":"73dd250c","id":1068,"implemented":true,"kind":"function","modifiers":[],"name":"setPoolFee","nameLocation":"2688:10:13","nodeType":"FunctionDefinition","parameters":{"id":1048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1047,"mutability":"mutable","name":"_newFee","nameLocation":"2706:7:13","nodeType":"VariableDeclaration","scope":1068,"src":"2699:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1046,"name":"uint24","nodeType":"ElementaryTypeName","src":"2699:6:13","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"2698:16:13"},"returnParameters":{"id":1049,"nodeType":"ParameterList","parameters":[],"src":"2724:0:13"},"scope":1350,"src":"2679:197:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[2680],"body":{"id":1144,"nodeType":"Block","src":"3504:566:13","statements":[{"assignments":[1082],"declarations":[{"constant":false,"id":1082,"mutability":"mutable","name":"tokenOutId","nameLocation":"3523:10:13","nodeType":"VariableDeclaration","scope":1144,"src":"3515:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1081,"name":"uint256","nodeType":"ElementaryTypeName","src":"3515:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1090,"initialValue":{"arguments":[{"id":1085,"name":"dexData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"3547:7:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"id":1087,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3557:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1086,"name":"uint256","nodeType":"ElementaryTypeName","src":"3557:7:13","typeDescriptions":{}}}],"id":1088,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3556:9:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":1083,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3536:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1084,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3540:6:13","memberName":"decode","nodeType":"MemberAccess","src":"3536:10:13","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3536:30:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3515:51:13"},{"assignments":[null,1092,null,null],"declarations":[null,{"constant":false,"id":1092,"mutability":"mutable","name":"tokenIn","nameLocation":"3590:7:13","nodeType":"VariableDeclaration","scope":1144,"src":"3582:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1091,"name":"address","nodeType":"ElementaryTypeName","src":"3582:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},null,null],"id":1097,"initialValue":{"arguments":[{"id":1095,"name":"tokenInId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1071,"src":"3621:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1093,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"3605:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3614:6:13","memberName":"assets","nodeType":"MemberAccess","referencedDeclaration":2744,"src":"3605:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_enum$_TokenType_$2721_$_t_address_$_t_address_$_t_uint256_$","typeString":"function (uint256) view external returns (enum TokenType,address,address,uint256)"}},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3605:26:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_TokenType_$2721_$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(enum TokenType,address,address,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"3579:52:13"},{"assignments":[null,1099,null,null],"declarations":[null,{"constant":false,"id":1099,"mutability":"mutable","name":"tokenOut","nameLocation":"3653:8:13","nodeType":"VariableDeclaration","scope":1144,"src":"3645:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1098,"name":"address","nodeType":"ElementaryTypeName","src":"3645:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},null,null],"id":1104,"initialValue":{"arguments":[{"id":1102,"name":"tokenOutId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"3685:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1100,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"3669:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}},"id":1101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3678:6:13","memberName":"assets","nodeType":"MemberAccess","referencedDeclaration":2744,"src":"3669:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_enum$_TokenType_$2721_$_t_address_$_t_address_$_t_uint256_$","typeString":"function (uint256) view external returns (enum TokenType,address,address,uint256)"}},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3669:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_TokenType_$2721_$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(enum TokenType,address,address,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"3642:54:13"},{"assignments":[1106],"declarations":[{"constant":false,"id":1106,"mutability":"mutable","name":"amountIn","nameLocation":"3717:8:13","nodeType":"VariableDeclaration","scope":1144,"src":"3709:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1105,"name":"uint256","nodeType":"ElementaryTypeName","src":"3709:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1113,"initialValue":{"arguments":[{"id":1109,"name":"tokenInId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1071,"src":"3746:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1110,"name":"shareIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1073,"src":"3757:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":1111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3766:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1107,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"3728:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3737:8:13","memberName":"toAmount","nodeType":"MemberAccess","referencedDeclaration":2871,"src":"3728:17:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$_t_uint256_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint256,uint256,bool) view external returns (uint256)"}},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3728:44:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3709:63:13"},{"assignments":[1115],"declarations":[{"constant":false,"id":1115,"mutability":"mutable","name":"pool","nameLocation":"3793:4:13","nodeType":"VariableDeclaration","scope":1144,"src":"3785:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1114,"name":"address","nodeType":"ElementaryTypeName","src":"3785:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1122,"initialValue":{"arguments":[{"id":1118,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"3816:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1119,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"3825:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1120,"name":"poolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"3835:7:13","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"expression":{"id":1116,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"3800:7:13","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$160","typeString":"contract IUniswapV3Factory"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3808:7:13","memberName":"getPool","nodeType":"MemberAccess","referencedDeclaration":133,"src":"3800:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$","typeString":"function (address,address,uint24) view external returns (address)"}},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:43:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3785:58:13"},{"assignments":[1124,null],"declarations":[{"constant":false,"id":1124,"mutability":"mutable","name":"tick","nameLocation":"3861:4:13","nodeType":"VariableDeclaration","scope":1144,"src":"3855:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1123,"name":"int24","nodeType":"ElementaryTypeName","src":"3855:5:13","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},null],"id":1130,"initialValue":{"arguments":[{"id":1127,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"3893:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"3630","id":1128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3899:2:13","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"60"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"}],"expression":{"id":1125,"name":"OracleLibrary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"3871:13:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OracleLibrary_$2128_$","typeString":"type(library OracleLibrary)"}},"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3885:7:13","memberName":"consult","nodeType":"MemberAccess","referencedDeclaration":1667,"src":"3871:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint32_$returns$_t_int24_$_t_uint128_$","typeString":"function (address,uint32) view returns (int24,uint128)"}},"id":1129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3871:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_uint128_$","typeString":"tuple(int24,uint128)"}},"nodeType":"VariableDeclarationStatement","src":"3854:48:13"},{"expression":{"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1131,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"3915:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1134,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"3970:4:13","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"arguments":[{"id":1137,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"3997:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3989:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1135,"name":"uint128","nodeType":"ElementaryTypeName","src":"3989:7:13","typeDescriptions":{}}},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3989:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1139,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"4021:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1140,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"4043:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1132,"name":"OracleLibrary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"3927:13:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OracleLibrary_$2128_$","typeString":"type(library OracleLibrary)"}},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3941:14:13","memberName":"getQuoteAtTick","nodeType":"MemberAccess","referencedDeclaration":1765,"src":"3927:28:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$_t_uint128_$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (int24,uint128,address,address) pure returns (uint256)"}},"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3927:135:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3915:147:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1143,"nodeType":"ExpressionStatement","src":"3915:147:13"}]},"documentation":{"id":1069,"nodeType":"StructuredDocumentation","src":"2884:444:13","text":"@notice returns the possible output amount for input share\n @param tokenInId YieldBox asset id\n @param shareIn Shares to get the amount for\n @param dexData Custom DEX data for query execution\n @dev dexData examples:\n     - for UniV2, it should contain address[] swapPath\n     - for Curve, it should contain uint256[] tokenIndexes\n     - for UniV3, it should contain uint256 tokenOutId"},"functionSelector":"532bb192","id":1145,"implemented":true,"kind":"function","modifiers":[],"name":"getOutputAmount","nameLocation":"3343:15:13","nodeType":"FunctionDefinition","overrides":{"id":1077,"nodeType":"OverrideSpecifier","overrides":[],"src":"3467:8:13"},"parameters":{"id":1076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1071,"mutability":"mutable","name":"tokenInId","nameLocation":"3377:9:13","nodeType":"VariableDeclaration","scope":1145,"src":"3369:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1070,"name":"uint256","nodeType":"ElementaryTypeName","src":"3369:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1073,"mutability":"mutable","name":"shareIn","nameLocation":"3405:7:13","nodeType":"VariableDeclaration","scope":1145,"src":"3397:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1072,"name":"uint256","nodeType":"ElementaryTypeName","src":"3397:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1075,"mutability":"mutable","name":"dexData","nameLocation":"3438:7:13","nodeType":"VariableDeclaration","scope":1145,"src":"3423:22:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1074,"name":"bytes","nodeType":"ElementaryTypeName","src":"3423:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3358:94:13"},"returnParameters":{"id":1080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1079,"mutability":"mutable","name":"amountOut","nameLocation":"3493:9:13","nodeType":"VariableDeclaration","scope":1145,"src":"3485:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1078,"name":"uint256","nodeType":"ElementaryTypeName","src":"3485:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:19:13"},"scope":1350,"src":"3334:736:13","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[2692],"body":{"id":1221,"nodeType":"Block","src":"4646:568:13","statements":[{"assignments":[1159],"declarations":[{"constant":false,"id":1159,"mutability":"mutable","name":"tokenInId","nameLocation":"4665:9:13","nodeType":"VariableDeclaration","scope":1221,"src":"4657:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1158,"name":"uint256","nodeType":"ElementaryTypeName","src":"4657:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1167,"initialValue":{"arguments":[{"id":1162,"name":"dexData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"4688:7:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"id":1164,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4698:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1163,"name":"uint256","nodeType":"ElementaryTypeName","src":"4698:7:13","typeDescriptions":{}}}],"id":1165,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4697:9:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":1160,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4677:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1161,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4681:6:13","memberName":"decode","nodeType":"MemberAccess","src":"4677:10:13","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4677:30:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4657:50:13"},{"assignments":[null,1169,null,null],"declarations":[null,{"constant":false,"id":1169,"mutability":"mutable","name":"tokenIn","nameLocation":"4731:7:13","nodeType":"VariableDeclaration","scope":1221,"src":"4723:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1168,"name":"address","nodeType":"ElementaryTypeName","src":"4723:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},null,null],"id":1174,"initialValue":{"arguments":[{"id":1172,"name":"tokenInId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"4762:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1170,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"4746:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}},"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4755:6:13","memberName":"assets","nodeType":"MemberAccess","referencedDeclaration":2744,"src":"4746:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_enum$_TokenType_$2721_$_t_address_$_t_address_$_t_uint256_$","typeString":"function (uint256) view external returns (enum TokenType,address,address,uint256)"}},"id":1173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4746:26:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_TokenType_$2721_$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(enum TokenType,address,address,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4720:52:13"},{"assignments":[null,1176,null,null],"declarations":[null,{"constant":false,"id":1176,"mutability":"mutable","name":"tokenOut","nameLocation":"4794:8:13","nodeType":"VariableDeclaration","scope":1221,"src":"4786:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1175,"name":"address","nodeType":"ElementaryTypeName","src":"4786:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},null,null],"id":1181,"initialValue":{"arguments":[{"id":1179,"name":"tokenOutId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"4826:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1177,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"4810:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4819:6:13","memberName":"assets","nodeType":"MemberAccess","referencedDeclaration":2744,"src":"4810:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_enum$_TokenType_$2721_$_t_address_$_t_address_$_t_uint256_$","typeString":"function (uint256) view external returns (enum TokenType,address,address,uint256)"}},"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4810:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_TokenType_$2721_$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(enum TokenType,address,address,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4783:54:13"},{"assignments":[1183],"declarations":[{"constant":false,"id":1183,"mutability":"mutable","name":"amountOut","nameLocation":"4858:9:13","nodeType":"VariableDeclaration","scope":1221,"src":"4850:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1182,"name":"uint256","nodeType":"ElementaryTypeName","src":"4850:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1190,"initialValue":{"arguments":[{"id":1186,"name":"tokenOutId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"4888:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1187,"name":"shareOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"4900:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":1188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4910:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":1184,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"4870:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}},"id":1185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4879:8:13","memberName":"toAmount","nodeType":"MemberAccess","referencedDeclaration":2871,"src":"4870:17:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$_t_uint256_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint256,uint256,bool) view external returns (uint256)"}},"id":1189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4870:46:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4850:66:13"},{"assignments":[1192],"declarations":[{"constant":false,"id":1192,"mutability":"mutable","name":"pool","nameLocation":"4937:4:13","nodeType":"VariableDeclaration","scope":1221,"src":"4929:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1191,"name":"address","nodeType":"ElementaryTypeName","src":"4929:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1199,"initialValue":{"arguments":[{"id":1195,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"4960:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1196,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"4969:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1197,"name":"poolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"4979:7:13","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"}],"expression":{"id":1193,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1002,"src":"4944:7:13","typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Factory_$160","typeString":"contract IUniswapV3Factory"}},"id":1194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4952:7:13","memberName":"getPool","nodeType":"MemberAccess","referencedDeclaration":133,"src":"4944:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_uint24_$returns$_t_address_$","typeString":"function (address,address,uint24) view external returns (address)"}},"id":1198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4944:43:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4929:58:13"},{"assignments":[1201,null],"declarations":[{"constant":false,"id":1201,"mutability":"mutable","name":"tick","nameLocation":"5007:4:13","nodeType":"VariableDeclaration","scope":1221,"src":"5001:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1200,"name":"int24","nodeType":"ElementaryTypeName","src":"5001:5:13","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},null],"id":1207,"initialValue":{"arguments":[{"id":1204,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"5039:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"3630","id":1205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5045:2:13","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"60"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"}],"expression":{"id":1202,"name":"OracleLibrary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"5017:13:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OracleLibrary_$2128_$","typeString":"type(library OracleLibrary)"}},"id":1203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5031:7:13","memberName":"consult","nodeType":"MemberAccess","referencedDeclaration":1667,"src":"5017:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint32_$returns$_t_int24_$_t_uint128_$","typeString":"function (address,uint32) view returns (int24,uint128)"}},"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5017:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_uint128_$","typeString":"tuple(int24,uint128)"}},"nodeType":"VariableDeclarationStatement","src":"5000:48:13"},{"expression":{"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1208,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"5059:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1211,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1201,"src":"5113:4:13","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"arguments":[{"id":1214,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1183,"src":"5140:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5132:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1212,"name":"uint128","nodeType":"ElementaryTypeName","src":"5132:7:13","typeDescriptions":{}}},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5132:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1216,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"5165:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1217,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"5188:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1209,"name":"OracleLibrary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"5070:13:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OracleLibrary_$2128_$","typeString":"type(library OracleLibrary)"}},"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5084:14:13","memberName":"getQuoteAtTick","nodeType":"MemberAccess","referencedDeclaration":1765,"src":"5070:28:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$_t_uint128_$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (int24,uint128,address,address) pure returns (uint256)"}},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5070:136:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5059:147:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1220,"nodeType":"ExpressionStatement","src":"5059:147:13"}]},"documentation":{"id":1146,"nodeType":"StructuredDocumentation","src":"4078:392:13","text":"@notice returns necessary input amount for a fixed output amount\n @param tokenOutId YieldBox asset id\n @param shareOut Shares out to compute the amount for\n @param dexData Custom DEX data for query execution\n @dev dexData examples:\n     - for UniV2, it should contain address[] swapPath\n     - for UniV3, it should contain uint256 tokenInId"},"functionSelector":"c6fe9549","id":1222,"implemented":true,"kind":"function","modifiers":[],"name":"getInputAmount","nameLocation":"4485:14:13","nodeType":"FunctionDefinition","overrides":{"id":1154,"nodeType":"OverrideSpecifier","overrides":[],"src":"4610:8:13"},"parameters":{"id":1153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1148,"mutability":"mutable","name":"tokenOutId","nameLocation":"4518:10:13","nodeType":"VariableDeclaration","scope":1222,"src":"4510:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1147,"name":"uint256","nodeType":"ElementaryTypeName","src":"4510:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1150,"mutability":"mutable","name":"shareOut","nameLocation":"4547:8:13","nodeType":"VariableDeclaration","scope":1222,"src":"4539:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1149,"name":"uint256","nodeType":"ElementaryTypeName","src":"4539:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1152,"mutability":"mutable","name":"dexData","nameLocation":"4581:7:13","nodeType":"VariableDeclaration","scope":1222,"src":"4566:22:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1151,"name":"bytes","nodeType":"ElementaryTypeName","src":"4566:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4499:96:13"},"returnParameters":{"id":1157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1156,"mutability":"mutable","name":"amountIn","nameLocation":"4636:8:13","nodeType":"VariableDeclaration","scope":1222,"src":"4628:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1155,"name":"uint256","nodeType":"ElementaryTypeName","src":"4628:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4627:18:13"},"scope":1350,"src":"4476:738:13","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[2712],"body":{"id":1348,"nodeType":"Block","src":"6079:1189:13","statements":[{"assignments":[null,1244,null,null],"declarations":[null,{"constant":false,"id":1244,"mutability":"mutable","name":"tokenIn","nameLocation":"6101:7:13","nodeType":"VariableDeclaration","scope":1348,"src":"6093:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1243,"name":"address","nodeType":"ElementaryTypeName","src":"6093:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},null,null],"id":1249,"initialValue":{"arguments":[{"id":1247,"name":"tokenInId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1225,"src":"6132:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1245,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"6116:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6125:6:13","memberName":"assets","nodeType":"MemberAccess","referencedDeclaration":2744,"src":"6116:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_enum$_TokenType_$2721_$_t_address_$_t_address_$_t_uint256_$","typeString":"function (uint256) view external returns (enum TokenType,address,address,uint256)"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6116:26:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_TokenType_$2721_$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(enum TokenType,address,address,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"6090:52:13"},{"assignments":[null,1251,null,null],"declarations":[null,{"constant":false,"id":1251,"mutability":"mutable","name":"tokenOut","nameLocation":"6164:8:13","nodeType":"VariableDeclaration","scope":1348,"src":"6156:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1250,"name":"address","nodeType":"ElementaryTypeName","src":"6156:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},null,null],"id":1256,"initialValue":{"arguments":[{"id":1254,"name":"tokenOutId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"6196:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1252,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"6180:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6189:6:13","memberName":"assets","nodeType":"MemberAccess","referencedDeclaration":2744,"src":"6180:15:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_enum$_TokenType_$2721_$_t_address_$_t_address_$_t_uint256_$","typeString":"function (uint256) view external returns (enum TokenType,address,address,uint256)"}},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6180:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_TokenType_$2721_$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(enum TokenType,address,address,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"6153:54:13"},{"assignments":[1258,null],"declarations":[{"constant":false,"id":1258,"mutability":"mutable","name":"amountIn","nameLocation":"6229:8:13","nodeType":"VariableDeclaration","scope":1348,"src":"6221:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1257,"name":"uint256","nodeType":"ElementaryTypeName","src":"6221:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":1273,"initialValue":{"arguments":[{"id":1261,"name":"tokenInId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1225,"src":"6275:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1264,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6307:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_UniswapV3Swapper_$1350","typeString":"contract UniswapV3Swapper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UniswapV3Swapper_$1350","typeString":"contract UniswapV3Swapper"}],"id":1263,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6299:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1262,"name":"address","nodeType":"ElementaryTypeName","src":"6299:7:13","typeDescriptions":{}}},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6299:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1268,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6335:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_UniswapV3Swapper_$1350","typeString":"contract UniswapV3Swapper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UniswapV3Swapper_$1350","typeString":"contract UniswapV3Swapper"}],"id":1267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6327:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1266,"name":"address","nodeType":"ElementaryTypeName","src":"6327:7:13","typeDescriptions":{}}},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6327:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":1270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6355:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1271,"name":"shareIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1229,"src":"6371:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1259,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"6243:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6252:8:13","memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":2812,"src":"6243:17:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,address,address,uint256,uint256) external returns (uint256,uint256)"}},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6243:146:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"6220:169:13"},{"expression":{"arguments":[{"id":1277,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"6429:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1280,"name":"swapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"6446:10:13","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$809","typeString":"contract ISwapRouter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ISwapRouter_$809","typeString":"contract ISwapRouter"}],"id":1279,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6438:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1278,"name":"address","nodeType":"ElementaryTypeName","src":"6438:7:13","typeDescriptions":{}}},"id":1281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6438:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1282,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1258,"src":"6459:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1274,"name":"TransferHelper","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":980,"src":"6402:14:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TransferHelper_$980_$","typeString":"type(library TransferHelper)"}},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6417:11:13","memberName":"safeApprove","nodeType":"MemberAccess","referencedDeclaration":953,"src":"6402:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6402:66:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1284,"nodeType":"ExpressionStatement","src":"6402:66:13"},{"assignments":[1286],"declarations":[{"constant":false,"id":1286,"mutability":"mutable","name":"deadline","nameLocation":"6489:8:13","nodeType":"VariableDeclaration","scope":1348,"src":"6481:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1285,"name":"uint256","nodeType":"ElementaryTypeName","src":"6481:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1294,"initialValue":{"arguments":[{"id":1289,"name":"dexData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"6511:7:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"id":1291,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6521:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1290,"name":"uint256","nodeType":"ElementaryTypeName","src":"6521:7:13","typeDescriptions":{}}}],"id":1292,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6520:9:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":1287,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6500:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1288,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6504:6:13","memberName":"decode","nodeType":"MemberAccess","src":"6500:10:13","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6500:30:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6481:49:13"},{"assignments":[1299],"declarations":[{"constant":false,"id":1299,"mutability":"mutable","name":"params","nameLocation":"6583:6:13","nodeType":"VariableDeclaration","scope":1348,"src":"6541:48:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$733_memory_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams"},"typeName":{"id":1298,"nodeType":"UserDefinedTypeName","pathNode":{"id":1297,"name":"ISwapRouter.ExactInputSingleParams","nameLocations":["6541:11:13","6553:22:13"],"nodeType":"IdentifierPath","referencedDeclaration":733,"src":"6541:34:13"},"referencedDeclaration":733,"src":"6541:34:13","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$733_storage_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams"}},"visibility":"internal"}],"id":1314,"initialValue":{"arguments":[{"id":1302,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"6669:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1303,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"6705:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1304,"name":"poolFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"6737:7:13","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"arguments":[{"id":1307,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6782:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_UniswapV3Swapper_$1350","typeString":"contract UniswapV3Swapper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UniswapV3Swapper_$1350","typeString":"contract UniswapV3Swapper"}],"id":1306,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6774:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1305,"name":"address","nodeType":"ElementaryTypeName","src":"6774:7:13","typeDescriptions":{}}},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6774:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1309,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"6816:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1310,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1258,"src":"6853:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1311,"name":"amountOutMin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"6898:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":1312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6948:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1300,"name":"ISwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":809,"src":"6592:11:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISwapRouter_$809_$","typeString":"type(contract ISwapRouter)"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6618:22:13","memberName":"ExactInputSingleParams","nodeType":"MemberAccess","referencedDeclaration":733,"src":"6592:48:13","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ExactInputSingleParams_$733_storage_ptr_$","typeString":"type(struct ISwapRouter.ExactInputSingleParams storage pointer)"}},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["6660:7:13","6695:8:13","6732:3:13","6763:9:13","6806:8:13","6843:8:13","6880:16:13","6929:17:13"],"names":["tokenIn","tokenOut","fee","recipient","deadline","amountIn","amountOutMinimum","sqrtPriceLimitX96"],"nodeType":"FunctionCall","src":"6592:373:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$733_memory_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams memory"}},"nodeType":"VariableDeclarationStatement","src":"6541:424:13"},{"expression":{"id":1320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1315,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"6978:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1318,"name":"params","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"7018:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$733_memory_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ExactInputSingleParams_$733_memory_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams memory"}],"expression":{"id":1316,"name":"swapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"6990:10:13","typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$809","typeString":"contract ISwapRouter"}},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7001:16:13","memberName":"exactInputSingle","nodeType":"MemberAccess","referencedDeclaration":742,"src":"6990:27:13","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_ExactInputSingleParams_$733_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct ISwapRouter.ExactInputSingleParams memory) payable external returns (uint256)"}},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6990:35:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6978:47:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1321,"nodeType":"ExpressionStatement","src":"6978:47:13"},{"expression":{"arguments":[{"arguments":[{"id":1328,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"7071:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}],"id":1327,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7063:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1326,"name":"address","nodeType":"ElementaryTypeName","src":"7063:7:13","typeDescriptions":{}}},"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7063:17:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1330,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"7082:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":1323,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"7045:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1322,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"7038:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7038:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7055:7:13","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":64,"src":"7038:24:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7038:54:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1332,"nodeType":"ExpressionStatement","src":"7038:54:13"},{"expression":{"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[null,{"id":1333,"name":"shareOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"7106:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1334,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"7103:12:13","typeDescriptions":{"typeIdentifier":"t_tuple$__$_t_uint256_$","typeString":"tuple(,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1337,"name":"tokenOutId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"7154:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":1340,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7187:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_UniswapV3Swapper_$1350","typeString":"contract UniswapV3Swapper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UniswapV3Swapper_$1350","typeString":"contract UniswapV3Swapper"}],"id":1339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7179:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1338,"name":"address","nodeType":"ElementaryTypeName","src":"7179:7:13","typeDescriptions":{}}},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7179:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1342,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"7207:2:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1343,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"7224:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":1344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7248:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1335,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"7118:8:13","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$2872","typeString":"contract IYieldBox"}},"id":1336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7127:12:13","memberName":"depositAsset","nodeType":"MemberAccess","referencedDeclaration":2795,"src":"7118:21:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,address,address,uint256,uint256) external returns (uint256,uint256)"}},"id":1345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7118:142:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"7103:157:13","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1347,"nodeType":"ExpressionStatement","src":"7103:157:13"}]},"documentation":{"id":1223,"nodeType":"StructuredDocumentation","src":"5222:598:13","text":"@notice swaps token in with token out\n @dev returns both amount and shares\n @param tokenInId YieldBox asset id\n @param tokenOutId YieldBox asset id\n @param shareIn Shares to be swapped\n @param to Receiver address\n @param amountOutMin Minimum amount to be received\n @param dexData Custom DEX data for query execution\n @dev dexData examples:\n     - for UniV2, it should contain address[] swapPath\n     - for Curve, it should contain uint256[] tokenIndexes\n     - for UniV3, it should contain uint256 deadline"},"functionSelector":"55a68e10","id":1349,"implemented":true,"kind":"function","modifiers":[],"name":"swap","nameLocation":"5835:4:13","nodeType":"FunctionDefinition","overrides":{"id":1237,"nodeType":"OverrideSpecifier","overrides":[],"src":"6024:8:13"},"parameters":{"id":1236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1225,"mutability":"mutable","name":"tokenInId","nameLocation":"5858:9:13","nodeType":"VariableDeclaration","scope":1349,"src":"5850:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1224,"name":"uint256","nodeType":"ElementaryTypeName","src":"5850:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1227,"mutability":"mutable","name":"tokenOutId","nameLocation":"5886:10:13","nodeType":"VariableDeclaration","scope":1349,"src":"5878:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1226,"name":"uint256","nodeType":"ElementaryTypeName","src":"5878:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1229,"mutability":"mutable","name":"shareIn","nameLocation":"5915:7:13","nodeType":"VariableDeclaration","scope":1349,"src":"5907:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1228,"name":"uint256","nodeType":"ElementaryTypeName","src":"5907:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1231,"mutability":"mutable","name":"to","nameLocation":"5941:2:13","nodeType":"VariableDeclaration","scope":1349,"src":"5933:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1230,"name":"address","nodeType":"ElementaryTypeName","src":"5933:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1233,"mutability":"mutable","name":"amountOutMin","nameLocation":"5962:12:13","nodeType":"VariableDeclaration","scope":1349,"src":"5954:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1232,"name":"uint256","nodeType":"ElementaryTypeName","src":"5954:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1235,"mutability":"mutable","name":"dexData","nameLocation":"6000:7:13","nodeType":"VariableDeclaration","scope":1349,"src":"5985:22:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1234,"name":"bytes","nodeType":"ElementaryTypeName","src":"5985:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5839:175:13"},"returnParameters":{"id":1242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1239,"mutability":"mutable","name":"amountOut","nameLocation":"6050:9:13","nodeType":"VariableDeclaration","scope":1349,"src":"6042:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1238,"name":"uint256","nodeType":"ElementaryTypeName","src":"6042:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1241,"mutability":"mutable","name":"shareOut","nameLocation":"6069:8:13","nodeType":"VariableDeclaration","scope":1349,"src":"6061:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1240,"name":"uint256","nodeType":"ElementaryTypeName","src":"6061:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6041:37:13"},"scope":1350,"src":"5826:1442:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1351,"src":"1838:5433:13","usedErrors":[]}],"src":"46:7227:13"},"id":13},"contracts/Swapper/libraries/FullMath.sol":{"ast":{"absolutePath":"contracts/Swapper/libraries/FullMath.sol","exportedSymbols":{"FullMath":[1526]},"id":1527,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1352,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"32:24:14"},{"abstract":false,"baseContracts":[],"canonicalName":"FullMath","contractDependencies":[],"contractKind":"library","documentation":{"id":1353,"nodeType":"StructuredDocumentation","src":"58:297:14","text":"@title Contains 512-bit math functions\n @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits"},"fullyImplemented":true,"id":1526,"linearizedBaseContracts":[1526],"name":"FullMath","nameLocation":"363:8:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":1481,"nodeType":"Block","src":"870:3654:14","statements":[{"assignments":[1366],"declarations":[{"constant":false,"id":1366,"mutability":"mutable","name":"prod0","nameLocation":"1191:5:14","nodeType":"VariableDeclaration","scope":1481,"src":"1183:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1365,"name":"uint256","nodeType":"ElementaryTypeName","src":"1183:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1367,"nodeType":"VariableDeclarationStatement","src":"1183:13:14"},{"assignments":[1369],"declarations":[{"constant":false,"id":1369,"mutability":"mutable","name":"prod1","nameLocation":"1259:5:14","nodeType":"VariableDeclaration","scope":1481,"src":"1251:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1368,"name":"uint256","nodeType":"ElementaryTypeName","src":"1251:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1370,"nodeType":"VariableDeclarationStatement","src":"1251:13:14"},{"AST":{"nodeType":"YulBlock","src":"1327:141:14","statements":[{"nodeType":"YulVariableDeclaration","src":"1341:30:14","value":{"arguments":[{"name":"a","nodeType":"YulIdentifier","src":"1358:1:14"},{"name":"b","nodeType":"YulIdentifier","src":"1361:1:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1368:1:14","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1364:3:14"},"nodeType":"YulFunctionCall","src":"1364:6:14"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"1351:6:14"},"nodeType":"YulFunctionCall","src":"1351:20:14"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"1345:2:14","type":""}]},{"nodeType":"YulAssignment","src":"1384:18:14","value":{"arguments":[{"name":"a","nodeType":"YulIdentifier","src":"1397:1:14"},{"name":"b","nodeType":"YulIdentifier","src":"1400:1:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1393:3:14"},"nodeType":"YulFunctionCall","src":"1393:9:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"1384:5:14"}]},{"nodeType":"YulAssignment","src":"1415:43:14","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"1432:2:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"1436:5:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1428:3:14"},"nodeType":"YulFunctionCall","src":"1428:14:14"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"1447:2:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"1451:5:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1444:2:14"},"nodeType":"YulFunctionCall","src":"1444:13:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1424:3:14"},"nodeType":"YulFunctionCall","src":"1424:34:14"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"1415:5:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1356,"isOffset":false,"isSlot":false,"src":"1358:1:14","valueSize":1},{"declaration":1356,"isOffset":false,"isSlot":false,"src":"1397:1:14","valueSize":1},{"declaration":1358,"isOffset":false,"isSlot":false,"src":"1361:1:14","valueSize":1},{"declaration":1358,"isOffset":false,"isSlot":false,"src":"1400:1:14","valueSize":1},{"declaration":1366,"isOffset":false,"isSlot":false,"src":"1384:5:14","valueSize":1},{"declaration":1366,"isOffset":false,"isSlot":false,"src":"1436:5:14","valueSize":1},{"declaration":1366,"isOffset":false,"isSlot":false,"src":"1451:5:14","valueSize":1},{"declaration":1369,"isOffset":false,"isSlot":false,"src":"1415:5:14","valueSize":1}],"id":1371,"nodeType":"InlineAssembly","src":"1318:150:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1372,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"1540:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1549:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1540:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1385,"nodeType":"IfStatement","src":"1536:179:14","trueBody":{"id":1384,"nodeType":"Block","src":"1552:163:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1376,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"1574:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1588:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1574:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1375,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1566:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1566:24:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1380,"nodeType":"ExpressionStatement","src":"1566:24:14"},{"AST":{"nodeType":"YulBlock","src":"1613:65:14","statements":[{"nodeType":"YulAssignment","src":"1631:33:14","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"1645:5:14"},{"name":"denominator","nodeType":"YulIdentifier","src":"1652:11:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"1641:3:14"},"nodeType":"YulFunctionCall","src":"1641:23:14"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1631:6:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1360,"isOffset":false,"isSlot":false,"src":"1652:11:14","valueSize":1},{"declaration":1366,"isOffset":false,"isSlot":false,"src":"1645:5:14","valueSize":1},{"declaration":1363,"isOffset":false,"isSlot":false,"src":"1631:6:14","valueSize":1}],"id":1381,"nodeType":"InlineAssembly","src":"1604:74:14"},{"expression":{"id":1382,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"1698:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1364,"id":1383,"nodeType":"Return","src":"1691:13:14"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1387,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"1828:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1388,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"1842:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1828:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1386,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1820:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1820:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1391,"nodeType":"ExpressionStatement","src":"1820:28:14"},{"assignments":[1393],"declarations":[{"constant":false,"id":1393,"mutability":"mutable","name":"remainder","nameLocation":"2133:9:14","nodeType":"VariableDeclaration","scope":1481,"src":"2125:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1392,"name":"uint256","nodeType":"ElementaryTypeName","src":"2125:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1394,"nodeType":"VariableDeclarationStatement","src":"2125:17:14"},{"AST":{"nodeType":"YulBlock","src":"2161:62:14","statements":[{"nodeType":"YulAssignment","src":"2175:38:14","value":{"arguments":[{"name":"a","nodeType":"YulIdentifier","src":"2195:1:14"},{"name":"b","nodeType":"YulIdentifier","src":"2198:1:14"},{"name":"denominator","nodeType":"YulIdentifier","src":"2201:11:14"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2188:6:14"},"nodeType":"YulFunctionCall","src":"2188:25:14"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"2175:9:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1356,"isOffset":false,"isSlot":false,"src":"2195:1:14","valueSize":1},{"declaration":1358,"isOffset":false,"isSlot":false,"src":"2198:1:14","valueSize":1},{"declaration":1360,"isOffset":false,"isSlot":false,"src":"2201:11:14","valueSize":1},{"declaration":1393,"isOffset":false,"isSlot":false,"src":"2175:9:14","valueSize":1}],"id":1395,"nodeType":"InlineAssembly","src":"2152:71:14"},{"AST":{"nodeType":"YulBlock","src":"2296:108:14","statements":[{"nodeType":"YulAssignment","src":"2310:41:14","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"2323:5:14"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"2333:9:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"2344:5:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2330:2:14"},"nodeType":"YulFunctionCall","src":"2330:20:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2319:3:14"},"nodeType":"YulFunctionCall","src":"2319:32:14"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2310:5:14"}]},{"nodeType":"YulAssignment","src":"2364:30:14","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"2377:5:14"},{"name":"remainder","nodeType":"YulIdentifier","src":"2384:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2373:3:14"},"nodeType":"YulFunctionCall","src":"2373:21:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2364:5:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1366,"isOffset":false,"isSlot":false,"src":"2344:5:14","valueSize":1},{"declaration":1366,"isOffset":false,"isSlot":false,"src":"2364:5:14","valueSize":1},{"declaration":1366,"isOffset":false,"isSlot":false,"src":"2377:5:14","valueSize":1},{"declaration":1369,"isOffset":false,"isSlot":false,"src":"2310:5:14","valueSize":1},{"declaration":1369,"isOffset":false,"isSlot":false,"src":"2323:5:14","valueSize":1},{"declaration":1393,"isOffset":false,"isSlot":false,"src":"2333:9:14","valueSize":1},{"declaration":1393,"isOffset":false,"isSlot":false,"src":"2384:9:14","valueSize":1}],"id":1396,"nodeType":"InlineAssembly","src":"2287:117:14"},{"assignments":[1398],"declarations":[{"constant":false,"id":1398,"mutability":"mutable","name":"twos","nameLocation":"2561:4:14","nodeType":"VariableDeclaration","scope":1481,"src":"2553:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1397,"name":"uint256","nodeType":"ElementaryTypeName","src":"2553:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1406,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1399,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"2568:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"2583:12:14","subExpression":{"id":1400,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"2584:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2598:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2583:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1404,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2582:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2568:32:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2553:47:14"},{"AST":{"nodeType":"YulBlock","src":"2665:61:14","statements":[{"nodeType":"YulAssignment","src":"2679:37:14","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"2698:11:14"},{"name":"twos","nodeType":"YulIdentifier","src":"2711:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2694:3:14"},"nodeType":"YulFunctionCall","src":"2694:22:14"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"2679:11:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1360,"isOffset":false,"isSlot":false,"src":"2679:11:14","valueSize":1},{"declaration":1360,"isOffset":false,"isSlot":false,"src":"2698:11:14","valueSize":1},{"declaration":1398,"isOffset":false,"isSlot":false,"src":"2711:4:14","valueSize":1}],"id":1407,"nodeType":"InlineAssembly","src":"2656:70:14"},{"AST":{"nodeType":"YulBlock","src":"2799:49:14","statements":[{"nodeType":"YulAssignment","src":"2813:25:14","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"2826:5:14"},{"name":"twos","nodeType":"YulIdentifier","src":"2833:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2822:3:14"},"nodeType":"YulFunctionCall","src":"2822:16:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2813:5:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1366,"isOffset":false,"isSlot":false,"src":"2813:5:14","valueSize":1},{"declaration":1366,"isOffset":false,"isSlot":false,"src":"2826:5:14","valueSize":1},{"declaration":1398,"isOffset":false,"isSlot":false,"src":"2833:4:14","valueSize":1}],"id":1408,"nodeType":"InlineAssembly","src":"2790:58:14"},{"AST":{"nodeType":"YulBlock","src":"3036:63:14","statements":[{"nodeType":"YulAssignment","src":"3050:39:14","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3070:1:14","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"3073:4:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3066:3:14"},"nodeType":"YulFunctionCall","src":"3066:12:14"},{"name":"twos","nodeType":"YulIdentifier","src":"3080:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3062:3:14"},"nodeType":"YulFunctionCall","src":"3062:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"3087:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3058:3:14"},"nodeType":"YulFunctionCall","src":"3058:31:14"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3050:4:14"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1398,"isOffset":false,"isSlot":false,"src":"3050:4:14","valueSize":1},{"declaration":1398,"isOffset":false,"isSlot":false,"src":"3073:4:14","valueSize":1},{"declaration":1398,"isOffset":false,"isSlot":false,"src":"3080:4:14","valueSize":1}],"id":1409,"nodeType":"InlineAssembly","src":"3027:72:14"},{"expression":{"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1410,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"3108:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1411,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"3117:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1412,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"3125:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3117:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3108:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1415,"nodeType":"ExpressionStatement","src":"3108:21:14"},{"assignments":[1417],"declarations":[{"constant":false,"id":1417,"mutability":"mutable","name":"inv","nameLocation":"3471:3:14","nodeType":"VariableDeclaration","scope":1481,"src":"3463:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1416,"name":"uint256","nodeType":"ElementaryTypeName","src":"3463:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1424,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3478:1:14","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1419,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"3482:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3478:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1421,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3477:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3497:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3477:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3463:35:14"},{"expression":{"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1425,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"3713:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3720:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1427,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"3724:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1428,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"3738:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3724:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3720:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3713:28:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1432,"nodeType":"ExpressionStatement","src":"3713:28:14"},{"expression":{"id":1439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1433,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"3771:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3778:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1435,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"3782:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1436,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"3796:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3782:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3778:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3771:28:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1440,"nodeType":"ExpressionStatement","src":"3771:28:14"},{"expression":{"id":1447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1441,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"3830:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3837:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1443,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"3841:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1444,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"3855:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3841:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3837:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3830:28:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1448,"nodeType":"ExpressionStatement","src":"3830:28:14"},{"expression":{"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1449,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"3889:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3896:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1451,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"3900:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1452,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"3914:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3900:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3896:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3889:28:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1456,"nodeType":"ExpressionStatement","src":"3889:28:14"},{"expression":{"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1457,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"3948:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3955:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1459,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"3959:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1460,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"3973:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3959:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3955:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3948:28:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1464,"nodeType":"ExpressionStatement","src":"3948:28:14"},{"expression":{"id":1471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1465,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"4008:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4015:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1467,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"4019:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1468,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"4033:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4019:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4015:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4008:28:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1472,"nodeType":"ExpressionStatement","src":"4008:28:14"},{"expression":{"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1473,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"4474:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1474,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"4483:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1475,"name":"inv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"4491:3:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4483:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4474:20:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1478,"nodeType":"ExpressionStatement","src":"4474:20:14"},{"expression":{"id":1479,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"4511:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1364,"id":1480,"nodeType":"Return","src":"4504:13:14"}]},"documentation":{"id":1354,"nodeType":"StructuredDocumentation","src":"378:359:14","text":"@notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result\n @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv"},"id":1482,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"751:6:14","nodeType":"FunctionDefinition","parameters":{"id":1361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1356,"mutability":"mutable","name":"a","nameLocation":"775:1:14","nodeType":"VariableDeclaration","scope":1482,"src":"767:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1355,"name":"uint256","nodeType":"ElementaryTypeName","src":"767:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1358,"mutability":"mutable","name":"b","nameLocation":"794:1:14","nodeType":"VariableDeclaration","scope":1482,"src":"786:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1357,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1360,"mutability":"mutable","name":"denominator","nameLocation":"813:11:14","nodeType":"VariableDeclaration","scope":1482,"src":"805:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1359,"name":"uint256","nodeType":"ElementaryTypeName","src":"805:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"757:73:14"},"returnParameters":{"id":1364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1363,"mutability":"mutable","name":"result","nameLocation":"862:6:14","nodeType":"VariableDeclaration","scope":1482,"src":"854:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1362,"name":"uint256","nodeType":"ElementaryTypeName","src":"854:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"853:16:14"},"scope":1526,"src":"742:3782:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1524,"nodeType":"Block","src":"4944:177:14","statements":[{"expression":{"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1494,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"4954:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1496,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"4970:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1497,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"4973:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1498,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"4976:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1495,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1482,"src":"4963:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4963:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4954:34:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1501,"nodeType":"ExpressionStatement","src":"4954:34:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1503,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"5009:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1504,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"5012:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1505,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"5015:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1502,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5002:6:14","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5002:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5030:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5002:29:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1523,"nodeType":"IfStatement","src":"4998:117:14","trueBody":{"id":1522,"nodeType":"Block","src":"5033:82:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1510,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"5055:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":1513,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5069:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1512,"name":"uint256","nodeType":"ElementaryTypeName","src":"5069:7:14","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":1511,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5064:4:14","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5064:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":1515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5078:3:14","memberName":"max","nodeType":"MemberAccess","src":"5064:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5055:26:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1509,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5047:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5047:35:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1518,"nodeType":"ExpressionStatement","src":"5047:35:14"},{"expression":{"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5096:8:14","subExpression":{"id":1519,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"5096:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1521,"nodeType":"ExpressionStatement","src":"5096:8:14"}]}}]},"documentation":{"id":1483,"nodeType":"StructuredDocumentation","src":"4530:271:14","text":"@notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @param a The multiplicand\n @param b The multiplier\n @param denominator The divisor\n @return result The 256-bit result"},"id":1525,"implemented":true,"kind":"function","modifiers":[],"name":"mulDivRoundingUp","nameLocation":"4815:16:14","nodeType":"FunctionDefinition","parameters":{"id":1490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1485,"mutability":"mutable","name":"a","nameLocation":"4849:1:14","nodeType":"VariableDeclaration","scope":1525,"src":"4841:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1484,"name":"uint256","nodeType":"ElementaryTypeName","src":"4841:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1487,"mutability":"mutable","name":"b","nameLocation":"4868:1:14","nodeType":"VariableDeclaration","scope":1525,"src":"4860:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1486,"name":"uint256","nodeType":"ElementaryTypeName","src":"4860:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1489,"mutability":"mutable","name":"denominator","nameLocation":"4887:11:14","nodeType":"VariableDeclaration","scope":1525,"src":"4879:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1488,"name":"uint256","nodeType":"ElementaryTypeName","src":"4879:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4831:73:14"},"returnParameters":{"id":1493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1492,"mutability":"mutable","name":"result","nameLocation":"4936:6:14","nodeType":"VariableDeclaration","scope":1525,"src":"4928:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1491,"name":"uint256","nodeType":"ElementaryTypeName","src":"4928:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4927:16:14"},"scope":1526,"src":"4806:315:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1527,"src":"355:4768:14","usedErrors":[]}],"src":"32:5092:14"},"id":14},"contracts/Swapper/libraries/OracleLibrary.sol":{"ast":{"absolutePath":"contracts/Swapper/libraries/OracleLibrary.sol","exportedSymbols":{"FullMath":[1526],"IUniswapV3Pool":[182],"IUniswapV3PoolActions":[292],"IUniswapV3PoolDerivedState":[323],"IUniswapV3PoolEvents":[442],"IUniswapV3PoolImmutables":[482],"IUniswapV3PoolOwnerActions":[508],"IUniswapV3PoolState":[616],"OracleLibrary":[2128],"TickMath":[2666]},"id":2129,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1528,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"45:24:15"},{"absolutePath":"contracts/Swapper/libraries/FullMath.sol","file":"./FullMath.sol","id":1529,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2129,"sourceUnit":1527,"src":"71:24:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/Swapper/libraries/TickMath.sol","file":"./TickMath.sol","id":1530,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2129,"sourceUnit":2667,"src":"96:24:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol","file":"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol","id":1531,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2129,"sourceUnit":183,"src":"121:66:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"OracleLibrary","contractDependencies":[],"contractKind":"library","documentation":{"id":1532,"nodeType":"StructuredDocumentation","src":"189:90:15","text":"@title Oracle library\n @notice Provides functions to integrate with V3 pool oracle"},"fullyImplemented":true,"id":2128,"linearizedBaseContracts":[2128],"name":"OracleLibrary","nameLocation":"287:13:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":1666,"nodeType":"Block","src":"988:1195:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1545,"name":"secondsAgo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"1006:10:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1020:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1006:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4250","id":1548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1023:4:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_6f8c752f16a50d13ae873620fdefd90c2c58e0d13a068366e5a1b685076b71bb","typeString":"literal_string \"BP\""},"value":"BP"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6f8c752f16a50d13ae873620fdefd90c2c58e0d13a068366e5a1b685076b71bb","typeString":"literal_string \"BP\""}],"id":1544,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"998:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"998:30:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1550,"nodeType":"ExpressionStatement","src":"998:30:15"},{"assignments":[1555],"declarations":[{"constant":false,"id":1555,"mutability":"mutable","name":"secondsAgos","nameLocation":"1055:11:15","nodeType":"VariableDeclaration","scope":1666,"src":"1039:27:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_memory_ptr","typeString":"uint32[]"},"typeName":{"baseType":{"id":1553,"name":"uint32","nodeType":"ElementaryTypeName","src":"1039:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":1554,"nodeType":"ArrayTypeName","src":"1039:8:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_storage_ptr","typeString":"uint32[]"}},"visibility":"internal"}],"id":1561,"initialValue":{"arguments":[{"hexValue":"32","id":1559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1082:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"id":1558,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1069:12:15","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint32[] memory)"},"typeName":{"baseType":{"id":1556,"name":"uint32","nodeType":"ElementaryTypeName","src":"1073:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":1557,"nodeType":"ArrayTypeName","src":"1073:8:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_storage_ptr","typeString":"uint32[]"}}},"id":1560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1069:15:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_memory_ptr","typeString":"uint32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1039:45:15"},{"expression":{"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1562,"name":"secondsAgos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"1094:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_memory_ptr","typeString":"uint32[] memory"}},"id":1564,"indexExpression":{"hexValue":"30","id":1563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1106:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1094:14:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1565,"name":"secondsAgo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"1111:10:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"1094:27:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":1567,"nodeType":"ExpressionStatement","src":"1094:27:15"},{"expression":{"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1568,"name":"secondsAgos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"1131:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_memory_ptr","typeString":"uint32[] memory"}},"id":1570,"indexExpression":{"hexValue":"31","id":1569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1143:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1131:14:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1148:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1131:18:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":1573,"nodeType":"ExpressionStatement","src":"1131:18:15"},{"assignments":[1578,1581],"declarations":[{"constant":false,"id":1578,"mutability":"mutable","name":"tickCumulatives","nameLocation":"1189:15:15","nodeType":"VariableDeclaration","scope":1666,"src":"1174:30:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int56_$dyn_memory_ptr","typeString":"int56[]"},"typeName":{"baseType":{"id":1576,"name":"int56","nodeType":"ElementaryTypeName","src":"1174:5:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"id":1577,"nodeType":"ArrayTypeName","src":"1174:7:15","typeDescriptions":{"typeIdentifier":"t_array$_t_int56_$dyn_storage_ptr","typeString":"int56[]"}},"visibility":"internal"},{"constant":false,"id":1581,"mutability":"mutable","name":"secondsPerLiquidityCumulativeX128s","nameLocation":"1235:34:15","nodeType":"VariableDeclaration","scope":1666,"src":"1218:51:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint160_$dyn_memory_ptr","typeString":"uint160[]"},"typeName":{"baseType":{"id":1579,"name":"uint160","nodeType":"ElementaryTypeName","src":"1218:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":1580,"nodeType":"ArrayTypeName","src":"1218:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint160_$dyn_storage_ptr","typeString":"uint160[]"}},"visibility":"internal"}],"id":1588,"initialValue":{"arguments":[{"id":1586,"name":"secondsAgos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"1311:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint32_$dyn_memory_ptr","typeString":"uint32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint32_$dyn_memory_ptr","typeString":"uint32[] memory"}],"expression":{"arguments":[{"id":1583,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"1297:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1582,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"1282:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$182_$","typeString":"type(contract IUniswapV3Pool)"}},"id":1584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1282:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$182","typeString":"contract IUniswapV3Pool"}},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1303:7:15","memberName":"observe","nodeType":"MemberAccess","referencedDeclaration":308,"src":"1282:28:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_array$_t_uint32_$dyn_memory_ptr_$returns$_t_array$_t_int56_$dyn_memory_ptr_$_t_array$_t_uint160_$dyn_memory_ptr_$","typeString":"function (uint32[] memory) view external returns (int56[] memory,uint160[] memory)"}},"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1282:41:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_int56_$dyn_memory_ptr_$_t_array$_t_uint160_$dyn_memory_ptr_$","typeString":"tuple(int56[] memory,uint160[] memory)"}},"nodeType":"VariableDeclarationStatement","src":"1160:163:15"},{"assignments":[1590],"declarations":[{"constant":false,"id":1590,"mutability":"mutable","name":"tickCumulativesDelta","nameLocation":"1340:20:15","nodeType":"VariableDeclaration","scope":1666,"src":"1334:26:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":1589,"name":"int56","nodeType":"ElementaryTypeName","src":"1334:5:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"}],"id":1598,"initialValue":{"commonType":{"typeIdentifier":"t_int56","typeString":"int56"},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1591,"name":"tickCumulatives","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"1363:15:15","typeDescriptions":{"typeIdentifier":"t_array$_t_int56_$dyn_memory_ptr","typeString":"int56[] memory"}},"id":1593,"indexExpression":{"hexValue":"31","id":1592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1379:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1363:18:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"baseExpression":{"id":1594,"name":"tickCumulatives","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"1384:15:15","typeDescriptions":{"typeIdentifier":"t_array$_t_int56_$dyn_memory_ptr","typeString":"int56[] memory"}},"id":1596,"indexExpression":{"hexValue":"30","id":1595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1400:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1384:18:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"src":"1363:39:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"VariableDeclarationStatement","src":"1334:68:15"},{"assignments":[1600],"declarations":[{"constant":false,"id":1600,"mutability":"mutable","name":"secondsPerLiquidityCumulativesDelta","nameLocation":"1420:35:15","nodeType":"VariableDeclaration","scope":1666,"src":"1412:43:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1599,"name":"uint160","nodeType":"ElementaryTypeName","src":"1412:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"id":1608,"initialValue":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1601,"name":"secondsPerLiquidityCumulativeX128s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"1458:34:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint160_$dyn_memory_ptr","typeString":"uint160[] memory"}},"id":1603,"indexExpression":{"hexValue":"31","id":1602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1510:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1458:67:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"baseExpression":{"id":1604,"name":"secondsPerLiquidityCumulativeX128s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"1528:34:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint160_$dyn_memory_ptr","typeString":"uint160[] memory"}},"id":1606,"indexExpression":{"hexValue":"30","id":1605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1563:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1528:37:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"1458:107:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"VariableDeclarationStatement","src":"1412:153:15"},{"expression":{"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1609,"name":"arithmeticMeanTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"1576:18:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_int56","typeString":"int56"},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1612,"name":"tickCumulativesDelta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"1603:20:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"arguments":[{"id":1615,"name":"secondsAgo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"1632:10:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":1614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1626:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":1613,"name":"int32","nodeType":"ElementaryTypeName","src":"1626:5:15","typeDescriptions":{}}},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1626:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"1603:40:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int56","typeString":"int56"}],"id":1611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1597:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":1610,"name":"int24","nodeType":"ElementaryTypeName","src":"1597:5:15","typeDescriptions":{}}},"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1597:47:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"1576:68:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":1620,"nodeType":"ExpressionStatement","src":"1576:68:15"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int56","typeString":"int56"},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1621,"name":"tickCumulativesDelta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"1716:20:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1739:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1716:24:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int56","typeString":"int56"},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int56","typeString":"int56"},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1624,"name":"tickCumulativesDelta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"1757:20:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"arguments":[{"id":1627,"name":"secondsAgo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"1786:10:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":1626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1780:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":1625,"name":"int32","nodeType":"ElementaryTypeName","src":"1780:5:15","typeDescriptions":{}}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1780:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"1757:40:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1801:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1757:45:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1632,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1756:47:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1716:87:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1637,"nodeType":"IfStatement","src":"1699:135:15","trueBody":{"expression":{"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1814:20:15","subExpression":{"id":1634,"name":"arithmeticMeanTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"1814:18:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":1636,"nodeType":"ExpressionStatement","src":"1814:20:15"}},{"assignments":[1639],"declarations":[{"constant":false,"id":1639,"mutability":"mutable","name":"secondsAgoX160","nameLocation":"1970:14:15","nodeType":"VariableDeclaration","scope":1666,"src":"1962:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":1638,"name":"uint192","nodeType":"ElementaryTypeName","src":"1962:7:15","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"id":1650,"initialValue":{"commonType":{"typeIdentifier":"t_uint192","typeString":"uint192"},"id":1649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1642,"name":"secondsAgo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"1995:10:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":1641,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1987:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":1640,"name":"uint192","nodeType":"ElementaryTypeName","src":"1987:7:15","typeDescriptions":{}}},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1987:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"arguments":[{"id":1646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2014:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1645,"name":"uint160","nodeType":"ElementaryTypeName","src":"2014:7:15","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":1644,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2009:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2009:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":1648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2023:3:15","memberName":"max","nodeType":"MemberAccess","src":"2009:17:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"1987:39:15","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"nodeType":"VariableDeclarationStatement","src":"1962:64:15"},{"expression":{"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1651,"name":"harmonicMeanLiquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"2036:21:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint192","typeString":"uint192"},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1654,"name":"secondsAgoX160","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"2081:14:15","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint192","typeString":"uint192"},"id":1660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1657,"name":"secondsPerLiquidityCumulativesDelta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"2123:35:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1656,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2115:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":1655,"name":"uint192","nodeType":"ElementaryTypeName","src":"2115:7:15","typeDescriptions":{}}},"id":1658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2115:44:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":1659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2163:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"2115:50:15","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}}],"id":1661,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2114:52:15","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"src":"2081:85:15","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint192","typeString":"uint192"}],"id":1653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2060:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1652,"name":"uint128","nodeType":"ElementaryTypeName","src":"2060:7:15","typeDescriptions":{}}},"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2060:116:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"2036:140:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":1665,"nodeType":"ExpressionStatement","src":"2036:140:15"}]},"documentation":{"id":1533,"nodeType":"StructuredDocumentation","src":"307:496:15","text":"@notice Calculates time-weighted means of tick and liquidity for a given Uniswap V3 pool\n @param pool Address of the pool that we want to observe\n @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\n @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\n @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp"},"id":1667,"implemented":true,"kind":"function","modifiers":[],"name":"consult","nameLocation":"817:7:15","nodeType":"FunctionDefinition","parameters":{"id":1538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1535,"mutability":"mutable","name":"pool","nameLocation":"842:4:15","nodeType":"VariableDeclaration","scope":1667,"src":"834:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1534,"name":"address","nodeType":"ElementaryTypeName","src":"834:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1537,"mutability":"mutable","name":"secondsAgo","nameLocation":"863:10:15","nodeType":"VariableDeclaration","scope":1667,"src":"856:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1536,"name":"uint32","nodeType":"ElementaryTypeName","src":"856:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"824:55:15"},"returnParameters":{"id":1543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1540,"mutability":"mutable","name":"arithmeticMeanTick","nameLocation":"933:18:15","nodeType":"VariableDeclaration","scope":1667,"src":"927:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1539,"name":"int24","nodeType":"ElementaryTypeName","src":"927:5:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1542,"mutability":"mutable","name":"harmonicMeanLiquidity","nameLocation":"961:21:15","nodeType":"VariableDeclaration","scope":1667,"src":"953:29:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1541,"name":"uint128","nodeType":"ElementaryTypeName","src":"953:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"926:57:15"},"scope":2128,"src":"808:1375:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1764,"nodeType":"Block","src":"2864:840:15","statements":[{"assignments":[1682],"declarations":[{"constant":false,"id":1682,"mutability":"mutable","name":"sqrtRatioX96","nameLocation":"2882:12:15","nodeType":"VariableDeclaration","scope":1764,"src":"2874:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1681,"name":"uint160","nodeType":"ElementaryTypeName","src":"2874:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"id":1687,"initialValue":{"arguments":[{"id":1685,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1670,"src":"2925:4:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"expression":{"id":1683,"name":"TickMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"2897:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TickMath_$2666_$","typeString":"type(library TickMath)"}},"id":1684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2906:18:15","memberName":"getSqrtRatioAtTick","nodeType":"MemberAccess","referencedDeclaration":2526,"src":"2897:27:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$returns$_t_uint160_$","typeString":"function (int24) pure returns (uint160)"}},"id":1686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2897:33:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"VariableDeclarationStatement","src":"2874:56:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1688,"name":"sqrtRatioX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"3049:12:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3070:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1690,"name":"uint128","nodeType":"ElementaryTypeName","src":"3070:7:15","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":1689,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3065:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3065:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":1693,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3079:3:15","memberName":"max","nodeType":"MemberAccess","src":"3065:17:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"3049:33:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1762,"nodeType":"Block","src":"3355:343:15","statements":[{"assignments":[1729],"declarations":[{"constant":false,"id":1729,"mutability":"mutable","name":"ratioX128","nameLocation":"3377:9:15","nodeType":"VariableDeclaration","scope":1762,"src":"3369:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1728,"name":"uint256","nodeType":"ElementaryTypeName","src":"3369:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1738,"initialValue":{"arguments":[{"id":1732,"name":"sqrtRatioX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"3422:12:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"id":1733,"name":"sqrtRatioX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"3452:12:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},{"commonType":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"},"id":1736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3482:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":1735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3487:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"3482:7:15","typeDescriptions":{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_uint160","typeString":"uint160"},{"typeIdentifier":"t_rational_18446744073709551616_by_1","typeString":"int_const 18446744073709551616"}],"expression":{"id":1730,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"3389:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$1526_$","typeString":"type(library FullMath)"}},"id":1731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3398:6:15","memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":1482,"src":"3389:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3389:114:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3369:134:15"},{"expression":{"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1739,"name":"quoteAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1679,"src":"3517:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1740,"name":"baseToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1674,"src":"3531:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1741,"name":"quoteToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"3543:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3531:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"id":1755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3655:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":1754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3660:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3655:8:15","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}},{"id":1756,"name":"baseAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"3665:10:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1757,"name":"ratioX128","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"3677:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1751,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"3639:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$1526_$","typeString":"type(library FullMath)"}},"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3648:6:15","memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":1482,"src":"3639:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3639:48:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3531:156:15","trueExpression":{"arguments":[{"id":1745,"name":"ratioX128","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"3588:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1746,"name":"baseAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"3599:10:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"commonType":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"id":1749,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3611:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":1748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3616:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3611:8:15","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"}],"expression":{"id":1743,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"3572:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$1526_$","typeString":"type(library FullMath)"}},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3581:6:15","memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":1482,"src":"3572:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:48:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3517:170:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1761,"nodeType":"ExpressionStatement","src":"3517:170:15"}]},"id":1763,"nodeType":"IfStatement","src":"3045:653:15","trueBody":{"id":1727,"nodeType":"Block","src":"3084:265:15","statements":[{"assignments":[1696],"declarations":[{"constant":false,"id":1696,"mutability":"mutable","name":"ratioX192","nameLocation":"3106:9:15","nodeType":"VariableDeclaration","scope":1727,"src":"3098:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1695,"name":"uint256","nodeType":"ElementaryTypeName","src":"3098:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1703,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1699,"name":"sqrtRatioX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"3126:12:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3118:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1697,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:15","typeDescriptions":{}}},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3118:21:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1701,"name":"sqrtRatioX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"3142:12:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"3118:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3098:56:15"},{"expression":{"id":1725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1704,"name":"quoteAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1679,"src":"3168:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1705,"name":"baseToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1674,"src":"3182:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1706,"name":"quoteToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"3194:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3182:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"},"id":1720,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3306:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313932","id":1719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3311:3:15","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"src":"3306:8:15","typeDescriptions":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"}},{"id":1721,"name":"baseAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"3316:10:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":1722,"name":"ratioX192","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"3328:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1716,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"3290:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$1526_$","typeString":"type(library FullMath)"}},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3299:6:15","memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":1482,"src":"3290:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3290:48:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3182:156:15","trueExpression":{"arguments":[{"id":1710,"name":"ratioX192","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"3239:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1711,"name":"baseAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"3250:10:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"commonType":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"},"id":1714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3262:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313932","id":1713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3267:3:15","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"src":"3262:8:15","typeDescriptions":{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_rational_6277101735386680763835789423207666416102355444464034512896_by_1","typeString":"int_const 6277...(50 digits omitted)...2896"}],"expression":{"id":1708,"name":"FullMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"3223:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FullMath_$1526_$","typeString":"type(library FullMath)"}},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3232:6:15","memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":1482,"src":"3223:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3223:48:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3168:170:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1726,"nodeType":"ExpressionStatement","src":"3168:170:15"}]}}]},"documentation":{"id":1668,"nodeType":"StructuredDocumentation","src":"2189:493:15","text":"@notice Given a tick and a token amount, calculates the amount of token received in exchange\n @param tick Tick value used to calculate the quote\n @param baseAmount Amount of token to be converted\n @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\n @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\n @return quoteAmount Amount of quoteToken received for baseAmount of baseToken"},"id":1765,"implemented":true,"kind":"function","modifiers":[],"name":"getQuoteAtTick","nameLocation":"2696:14:15","nodeType":"FunctionDefinition","parameters":{"id":1677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1670,"mutability":"mutable","name":"tick","nameLocation":"2726:4:15","nodeType":"VariableDeclaration","scope":1765,"src":"2720:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1669,"name":"int24","nodeType":"ElementaryTypeName","src":"2720:5:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1672,"mutability":"mutable","name":"baseAmount","nameLocation":"2748:10:15","nodeType":"VariableDeclaration","scope":1765,"src":"2740:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1671,"name":"uint128","nodeType":"ElementaryTypeName","src":"2740:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":1674,"mutability":"mutable","name":"baseToken","nameLocation":"2776:9:15","nodeType":"VariableDeclaration","scope":1765,"src":"2768:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1673,"name":"address","nodeType":"ElementaryTypeName","src":"2768:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1676,"mutability":"mutable","name":"quoteToken","nameLocation":"2803:10:15","nodeType":"VariableDeclaration","scope":1765,"src":"2795:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1675,"name":"address","nodeType":"ElementaryTypeName","src":"2795:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2710:109:15"},"returnParameters":{"id":1680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1679,"mutability":"mutable","name":"quoteAmount","nameLocation":"2851:11:15","nodeType":"VariableDeclaration","scope":1765,"src":"2843:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1678,"name":"uint256","nodeType":"ElementaryTypeName","src":"2843:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2842:21:15"},"scope":2128,"src":"2687:1017:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1830,"nodeType":"Block","src":"4090:776:15","statements":[{"assignments":[null,null,1774,1776,null,null,null],"declarations":[null,null,{"constant":false,"id":1774,"mutability":"mutable","name":"observationIndex","nameLocation":"4149:16:15","nodeType":"VariableDeclaration","scope":1830,"src":"4142:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1773,"name":"uint16","nodeType":"ElementaryTypeName","src":"4142:6:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1776,"mutability":"mutable","name":"observationCardinality","nameLocation":"4186:22:15","nodeType":"VariableDeclaration","scope":1830,"src":"4179:29:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1775,"name":"uint16","nodeType":"ElementaryTypeName","src":"4179:6:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},null,null,null],"id":1782,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1778,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"4266:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1777,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"4251:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$182_$","typeString":"type(contract IUniswapV3Pool)"}},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4251:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$182","typeString":"contract IUniswapV3Pool"}},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4272:5:15","memberName":"slot0","nodeType":"MemberAccess","referencedDeclaration":529,"src":"4251:26:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$","typeString":"function () view external returns (uint160,int24,uint16,uint16,uint16,uint8,bool)"}},"id":1781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4251:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$","typeString":"tuple(uint160,int24,uint16,uint16,uint16,uint8,bool)"}},"nodeType":"VariableDeclarationStatement","src":"4100:179:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1784,"name":"observationCardinality","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"4297:22:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4322:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4297:26:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e49","id":1787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4325:4:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_e817963341ac54b6c6630a42fcd594b50ae6e47bc5952aa5478cb70078a54ca0","typeString":"literal_string \"NI\""},"value":"NI"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e817963341ac54b6c6630a42fcd594b50ae6e47bc5952aa5478cb70078a54ca0","typeString":"literal_string \"NI\""}],"id":1783,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4289:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4289:41:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1789,"nodeType":"ExpressionStatement","src":"4289:41:15"},{"assignments":[1791,null,null,1793],"declarations":[{"constant":false,"id":1791,"mutability":"mutable","name":"observationTimestamp","nameLocation":"4349:20:15","nodeType":"VariableDeclaration","scope":1830,"src":"4342:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1790,"name":"uint32","nodeType":"ElementaryTypeName","src":"4342:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},null,null,{"constant":false,"id":1793,"mutability":"mutable","name":"initialized","nameLocation":"4380:11:15","nodeType":"VariableDeclaration","scope":1830,"src":"4375:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1792,"name":"bool","nodeType":"ElementaryTypeName","src":"4375:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1805,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1798,"name":"observationIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"4452:16:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4471:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4452:20:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"id":1801,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4451:22:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1802,"name":"observationCardinality","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"4476:22:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"4451:47:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"arguments":[{"id":1795,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"4423:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1794,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"4395:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$182_$","typeString":"type(contract IUniswapV3Pool)"}},"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4395:42:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$182","typeString":"contract IUniswapV3Pool"}},"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4438:12:15","memberName":"observations","nodeType":"MemberAccess","referencedDeclaration":615,"src":"4395:55:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$","typeString":"function (uint256) view external returns (uint32,int56,uint160,bool)"}},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4395:104:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$","typeString":"tuple(uint32,int56,uint160,bool)"}},"nodeType":"VariableDeclarationStatement","src":"4341:158:15"},{"condition":{"id":1807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4684:12:15","subExpression":{"id":1806,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"4685:11:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1819,"nodeType":"IfStatement","src":"4680:110:15","trueBody":{"id":1818,"nodeType":"Block","src":"4698:92:15","statements":[{"expression":{"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":1808,"name":"observationTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"4713:20:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},null,null,null],"id":1809,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"4712:28:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$__$__$__$","typeString":"tuple(uint32,,,)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":1814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4777:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"arguments":[{"id":1811,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"4758:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1810,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"4743:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$182_$","typeString":"type(contract IUniswapV3Pool)"}},"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4743:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$182","typeString":"contract IUniswapV3Pool"}},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4764:12:15","memberName":"observations","nodeType":"MemberAccess","referencedDeclaration":615,"src":"4743:33:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$","typeString":"function (uint256) view external returns (uint32,int56,uint160,bool)"}},"id":1815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4743:36:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$","typeString":"tuple(uint32,int56,uint160,bool)"}},"src":"4712:67:15","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1817,"nodeType":"ExpressionStatement","src":"4712:67:15"}]}},{"expression":{"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1820,"name":"secondsAgo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"4800:10:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":1827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":1823,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4820:5:15","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4826:9:15","memberName":"timestamp","nodeType":"MemberAccess","src":"4820:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4813:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":1821,"name":"uint32","nodeType":"ElementaryTypeName","src":"4813:6:15","typeDescriptions":{}}},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4813:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1826,"name":"observationTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"4839:20:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4813:46:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4800:59:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":1829,"nodeType":"ExpressionStatement","src":"4800:59:15"}]},"documentation":{"id":1766,"nodeType":"StructuredDocumentation","src":"3710:265:15","text":"@notice Given a pool, it returns the number of seconds ago of the oldest stored observation\n @param pool Address of Uniswap V3 pool that we want to observe\n @return secondsAgo The number of seconds ago of the oldest observation stored for the pool"},"id":1831,"implemented":true,"kind":"function","modifiers":[],"name":"getOldestObservationSecondsAgo","nameLocation":"3989:30:15","nodeType":"FunctionDefinition","parameters":{"id":1769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1768,"mutability":"mutable","name":"pool","nameLocation":"4037:4:15","nodeType":"VariableDeclaration","scope":1831,"src":"4029:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1767,"name":"address","nodeType":"ElementaryTypeName","src":"4029:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4019:28:15"},"returnParameters":{"id":1772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1771,"mutability":"mutable","name":"secondsAgo","nameLocation":"4078:10:15","nodeType":"VariableDeclaration","scope":1831,"src":"4071:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1770,"name":"uint32","nodeType":"ElementaryTypeName","src":"4071:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"4070:19:15"},"scope":2128,"src":"3980:886:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1976,"nodeType":"Block","src":"5201:1861:15","statements":[{"assignments":[null,1842,1844,1846,null,null,null],"declarations":[null,{"constant":false,"id":1842,"mutability":"mutable","name":"tick","nameLocation":"5245:4:15","nodeType":"VariableDeclaration","scope":1976,"src":"5239:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1841,"name":"int24","nodeType":"ElementaryTypeName","src":"5239:5:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1844,"mutability":"mutable","name":"observationIndex","nameLocation":"5270:16:15","nodeType":"VariableDeclaration","scope":1976,"src":"5263:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1843,"name":"uint16","nodeType":"ElementaryTypeName","src":"5263:6:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":1846,"mutability":"mutable","name":"observationCardinality","nameLocation":"5307:22:15","nodeType":"VariableDeclaration","scope":1976,"src":"5300:29:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1845,"name":"uint16","nodeType":"ElementaryTypeName","src":"5300:6:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},null,null,null],"id":1852,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1848,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"5387:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1847,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"5372:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$182_$","typeString":"type(contract IUniswapV3Pool)"}},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5372:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$182","typeString":"contract IUniswapV3Pool"}},"id":1850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5393:5:15","memberName":"slot0","nodeType":"MemberAccess","referencedDeclaration":529,"src":"5372:26:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$","typeString":"function () view external returns (uint160,int24,uint16,uint16,uint16,uint8,bool)"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5372:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint160_$_t_int24_$_t_uint16_$_t_uint16_$_t_uint16_$_t_uint8_$_t_bool_$","typeString":"tuple(uint160,int24,uint16,uint16,uint16,uint8,bool)"}},"nodeType":"VariableDeclarationStatement","src":"5211:189:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint16","typeString":"uint16"},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1854,"name":"observationCardinality","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1846,"src":"5502:22:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5527:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5502:26:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e454f","id":1857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5530:5:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_6dc5790d7c4bfaaa2e4f8e2cd517bacd4a3831f85c0964e56f2743cbb847bc46","typeString":"literal_string \"NEO\""},"value":"NEO"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6dc5790d7c4bfaaa2e4f8e2cd517bacd4a3831f85c0964e56f2743cbb847bc46","typeString":"literal_string \"NEO\""}],"id":1853,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5494:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5494:42:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1859,"nodeType":"ExpressionStatement","src":"5494:42:15"},{"assignments":[1861,1863,1865,null],"declarations":[{"constant":false,"id":1861,"mutability":"mutable","name":"observationTimestamp","nameLocation":"5874:20:15","nodeType":"VariableDeclaration","scope":1976,"src":"5867:27:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1860,"name":"uint32","nodeType":"ElementaryTypeName","src":"5867:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1863,"mutability":"mutable","name":"tickCumulative","nameLocation":"5914:14:15","nodeType":"VariableDeclaration","scope":1976,"src":"5908:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":1862,"name":"int56","nodeType":"ElementaryTypeName","src":"5908:5:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":1865,"mutability":"mutable","name":"secondsPerLiquidityCumulativeX128","nameLocation":"5950:33:15","nodeType":"VariableDeclaration","scope":1976,"src":"5942:41:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1864,"name":"uint160","nodeType":"ElementaryTypeName","src":"5942:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},null],"id":1872,"initialValue":{"arguments":[{"id":1870,"name":"observationIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"6032:16:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"arguments":[{"id":1867,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"6013:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1866,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"5998:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$182_$","typeString":"type(contract IUniswapV3Pool)"}},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$182","typeString":"contract IUniswapV3Pool"}},"id":1869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6019:12:15","memberName":"observations","nodeType":"MemberAccess","referencedDeclaration":615,"src":"5998:33:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$","typeString":"function (uint256) view external returns (uint32,int56,uint160,bool)"}},"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:51:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$","typeString":"tuple(uint32,int56,uint160,bool)"}},"nodeType":"VariableDeclarationStatement","src":"5853:196:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":1879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1873,"name":"observationTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"6063:20:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"expression":{"id":1876,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6094:5:15","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6100:9:15","memberName":"timestamp","nodeType":"MemberAccess","src":"6094:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1875,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6087:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":1874,"name":"uint32","nodeType":"ElementaryTypeName","src":"6087:6:15","typeDescriptions":{}}},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6087:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6063:47:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1889,"nodeType":"IfStatement","src":"6059:125:15","trueBody":{"id":1888,"nodeType":"Block","src":"6112:72:15","statements":[{"expression":{"components":[{"id":1880,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"6134:4:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1882,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"6155:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1881,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"6140:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$182_$","typeString":"type(contract IUniswapV3Pool)"}},"id":1883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$182","typeString":"contract IUniswapV3Pool"}},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6161:9:15","memberName":"liquidity","nodeType":"MemberAccess","referencedDeclaration":555,"src":"6140:30:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint128_$","typeString":"function () view external returns (uint128)"}},"id":1885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:32:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"id":1886,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6133:40:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_uint128_$","typeString":"tuple(int24,uint128)"}},"functionReturnParameters":1840,"id":1887,"nodeType":"Return","src":"6126:47:15"}]}},{"assignments":[1891],"declarations":[{"constant":false,"id":1891,"mutability":"mutable","name":"prevIndex","nameLocation":"6202:9:15","nodeType":"VariableDeclaration","scope":1976,"src":"6194:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1890,"name":"uint256","nodeType":"ElementaryTypeName","src":"6194:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1903,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1894,"name":"observationIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"6223:16:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint16","typeString":"uint16"}],"id":1893,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6215:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1892,"name":"uint256","nodeType":"ElementaryTypeName","src":"6215:7:15","typeDescriptions":{}}},"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1896,"name":"observationCardinality","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1846,"src":"6255:22:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"6215:62:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6292:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6215:78:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1900,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6214:80:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1901,"name":"observationCardinality","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1846,"src":"6297:22:15","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"6214:105:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6194:125:15"},{"assignments":[1905,1907,1909,1911],"declarations":[{"constant":false,"id":1905,"mutability":"mutable","name":"prevObservationTimestamp","nameLocation":"6350:24:15","nodeType":"VariableDeclaration","scope":1976,"src":"6343:31:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1904,"name":"uint32","nodeType":"ElementaryTypeName","src":"6343:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1907,"mutability":"mutable","name":"prevTickCumulative","nameLocation":"6394:18:15","nodeType":"VariableDeclaration","scope":1976,"src":"6388:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":1906,"name":"int56","nodeType":"ElementaryTypeName","src":"6388:5:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"},{"constant":false,"id":1909,"mutability":"mutable","name":"prevSecondsPerLiquidityCumulativeX128","nameLocation":"6434:37:15","nodeType":"VariableDeclaration","scope":1976,"src":"6426:45:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1908,"name":"uint160","nodeType":"ElementaryTypeName","src":"6426:7:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"},{"constant":false,"id":1911,"mutability":"mutable","name":"prevInitialized","nameLocation":"6490:15:15","nodeType":"VariableDeclaration","scope":1976,"src":"6485:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1910,"name":"bool","nodeType":"ElementaryTypeName","src":"6485:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1918,"initialValue":{"arguments":[{"id":1916,"name":"prevIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"6552:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":1913,"name":"pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"6533:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1912,"name":"IUniswapV3Pool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"6518:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV3Pool_$182_$","typeString":"type(contract IUniswapV3Pool)"}},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6518:20:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV3Pool_$182","typeString":"contract IUniswapV3Pool"}},"id":1915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6539:12:15","memberName":"observations","nodeType":"MemberAccess","referencedDeclaration":615,"src":"6518:33:15","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$returns$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$","typeString":"function (uint256) view external returns (uint32,int56,uint160,bool)"}},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6518:44:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint32_$_t_int56_$_t_uint160_$_t_bool_$","typeString":"tuple(uint32,int56,uint160,bool)"}},"nodeType":"VariableDeclarationStatement","src":"6329:233:15"},{"expression":{"arguments":[{"id":1920,"name":"prevInitialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1911,"src":"6581:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f4e49","id":1921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6598:5:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_4375a34c158c497e1dec923d39179cd2bff1d358f7876b16ed4f850d3b707895","typeString":"literal_string \"ONI\""},"value":"ONI"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4375a34c158c497e1dec923d39179cd2bff1d358f7876b16ed4f850d3b707895","typeString":"literal_string \"ONI\""}],"id":1919,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6573:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6573:31:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1923,"nodeType":"ExpressionStatement","src":"6573:31:15"},{"assignments":[1925],"declarations":[{"constant":false,"id":1925,"mutability":"mutable","name":"delta","nameLocation":"6622:5:15","nodeType":"VariableDeclaration","scope":1976,"src":"6615:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1924,"name":"uint32","nodeType":"ElementaryTypeName","src":"6615:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"id":1929,"initialValue":{"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1926,"name":"observationTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"6630:20:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1927,"name":"prevObservationTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"6653:24:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6630:47:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"VariableDeclarationStatement","src":"6615:62:15"},{"expression":{"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1930,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"6687:4:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_int56","typeString":"int56"},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int56","typeString":"int56"},"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1933,"name":"tickCumulative","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"6701:14:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1934,"name":"prevTickCumulative","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"6718:18:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"src":"6701:35:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}}],"id":1936,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6700:37:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"arguments":[{"id":1939,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1925,"src":"6746:5:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":1938,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6740:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":1937,"name":"int32","nodeType":"ElementaryTypeName","src":"6740:5:15","typeDescriptions":{}}},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6740:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"6700:52:15","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int56","typeString":"int56"}],"id":1932,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6694:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":1931,"name":"int24","nodeType":"ElementaryTypeName","src":"6694:5:15","typeDescriptions":{}}},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6694:59:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"6687:66:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":1944,"nodeType":"ExpressionStatement","src":"6687:66:15"},{"assignments":[1946],"declarations":[{"constant":false,"id":1946,"mutability":"mutable","name":"liquidity","nameLocation":"6771:9:15","nodeType":"VariableDeclaration","scope":1976,"src":"6763:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1945,"name":"uint128","nodeType":"ElementaryTypeName","src":"6763:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"id":1971,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint192","typeString":"uint192"},"id":1969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint192","typeString":"uint192"},"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1951,"name":"delta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1925,"src":"6813:5:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":1950,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6805:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":1949,"name":"uint192","nodeType":"ElementaryTypeName","src":"6805:7:15","typeDescriptions":{}}},"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6805:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"arguments":[{"id":1955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6827:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1954,"name":"uint160","nodeType":"ElementaryTypeName","src":"6827:7:15","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":1953,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6822:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6822:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":1957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6836:3:15","memberName":"max","nodeType":"MemberAccess","src":"6822:17:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"6805:34:15","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}}],"id":1959,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6804:36:15","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint192","typeString":"uint192"},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":1964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1962,"name":"secondsPerLiquidityCumulativeX128","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"6889:33:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1963,"name":"prevSecondsPerLiquidityCumulativeX128","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1909,"src":"6949:37:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"6889:97:15","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1961,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6860:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":1960,"name":"uint192","nodeType":"ElementaryTypeName","src":"6860:7:15","typeDescriptions":{}}},"id":1965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6860:144:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":1966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7008:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"6860:150:15","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}}],"id":1968,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6859:152:15","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"src":"6804:207:15","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint192","typeString":"uint192"}],"id":1948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6783:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1947,"name":"uint128","nodeType":"ElementaryTypeName","src":"6783:7:15","typeDescriptions":{}}},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6783:238:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"VariableDeclarationStatement","src":"6763:258:15"},{"expression":{"components":[{"id":1972,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"7039:4:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},{"id":1973,"name":"liquidity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"7045:9:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"id":1974,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7038:17:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_int24_$_t_uint128_$","typeString":"tuple(int24,uint128)"}},"functionReturnParameters":1840,"id":1975,"nodeType":"Return","src":"7031:24:15"}]},"documentation":{"id":1832,"nodeType":"StructuredDocumentation","src":"4872:215:15","text":"@notice Given a pool, it returns the tick value as of the start of the current block\n @param pool Address of Uniswap V3 pool\n @return The tick that the pool was in at the start of the current block"},"id":1977,"implemented":true,"kind":"function","modifiers":[],"name":"getBlockStartingTickAndLiquidity","nameLocation":"5101:32:15","nodeType":"FunctionDefinition","parameters":{"id":1835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1834,"mutability":"mutable","name":"pool","nameLocation":"5151:4:15","nodeType":"VariableDeclaration","scope":1977,"src":"5143:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1833,"name":"address","nodeType":"ElementaryTypeName","src":"5143:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5133:28:15"},"returnParameters":{"id":1840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1837,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1977,"src":"5185:5:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1836,"name":"int24","nodeType":"ElementaryTypeName","src":"5185:5:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1839,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1977,"src":"5192:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1838,"name":"uint128","nodeType":"ElementaryTypeName","src":"5192:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"5184:16:15"},"scope":2128,"src":"5092:1970:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"OracleLibrary.WeightedTickData","id":1982,"members":[{"constant":false,"id":1979,"mutability":"mutable","name":"tick","nameLocation":"7184:4:15","nodeType":"VariableDeclaration","scope":1982,"src":"7178:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1978,"name":"int24","nodeType":"ElementaryTypeName","src":"7178:5:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":false,"id":1981,"mutability":"mutable","name":"weight","nameLocation":"7206:6:15","nodeType":"VariableDeclaration","scope":1982,"src":"7198:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1980,"name":"uint128","nodeType":"ElementaryTypeName","src":"7198:7:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"name":"WeightedTickData","nameLocation":"7151:16:15","nodeType":"StructDefinition","scope":2128,"src":"7144:75:15","visibility":"public"},{"body":{"id":2064,"nodeType":"Block","src":"7962:778:15","statements":[{"assignments":[1993],"declarations":[{"constant":false,"id":1993,"mutability":"mutable","name":"numerator","nameLocation":"8055:9:15","nodeType":"VariableDeclaration","scope":2064,"src":"8048:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1992,"name":"int256","nodeType":"ElementaryTypeName","src":"8048:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":1994,"nodeType":"VariableDeclarationStatement","src":"8048:16:15"},{"assignments":[1996],"declarations":[{"constant":false,"id":1996,"mutability":"mutable","name":"denominator","nameLocation":"8129:11:15","nodeType":"VariableDeclaration","scope":2064,"src":"8121:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1995,"name":"uint256","nodeType":"ElementaryTypeName","src":"8121:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1997,"nodeType":"VariableDeclarationStatement","src":"8121:19:15"},{"body":{"id":2033,"nodeType":"Block","src":"8305:195:15","statements":[{"expression":{"id":2024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2008,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"8319:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":2009,"name":"weightedTickData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"8348:16:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_WeightedTickData_$1982_memory_ptr_$dyn_memory_ptr","typeString":"struct OracleLibrary.WeightedTickData memory[] memory"}},"id":2011,"indexExpression":{"id":2010,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"8365:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8348:19:15","typeDescriptions":{"typeIdentifier":"t_struct$_WeightedTickData_$1982_memory_ptr","typeString":"struct OracleLibrary.WeightedTickData memory"}},"id":2012,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8368:4:15","memberName":"tick","nodeType":"MemberAccess","referencedDeclaration":1979,"src":"8348:24:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[{"arguments":[{"expression":{"baseExpression":{"id":2017,"name":"weightedTickData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"8406:16:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_WeightedTickData_$1982_memory_ptr_$dyn_memory_ptr","typeString":"struct OracleLibrary.WeightedTickData memory[] memory"}},"id":2019,"indexExpression":{"id":2018,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"8423:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8406:19:15","typeDescriptions":{"typeIdentifier":"t_struct$_WeightedTickData_$1982_memory_ptr","typeString":"struct OracleLibrary.WeightedTickData memory"}},"id":2020,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8426:6:15","memberName":"weight","nodeType":"MemberAccess","referencedDeclaration":1981,"src":"8406:26:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"}],"id":2016,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8398:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2015,"name":"uint256","nodeType":"ElementaryTypeName","src":"8398:7:15","typeDescriptions":{}}},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8398:35:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8391:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2013,"name":"int256","nodeType":"ElementaryTypeName","src":"8391:6:15","typeDescriptions":{}}},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8391:43:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"8348:86:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"8319:115:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2025,"nodeType":"ExpressionStatement","src":"8319:115:15"},{"expression":{"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2026,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"8448:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"baseExpression":{"id":2027,"name":"weightedTickData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"8463:16:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_WeightedTickData_$1982_memory_ptr_$dyn_memory_ptr","typeString":"struct OracleLibrary.WeightedTickData memory[] memory"}},"id":2029,"indexExpression":{"id":2028,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"8480:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8463:19:15","typeDescriptions":{"typeIdentifier":"t_struct$_WeightedTickData_$1982_memory_ptr","typeString":"struct OracleLibrary.WeightedTickData memory"}},"id":2030,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8483:6:15","memberName":"weight","nodeType":"MemberAccess","referencedDeclaration":1981,"src":"8463:26:15","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8448:41:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2032,"nodeType":"ExpressionStatement","src":"8448:41:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2001,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"8271:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2002,"name":"weightedTickData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"8275:16:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_WeightedTickData_$1982_memory_ptr_$dyn_memory_ptr","typeString":"struct OracleLibrary.WeightedTickData memory[] memory"}},"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8292:6:15","memberName":"length","nodeType":"MemberAccess","src":"8275:23:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8271:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2034,"initializationExpression":{"assignments":[1999],"declarations":[{"constant":false,"id":1999,"mutability":"mutable","name":"i","nameLocation":"8268:1:15","nodeType":"VariableDeclaration","scope":2034,"src":"8260:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1998,"name":"uint256","nodeType":"ElementaryTypeName","src":"8260:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2000,"nodeType":"VariableDeclarationStatement","src":"8260:9:15"},"loopExpression":{"expression":{"id":2006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8300:3:15","subExpression":{"id":2005,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"8300:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2007,"nodeType":"ExpressionStatement","src":"8300:3:15"},"nodeType":"ForStatement","src":"8255:245:15"},{"expression":{"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2035,"name":"weightedArithmeticMeanTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"8510:26:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2038,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"8545:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"arguments":[{"id":2041,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"8564:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2040,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8557:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2039,"name":"int256","nodeType":"ElementaryTypeName","src":"8557:6:15","typeDescriptions":{}}},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8557:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"8545:31:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2037,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8539:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":2036,"name":"int24","nodeType":"ElementaryTypeName","src":"8539:5:15","typeDescriptions":{}}},"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8539:38:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"8510:67:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":2046,"nodeType":"ExpressionStatement","src":"8510:67:15"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2047,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"8636:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":2048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8648:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8636:13:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2050,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"8654:9:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"arguments":[{"id":2053,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1996,"src":"8673:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2052,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8666:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2051,"name":"int256","nodeType":"ElementaryTypeName","src":"8666:6:15","typeDescriptions":{}}},"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8666:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"8654:31:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8689:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8654:36:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2058,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8653:38:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8636:55:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2063,"nodeType":"IfStatement","src":"8632:101:15","trueBody":{"expression":{"id":2061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"8705:28:15","subExpression":{"id":2060,"name":"weightedArithmeticMeanTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"8705:26:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":2062,"nodeType":"ExpressionStatement","src":"8705:28:15"}}]},"documentation":{"id":1983,"nodeType":"StructuredDocumentation","src":"7225:578:15","text":"@notice Given an array of ticks and weights, calculates the weighted arithmetic mean tick\n @param weightedTickData An array of ticks and weights\n @return weightedArithmeticMeanTick The weighted arithmetic mean tick\n @dev Each entry of `weightedTickData` should represents ticks from pools with the same underlying pool tokens. If they do not,\n extreme care must be taken to ensure that ticks are comparable (including decimal differences).\n @dev Note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price."},"id":2065,"implemented":true,"kind":"function","modifiers":[],"name":"getWeightedArithmeticMeanTick","nameLocation":"7817:29:15","nodeType":"FunctionDefinition","parameters":{"id":1988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1987,"mutability":"mutable","name":"weightedTickData","nameLocation":"7882:16:15","nodeType":"VariableDeclaration","scope":2065,"src":"7856:42:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_WeightedTickData_$1982_memory_ptr_$dyn_memory_ptr","typeString":"struct OracleLibrary.WeightedTickData[]"},"typeName":{"baseType":{"id":1985,"nodeType":"UserDefinedTypeName","pathNode":{"id":1984,"name":"WeightedTickData","nameLocations":["7856:16:15"],"nodeType":"IdentifierPath","referencedDeclaration":1982,"src":"7856:16:15"},"referencedDeclaration":1982,"src":"7856:16:15","typeDescriptions":{"typeIdentifier":"t_struct$_WeightedTickData_$1982_storage_ptr","typeString":"struct OracleLibrary.WeightedTickData"}},"id":1986,"nodeType":"ArrayTypeName","src":"7856:18:15","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_WeightedTickData_$1982_storage_$dyn_storage_ptr","typeString":"struct OracleLibrary.WeightedTickData[]"}},"visibility":"internal"}],"src":"7846:58:15"},"returnParameters":{"id":1991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1990,"mutability":"mutable","name":"weightedArithmeticMeanTick","nameLocation":"7934:26:15","nodeType":"VariableDeclaration","scope":2065,"src":"7928:32:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":1989,"name":"int24","nodeType":"ElementaryTypeName","src":"7928:5:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"7927:34:15"},"scope":2128,"src":"7808:932:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2126,"nodeType":"Block","src":"9399:441:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2078,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"9417:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9424:6:15","memberName":"length","nodeType":"MemberAccess","src":"9417:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9433:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9417:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2082,"name":"ticks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2072,"src":"9438:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_int24_$dyn_memory_ptr","typeString":"int24[] memory"}},"id":2083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9444:6:15","memberName":"length","nodeType":"MemberAccess","src":"9438:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9417:33:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"444c","id":2085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9452:4:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_f6c9155cb7d5666d109a64d0e580ecac0cec91dae3b0325b400a4ad4d41fbcb9","typeString":"literal_string \"DL\""},"value":"DL"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f6c9155cb7d5666d109a64d0e580ecac0cec91dae3b0325b400a4ad4d41fbcb9","typeString":"literal_string \"DL\""}],"id":2077,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9409:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9409:48:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2087,"nodeType":"ExpressionStatement","src":"9409:48:15"},{"body":{"id":2124,"nodeType":"Block","src":"9511:323:15","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2099,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"9702:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2103,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2100,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"9709:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9713:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9709:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9702:13:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"baseExpression":{"id":2104,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"9718:6:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2106,"indexExpression":{"id":2105,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"9725:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9718:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9702:25:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2115,"name":"syntheticTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"9794:13:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"baseExpression":{"id":2116,"name":"ticks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2072,"src":"9811:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_int24_$dyn_memory_ptr","typeString":"int24[] memory"}},"id":2120,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2117,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"9817:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9821:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9817:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9811:12:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"9794:29:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9702:121:15","trueExpression":{"id":2114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2108,"name":"syntheticTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"9746:13:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":2109,"name":"ticks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2072,"src":"9763:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_int24_$dyn_memory_ptr","typeString":"int24[] memory"}},"id":2113,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2110,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"9769:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9773:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9769:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9763:12:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"9746:29:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2123,"nodeType":"ExpressionStatement","src":"9702:121:15"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2092,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"9487:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":2093,"name":"ticks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2072,"src":"9492:5:15","typeDescriptions":{"typeIdentifier":"t_array$_t_int24_$dyn_memory_ptr","typeString":"int24[] memory"}},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9498:6:15","memberName":"length","nodeType":"MemberAccess","src":"9492:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9487:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2125,"initializationExpression":{"assignments":[2089],"declarations":[{"constant":false,"id":2089,"mutability":"mutable","name":"i","nameLocation":"9480:1:15","nodeType":"VariableDeclaration","scope":2125,"src":"9472:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2088,"name":"uint256","nodeType":"ElementaryTypeName","src":"9472:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2091,"initialValue":{"hexValue":"31","id":2090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"9472:13:15"},"loopExpression":{"expression":{"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9506:3:15","subExpression":{"id":2096,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"9506:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2098,"nodeType":"ExpressionStatement","src":"9506:3:15"},"nodeType":"ForStatement","src":"9467:367:15"}]},"documentation":{"id":2066,"nodeType":"StructuredDocumentation","src":"8746:509:15","text":"@notice Returns the \"synthetic\" tick which represents the price of the first entry in `tokens` in terms of the last\n @dev Useful for calculating relative prices along routes.\n @dev There must be one tick for each pairwise set of tokens.\n @param tokens The token contract addresses\n @param ticks The ticks, representing the price of each token pair in `tokens`\n @return syntheticTick The synthetic tick, representing the relative price of the outermost tokens in `tokens`"},"id":2127,"implemented":true,"kind":"function","modifiers":[],"name":"getChainedPrice","nameLocation":"9269:15:15","nodeType":"FunctionDefinition","parameters":{"id":2073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2069,"mutability":"mutable","name":"tokens","nameLocation":"9311:6:15","nodeType":"VariableDeclaration","scope":2127,"src":"9294:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2067,"name":"address","nodeType":"ElementaryTypeName","src":"9294:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2068,"nodeType":"ArrayTypeName","src":"9294:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2072,"mutability":"mutable","name":"ticks","nameLocation":"9342:5:15","nodeType":"VariableDeclaration","scope":2127,"src":"9327:20:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int24_$dyn_memory_ptr","typeString":"int24[]"},"typeName":{"baseType":{"id":2070,"name":"int24","nodeType":"ElementaryTypeName","src":"9327:5:15","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":2071,"nodeType":"ArrayTypeName","src":"9327:7:15","typeDescriptions":{"typeIdentifier":"t_array$_t_int24_$dyn_storage_ptr","typeString":"int24[]"}},"visibility":"internal"}],"src":"9284:69:15"},"returnParameters":{"id":2076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2075,"mutability":"mutable","name":"syntheticTick","nameLocation":"9384:13:15","nodeType":"VariableDeclaration","scope":2127,"src":"9377:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2074,"name":"int256","nodeType":"ElementaryTypeName","src":"9377:6:15","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"9376:22:15"},"scope":2128,"src":"9260:580:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2129,"src":"279:9563:15","usedErrors":[]}],"src":"45:9798:15"},"id":15},"contracts/Swapper/libraries/TickMath.sol":{"ast":{"absolutePath":"contracts/Swapper/libraries/TickMath.sol","exportedSymbols":{"TickMath":[2666]},"id":2667,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":2130,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"45:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"TickMath","contractDependencies":[],"contractKind":"library","documentation":{"id":2131,"nodeType":"StructuredDocumentation","src":"71:235:16","text":"@title Math library for computing sqrt prices from ticks and vice versa\n @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n prices between 2**-128 and 2**128"},"fullyImplemented":true,"id":2666,"linearizedBaseContracts":[2666],"name":"TickMath","nameLocation":"314:8:16","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":2132,"nodeType":"StructuredDocumentation","src":"329:108:16","text":"@dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"},"id":2136,"mutability":"constant","name":"MIN_TICK","nameLocation":"466:8:16","nodeType":"VariableDeclaration","scope":2666,"src":"442:42:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2133,"name":"int24","nodeType":"ElementaryTypeName","src":"442:5:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"value":{"id":2135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"477:7:16","subExpression":{"hexValue":"383837323732","id":2134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"478:6:16","typeDescriptions":{"typeIdentifier":"t_rational_887272_by_1","typeString":"int_const 887272"},"value":"887272"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_887272_by_1","typeString":"int_const -887272"}},"visibility":"internal"},{"constant":true,"documentation":{"id":2137,"nodeType":"StructuredDocumentation","src":"490:107:16","text":"@dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"},"id":2141,"mutability":"constant","name":"MAX_TICK","nameLocation":"626:8:16","nodeType":"VariableDeclaration","scope":2666,"src":"602:44:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2138,"name":"int24","nodeType":"ElementaryTypeName","src":"602:5:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"value":{"id":2140,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"637:9:16","subExpression":{"id":2139,"name":"MIN_TICK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"638:8:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"},{"constant":true,"documentation":{"id":2142,"nodeType":"StructuredDocumentation","src":"653:116:16","text":"@dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"},"id":2145,"mutability":"constant","name":"MIN_SQRT_RATIO","nameLocation":"800:14:16","nodeType":"VariableDeclaration","scope":2666,"src":"774:53:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2143,"name":"uint160","nodeType":"ElementaryTypeName","src":"774:7:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"value":{"hexValue":"34323935313238373339","id":2144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"817:10:16","typeDescriptions":{"typeIdentifier":"t_rational_4295128739_by_1","typeString":"int_const 4295128739"},"value":"4295128739"},"visibility":"internal"},{"constant":true,"documentation":{"id":2146,"nodeType":"StructuredDocumentation","src":"833:116:16","text":"@dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"},"id":2149,"mutability":"constant","name":"MAX_SQRT_RATIO","nameLocation":"980:14:16","nodeType":"VariableDeclaration","scope":2666,"src":"954:100:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2147,"name":"uint160","nodeType":"ElementaryTypeName","src":"954:7:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"value":{"hexValue":"31343631343436373033343835323130313033323837323733303532323033393838383232333738373233393730333432","id":2148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1005:49:16","typeDescriptions":{"typeIdentifier":"t_rational_1461446703485210103287273052203988822378723970342_by_1","typeString":"int_const 1461...(41 digits omitted)...0342"},"value":"1461446703485210103287273052203988822378723970342"},"visibility":"internal"},{"body":{"id":2525,"nodeType":"Block","src":"1462:2801:16","statements":[{"assignments":[2158],"declarations":[{"constant":false,"id":2158,"mutability":"mutable","name":"absTick","nameLocation":"1480:7:16","nodeType":"VariableDeclaration","scope":2525,"src":"1472:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2157,"name":"uint256","nodeType":"ElementaryTypeName","src":"1472:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2178,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2159,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"1490:4:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":2160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1497:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1490:8:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"arguments":[{"id":2174,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"1565:4:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":2173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1558:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2172,"name":"int256","nodeType":"ElementaryTypeName","src":"1558:6:16","typeDescriptions":{}}},"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1558:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2171,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1550:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2170,"name":"uint256","nodeType":"ElementaryTypeName","src":"1550:7:16","typeDescriptions":{}}},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1550:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1490:81:16","trueExpression":{"arguments":[{"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1521:13:16","subExpression":{"arguments":[{"id":2166,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"1529:4:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":2165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1522:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2164,"name":"int256","nodeType":"ElementaryTypeName","src":"1522:6:16","typeDescriptions":{}}},"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1522:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2163,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1513:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2162,"name":"uint256","nodeType":"ElementaryTypeName","src":"1513:7:16","typeDescriptions":{}}},"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1513:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1472:99:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2180,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"1589:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[{"arguments":[{"id":2185,"name":"MAX_TICK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"1615:8:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":2184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1608:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":2183,"name":"uint24","nodeType":"ElementaryTypeName","src":"1608:6:16","typeDescriptions":{}}},"id":2186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1608:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint24","typeString":"uint24"}],"id":2182,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1600:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2181,"name":"uint256","nodeType":"ElementaryTypeName","src":"1600:7:16","typeDescriptions":{}}},"id":2187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1600:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1589:36:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54","id":2189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1627:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc","typeString":"literal_string \"T\""},"value":"T"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_846b7b6deb1cfa110d0ea7ec6162a7123b761785528db70cceed5143183b11fc","typeString":"literal_string \"T\""}],"id":2179,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1581:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1581:50:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2191,"nodeType":"ExpressionStatement","src":"1581:50:16"},{"assignments":[2193],"declarations":[{"constant":false,"id":2193,"mutability":"mutable","name":"ratio","nameLocation":"1650:5:16","nodeType":"VariableDeclaration","scope":2525,"src":"1642:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2192,"name":"uint256","nodeType":"ElementaryTypeName","src":"1642:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2202,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2194,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"1658:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307831","id":2195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1668:3:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x1"},"src":"1658:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1675:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1658:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"3078313030303030303030303030303030303030303030303030303030303030303030","id":2200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1740:35:16","typeDescriptions":{"typeIdentifier":"t_rational_340282366920938463463374607431768211456_by_1","typeString":"int_const 3402...(31 digits omitted)...1456"},"value":"0x100000000000000000000000000000000"},"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1658:117:16","trueExpression":{"hexValue":"30786666666362393333626436666164333761613264313632643161353934303031","id":2199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1691:34:16","typeDescriptions":{"typeIdentifier":"t_rational_340265354078544963557816517032075149313_by_1","typeString":"int_const 3402...(31 digits omitted)...9313"},"value":"0xfffcb933bd6fad37aa2d162d1a594001"},"typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"nodeType":"VariableDeclarationStatement","src":"1642:133:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2203,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"1789:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307832","id":2204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1799:3:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"0x2"},"src":"1789:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1806:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1789:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2217,"nodeType":"IfStatement","src":"1785:95:16","trueBody":{"expression":{"id":2215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2208,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"1821:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2209,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"1830:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666663937323732333733643431333235396134363939303538306532313361","id":2210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1838:34:16","typeDescriptions":{"typeIdentifier":"t_rational_340248342086729790484326174814286782778_by_1","typeString":"int_const 3402...(31 digits omitted)...2778"},"value":"0xfff97272373d413259a46990580e213a"},"src":"1830:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2212,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1829:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1877:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"1829:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1821:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2216,"nodeType":"ExpressionStatement","src":"1821:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2218,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"1894:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307834","id":2219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1904:3:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"0x4"},"src":"1894:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1911:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1894:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2232,"nodeType":"IfStatement","src":"1890:95:16","trueBody":{"expression":{"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2223,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"1926:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2224,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"1935:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666663265353066356636353639333265663132333537636633633766646363","id":2225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1943:34:16","typeDescriptions":{"typeIdentifier":"t_rational_340214320654664324051920982716015181260_by_1","typeString":"int_const 3402...(31 digits omitted)...1260"},"value":"0xfff2e50f5f656932ef12357cf3c7fdcc"},"src":"1935:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2227,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1934:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"1934:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1926:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2231,"nodeType":"ExpressionStatement","src":"1926:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2233,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"1999:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307838","id":2234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2009:3:16","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"0x8"},"src":"1999:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2016:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1999:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2247,"nodeType":"IfStatement","src":"1995:95:16","trueBody":{"expression":{"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2238,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2031:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2239,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2040:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666653563616361376531306534653631633336323465616130393431636430","id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:34:16","typeDescriptions":{"typeIdentifier":"t_rational_340146287995602323631171512101879684304_by_1","typeString":"int_const 3401...(31 digits omitted)...4304"},"value":"0xffe5caca7e10e4e61c3624eaa0941cd0"},"src":"2040:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2242,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2039:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2087:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2039:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2031:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2246,"nodeType":"ExpressionStatement","src":"2031:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2248,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"2104:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783130","id":2249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2114:4:16","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"0x10"},"src":"2104:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2122:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2104:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2262,"nodeType":"IfStatement","src":"2100:96:16","trueBody":{"expression":{"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2253,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2137:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2254,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2146:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666636239383433643630663631353963396462353838333563393236363434","id":2255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2154:34:16","typeDescriptions":{"typeIdentifier":"t_rational_340010263488231146823593991679159461444_by_1","typeString":"int_const 3400...(31 digits omitted)...1444"},"value":"0xffcb9843d60f6159c9db58835c926644"},"src":"2146:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2257,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2145:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2193:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2145:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2137:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2261,"nodeType":"ExpressionStatement","src":"2137:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2263,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"2210:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783230","id":2264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2220:4:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"src":"2210:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2228:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2210:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2277,"nodeType":"IfStatement","src":"2206:96:16","trueBody":{"expression":{"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2268,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2243:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2269,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2252:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666393733623431666139386330383134373265363839366466623235346330","id":2270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2260:34:16","typeDescriptions":{"typeIdentifier":"t_rational_339738377640345403697157401104375502016_by_1","typeString":"int_const 3397...(31 digits omitted)...2016"},"value":"0xff973b41fa98c081472e6896dfb254c0"},"src":"2252:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2272,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2299:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2251:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2243:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2276,"nodeType":"ExpressionStatement","src":"2243:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2278,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"2316:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783430","id":2279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2326:4:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"0x40"},"src":"2316:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2334:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2316:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2292,"nodeType":"IfStatement","src":"2312:96:16","trueBody":{"expression":{"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2283,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2349:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2284,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2358:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786666326561313634363663393661333834336563373862333236623532383631","id":2285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2366:34:16","typeDescriptions":{"typeIdentifier":"t_rational_339195258003219555707034227454543997025_by_1","typeString":"int_const 3391...(31 digits omitted)...7025"},"value":"0xff2ea16466c96a3843ec78b326b52861"},"src":"2358:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2287,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2357:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2405:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2357:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2349:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2291,"nodeType":"ExpressionStatement","src":"2349:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2293,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"2422:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783830","id":2294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2432:4:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"0x80"},"src":"2422:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2440:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2422:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2307,"nodeType":"IfStatement","src":"2418:96:16","trueBody":{"expression":{"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2298,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2455:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2299,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2464:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786665356465653034366139396132613831316334363166313936396333303533","id":2300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2472:34:16","typeDescriptions":{"typeIdentifier":"t_rational_338111622100601834656805679988414885971_by_1","typeString":"int_const 3381...(31 digits omitted)...5971"},"value":"0xfe5dee046a99a2a811c461f1969c3053"},"src":"2464:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2302,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2463:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2511:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2463:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2455:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2306,"nodeType":"ExpressionStatement","src":"2455:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2308,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"2528:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078313030","id":2309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2538:5:16","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"0x100"},"src":"2528:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2547:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2528:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2322,"nodeType":"IfStatement","src":"2524:97:16","trueBody":{"expression":{"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2313,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2562:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2314,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2571:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786663626538366337393030613838616564636666633833623437396161336134","id":2315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2579:34:16","typeDescriptions":{"typeIdentifier":"t_rational_335954724994790223023589805789778977700_by_1","typeString":"int_const 3359...(31 digits omitted)...7700"},"value":"0xfcbe86c7900a88aedcffc83b479aa3a4"},"src":"2571:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2317,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2570:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2618:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2570:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2562:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2321,"nodeType":"ExpressionStatement","src":"2562:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2323,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"2635:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078323030","id":2324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2645:5:16","typeDescriptions":{"typeIdentifier":"t_rational_512_by_1","typeString":"int_const 512"},"value":"0x200"},"src":"2635:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2654:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2635:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2337,"nodeType":"IfStatement","src":"2631:97:16","trueBody":{"expression":{"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2328,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2669:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2329,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2678:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786639383761373235336163343133313736663262303734636637383135653534","id":2330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2686:34:16","typeDescriptions":{"typeIdentifier":"t_rational_331682121138379247127172139078559817300_by_1","typeString":"int_const 3316...(31 digits omitted)...7300"},"value":"0xf987a7253ac413176f2b074cf7815e54"},"src":"2678:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2332,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2677:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2725:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2677:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2669:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2336,"nodeType":"ExpressionStatement","src":"2669:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2338,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"2742:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078343030","id":2339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2752:5:16","typeDescriptions":{"typeIdentifier":"t_rational_1024_by_1","typeString":"int_const 1024"},"value":"0x400"},"src":"2742:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2761:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2742:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2352,"nodeType":"IfStatement","src":"2738:97:16","trueBody":{"expression":{"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2343,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2776:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2344,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2785:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786633333932623038323262373030303539343063376133393865346237306633","id":2345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2793:34:16","typeDescriptions":{"typeIdentifier":"t_rational_323299236684853023288211250268160618739_by_1","typeString":"int_const 3232...(31 digits omitted)...8739"},"value":"0xf3392b0822b70005940c7a398e4b70f3"},"src":"2785:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2347,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2784:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2832:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2784:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2776:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2351,"nodeType":"ExpressionStatement","src":"2776:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2353,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"2849:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"3078383030","id":2354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2859:5:16","typeDescriptions":{"typeIdentifier":"t_rational_2048_by_1","typeString":"int_const 2048"},"value":"0x800"},"src":"2849:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2868:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2849:20:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2367,"nodeType":"IfStatement","src":"2845:97:16","trueBody":{"expression":{"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2358,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2883:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2359,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2892:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786537313539343735613263323962373434336232396337666136653838396439","id":2360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2900:34:16","typeDescriptions":{"typeIdentifier":"t_rational_307163716377032989948697243942600083929_by_1","typeString":"int_const 3071...(31 digits omitted)...3929"},"value":"0xe7159475a2c29b7443b29c7fa6e889d9"},"src":"2892:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2362,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2891:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2939:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2891:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2883:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2366,"nodeType":"ExpressionStatement","src":"2883:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2368,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"2956:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307831303030","id":2369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2966:6:16","typeDescriptions":{"typeIdentifier":"t_rational_4096_by_1","typeString":"int_const 4096"},"value":"0x1000"},"src":"2956:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2976:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2956:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2382,"nodeType":"IfStatement","src":"2952:98:16","trueBody":{"expression":{"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2373,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"2991:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2374,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3000:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786430393766336264666432303232623838343561643866373932616135383235","id":2375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:34:16","typeDescriptions":{"typeIdentifier":"t_rational_277268403626896220162999269216087595045_by_1","typeString":"int_const 2772...(31 digits omitted)...5045"},"value":"0xd097f3bdfd2022b8845ad8f792aa5825"},"src":"3000:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2377,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2999:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3047:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"2999:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2991:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2381,"nodeType":"ExpressionStatement","src":"2991:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2383,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3064:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307832303030","id":2384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3074:6:16","typeDescriptions":{"typeIdentifier":"t_rational_8192_by_1","typeString":"int_const 8192"},"value":"0x2000"},"src":"3064:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3084:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3064:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2397,"nodeType":"IfStatement","src":"3060:98:16","trueBody":{"expression":{"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2388,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3099:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2389,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3108:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30786139663734363436326438373066646638613635646331663930653036316535","id":2390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3116:34:16","typeDescriptions":{"typeIdentifier":"t_rational_225923453940442621947126027127485391333_by_1","typeString":"int_const 2259...(31 digits omitted)...1333"},"value":"0xa9f746462d870fdf8a65dc1f90e061e5"},"src":"3108:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2392,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3107:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3155:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3107:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3099:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2396,"nodeType":"ExpressionStatement","src":"3099:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2398,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3172:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307834303030","id":2399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3182:6:16","typeDescriptions":{"typeIdentifier":"t_rational_16384_by_1","typeString":"int_const 16384"},"value":"0x4000"},"src":"3172:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3192:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3172:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2412,"nodeType":"IfStatement","src":"3168:98:16","trueBody":{"expression":{"id":2410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2403,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3207:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2404,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3216:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30783730643836396131353664326131623839306262336466363262616633326637","id":2405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3224:34:16","typeDescriptions":{"typeIdentifier":"t_rational_149997214084966997727330242082538205943_by_1","typeString":"int_const 1499...(31 digits omitted)...5943"},"value":"0x70d869a156d2a1b890bb3df62baf32f7"},"src":"3216:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2407,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3215:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3263:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3215:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3207:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2411,"nodeType":"ExpressionStatement","src":"3207:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2413,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3280:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307838303030","id":2414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3290:6:16","typeDescriptions":{"typeIdentifier":"t_rational_32768_by_1","typeString":"int_const 32768"},"value":"0x8000"},"src":"3280:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3300:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3280:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2427,"nodeType":"IfStatement","src":"3276:98:16","trueBody":{"expression":{"id":2425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2418,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3315:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2419,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3324:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30783331626531333566393764303866643938313233313530353534326663666136","id":2420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3332:34:16","typeDescriptions":{"typeIdentifier":"t_rational_66119101136024775622716233608466517926_by_1","typeString":"int_const 6611...(30 digits omitted)...7926"},"value":"0x31be135f97d08fd981231505542fcfa6"},"src":"3324:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2422,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3323:44:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3371:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3323:51:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3315:59:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2426,"nodeType":"ExpressionStatement","src":"3315:59:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2428,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3388:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783130303030","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3398:7:16","typeDescriptions":{"typeIdentifier":"t_rational_65536_by_1","typeString":"int_const 65536"},"value":"0x10000"},"src":"3388:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3409:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3388:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2442,"nodeType":"IfStatement","src":"3384:98:16","trueBody":{"expression":{"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2433,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3424:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2434,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3433:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"307839616135303862356237613834653163363737646535346633653939626339","id":2435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3441:33:16","typeDescriptions":{"typeIdentifier":"t_rational_12847376061809297530290974190478138313_by_1","typeString":"int_const 1284...(30 digits omitted)...8313"},"value":"0x9aa508b5b7a84e1c677de54f3e99bc9"},"src":"3433:41:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2437,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3432:43:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3479:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3432:50:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3424:58:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2441,"nodeType":"ExpressionStatement","src":"3424:58:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2443,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3496:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783230303030","id":2444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3506:7:16","typeDescriptions":{"typeIdentifier":"t_rational_131072_by_1","typeString":"int_const 131072"},"value":"0x20000"},"src":"3496:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3517:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3496:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2457,"nodeType":"IfStatement","src":"3492:97:16","trueBody":{"expression":{"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2448,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3532:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2449,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3541:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3078356436616638646564623831313936363939633332393232356565363034","id":2450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3549:32:16","typeDescriptions":{"typeIdentifier":"t_rational_485053260817066172746253684029974020_by_1","typeString":"int_const 4850...(28 digits omitted)...4020"},"value":"0x5d6af8dedb81196699c329225ee604"},"src":"3541:40:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2452,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3540:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3586:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3540:49:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3532:57:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2456,"nodeType":"ExpressionStatement","src":"3532:57:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2458,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3603:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783430303030","id":2459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3613:7:16","typeDescriptions":{"typeIdentifier":"t_rational_262144_by_1","typeString":"int_const 262144"},"value":"0x40000"},"src":"3603:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3624:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3603:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2472,"nodeType":"IfStatement","src":"3599:95:16","trueBody":{"expression":{"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2463,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3639:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2464,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3648:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"307832323136653538346635666131656139323630343162656466653938","id":2465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:30:16","typeDescriptions":{"typeIdentifier":"t_rational_691415978906521570653435304214168_by_1","typeString":"int_const 6914...(25 digits omitted)...4168"},"value":"0x2216e584f5fa1ea926041bedfe98"},"src":"3648:38:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2467,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3647:40:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3691:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3647:47:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3639:55:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2471,"nodeType":"ExpressionStatement","src":"3639:55:16"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2473,"name":"absTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3708:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"30783830303030","id":2474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3718:7:16","typeDescriptions":{"typeIdentifier":"t_rational_524288_by_1","typeString":"int_const 524288"},"value":"0x80000"},"src":"3708:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3729:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3708:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2487,"nodeType":"IfStatement","src":"3704:90:16","trueBody":{"expression":{"id":2485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2478,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3744:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2479,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3753:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"30783438613137303339316637646334323434346538666132","id":2480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3761:25:16","typeDescriptions":{"typeIdentifier":"t_rational_1404880482679654955896180642_by_1","typeString":"int_const 1404880482679654955896180642"},"value":"0x48a170391f7dc42444e8fa2"},"src":"3753:33:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2482,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3752:35:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3791:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"3752:42:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3744:50:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2486,"nodeType":"ExpressionStatement","src":"3744:50:16"}},{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":2490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2488,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"3809:4:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3816:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3809:8:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2501,"nodeType":"IfStatement","src":"3805:47:16","trueBody":{"expression":{"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2491,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3819:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2494,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3832:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2493,"name":"uint256","nodeType":"ElementaryTypeName","src":"3832:7:16","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":2492,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3827:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3827:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":2496,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3841:3:16","memberName":"max","nodeType":"MemberAccess","src":"3827:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2497,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"3847:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3827:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3819:33:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2500,"nodeType":"ExpressionStatement","src":"3819:33:16"}},{"expression":{"id":2523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2502,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"4162:12:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2505,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"4199:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4208:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4199:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2508,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4198:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2509,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"4215:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"},"id":2512,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4224:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":2511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4229:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"4224:7:16","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}}],"id":2513,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4223:9:16","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}},"src":"4215:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4236:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4215:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"31","id":2518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4244:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4215:30:16","trueExpression":{"hexValue":"30","id":2517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4240:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2520,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4214:32:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4198:48:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4177:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2503,"name":"uint160","nodeType":"ElementaryTypeName","src":"4177:7:16","typeDescriptions":{}}},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4177:79:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4162:94:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"id":2524,"nodeType":"ExpressionStatement","src":"4162:94:16"}]},"documentation":{"id":2150,"nodeType":"StructuredDocumentation","src":"1061:297:16","text":"@notice Calculates sqrt(1.0001^tick) * 2^96\n @dev Throws if |tick| > max tick\n @param tick The input tick for the above formula\n @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n at the given tick"},"id":2526,"implemented":true,"kind":"function","modifiers":[],"name":"getSqrtRatioAtTick","nameLocation":"1372:18:16","nodeType":"FunctionDefinition","parameters":{"id":2153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2152,"mutability":"mutable","name":"tick","nameLocation":"1406:4:16","nodeType":"VariableDeclaration","scope":2526,"src":"1400:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2151,"name":"int24","nodeType":"ElementaryTypeName","src":"1400:5:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"1390:26:16"},"returnParameters":{"id":2156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2155,"mutability":"mutable","name":"sqrtPriceX96","nameLocation":"1448:12:16","nodeType":"VariableDeclaration","scope":2526,"src":"1440:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2154,"name":"uint160","nodeType":"ElementaryTypeName","src":"1440:7:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"1439:22:16"},"scope":2666,"src":"1363:2900:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2664,"nodeType":"Block","src":"4781:4322:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2535,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2529,"src":"4911:12:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2536,"name":"MIN_SQRT_RATIO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2145,"src":"4927:14:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4911:30:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2538,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2529,"src":"4945:12:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2539,"name":"MAX_SQRT_RATIO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2149,"src":"4960:14:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"4945:29:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4911:63:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"52","id":2542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4988:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2","typeString":"literal_string \"R\""},"value":"R"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef22bddd350b943170a67d35191c27e310709a28c38b5762a152ff640108f5b2","typeString":"literal_string \"R\""}],"id":2534,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4890:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4890:111:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2544,"nodeType":"ExpressionStatement","src":"4890:111:16"},{"assignments":[2546],"declarations":[{"constant":false,"id":2546,"mutability":"mutable","name":"ratio","nameLocation":"5019:5:16","nodeType":"VariableDeclaration","scope":2664,"src":"5011:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2545,"name":"uint256","nodeType":"ElementaryTypeName","src":"5011:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2553,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2549,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2529,"src":"5035:12:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5027:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2547,"name":"uint256","nodeType":"ElementaryTypeName","src":"5027:7:16","typeDescriptions":{}}},"id":2550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5027:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3332","id":2551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5052:2:16","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"5027:27:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5011:43:16"},{"assignments":[2555],"declarations":[{"constant":false,"id":2555,"mutability":"mutable","name":"r","nameLocation":"5073:1:16","nodeType":"VariableDeclaration","scope":2664,"src":"5065:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2554,"name":"uint256","nodeType":"ElementaryTypeName","src":"5065:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2557,"initialValue":{"id":2556,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2546,"src":"5077:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5065:17:16"},{"assignments":[2559],"declarations":[{"constant":false,"id":2559,"mutability":"mutable","name":"msb","nameLocation":"5100:3:16","nodeType":"VariableDeclaration","scope":2664,"src":"5092:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2558,"name":"uint256","nodeType":"ElementaryTypeName","src":"5092:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2561,"initialValue":{"hexValue":"30","id":2560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5106:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5092:15:16"},{"AST":{"nodeType":"YulBlock","src":"5127:139:16","statements":[{"nodeType":"YulVariableDeclaration","src":"5141:58:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5154:1:16","type":"","value":"7"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5160:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"5163:34:16","type":"","value":"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5157:2:16"},"nodeType":"YulFunctionCall","src":"5157:41:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5150:3:16"},"nodeType":"YulFunctionCall","src":"5150:49:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5145:1:16","type":""}]},{"nodeType":"YulAssignment","src":"5212:17:16","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5222:3:16"},{"name":"f","nodeType":"YulIdentifier","src":"5227:1:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5219:2:16"},"nodeType":"YulFunctionCall","src":"5219:10:16"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5212:3:16"}]},{"nodeType":"YulAssignment","src":"5242:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5251:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"5254:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5247:3:16"},"nodeType":"YulFunctionCall","src":"5247:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5242:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2559,"isOffset":false,"isSlot":false,"src":"5212:3:16","valueSize":1},{"declaration":2559,"isOffset":false,"isSlot":false,"src":"5222:3:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5160:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5242:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5254:1:16","valueSize":1}],"id":2562,"nodeType":"InlineAssembly","src":"5118:148:16"},{"AST":{"nodeType":"YulBlock","src":"5284:123:16","statements":[{"nodeType":"YulVariableDeclaration","src":"5298:42:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5311:1:16","type":"","value":"6"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5317:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"5320:18:16","type":"","value":"0xFFFFFFFFFFFFFFFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5314:2:16"},"nodeType":"YulFunctionCall","src":"5314:25:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5307:3:16"},"nodeType":"YulFunctionCall","src":"5307:33:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5302:1:16","type":""}]},{"nodeType":"YulAssignment","src":"5353:17:16","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5363:3:16"},{"name":"f","nodeType":"YulIdentifier","src":"5368:1:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5360:2:16"},"nodeType":"YulFunctionCall","src":"5360:10:16"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5353:3:16"}]},{"nodeType":"YulAssignment","src":"5383:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5392:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"5395:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5388:3:16"},"nodeType":"YulFunctionCall","src":"5388:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5383:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2559,"isOffset":false,"isSlot":false,"src":"5353:3:16","valueSize":1},{"declaration":2559,"isOffset":false,"isSlot":false,"src":"5363:3:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5317:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5383:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5395:1:16","valueSize":1}],"id":2563,"nodeType":"InlineAssembly","src":"5275:132:16"},{"AST":{"nodeType":"YulBlock","src":"5425:115:16","statements":[{"nodeType":"YulVariableDeclaration","src":"5439:34:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5452:1:16","type":"","value":"5"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5458:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"5461:10:16","type":"","value":"0xFFFFFFFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5455:2:16"},"nodeType":"YulFunctionCall","src":"5455:17:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5448:3:16"},"nodeType":"YulFunctionCall","src":"5448:25:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5443:1:16","type":""}]},{"nodeType":"YulAssignment","src":"5486:17:16","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5496:3:16"},{"name":"f","nodeType":"YulIdentifier","src":"5501:1:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5493:2:16"},"nodeType":"YulFunctionCall","src":"5493:10:16"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5486:3:16"}]},{"nodeType":"YulAssignment","src":"5516:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5525:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"5528:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5521:3:16"},"nodeType":"YulFunctionCall","src":"5521:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5516:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2559,"isOffset":false,"isSlot":false,"src":"5486:3:16","valueSize":1},{"declaration":2559,"isOffset":false,"isSlot":false,"src":"5496:3:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5458:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5516:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5528:1:16","valueSize":1}],"id":2564,"nodeType":"InlineAssembly","src":"5416:124:16"},{"AST":{"nodeType":"YulBlock","src":"5558:111:16","statements":[{"nodeType":"YulVariableDeclaration","src":"5572:30:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5585:1:16","type":"","value":"4"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5591:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"5594:6:16","type":"","value":"0xFFFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5588:2:16"},"nodeType":"YulFunctionCall","src":"5588:13:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5581:3:16"},"nodeType":"YulFunctionCall","src":"5581:21:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5576:1:16","type":""}]},{"nodeType":"YulAssignment","src":"5615:17:16","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5625:3:16"},{"name":"f","nodeType":"YulIdentifier","src":"5630:1:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5622:2:16"},"nodeType":"YulFunctionCall","src":"5622:10:16"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5615:3:16"}]},{"nodeType":"YulAssignment","src":"5645:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5654:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"5657:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5650:3:16"},"nodeType":"YulFunctionCall","src":"5650:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5645:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2559,"isOffset":false,"isSlot":false,"src":"5615:3:16","valueSize":1},{"declaration":2559,"isOffset":false,"isSlot":false,"src":"5625:3:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5591:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5645:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5657:1:16","valueSize":1}],"id":2565,"nodeType":"InlineAssembly","src":"5549:120:16"},{"AST":{"nodeType":"YulBlock","src":"5687:109:16","statements":[{"nodeType":"YulVariableDeclaration","src":"5701:28:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5714:1:16","type":"","value":"3"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5720:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"5723:4:16","type":"","value":"0xFF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5717:2:16"},"nodeType":"YulFunctionCall","src":"5717:11:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5710:3:16"},"nodeType":"YulFunctionCall","src":"5710:19:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5705:1:16","type":""}]},{"nodeType":"YulAssignment","src":"5742:17:16","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5752:3:16"},{"name":"f","nodeType":"YulIdentifier","src":"5757:1:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5749:2:16"},"nodeType":"YulFunctionCall","src":"5749:10:16"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5742:3:16"}]},{"nodeType":"YulAssignment","src":"5772:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5781:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"5784:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5777:3:16"},"nodeType":"YulFunctionCall","src":"5777:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5772:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2559,"isOffset":false,"isSlot":false,"src":"5742:3:16","valueSize":1},{"declaration":2559,"isOffset":false,"isSlot":false,"src":"5752:3:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5720:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5772:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5784:1:16","valueSize":1}],"id":2566,"nodeType":"InlineAssembly","src":"5678:118:16"},{"AST":{"nodeType":"YulBlock","src":"5814:108:16","statements":[{"nodeType":"YulVariableDeclaration","src":"5828:27:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5841:1:16","type":"","value":"2"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5847:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"5850:3:16","type":"","value":"0xF"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5844:2:16"},"nodeType":"YulFunctionCall","src":"5844:10:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5837:3:16"},"nodeType":"YulFunctionCall","src":"5837:18:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5832:1:16","type":""}]},{"nodeType":"YulAssignment","src":"5868:17:16","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"5878:3:16"},{"name":"f","nodeType":"YulIdentifier","src":"5883:1:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5875:2:16"},"nodeType":"YulFunctionCall","src":"5875:10:16"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5868:3:16"}]},{"nodeType":"YulAssignment","src":"5898:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"5907:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"5910:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5903:3:16"},"nodeType":"YulFunctionCall","src":"5903:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"5898:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2559,"isOffset":false,"isSlot":false,"src":"5868:3:16","valueSize":1},{"declaration":2559,"isOffset":false,"isSlot":false,"src":"5878:3:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5847:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5898:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5910:1:16","valueSize":1}],"id":2567,"nodeType":"InlineAssembly","src":"5805:117:16"},{"AST":{"nodeType":"YulBlock","src":"5940:108:16","statements":[{"nodeType":"YulVariableDeclaration","src":"5954:27:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5967:1:16","type":"","value":"1"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"5973:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"5976:3:16","type":"","value":"0x3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5970:2:16"},"nodeType":"YulFunctionCall","src":"5970:10:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5963:3:16"},"nodeType":"YulFunctionCall","src":"5963:18:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"5958:1:16","type":""}]},{"nodeType":"YulAssignment","src":"5994:17:16","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"6004:3:16"},{"name":"f","nodeType":"YulIdentifier","src":"6009:1:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6001:2:16"},"nodeType":"YulFunctionCall","src":"6001:10:16"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"5994:3:16"}]},{"nodeType":"YulAssignment","src":"6024:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6033:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6036:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6029:3:16"},"nodeType":"YulFunctionCall","src":"6029:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6024:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2559,"isOffset":false,"isSlot":false,"src":"5994:3:16","valueSize":1},{"declaration":2559,"isOffset":false,"isSlot":false,"src":"6004:3:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"5973:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6024:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6036:1:16","valueSize":1}],"id":2568,"nodeType":"InlineAssembly","src":"5931:117:16"},{"AST":{"nodeType":"YulBlock","src":"6066:73:16","statements":[{"nodeType":"YulVariableDeclaration","src":"6080:19:16","value":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6092:1:16"},{"kind":"number","nodeType":"YulLiteral","src":"6095:3:16","type":"","value":"0x1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6089:2:16"},"nodeType":"YulFunctionCall","src":"6089:10:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6084:1:16","type":""}]},{"nodeType":"YulAssignment","src":"6112:17:16","value":{"arguments":[{"name":"msb","nodeType":"YulIdentifier","src":"6122:3:16"},{"name":"f","nodeType":"YulIdentifier","src":"6127:1:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6119:2:16"},"nodeType":"YulFunctionCall","src":"6119:10:16"},"variableNames":[{"name":"msb","nodeType":"YulIdentifier","src":"6112:3:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2559,"isOffset":false,"isSlot":false,"src":"6112:3:16","valueSize":1},{"declaration":2559,"isOffset":false,"isSlot":false,"src":"6122:3:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6092:1:16","valueSize":1}],"id":2569,"nodeType":"InlineAssembly","src":"6057:82:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2570,"name":"msb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"6153:3:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"313238","id":2571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6160:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"6153:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"expression":{"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2582,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2555,"src":"6204:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2583,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2546,"src":"6208:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"313237","id":2584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6218:3:16","typeDescriptions":{"typeIdentifier":"t_rational_127_by_1","typeString":"int_const 127"},"value":"127"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2585,"name":"msb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"6224:3:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6218:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2587,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6217:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6208:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6204:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2590,"nodeType":"ExpressionStatement","src":"6204:24:16"},"id":2591,"nodeType":"IfStatement","src":"6149:79:16","trueBody":{"expression":{"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2573,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2555,"src":"6165:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2574,"name":"ratio","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2546,"src":"6169:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2575,"name":"msb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"6179:3:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313237","id":2576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6185:3:16","typeDescriptions":{"typeIdentifier":"t_rational_127_by_1","typeString":"int_const 127"},"value":"127"},"src":"6179:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2578,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6178:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6169:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6165:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2581,"nodeType":"ExpressionStatement","src":"6165:24:16"}},{"assignments":[2593],"declarations":[{"constant":false,"id":2593,"mutability":"mutable","name":"log_2","nameLocation":"6246:5:16","nodeType":"VariableDeclaration","scope":2664,"src":"6239:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2592,"name":"int256","nodeType":"ElementaryTypeName","src":"6239:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2603,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2596,"name":"msb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2559,"src":"6262:3:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2595,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6255:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2594,"name":"int256","nodeType":"ElementaryTypeName","src":"6255:6:16","typeDescriptions":{}}},"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6255:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313238","id":2598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6269:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"6255:17:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2600,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6254:19:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"3634","id":2601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6277:2:16","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"6254:25:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"6239:40:16"},{"AST":{"nodeType":"YulBlock","src":"6299:151:16","statements":[{"nodeType":"YulAssignment","src":"6313:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6322:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6331:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6334:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6327:3:16"},"nodeType":"YulFunctionCall","src":"6327:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6318:3:16"},"nodeType":"YulFunctionCall","src":"6318:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6313:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"6350:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6363:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6368:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6359:3:16"},"nodeType":"YulFunctionCall","src":"6359:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6354:1:16","type":""}]},{"nodeType":"YulAssignment","src":"6383:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6395:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6406:2:16","type":"","value":"63"},{"name":"f","nodeType":"YulIdentifier","src":"6410:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6402:3:16"},"nodeType":"YulFunctionCall","src":"6402:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6392:2:16"},"nodeType":"YulFunctionCall","src":"6392:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6383:5:16"}]},{"nodeType":"YulAssignment","src":"6426:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6435:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6438:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6431:3:16"},"nodeType":"YulFunctionCall","src":"6431:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6426:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2593,"isOffset":false,"isSlot":false,"src":"6383:5:16","valueSize":1},{"declaration":2593,"isOffset":false,"isSlot":false,"src":"6395:5:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6313:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6331:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6334:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6368:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6426:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6438:1:16","valueSize":1}],"id":2604,"nodeType":"InlineAssembly","src":"6290:160:16"},{"AST":{"nodeType":"YulBlock","src":"6468:151:16","statements":[{"nodeType":"YulAssignment","src":"6482:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6491:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6500:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6503:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6496:3:16"},"nodeType":"YulFunctionCall","src":"6496:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6487:3:16"},"nodeType":"YulFunctionCall","src":"6487:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6482:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"6519:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6532:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6537:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6528:3:16"},"nodeType":"YulFunctionCall","src":"6528:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6523:1:16","type":""}]},{"nodeType":"YulAssignment","src":"6552:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6564:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6575:2:16","type":"","value":"62"},{"name":"f","nodeType":"YulIdentifier","src":"6579:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6571:3:16"},"nodeType":"YulFunctionCall","src":"6571:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6561:2:16"},"nodeType":"YulFunctionCall","src":"6561:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6552:5:16"}]},{"nodeType":"YulAssignment","src":"6595:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6604:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6607:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6600:3:16"},"nodeType":"YulFunctionCall","src":"6600:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6595:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2593,"isOffset":false,"isSlot":false,"src":"6552:5:16","valueSize":1},{"declaration":2593,"isOffset":false,"isSlot":false,"src":"6564:5:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6482:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6500:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6503:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6537:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6595:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6607:1:16","valueSize":1}],"id":2605,"nodeType":"InlineAssembly","src":"6459:160:16"},{"AST":{"nodeType":"YulBlock","src":"6637:151:16","statements":[{"nodeType":"YulAssignment","src":"6651:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6660:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6669:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6672:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6665:3:16"},"nodeType":"YulFunctionCall","src":"6665:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6656:3:16"},"nodeType":"YulFunctionCall","src":"6656:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6651:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"6688:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6701:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6706:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6697:3:16"},"nodeType":"YulFunctionCall","src":"6697:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6692:1:16","type":""}]},{"nodeType":"YulAssignment","src":"6721:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6733:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6744:2:16","type":"","value":"61"},{"name":"f","nodeType":"YulIdentifier","src":"6748:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6740:3:16"},"nodeType":"YulFunctionCall","src":"6740:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6730:2:16"},"nodeType":"YulFunctionCall","src":"6730:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6721:5:16"}]},{"nodeType":"YulAssignment","src":"6764:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6773:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6776:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6769:3:16"},"nodeType":"YulFunctionCall","src":"6769:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6764:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2593,"isOffset":false,"isSlot":false,"src":"6721:5:16","valueSize":1},{"declaration":2593,"isOffset":false,"isSlot":false,"src":"6733:5:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6651:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6669:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6672:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6706:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6764:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6776:1:16","valueSize":1}],"id":2606,"nodeType":"InlineAssembly","src":"6628:160:16"},{"AST":{"nodeType":"YulBlock","src":"6806:151:16","statements":[{"nodeType":"YulAssignment","src":"6820:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6829:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"6838:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6841:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6834:3:16"},"nodeType":"YulFunctionCall","src":"6834:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6825:3:16"},"nodeType":"YulFunctionCall","src":"6825:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6820:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"6857:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6870:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"6875:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6866:3:16"},"nodeType":"YulFunctionCall","src":"6866:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"6861:1:16","type":""}]},{"nodeType":"YulAssignment","src":"6890:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"6902:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6913:2:16","type":"","value":"60"},{"name":"f","nodeType":"YulIdentifier","src":"6917:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6909:3:16"},"nodeType":"YulFunctionCall","src":"6909:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6899:2:16"},"nodeType":"YulFunctionCall","src":"6899:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"6890:5:16"}]},{"nodeType":"YulAssignment","src":"6933:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"6942:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"6945:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6938:3:16"},"nodeType":"YulFunctionCall","src":"6938:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6933:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2593,"isOffset":false,"isSlot":false,"src":"6890:5:16","valueSize":1},{"declaration":2593,"isOffset":false,"isSlot":false,"src":"6902:5:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6820:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6838:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6841:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6875:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6933:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6945:1:16","valueSize":1}],"id":2607,"nodeType":"InlineAssembly","src":"6797:160:16"},{"AST":{"nodeType":"YulBlock","src":"6975:151:16","statements":[{"nodeType":"YulAssignment","src":"6989:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6998:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7007:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7010:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7003:3:16"},"nodeType":"YulFunctionCall","src":"7003:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6994:3:16"},"nodeType":"YulFunctionCall","src":"6994:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6989:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"7026:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7039:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7044:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7035:3:16"},"nodeType":"YulFunctionCall","src":"7035:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7030:1:16","type":""}]},{"nodeType":"YulAssignment","src":"7059:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7071:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7082:2:16","type":"","value":"59"},{"name":"f","nodeType":"YulIdentifier","src":"7086:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7078:3:16"},"nodeType":"YulFunctionCall","src":"7078:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7068:2:16"},"nodeType":"YulFunctionCall","src":"7068:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7059:5:16"}]},{"nodeType":"YulAssignment","src":"7102:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7111:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7114:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7107:3:16"},"nodeType":"YulFunctionCall","src":"7107:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7102:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2593,"isOffset":false,"isSlot":false,"src":"7059:5:16","valueSize":1},{"declaration":2593,"isOffset":false,"isSlot":false,"src":"7071:5:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"6989:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7007:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7010:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7044:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7102:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7114:1:16","valueSize":1}],"id":2608,"nodeType":"InlineAssembly","src":"6966:160:16"},{"AST":{"nodeType":"YulBlock","src":"7144:151:16","statements":[{"nodeType":"YulAssignment","src":"7158:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7167:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7176:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7179:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7172:3:16"},"nodeType":"YulFunctionCall","src":"7172:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7163:3:16"},"nodeType":"YulFunctionCall","src":"7163:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7158:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"7195:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7208:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7213:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7204:3:16"},"nodeType":"YulFunctionCall","src":"7204:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7199:1:16","type":""}]},{"nodeType":"YulAssignment","src":"7228:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7240:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7251:2:16","type":"","value":"58"},{"name":"f","nodeType":"YulIdentifier","src":"7255:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7247:3:16"},"nodeType":"YulFunctionCall","src":"7247:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7237:2:16"},"nodeType":"YulFunctionCall","src":"7237:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7228:5:16"}]},{"nodeType":"YulAssignment","src":"7271:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7280:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7283:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7276:3:16"},"nodeType":"YulFunctionCall","src":"7276:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7271:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2593,"isOffset":false,"isSlot":false,"src":"7228:5:16","valueSize":1},{"declaration":2593,"isOffset":false,"isSlot":false,"src":"7240:5:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7158:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7176:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7179:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7213:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7271:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7283:1:16","valueSize":1}],"id":2609,"nodeType":"InlineAssembly","src":"7135:160:16"},{"AST":{"nodeType":"YulBlock","src":"7313:151:16","statements":[{"nodeType":"YulAssignment","src":"7327:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7336:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7345:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7348:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7341:3:16"},"nodeType":"YulFunctionCall","src":"7341:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7332:3:16"},"nodeType":"YulFunctionCall","src":"7332:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7327:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"7364:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7377:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7382:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7373:3:16"},"nodeType":"YulFunctionCall","src":"7373:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7368:1:16","type":""}]},{"nodeType":"YulAssignment","src":"7397:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7409:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7420:2:16","type":"","value":"57"},{"name":"f","nodeType":"YulIdentifier","src":"7424:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7416:3:16"},"nodeType":"YulFunctionCall","src":"7416:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7406:2:16"},"nodeType":"YulFunctionCall","src":"7406:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7397:5:16"}]},{"nodeType":"YulAssignment","src":"7440:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7449:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7452:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7445:3:16"},"nodeType":"YulFunctionCall","src":"7445:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7440:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2593,"isOffset":false,"isSlot":false,"src":"7397:5:16","valueSize":1},{"declaration":2593,"isOffset":false,"isSlot":false,"src":"7409:5:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7327:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7345:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7348:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7382:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7440:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7452:1:16","valueSize":1}],"id":2610,"nodeType":"InlineAssembly","src":"7304:160:16"},{"AST":{"nodeType":"YulBlock","src":"7482:151:16","statements":[{"nodeType":"YulAssignment","src":"7496:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7505:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7514:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7517:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7510:3:16"},"nodeType":"YulFunctionCall","src":"7510:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7501:3:16"},"nodeType":"YulFunctionCall","src":"7501:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7496:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"7533:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7546:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7551:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7542:3:16"},"nodeType":"YulFunctionCall","src":"7542:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7537:1:16","type":""}]},{"nodeType":"YulAssignment","src":"7566:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7578:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7589:2:16","type":"","value":"56"},{"name":"f","nodeType":"YulIdentifier","src":"7593:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7585:3:16"},"nodeType":"YulFunctionCall","src":"7585:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7575:2:16"},"nodeType":"YulFunctionCall","src":"7575:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7566:5:16"}]},{"nodeType":"YulAssignment","src":"7609:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7618:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7621:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7614:3:16"},"nodeType":"YulFunctionCall","src":"7614:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7609:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2593,"isOffset":false,"isSlot":false,"src":"7566:5:16","valueSize":1},{"declaration":2593,"isOffset":false,"isSlot":false,"src":"7578:5:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7496:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7514:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7517:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7551:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7609:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7621:1:16","valueSize":1}],"id":2611,"nodeType":"InlineAssembly","src":"7473:160:16"},{"AST":{"nodeType":"YulBlock","src":"7651:151:16","statements":[{"nodeType":"YulAssignment","src":"7665:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7674:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7683:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7686:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7679:3:16"},"nodeType":"YulFunctionCall","src":"7679:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7670:3:16"},"nodeType":"YulFunctionCall","src":"7670:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7665:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"7702:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7715:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7720:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7711:3:16"},"nodeType":"YulFunctionCall","src":"7711:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7706:1:16","type":""}]},{"nodeType":"YulAssignment","src":"7735:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7747:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7758:2:16","type":"","value":"55"},{"name":"f","nodeType":"YulIdentifier","src":"7762:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7754:3:16"},"nodeType":"YulFunctionCall","src":"7754:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7744:2:16"},"nodeType":"YulFunctionCall","src":"7744:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7735:5:16"}]},{"nodeType":"YulAssignment","src":"7778:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7787:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7790:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7783:3:16"},"nodeType":"YulFunctionCall","src":"7783:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7778:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2593,"isOffset":false,"isSlot":false,"src":"7735:5:16","valueSize":1},{"declaration":2593,"isOffset":false,"isSlot":false,"src":"7747:5:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7665:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7683:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7686:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7720:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7778:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7790:1:16","valueSize":1}],"id":2612,"nodeType":"InlineAssembly","src":"7642:160:16"},{"AST":{"nodeType":"YulBlock","src":"7820:151:16","statements":[{"nodeType":"YulAssignment","src":"7834:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7843:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"7852:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7855:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7848:3:16"},"nodeType":"YulFunctionCall","src":"7848:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7839:3:16"},"nodeType":"YulFunctionCall","src":"7839:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7834:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"7871:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7884:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"7889:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7880:3:16"},"nodeType":"YulFunctionCall","src":"7880:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"7875:1:16","type":""}]},{"nodeType":"YulAssignment","src":"7904:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"7916:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7927:2:16","type":"","value":"54"},{"name":"f","nodeType":"YulIdentifier","src":"7931:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7923:3:16"},"nodeType":"YulFunctionCall","src":"7923:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7913:2:16"},"nodeType":"YulFunctionCall","src":"7913:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"7904:5:16"}]},{"nodeType":"YulAssignment","src":"7947:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"7956:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"7959:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"7952:3:16"},"nodeType":"YulFunctionCall","src":"7952:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"7947:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2593,"isOffset":false,"isSlot":false,"src":"7904:5:16","valueSize":1},{"declaration":2593,"isOffset":false,"isSlot":false,"src":"7916:5:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7834:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7852:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7855:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7889:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7947:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"7959:1:16","valueSize":1}],"id":2613,"nodeType":"InlineAssembly","src":"7811:160:16"},{"AST":{"nodeType":"YulBlock","src":"7989:151:16","statements":[{"nodeType":"YulAssignment","src":"8003:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8012:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"8021:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"8024:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8017:3:16"},"nodeType":"YulFunctionCall","src":"8017:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8008:3:16"},"nodeType":"YulFunctionCall","src":"8008:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"8003:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"8040:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8053:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"8058:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8049:3:16"},"nodeType":"YulFunctionCall","src":"8049:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"8044:1:16","type":""}]},{"nodeType":"YulAssignment","src":"8073:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"8085:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8096:2:16","type":"","value":"53"},{"name":"f","nodeType":"YulIdentifier","src":"8100:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8092:3:16"},"nodeType":"YulFunctionCall","src":"8092:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8082:2:16"},"nodeType":"YulFunctionCall","src":"8082:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"8073:5:16"}]},{"nodeType":"YulAssignment","src":"8116:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"8125:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"8128:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8121:3:16"},"nodeType":"YulFunctionCall","src":"8121:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"8116:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2593,"isOffset":false,"isSlot":false,"src":"8073:5:16","valueSize":1},{"declaration":2593,"isOffset":false,"isSlot":false,"src":"8085:5:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8003:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8021:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8024:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8058:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8116:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8128:1:16","valueSize":1}],"id":2614,"nodeType":"InlineAssembly","src":"7980:160:16"},{"AST":{"nodeType":"YulBlock","src":"8158:151:16","statements":[{"nodeType":"YulAssignment","src":"8172:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8181:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"8190:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"8193:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8186:3:16"},"nodeType":"YulFunctionCall","src":"8186:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8177:3:16"},"nodeType":"YulFunctionCall","src":"8177:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"8172:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"8209:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8222:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"8227:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8218:3:16"},"nodeType":"YulFunctionCall","src":"8218:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"8213:1:16","type":""}]},{"nodeType":"YulAssignment","src":"8242:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"8254:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8265:2:16","type":"","value":"52"},{"name":"f","nodeType":"YulIdentifier","src":"8269:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8261:3:16"},"nodeType":"YulFunctionCall","src":"8261:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8251:2:16"},"nodeType":"YulFunctionCall","src":"8251:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"8242:5:16"}]},{"nodeType":"YulAssignment","src":"8285:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"8294:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"8297:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8290:3:16"},"nodeType":"YulFunctionCall","src":"8290:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"8285:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2593,"isOffset":false,"isSlot":false,"src":"8242:5:16","valueSize":1},{"declaration":2593,"isOffset":false,"isSlot":false,"src":"8254:5:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8172:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8190:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8193:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8227:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8285:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8297:1:16","valueSize":1}],"id":2615,"nodeType":"InlineAssembly","src":"8149:160:16"},{"AST":{"nodeType":"YulBlock","src":"8327:151:16","statements":[{"nodeType":"YulAssignment","src":"8341:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8350:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"8359:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"8362:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8355:3:16"},"nodeType":"YulFunctionCall","src":"8355:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8346:3:16"},"nodeType":"YulFunctionCall","src":"8346:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"8341:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"8378:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8391:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"8396:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8387:3:16"},"nodeType":"YulFunctionCall","src":"8387:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"8382:1:16","type":""}]},{"nodeType":"YulAssignment","src":"8411:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"8423:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8434:2:16","type":"","value":"51"},{"name":"f","nodeType":"YulIdentifier","src":"8438:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8430:3:16"},"nodeType":"YulFunctionCall","src":"8430:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8420:2:16"},"nodeType":"YulFunctionCall","src":"8420:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"8411:5:16"}]},{"nodeType":"YulAssignment","src":"8454:14:16","value":{"arguments":[{"name":"f","nodeType":"YulIdentifier","src":"8463:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"8466:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8459:3:16"},"nodeType":"YulFunctionCall","src":"8459:9:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"8454:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2593,"isOffset":false,"isSlot":false,"src":"8411:5:16","valueSize":1},{"declaration":2593,"isOffset":false,"isSlot":false,"src":"8423:5:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8341:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8359:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8362:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8396:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8454:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8466:1:16","valueSize":1}],"id":2616,"nodeType":"InlineAssembly","src":"8318:160:16"},{"AST":{"nodeType":"YulBlock","src":"8496:124:16","statements":[{"nodeType":"YulAssignment","src":"8510:24:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8519:3:16","type":"","value":"127"},{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"8528:1:16"},{"name":"r","nodeType":"YulIdentifier","src":"8531:1:16"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8524:3:16"},"nodeType":"YulFunctionCall","src":"8524:9:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8515:3:16"},"nodeType":"YulFunctionCall","src":"8515:19:16"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"8510:1:16"}]},{"nodeType":"YulVariableDeclaration","src":"8547:20:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8560:3:16","type":"","value":"128"},{"name":"r","nodeType":"YulIdentifier","src":"8565:1:16"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"8556:3:16"},"nodeType":"YulFunctionCall","src":"8556:11:16"},"variables":[{"name":"f","nodeType":"YulTypedName","src":"8551:1:16","type":""}]},{"nodeType":"YulAssignment","src":"8580:30:16","value":{"arguments":[{"name":"log_2","nodeType":"YulIdentifier","src":"8592:5:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8603:2:16","type":"","value":"50"},{"name":"f","nodeType":"YulIdentifier","src":"8607:1:16"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8599:3:16"},"nodeType":"YulFunctionCall","src":"8599:10:16"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8589:2:16"},"nodeType":"YulFunctionCall","src":"8589:21:16"},"variableNames":[{"name":"log_2","nodeType":"YulIdentifier","src":"8580:5:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2593,"isOffset":false,"isSlot":false,"src":"8580:5:16","valueSize":1},{"declaration":2593,"isOffset":false,"isSlot":false,"src":"8592:5:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8510:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8528:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8531:1:16","valueSize":1},{"declaration":2555,"isOffset":false,"isSlot":false,"src":"8565:1:16","valueSize":1}],"id":2617,"nodeType":"InlineAssembly","src":"8487:133:16"},{"assignments":[2619],"declarations":[{"constant":false,"id":2619,"mutability":"mutable","name":"log_sqrt10001","nameLocation":"8637:13:16","nodeType":"VariableDeclaration","scope":2664,"src":"8630:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2618,"name":"int256","nodeType":"ElementaryTypeName","src":"8630:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2623,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2620,"name":"log_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"8653:5:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"323535373338393538393939363033383236333437313431","id":2621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8661:24:16","typeDescriptions":{"typeIdentifier":"t_rational_255738958999603826347141_by_1","typeString":"int_const 255738958999603826347141"},"value":"255738958999603826347141"},"src":"8653:32:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"8630:55:16"},{"assignments":[2625],"declarations":[{"constant":false,"id":2625,"mutability":"mutable","name":"tickLow","nameLocation":"8720:7:16","nodeType":"VariableDeclaration","scope":2664,"src":"8714:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2624,"name":"int24","nodeType":"ElementaryTypeName","src":"8714:5:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":2635,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2628,"name":"log_sqrt10001","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2619,"src":"8750:13:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"33343032393932393536383039313332343138353936313430313030363630323437323130","id":2629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8766:37:16","typeDescriptions":{"typeIdentifier":"t_rational_3402992956809132418596140100660247210_by_1","typeString":"int_const 3402...(29 digits omitted)...7210"},"value":"3402992956809132418596140100660247210"},"src":"8750:53:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2631,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8749:55:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8808:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8749:62:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2627,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8730:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":2626,"name":"int24","nodeType":"ElementaryTypeName","src":"8730:5:16","typeDescriptions":{}}},"id":2634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8730:91:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"8714:107:16"},{"assignments":[2637],"declarations":[{"constant":false,"id":2637,"mutability":"mutable","name":"tickHi","nameLocation":"8837:6:16","nodeType":"VariableDeclaration","scope":2664,"src":"8831:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2636,"name":"int24","nodeType":"ElementaryTypeName","src":"8831:5:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"id":2647,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2640,"name":"log_sqrt10001","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2619,"src":"8866:13:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"323931333339343634373731393839363232393037303237363231313533333938303838343935","id":2641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8882:39:16","typeDescriptions":{"typeIdentifier":"t_rational_291339464771989622907027621153398088495_by_1","typeString":"int_const 2913...(31 digits omitted)...8495"},"value":"291339464771989622907027621153398088495"},"src":"8866:55:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2643,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8865:57:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8926:3:16","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8865:64:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2639,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8846:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":2638,"name":"int24","nodeType":"ElementaryTypeName","src":"8846:5:16","typeDescriptions":{}}},"id":2646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8846:93:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"VariableDeclarationStatement","src":"8831:108:16"},{"expression":{"id":2662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2648,"name":"tick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2532,"src":"8950:4:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_int24","typeString":"int24"},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2649,"name":"tickLow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2625,"src":"8957:7:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2650,"name":"tickHi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"8968:6:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"8957:17:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2654,"name":"tickHi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"9030:6:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int24","typeString":"int24"}],"id":2653,"name":"getSqrtRatioAtTick","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"9011:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int24_$returns$_t_uint160_$","typeString":"function (int24) pure returns (uint160)"}},"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9011:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2656,"name":"sqrtPriceX96","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2529,"src":"9041:12:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"9011:42:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2659,"name":"tickLow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2625,"src":"9089:7:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9011:85:16","trueExpression":{"id":2658,"name":"tickHi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"9068:6:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":2661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8957:139:16","trueExpression":{"id":2652,"name":"tickLow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2625,"src":"8989:7:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"8950:146:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":2663,"nodeType":"ExpressionStatement","src":"8950:146:16"}]},"documentation":{"id":2527,"nodeType":"StructuredDocumentation","src":"4269:408:16","text":"@notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n ever return.\n @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n @return tick The greatest tick for which the ratio is less than or equal to the input ratio"},"id":2665,"implemented":true,"kind":"function","modifiers":[],"name":"getTickAtSqrtRatio","nameLocation":"4691:18:16","nodeType":"FunctionDefinition","parameters":{"id":2530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2529,"mutability":"mutable","name":"sqrtPriceX96","nameLocation":"4727:12:16","nodeType":"VariableDeclaration","scope":2665,"src":"4719:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":2528,"name":"uint160","nodeType":"ElementaryTypeName","src":"4719:7:16","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"4709:36:16"},"returnParameters":{"id":2533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2532,"mutability":"mutable","name":"tick","nameLocation":"4775:4:16","nodeType":"VariableDeclaration","scope":2665,"src":"4769:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2531,"name":"int24","nodeType":"ElementaryTypeName","src":"4769:5:16","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"4768:12:16"},"scope":2666,"src":"4682:4421:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2667,"src":"306:8799:16","usedErrors":[]}],"src":"45:9061:16"},"id":16},"contracts/interfaces/ISwapper.sol":{"ast":{"absolutePath":"contracts/interfaces/ISwapper.sol","exportedSymbols":{"ISwapper":[2713]},"id":2714,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":2668,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"40:24:17"},{"abstract":false,"baseContracts":[],"canonicalName":"ISwapper","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2713,"linearizedBaseContracts":[2713],"name":"ISwapper","nameLocation":"78:8:17","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2669,"nodeType":"StructuredDocumentation","src":"94:381:17","text":"@notice returns the possible output amount for input share\n @param tokenInId YieldBox asset id\n @param shareIn Shares to get the amount for\n @param dexData Custom DEX data for query execution\n @dev dexData examples:\n     - for UniV2, it should contain address[] swapPath\n     - for Curve, it should contain uint256[] tokenIndexes"},"functionSelector":"532bb192","id":2680,"implemented":false,"kind":"function","modifiers":[],"name":"getOutputAmount","nameLocation":"490:15:17","nodeType":"FunctionDefinition","parameters":{"id":2676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2671,"mutability":"mutable","name":"tokenInId","nameLocation":"524:9:17","nodeType":"VariableDeclaration","scope":2680,"src":"516:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2670,"name":"uint256","nodeType":"ElementaryTypeName","src":"516:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2673,"mutability":"mutable","name":"shareIn","nameLocation":"552:7:17","nodeType":"VariableDeclaration","scope":2680,"src":"544:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2672,"name":"uint256","nodeType":"ElementaryTypeName","src":"544:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2675,"mutability":"mutable","name":"dexData","nameLocation":"585:7:17","nodeType":"VariableDeclaration","scope":2680,"src":"570:22:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2674,"name":"bytes","nodeType":"ElementaryTypeName","src":"570:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"505:94:17"},"returnParameters":{"id":2679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2678,"mutability":"mutable","name":"amountOut","nameLocation":"631:9:17","nodeType":"VariableDeclaration","scope":2680,"src":"623:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2677,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"622:19:17"},"scope":2713,"src":"481:161:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2681,"nodeType":"StructuredDocumentation","src":"650:330:17","text":"@notice returns necessary input amount for a fixed output amount\n @param tokenOutId YieldBox asset id\n @param shareOut Shares out to compute the amount for\n @param dexData Custom DEX data for query execution\n @dev dexData examples:\n     - for UniV2, it should contain address[] swapPath"},"functionSelector":"c6fe9549","id":2692,"implemented":false,"kind":"function","modifiers":[],"name":"getInputAmount","nameLocation":"995:14:17","nodeType":"FunctionDefinition","parameters":{"id":2688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2683,"mutability":"mutable","name":"tokenOutId","nameLocation":"1028:10:17","nodeType":"VariableDeclaration","scope":2692,"src":"1020:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2682,"name":"uint256","nodeType":"ElementaryTypeName","src":"1020:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2685,"mutability":"mutable","name":"shareOut","nameLocation":"1057:8:17","nodeType":"VariableDeclaration","scope":2692,"src":"1049:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2684,"name":"uint256","nodeType":"ElementaryTypeName","src":"1049:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2687,"mutability":"mutable","name":"dexData","nameLocation":"1091:7:17","nodeType":"VariableDeclaration","scope":2692,"src":"1076:22:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2686,"name":"bytes","nodeType":"ElementaryTypeName","src":"1076:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1009:96:17"},"returnParameters":{"id":2691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2690,"mutability":"mutable","name":"amountIn","nameLocation":"1137:8:17","nodeType":"VariableDeclaration","scope":2692,"src":"1129:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2689,"name":"uint256","nodeType":"ElementaryTypeName","src":"1129:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1128:18:17"},"scope":2713,"src":"986:161:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2693,"nodeType":"StructuredDocumentation","src":"1155:537:17","text":"@notice swaps token in with token out\n @dev returns both amount and shares\n @param tokenInId YieldBox asset id\n @param tokenOutId YieldBox asset id\n @param shareIn Shares to be swapped\n @param to Receiver address\n @param amountOutMin Minimum amount to be received\n @param dexData Custom DEX data for query execution\n @dev dexData examples:\n     - for UniV2, it should contain address[] swapPath\n     - for Curve, it should contain uint256[] tokenIndexes"},"functionSelector":"55a68e10","id":2712,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nameLocation":"1707:4:17","nodeType":"FunctionDefinition","parameters":{"id":2706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2695,"mutability":"mutable","name":"tokenInId","nameLocation":"1730:9:17","nodeType":"VariableDeclaration","scope":2712,"src":"1722:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2694,"name":"uint256","nodeType":"ElementaryTypeName","src":"1722:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2697,"mutability":"mutable","name":"tokenOutId","nameLocation":"1758:10:17","nodeType":"VariableDeclaration","scope":2712,"src":"1750:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2696,"name":"uint256","nodeType":"ElementaryTypeName","src":"1750:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2699,"mutability":"mutable","name":"shareIn","nameLocation":"1787:7:17","nodeType":"VariableDeclaration","scope":2712,"src":"1779:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2698,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2701,"mutability":"mutable","name":"to","nameLocation":"1813:2:17","nodeType":"VariableDeclaration","scope":2712,"src":"1805:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2700,"name":"address","nodeType":"ElementaryTypeName","src":"1805:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2703,"mutability":"mutable","name":"amountOutMin","nameLocation":"1834:12:17","nodeType":"VariableDeclaration","scope":2712,"src":"1826:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2702,"name":"uint256","nodeType":"ElementaryTypeName","src":"1826:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2705,"mutability":"mutable","name":"dexData","nameLocation":"1872:7:17","nodeType":"VariableDeclaration","scope":2712,"src":"1857:22:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2704,"name":"bytes","nodeType":"ElementaryTypeName","src":"1857:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1711:175:17"},"returnParameters":{"id":2711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2708,"mutability":"mutable","name":"amountOut","nameLocation":"1913:9:17","nodeType":"VariableDeclaration","scope":2712,"src":"1905:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2707,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2710,"mutability":"mutable","name":"shareOut","nameLocation":"1932:8:17","nodeType":"VariableDeclaration","scope":2712,"src":"1924:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2709,"name":"uint256","nodeType":"ElementaryTypeName","src":"1924:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:37:17"},"scope":2713,"src":"1698:244:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2714,"src":"68:1877:17","usedErrors":[]}],"src":"40:1907:17"},"id":17},"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol":{"ast":{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol","exportedSymbols":{"TokenType":[2721]},"id":2722,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2715,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:18"},{"canonicalName":"TokenType","id":2721,"members":[{"id":2716,"name":"Native","nameLocation":"578:6:18","nodeType":"EnumValue","src":"578:6:18"},{"id":2717,"name":"ERC20","nameLocation":"590:5:18","nodeType":"EnumValue","src":"590:5:18"},{"id":2718,"name":"ERC721","nameLocation":"601:6:18","nodeType":"EnumValue","src":"601:6:18"},{"id":2719,"name":"ERC1155","nameLocation":"613:7:18","nodeType":"EnumValue","src":"613:7:18"},{"id":2720,"name":"None","nameLocation":"626:4:18","nodeType":"EnumValue","src":"626:4:18"}],"name":"TokenType","nameLocation":"562:9:18","nodeType":"EnumDefinition","src":"557:75:18"}],"src":"32:601:18"},"id":18},"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol":{"ast":{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol","exportedSymbols":{"IYieldBox":[2872],"TokenType":[2721]},"id":2873,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2723,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:19"},{"id":2724,"literals":["experimental","ABIEncoderV2"],"nodeType":"PragmaDirective","src":"56:33:19"},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol","file":"../enums/YieldBoxTokenType.sol","id":2725,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2873,"sourceUnit":2722,"src":"91:40:19","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IYieldBox","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2872,"linearizedBaseContracts":[2872],"name":"IYieldBox","nameLocation":"143:9:19","nodeType":"ContractDefinition","nodes":[{"functionSelector":"eb6d3a11","id":2730,"implemented":false,"kind":"function","modifiers":[],"name":"wrappedNative","nameLocation":"168:13:19","nodeType":"FunctionDefinition","parameters":{"id":2726,"nodeType":"ParameterList","parameters":[],"src":"181:2:19"},"returnParameters":{"id":2729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2728,"mutability":"mutable","name":"wrappedNative","nameLocation":"215:13:19","nodeType":"VariableDeclaration","scope":2730,"src":"207:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2727,"name":"address","nodeType":"ElementaryTypeName","src":"207:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"206:23:19"},"scope":2872,"src":"159:71:19","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"cf35bdd0","id":2744,"implemented":false,"kind":"function","modifiers":[],"name":"assets","nameLocation":"245:6:19","nodeType":"FunctionDefinition","parameters":{"id":2733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2732,"mutability":"mutable","name":"assetId","nameLocation":"260:7:19","nodeType":"VariableDeclaration","scope":2744,"src":"252:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2731,"name":"uint256","nodeType":"ElementaryTypeName","src":"252:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"251:17:19"},"returnParameters":{"id":2743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2736,"mutability":"mutable","name":"tokenType","nameLocation":"339:9:19","nodeType":"VariableDeclaration","scope":2744,"src":"329:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$2721","typeString":"enum TokenType"},"typeName":{"id":2735,"nodeType":"UserDefinedTypeName","pathNode":{"id":2734,"name":"TokenType","nameLocations":["329:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":2721,"src":"329:9:19"},"referencedDeclaration":2721,"src":"329:9:19","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$2721","typeString":"enum TokenType"}},"visibility":"internal"},{"constant":false,"id":2738,"mutability":"mutable","name":"contractAddress","nameLocation":"370:15:19","nodeType":"VariableDeclaration","scope":2744,"src":"362:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2737,"name":"address","nodeType":"ElementaryTypeName","src":"362:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2740,"mutability":"mutable","name":"strategy","nameLocation":"407:8:19","nodeType":"VariableDeclaration","scope":2744,"src":"399:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2739,"name":"address","nodeType":"ElementaryTypeName","src":"399:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2742,"mutability":"mutable","name":"tokenId","nameLocation":"437:7:19","nodeType":"VariableDeclaration","scope":2744,"src":"429:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2741,"name":"uint256","nodeType":"ElementaryTypeName","src":"429:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"315:139:19"},"scope":2872,"src":"236:219:19","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"1f0ee4c3","id":2755,"implemented":false,"kind":"function","modifiers":[],"name":"nativeTokens","nameLocation":"470:12:19","nodeType":"FunctionDefinition","parameters":{"id":2747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2746,"mutability":"mutable","name":"assetId","nameLocation":"491:7:19","nodeType":"VariableDeclaration","scope":2755,"src":"483:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2745,"name":"uint256","nodeType":"ElementaryTypeName","src":"483:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"482:17:19"},"returnParameters":{"id":2754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2749,"mutability":"mutable","name":"name","nameLocation":"574:4:19","nodeType":"VariableDeclaration","scope":2755,"src":"560:18:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2748,"name":"string","nodeType":"ElementaryTypeName","src":"560:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2751,"mutability":"mutable","name":"symbol","nameLocation":"606:6:19","nodeType":"VariableDeclaration","scope":2755,"src":"592:20:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2750,"name":"string","nodeType":"ElementaryTypeName","src":"592:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2753,"mutability":"mutable","name":"decimals","nameLocation":"632:8:19","nodeType":"VariableDeclaration","scope":2755,"src":"626:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2752,"name":"uint8","nodeType":"ElementaryTypeName","src":"626:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"546:104:19"},"scope":2872,"src":"461:190:19","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a123c33e","id":2762,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"666:5:19","nodeType":"FunctionDefinition","parameters":{"id":2758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2757,"mutability":"mutable","name":"assetId","nameLocation":"680:7:19","nodeType":"VariableDeclaration","scope":2762,"src":"672:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2756,"name":"uint256","nodeType":"ElementaryTypeName","src":"672:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"671:17:19"},"returnParameters":{"id":2761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2760,"mutability":"mutable","name":"owner","nameLocation":"720:5:19","nodeType":"VariableDeclaration","scope":2762,"src":"712:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2759,"name":"address","nodeType":"ElementaryTypeName","src":"712:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"711:15:19"},"scope":2872,"src":"657:70:19","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"bd85b039","id":2769,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"742:11:19","nodeType":"FunctionDefinition","parameters":{"id":2765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2764,"mutability":"mutable","name":"assetId","nameLocation":"762:7:19","nodeType":"VariableDeclaration","scope":2769,"src":"754:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2763,"name":"uint256","nodeType":"ElementaryTypeName","src":"754:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"753:17:19"},"returnParameters":{"id":2768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2767,"mutability":"mutable","name":"totalSupply","nameLocation":"802:11:19","nodeType":"VariableDeclaration","scope":2769,"src":"794:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2766,"name":"uint256","nodeType":"ElementaryTypeName","src":"794:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"793:21:19"},"scope":2872,"src":"733:82:19","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"b8489fb5","id":2778,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAsset","nameLocation":"830:19:19","nodeType":"FunctionDefinition","parameters":{"id":2776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2771,"mutability":"mutable","name":"operator","nameLocation":"867:8:19","nodeType":"VariableDeclaration","scope":2778,"src":"859:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2770,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2773,"mutability":"mutable","name":"assetId","nameLocation":"893:7:19","nodeType":"VariableDeclaration","scope":2778,"src":"885:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2772,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2775,"mutability":"mutable","name":"approved","nameLocation":"915:8:19","nodeType":"VariableDeclaration","scope":2778,"src":"910:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2774,"name":"bool","nodeType":"ElementaryTypeName","src":"910:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"849:80:19"},"returnParameters":{"id":2777,"nodeType":"ParameterList","parameters":[],"src":"938:0:19"},"scope":2872,"src":"821:118:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"9a9af97a","id":2795,"implemented":false,"kind":"function","modifiers":[],"name":"depositAsset","nameLocation":"954:12:19","nodeType":"FunctionDefinition","parameters":{"id":2789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2780,"mutability":"mutable","name":"assetId","nameLocation":"984:7:19","nodeType":"VariableDeclaration","scope":2795,"src":"976:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2779,"name":"uint256","nodeType":"ElementaryTypeName","src":"976:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2782,"mutability":"mutable","name":"from","nameLocation":"1009:4:19","nodeType":"VariableDeclaration","scope":2795,"src":"1001:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2781,"name":"address","nodeType":"ElementaryTypeName","src":"1001:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2784,"mutability":"mutable","name":"to","nameLocation":"1031:2:19","nodeType":"VariableDeclaration","scope":2795,"src":"1023:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2783,"name":"address","nodeType":"ElementaryTypeName","src":"1023:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2786,"mutability":"mutable","name":"amount","nameLocation":"1051:6:19","nodeType":"VariableDeclaration","scope":2795,"src":"1043:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2785,"name":"uint256","nodeType":"ElementaryTypeName","src":"1043:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2788,"mutability":"mutable","name":"share","nameLocation":"1075:5:19","nodeType":"VariableDeclaration","scope":2795,"src":"1067:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2787,"name":"uint256","nodeType":"ElementaryTypeName","src":"1067:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"966:120:19"},"returnParameters":{"id":2794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2791,"mutability":"mutable","name":"amountOut","nameLocation":"1113:9:19","nodeType":"VariableDeclaration","scope":2795,"src":"1105:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2790,"name":"uint256","nodeType":"ElementaryTypeName","src":"1105:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2793,"mutability":"mutable","name":"shareOut","nameLocation":"1132:8:19","nodeType":"VariableDeclaration","scope":2795,"src":"1124:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2792,"name":"uint256","nodeType":"ElementaryTypeName","src":"1124:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1104:37:19"},"scope":2872,"src":"945:197:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"8d2e63b8","id":2812,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"1157:8:19","nodeType":"FunctionDefinition","parameters":{"id":2806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2797,"mutability":"mutable","name":"assetId","nameLocation":"1183:7:19","nodeType":"VariableDeclaration","scope":2812,"src":"1175:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2796,"name":"uint256","nodeType":"ElementaryTypeName","src":"1175:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2799,"mutability":"mutable","name":"from","nameLocation":"1208:4:19","nodeType":"VariableDeclaration","scope":2812,"src":"1200:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2798,"name":"address","nodeType":"ElementaryTypeName","src":"1200:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2801,"mutability":"mutable","name":"to","nameLocation":"1230:2:19","nodeType":"VariableDeclaration","scope":2812,"src":"1222:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2800,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2803,"mutability":"mutable","name":"amount","nameLocation":"1250:6:19","nodeType":"VariableDeclaration","scope":2812,"src":"1242:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2802,"name":"uint256","nodeType":"ElementaryTypeName","src":"1242:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2805,"mutability":"mutable","name":"share","nameLocation":"1274:5:19","nodeType":"VariableDeclaration","scope":2812,"src":"1266:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2804,"name":"uint256","nodeType":"ElementaryTypeName","src":"1266:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1165:120:19"},"returnParameters":{"id":2811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2808,"mutability":"mutable","name":"amountOut","nameLocation":"1312:9:19","nodeType":"VariableDeclaration","scope":2812,"src":"1304:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2807,"name":"uint256","nodeType":"ElementaryTypeName","src":"1304:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2810,"mutability":"mutable","name":"shareOut","nameLocation":"1331:8:19","nodeType":"VariableDeclaration","scope":2812,"src":"1323:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2809,"name":"uint256","nodeType":"ElementaryTypeName","src":"1323:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1303:37:19"},"scope":2872,"src":"1148:193:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"0411b252","id":2823,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1356:8:19","nodeType":"FunctionDefinition","parameters":{"id":2821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2814,"mutability":"mutable","name":"from","nameLocation":"1382:4:19","nodeType":"VariableDeclaration","scope":2823,"src":"1374:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2813,"name":"address","nodeType":"ElementaryTypeName","src":"1374:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2816,"mutability":"mutable","name":"to","nameLocation":"1404:2:19","nodeType":"VariableDeclaration","scope":2823,"src":"1396:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2815,"name":"address","nodeType":"ElementaryTypeName","src":"1396:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2818,"mutability":"mutable","name":"assetId","nameLocation":"1424:7:19","nodeType":"VariableDeclaration","scope":2823,"src":"1416:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2817,"name":"uint256","nodeType":"ElementaryTypeName","src":"1416:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2820,"mutability":"mutable","name":"share","nameLocation":"1449:5:19","nodeType":"VariableDeclaration","scope":2823,"src":"1441:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2819,"name":"uint256","nodeType":"ElementaryTypeName","src":"1441:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1364:96:19"},"returnParameters":{"id":2822,"nodeType":"ParameterList","parameters":[],"src":"1469:0:19"},"scope":2872,"src":"1347:123:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"daf210b1","id":2836,"implemented":false,"kind":"function","modifiers":[],"name":"batchTransfer","nameLocation":"1485:13:19","nodeType":"FunctionDefinition","parameters":{"id":2834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2825,"mutability":"mutable","name":"from","nameLocation":"1516:4:19","nodeType":"VariableDeclaration","scope":2836,"src":"1508:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2824,"name":"address","nodeType":"ElementaryTypeName","src":"1508:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2827,"mutability":"mutable","name":"to","nameLocation":"1538:2:19","nodeType":"VariableDeclaration","scope":2836,"src":"1530:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2826,"name":"address","nodeType":"ElementaryTypeName","src":"1530:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2830,"mutability":"mutable","name":"assetIds_","nameLocation":"1569:9:19","nodeType":"VariableDeclaration","scope":2836,"src":"1550:28:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2828,"name":"uint256","nodeType":"ElementaryTypeName","src":"1550:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2829,"nodeType":"ArrayTypeName","src":"1550:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2833,"mutability":"mutable","name":"shares_","nameLocation":"1607:7:19","nodeType":"VariableDeclaration","scope":2836,"src":"1588:26:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2831,"name":"uint256","nodeType":"ElementaryTypeName","src":"1588:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2832,"nodeType":"ArrayTypeName","src":"1588:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1498:122:19"},"returnParameters":{"id":2835,"nodeType":"ParameterList","parameters":[],"src":"1629:0:19"},"scope":2872,"src":"1476:154:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"215b595a","id":2849,"implemented":false,"kind":"function","modifiers":[],"name":"transferMultiple","nameLocation":"1645:16:19","nodeType":"FunctionDefinition","parameters":{"id":2847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2838,"mutability":"mutable","name":"from","nameLocation":"1679:4:19","nodeType":"VariableDeclaration","scope":2849,"src":"1671:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2837,"name":"address","nodeType":"ElementaryTypeName","src":"1671:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2841,"mutability":"mutable","name":"tos","nameLocation":"1712:3:19","nodeType":"VariableDeclaration","scope":2849,"src":"1693:22:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2839,"name":"address","nodeType":"ElementaryTypeName","src":"1693:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2840,"nodeType":"ArrayTypeName","src":"1693:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2843,"mutability":"mutable","name":"assetId","nameLocation":"1733:7:19","nodeType":"VariableDeclaration","scope":2849,"src":"1725:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2842,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2846,"mutability":"mutable","name":"shares","nameLocation":"1769:6:19","nodeType":"VariableDeclaration","scope":2849,"src":"1750:25:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2844,"name":"uint256","nodeType":"ElementaryTypeName","src":"1750:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2845,"nodeType":"ArrayTypeName","src":"1750:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1661:120:19"},"returnParameters":{"id":2848,"nodeType":"ParameterList","parameters":[],"src":"1790:0:19"},"scope":2872,"src":"1636:155:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"8eb22cdd","id":2860,"implemented":false,"kind":"function","modifiers":[],"name":"toShare","nameLocation":"1806:7:19","nodeType":"FunctionDefinition","parameters":{"id":2856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2851,"mutability":"mutable","name":"assetId","nameLocation":"1831:7:19","nodeType":"VariableDeclaration","scope":2860,"src":"1823:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2850,"name":"uint256","nodeType":"ElementaryTypeName","src":"1823:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2853,"mutability":"mutable","name":"amount","nameLocation":"1856:6:19","nodeType":"VariableDeclaration","scope":2860,"src":"1848:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2852,"name":"uint256","nodeType":"ElementaryTypeName","src":"1848:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2855,"mutability":"mutable","name":"roundUp","nameLocation":"1877:7:19","nodeType":"VariableDeclaration","scope":2860,"src":"1872:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2854,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1813:77:19"},"returnParameters":{"id":2859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2858,"mutability":"mutable","name":"share","nameLocation":"1922:5:19","nodeType":"VariableDeclaration","scope":2860,"src":"1914:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2857,"name":"uint256","nodeType":"ElementaryTypeName","src":"1914:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1913:15:19"},"scope":2872,"src":"1797:132:19","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"442c1599","id":2871,"implemented":false,"kind":"function","modifiers":[],"name":"toAmount","nameLocation":"1944:8:19","nodeType":"FunctionDefinition","parameters":{"id":2867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2862,"mutability":"mutable","name":"assetId","nameLocation":"1970:7:19","nodeType":"VariableDeclaration","scope":2871,"src":"1962:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2861,"name":"uint256","nodeType":"ElementaryTypeName","src":"1962:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2864,"mutability":"mutable","name":"share","nameLocation":"1995:5:19","nodeType":"VariableDeclaration","scope":2871,"src":"1987:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2863,"name":"uint256","nodeType":"ElementaryTypeName","src":"1987:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2866,"mutability":"mutable","name":"roundUp","nameLocation":"2015:7:19","nodeType":"VariableDeclaration","scope":2871,"src":"2010:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2865,"name":"bool","nodeType":"ElementaryTypeName","src":"2010:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1952:76:19"},"returnParameters":{"id":2870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2869,"mutability":"mutable","name":"amount","nameLocation":"2060:6:19","nodeType":"VariableDeclaration","scope":2871,"src":"2052:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2868,"name":"uint256","nodeType":"ElementaryTypeName","src":"2052:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2051:16:19"},"scope":2872,"src":"1935:133:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2873,"src":"133:1937:19","usedErrors":[]}],"src":"32:2039:19"},"id":19}},"contracts":{"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol":{"IUniswapV3Factory":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint24","name":"fee","type":"uint24"},{"indexed":true,"internalType":"int24","name":"tickSpacing","type":"int24"}],"name":"FeeAmountEnabled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"oldOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token0","type":"address"},{"indexed":true,"internalType":"address","name":"token1","type":"address"},{"indexed":true,"internalType":"uint24","name":"fee","type":"uint24"},{"indexed":false,"internalType":"int24","name":"tickSpacing","type":"int24"},{"indexed":false,"internalType":"address","name":"pool","type":"address"}],"name":"PoolCreated","type":"event"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"}],"name":"createPool","outputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"int24","name":"tickSpacing","type":"int24"}],"name":"enableFeeAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint24","name":"fee","type":"uint24"}],"name":"feeAmountTickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"}],"name":"getPool","outputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"setOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"FeeAmountEnabled(uint24,int24)":{"params":{"fee":"The enabled fee, denominated in hundredths of a bip","tickSpacing":"The minimum number of ticks between initialized ticks for pools created with the given fee"}},"OwnerChanged(address,address)":{"params":{"newOwner":"The owner after the owner was changed","oldOwner":"The owner before the owner was changed"}},"PoolCreated(address,address,uint24,int24,address)":{"params":{"fee":"The fee collected upon every swap in the pool, denominated in hundredths of a bip","pool":"The address of the created pool","tickSpacing":"The minimum number of ticks between initialized ticks","token0":"The first token of the pool by address sort order","token1":"The second token of the pool by address sort order"}}},"kind":"dev","methods":{"createPool(address,address,uint24)":{"details":"tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.","params":{"fee":"The desired fee for the pool","tokenA":"One of the two tokens in the desired pool","tokenB":"The other of the two tokens in the desired pool"},"returns":{"pool":"The address of the newly created pool"}},"enableFeeAmount(uint24,int24)":{"details":"Fee amounts may never be removed once enabled","params":{"fee":"The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)","tickSpacing":"The spacing between ticks to be enforced for all pools created with the given fee amount"}},"feeAmountTickSpacing(uint24)":{"details":"A fee amount can never be removed, so this value should be hard coded or cached in the calling context","params":{"fee":"The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee"},"returns":{"_0":"The tick spacing"}},"getPool(address,address,uint24)":{"details":"tokenA and tokenB may be passed in either token0/token1 or token1/token0 order","params":{"fee":"The fee collected upon every swap in the pool, denominated in hundredths of a bip","tokenA":"The contract address of either token0 or token1","tokenB":"The contract address of the other token"},"returns":{"pool":"The pool address"}},"owner()":{"details":"Can be changed by the current owner via setOwner","returns":{"_0":"The address of the factory owner"}},"setOwner(address)":{"details":"Must be called by the current owner","params":{"_owner":"The new owner of the factory"}}},"title":"The interface for the Uniswap V3 Factory","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"createPool(address,address,uint24)":"a1671295","enableFeeAmount(uint24,int24)":"8a7c195f","feeAmountTickSpacing(uint24)":"22afcccb","getPool(address,address,uint24)":"1698ee82","owner()":"8da5cb5b","setOwner(address)":"13af4035"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"FeeAmountEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"enableFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"feeAmountTickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks for pools created with the given fee\"}},\"OwnerChanged(address,address)\":{\"params\":{\"newOwner\":\"The owner after the owner was changed\",\"oldOwner\":\"The owner before the owner was changed\"}},\"PoolCreated(address,address,uint24,int24,address)\":{\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"pool\":\"The address of the created pool\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks\",\"token0\":\"The first token of the pool by address sort order\",\"token1\":\"The second token of the pool by address sort order\"}}},\"kind\":\"dev\",\"methods\":{\"createPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.\",\"params\":{\"fee\":\"The desired fee for the pool\",\"tokenA\":\"One of the two tokens in the desired pool\",\"tokenB\":\"The other of the two tokens in the desired pool\"},\"returns\":{\"pool\":\"The address of the newly created pool\"}},\"enableFeeAmount(uint24,int24)\":{\"details\":\"Fee amounts may never be removed once enabled\",\"params\":{\"fee\":\"The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\",\"tickSpacing\":\"The spacing between ticks to be enforced for all pools created with the given fee amount\"}},\"feeAmountTickSpacing(uint24)\":{\"details\":\"A fee amount can never be removed, so this value should be hard coded or cached in the calling context\",\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\"},\"returns\":{\"_0\":\"The tick spacing\"}},\"getPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\",\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"tokenA\":\"The contract address of either token0 or token1\",\"tokenB\":\"The contract address of the other token\"},\"returns\":{\"pool\":\"The pool address\"}},\"owner()\":{\"details\":\"Can be changed by the current owner via setOwner\",\"returns\":{\"_0\":\"The address of the factory owner\"}},\"setOwner(address)\":{\"details\":\"Must be called by the current owner\",\"params\":{\"_owner\":\"The new owner of the factory\"}}},\"title\":\"The interface for the Uniswap V3 Factory\",\"version\":1},\"userdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"notice\":\"Emitted when a new fee amount is enabled for pool creation via the factory\"},\"OwnerChanged(address,address)\":{\"notice\":\"Emitted when the owner of the factory is changed\"},\"PoolCreated(address,address,uint24,int24,address)\":{\"notice\":\"Emitted when a pool is created\"}},\"kind\":\"user\",\"methods\":{\"createPool(address,address,uint24)\":{\"notice\":\"Creates a pool for the given two tokens and fee\"},\"enableFeeAmount(uint24,int24)\":{\"notice\":\"Enables a fee amount with the given tickSpacing\"},\"feeAmountTickSpacing(uint24)\":{\"notice\":\"Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\"},\"getPool(address,address,uint24)\":{\"notice\":\"Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\"},\"owner()\":{\"notice\":\"Returns the current owner of the factory\"},\"setOwner(address)\":{\"notice\":\"Updates the owner of the factory\"}},\"notice\":\"The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":\"IUniswapV3Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"FeeAmountEnabled(uint24,int24)":{"notice":"Emitted when a new fee amount is enabled for pool creation via the factory"},"OwnerChanged(address,address)":{"notice":"Emitted when the owner of the factory is changed"},"PoolCreated(address,address,uint24,int24,address)":{"notice":"Emitted when a pool is created"}},"kind":"user","methods":{"createPool(address,address,uint24)":{"notice":"Creates a pool for the given two tokens and fee"},"enableFeeAmount(uint24,int24)":{"notice":"Enables a fee amount with the given tickSpacing"},"feeAmountTickSpacing(uint24)":{"notice":"Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled"},"getPool(address,address,uint24)":{"notice":"Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist"},"owner()":{"notice":"Returns the current owner of the factory"},"setOwner(address)":{"notice":"Updates the owner of the factory"}},"notice":"The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees","version":1}}},"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol":{"IUniswapV3Pool":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"Collect","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"CollectProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid1","type":"uint256"}],"name":"Flash","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextOld","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextNew","type":"uint16"}],"name":"IncreaseObservationCardinalityNext","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Initialize","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"feeProtocol0Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol0New","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1New","type":"uint8"}],"name":"SetFeeProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"int256","name":"amount0","type":"int256"},{"indexed":false,"internalType":"int256","name":"amount1","type":"int256"},{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"uint128","name":"liquidity","type":"uint128"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Swap","type":"event"},{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collect","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collectProtocol","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeGrowthGlobal0X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeGrowthGlobal1X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"flash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"}],"name":"increaseObservationCardinalityNext","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"liquidity","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxLiquidityPerTick","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"observations","outputs":[{"internalType":"uint32","name":"blockTimestamp","type":"uint32"},{"internalType":"int56","name":"tickCumulative","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityCumulativeX128","type":"uint160"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32[]","name":"secondsAgos","type":"uint32[]"}],"name":"observe","outputs":[{"internalType":"int56[]","name":"tickCumulatives","type":"int56[]"},{"internalType":"uint160[]","name":"secondsPerLiquidityCumulativeX128s","type":"uint160[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"name":"positions","outputs":[{"internalType":"uint128","name":"_liquidity","type":"uint128"},{"internalType":"uint256","name":"feeGrowthInside0LastX128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthInside1LastX128","type":"uint256"},{"internalType":"uint128","name":"tokensOwed0","type":"uint128"},{"internalType":"uint128","name":"tokensOwed1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolFees","outputs":[{"internalType":"uint128","name":"token0","type":"uint128"},{"internalType":"uint128","name":"token1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"feeProtocol0","type":"uint8"},{"internalType":"uint8","name":"feeProtocol1","type":"uint8"}],"name":"setFeeProtocol","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"observationIndex","type":"uint16"},{"internalType":"uint16","name":"observationCardinality","type":"uint16"},{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"},{"internalType":"uint8","name":"feeProtocol","type":"uint8"},{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"}],"name":"snapshotCumulativesInside","outputs":[{"internalType":"int56","name":"tickCumulativeInside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityInsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsInside","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"int16","name":"wordPosition","type":"int16"}],"name":"tickBitmap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tick","type":"int24"}],"name":"ticks","outputs":[{"internalType":"uint128","name":"liquidityGross","type":"uint128"},{"internalType":"int128","name":"liquidityNet","type":"int128"},{"internalType":"uint256","name":"feeGrowthOutside0X128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthOutside1X128","type":"uint256"},{"internalType":"int56","name":"tickCumulativeOutside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityOutsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsOutside","type":"uint32"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"The pool interface is broken up into many smaller pieces","events":{"Burn(address,int24,int24,uint128,uint256,uint256)":{"details":"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect","params":{"amount":"The amount of liquidity to remove","amount0":"The amount of token0 withdrawn","amount1":"The amount of token1 withdrawn","owner":"The owner of the position for which liquidity is removed","tickLower":"The lower tick of the position","tickUpper":"The upper tick of the position"}},"Collect(address,address,int24,int24,uint128,uint128)":{"details":"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees","params":{"amount0":"The amount of token0 fees collected","amount1":"The amount of token1 fees collected","owner":"The owner of the position for which fees are collected","tickLower":"The lower tick of the position","tickUpper":"The upper tick of the position"}},"CollectProtocol(address,address,uint128,uint128)":{"params":{"amount0":"The amount of token1 protocol fees that is withdrawn","recipient":"The address that receives the collected protocol fees","sender":"The address that collects the protocol fees"}},"Flash(address,address,uint256,uint256,uint256,uint256)":{"params":{"amount0":"The amount of token0 that was flashed","amount1":"The amount of token1 that was flashed","paid0":"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee","paid1":"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee","recipient":"The address that received the tokens from flash","sender":"The address that initiated the swap call, and that received the callback"}},"IncreaseObservationCardinalityNext(uint16,uint16)":{"details":"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.","params":{"observationCardinalityNextNew":"The updated value of the next observation cardinality","observationCardinalityNextOld":"The previous value of the next observation cardinality"}},"Initialize(uint160,int24)":{"details":"Mint/Burn/Swap cannot be emitted by the pool before Initialize","params":{"sqrtPriceX96":"The initial sqrt price of the pool, as a Q64.96","tick":"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"}},"Mint(address,address,int24,int24,uint128,uint256,uint256)":{"params":{"amount":"The amount of liquidity minted to the position range","amount0":"How much token0 was required for the minted liquidity","amount1":"How much token1 was required for the minted liquidity","owner":"The owner of the position and recipient of any minted liquidity","sender":"The address that minted the liquidity","tickLower":"The lower tick of the position","tickUpper":"The upper tick of the position"}},"SetFeeProtocol(uint8,uint8,uint8,uint8)":{"params":{"feeProtocol0New":"The updated value of the token0 protocol fee","feeProtocol0Old":"The previous value of the token0 protocol fee","feeProtocol1New":"The updated value of the token1 protocol fee","feeProtocol1Old":"The previous value of the token1 protocol fee"}},"Swap(address,address,int256,int256,uint160,uint128,int24)":{"params":{"amount0":"The delta of the token0 balance of the pool","amount1":"The delta of the token1 balance of the pool","liquidity":"The liquidity of the pool after the swap","recipient":"The address that received the output of the swap","sender":"The address that initiated the swap call, and that received the callback","sqrtPriceX96":"The sqrt(price) of the pool after the swap, as a Q64.96","tick":"The log base 1.0001 of price of the pool after the swap"}}},"kind":"dev","methods":{"burn(int24,int24,uint128)":{"details":"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect","params":{"amount":"How much liquidity to burn","tickLower":"The lower tick of the position for which to burn liquidity","tickUpper":"The upper tick of the position for which to burn liquidity"},"returns":{"amount0":"The amount of token0 sent to the recipient","amount1":"The amount of token1 sent to the recipient"}},"collect(address,int24,int24,uint128,uint128)":{"details":"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.","params":{"amount0Requested":"How much token0 should be withdrawn from the fees owed","amount1Requested":"How much token1 should be withdrawn from the fees owed","recipient":"The address which should receive the fees collected","tickLower":"The lower tick of the position for which to collect fees","tickUpper":"The upper tick of the position for which to collect fees"},"returns":{"amount0":"The amount of fees collected in token0","amount1":"The amount of fees collected in token1"}},"collectProtocol(address,uint128,uint128)":{"params":{"amount0Requested":"The maximum amount of token0 to send, can be 0 to collect fees in only token1","amount1Requested":"The maximum amount of token1 to send, can be 0 to collect fees in only token0","recipient":"The address to which collected protocol fees should be sent"},"returns":{"amount0":"The protocol fee collected in token0","amount1":"The protocol fee collected in token1"}},"factory()":{"returns":{"_0":"The contract address"}},"fee()":{"returns":{"_0":"The fee"}},"feeGrowthGlobal0X128()":{"details":"This value can overflow the uint256"},"feeGrowthGlobal1X128()":{"details":"This value can overflow the uint256"},"flash(address,uint256,uint256,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback","params":{"amount0":"The amount of token0 to send","amount1":"The amount of token1 to send","data":"Any data to be passed through to the callback","recipient":"The address which will receive the token0 and token1 amounts"}},"increaseObservationCardinalityNext(uint16)":{"details":"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.","params":{"observationCardinalityNext":"The desired minimum number of observations for the pool to store"}},"initialize(uint160)":{"details":"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value","params":{"sqrtPriceX96":"the initial sqrt price of the pool as a Q64.96"}},"liquidity()":{"details":"This value has no relationship to the total liquidity across all ticks"},"maxLiquidityPerTick()":{"details":"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool","returns":{"_0":"The max amount of liquidity per tick"}},"mint(address,int24,int24,uint128,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.","params":{"amount":"The amount of liquidity to mint","data":"Any data that should be passed through to the callback","recipient":"The address for which the liquidity will be created","tickLower":"The lower tick of the position in which to add liquidity","tickUpper":"The upper tick of the position in which to add liquidity"},"returns":{"amount0":"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback","amount1":"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"}},"observations(uint256)":{"details":"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.","params":{"index":"The element of the observations array to fetch"},"returns":{"blockTimestamp":"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"}},"observe(uint32[])":{"details":"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.","params":{"secondsAgos":"From how long ago each cumulative tick and liquidity value should be returned"},"returns":{"secondsPerLiquidityCumulativeX128s":"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp","tickCumulatives":"Cumulative tick values as of each `secondsAgos` from the current block timestamp"}},"positions(bytes32)":{"params":{"key":"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"},"returns":{"_liquidity":"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"}},"protocolFees()":{"details":"Protocol fees will never exceed uint128 max in either token"},"setFeeProtocol(uint8,uint8)":{"params":{"feeProtocol0":"new protocol fee for token0 of the pool","feeProtocol1":"new protocol fee for token1 of the pool"}},"slot0()":{"returns":{"sqrtPriceX96":"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"}},"snapshotCumulativesInside(int24,int24)":{"details":"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.","params":{"tickLower":"The lower tick of the range","tickUpper":"The upper tick of the range"},"returns":{"secondsInside":"The snapshot of seconds per liquidity for the range","secondsPerLiquidityInsideX128":"The snapshot of seconds per liquidity for the range","tickCumulativeInside":"The snapshot of the tick accumulator for the range"}},"swap(address,bool,int256,uint160,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback","params":{"amountSpecified":"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)","data":"Any data to be passed through to the callback","recipient":"The address to receive the output of the swap","sqrtPriceLimitX96":"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap","zeroForOne":"The direction of the swap, true for token0 to token1, false for token1 to token0"},"returns":{"amount0":"The delta of the balance of token0 of the pool, exact when negative, minimum when positive","amount1":"The delta of the balance of token1 of the pool, exact when negative, minimum when positive"}},"tickSpacing()":{"details":"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.","returns":{"_0":"The tick spacing"}},"ticks(int24)":{"params":{"tick":"The tick to look up"},"returns":{"liquidityGross":"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."}},"token0()":{"returns":{"_0":"The token contract address"}},"token1()":{"returns":{"_0":"The token contract address"}}},"title":"The interface for a Uniswap V3 Pool","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burn(int24,int24,uint128)":"a34123a7","collect(address,int24,int24,uint128,uint128)":"4f1eb3d8","collectProtocol(address,uint128,uint128)":"85b66729","factory()":"c45a0155","fee()":"ddca3f43","feeGrowthGlobal0X128()":"f3058399","feeGrowthGlobal1X128()":"46141319","flash(address,uint256,uint256,bytes)":"490e6cbc","increaseObservationCardinalityNext(uint16)":"32148f67","initialize(uint160)":"f637731d","liquidity()":"1a686502","maxLiquidityPerTick()":"70cf754a","mint(address,int24,int24,uint128,bytes)":"3c8a7d8d","observations(uint256)":"252c09d7","observe(uint32[])":"883bdbfd","positions(bytes32)":"514ea4bf","protocolFees()":"1ad8b03b","setFeeProtocol(uint8,uint8)":"8206a4d1","slot0()":"3850c7bd","snapshotCumulativesInside(int24,int24)":"a38807f2","swap(address,bool,int256,uint160,bytes)":"128acb08","tickBitmap(int16)":"5339c296","tickSpacing()":"d0c93a7c","ticks(int24)":"f30dba93","token0()":"0dfe1681","token1()":"d21220a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The pool interface is broken up into many smaller pieces\",\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"The interface for a Uniswap V3 Pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":\"IUniswapV3Pool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Burn(address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when a position's liquidity is removed"},"Collect(address,address,int24,int24,uint128,uint128)":{"notice":"Emitted when fees are collected by the owner of a position"},"CollectProtocol(address,address,uint128,uint128)":{"notice":"Emitted when the collected protocol fees are withdrawn by the factory owner"},"Flash(address,address,uint256,uint256,uint256,uint256)":{"notice":"Emitted by the pool for any flashes of token0/token1"},"IncreaseObservationCardinalityNext(uint16,uint16)":{"notice":"Emitted by the pool for increases to the number of observations that can be stored"},"Initialize(uint160,int24)":{"notice":"Emitted exactly once by a pool when #initialize is first called on the pool"},"Mint(address,address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when liquidity is minted for a given position"},"SetFeeProtocol(uint8,uint8,uint8,uint8)":{"notice":"Emitted when the protocol fee is changed by the pool"},"Swap(address,address,int256,int256,uint160,uint128,int24)":{"notice":"Emitted by the pool for any swaps between token0 and token1"}},"kind":"user","methods":{"burn(int24,int24,uint128)":{"notice":"Burn liquidity from the sender and account tokens owed for the liquidity to the position"},"collect(address,int24,int24,uint128,uint128)":{"notice":"Collects tokens owed to a position"},"collectProtocol(address,uint128,uint128)":{"notice":"Collect the protocol fee accrued to the pool"},"factory()":{"notice":"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"},"fee()":{"notice":"The pool's fee in hundredths of a bip, i.e. 1e-6"},"feeGrowthGlobal0X128()":{"notice":"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"},"feeGrowthGlobal1X128()":{"notice":"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"},"flash(address,uint256,uint256,bytes)":{"notice":"Receive token0 and/or token1 and pay it back, plus a fee, in the callback"},"increaseObservationCardinalityNext(uint16)":{"notice":"Increase the maximum number of price and liquidity observations that this pool will store"},"initialize(uint160)":{"notice":"Sets the initial price for the pool"},"liquidity()":{"notice":"The currently in range liquidity available to the pool"},"maxLiquidityPerTick()":{"notice":"The maximum amount of position liquidity that can use any tick in the range"},"mint(address,int24,int24,uint128,bytes)":{"notice":"Adds liquidity for the given recipient/tickLower/tickUpper position"},"observations(uint256)":{"notice":"Returns data about a specific observation index"},"observe(uint32[])":{"notice":"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"},"positions(bytes32)":{"notice":"Returns the information about a position by the position's key"},"protocolFees()":{"notice":"The amounts of token0 and token1 that are owed to the protocol"},"setFeeProtocol(uint8,uint8)":{"notice":"Set the denominator of the protocol's % share of the fees"},"slot0()":{"notice":"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."},"snapshotCumulativesInside(int24,int24)":{"notice":"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"},"swap(address,bool,int256,uint160,bytes)":{"notice":"Swap token0 for token1, or token1 for token0"},"tickBitmap(int16)":{"notice":"Returns 256 packed tick initialized boolean values. See TickBitmap for more information"},"tickSpacing()":{"notice":"The pool tick spacing"},"ticks(int24)":{"notice":"Look up information about a specific tick in the pool"},"token0()":{"notice":"The first of the two tokens of the pool, sorted by address"},"token1()":{"notice":"The second of the two tokens of the pool, sorted by address"}},"notice":"A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform to the ERC20 specification","version":1}}},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol":{"IUniswapV3SwapCallback":{"abi":[{"inputs":[{"internalType":"int256","name":"amount0Delta","type":"int256"},{"internalType":"int256","name":"amount1Delta","type":"int256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"uniswapV3SwapCallback","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"uniswapV3SwapCallback(int256,int256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.","params":{"amount0Delta":"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.","amount1Delta":"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.","data":"Any data passed through by the caller via the IUniswapV3PoolActions#swap call"}}},"title":"Callback for IUniswapV3PoolActions#swap","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"uniswapV3SwapCallback(int256,int256,bytes)":"fa461e33"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Callback for IUniswapV3PoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Any contract that calls IUniswapV3PoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":\"IUniswapV3SwapCallback\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"uniswapV3SwapCallback(int256,int256,bytes)":{"notice":"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."}},"notice":"Any contract that calls IUniswapV3PoolActions#swap must implement this interface","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol":{"IUniswapV3PoolActions":{"abi":[{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collect","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"flash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"}],"name":"increaseObservationCardinalityNext","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"uint128","name":"amount","type":"uint128"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[{"internalType":"int256","name":"amount0","type":"int256"},{"internalType":"int256","name":"amount1","type":"int256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"burn(int24,int24,uint128)":{"details":"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect","params":{"amount":"How much liquidity to burn","tickLower":"The lower tick of the position for which to burn liquidity","tickUpper":"The upper tick of the position for which to burn liquidity"},"returns":{"amount0":"The amount of token0 sent to the recipient","amount1":"The amount of token1 sent to the recipient"}},"collect(address,int24,int24,uint128,uint128)":{"details":"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.","params":{"amount0Requested":"How much token0 should be withdrawn from the fees owed","amount1Requested":"How much token1 should be withdrawn from the fees owed","recipient":"The address which should receive the fees collected","tickLower":"The lower tick of the position for which to collect fees","tickUpper":"The upper tick of the position for which to collect fees"},"returns":{"amount0":"The amount of fees collected in token0","amount1":"The amount of fees collected in token1"}},"flash(address,uint256,uint256,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback","params":{"amount0":"The amount of token0 to send","amount1":"The amount of token1 to send","data":"Any data to be passed through to the callback","recipient":"The address which will receive the token0 and token1 amounts"}},"increaseObservationCardinalityNext(uint16)":{"details":"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.","params":{"observationCardinalityNext":"The desired minimum number of observations for the pool to store"}},"initialize(uint160)":{"details":"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value","params":{"sqrtPriceX96":"the initial sqrt price of the pool as a Q64.96"}},"mint(address,int24,int24,uint128,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.","params":{"amount":"The amount of liquidity to mint","data":"Any data that should be passed through to the callback","recipient":"The address for which the liquidity will be created","tickLower":"The lower tick of the position in which to add liquidity","tickUpper":"The upper tick of the position in which to add liquidity"},"returns":{"amount0":"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback","amount1":"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback"}},"swap(address,bool,int256,uint160,bytes)":{"details":"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback","params":{"amountSpecified":"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)","data":"Any data to be passed through to the callback","recipient":"The address to receive the output of the swap","sqrtPriceLimitX96":"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap","zeroForOne":"The direction of the swap, true for token0 to token1, false for token1 to token0"},"returns":{"amount0":"The delta of the balance of token0 of the pool, exact when negative, minimum when positive","amount1":"The delta of the balance of token1 of the pool, exact when negative, minimum when positive"}}},"title":"Permissionless pool actions","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burn(int24,int24,uint128)":"a34123a7","collect(address,int24,int24,uint128,uint128)":"4f1eb3d8","flash(address,uint256,uint256,bytes)":"490e6cbc","increaseObservationCardinalityNext(uint16)":"32148f67","initialize(uint160)":"f637731d","mint(address,int24,int24,uint128,bytes)":"3c8a7d8d","swap(address,bool,int256,uint160,bytes)":"128acb08"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(int24,int24,uint128)\":{\"details\":\"Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0Fees must be collected separately via a call to #collect\",\"params\":{\"amount\":\"How much liquidity to burn\",\"tickLower\":\"The lower tick of the position for which to burn liquidity\",\"tickUpper\":\"The upper tick of the position for which to burn liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 sent to the recipient\",\"amount1\":\"The amount of token1 sent to the recipient\"}},\"collect(address,int24,int24,uint128,uint128)\":{\"details\":\"Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity. Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\"params\":{\"amount0Requested\":\"How much token0 should be withdrawn from the fees owed\",\"amount1Requested\":\"How much token1 should be withdrawn from the fees owed\",\"recipient\":\"The address which should receive the fees collected\",\"tickLower\":\"The lower tick of the position for which to collect fees\",\"tickUpper\":\"The upper tick of the position for which to collect fees\"},\"returns\":{\"amount0\":\"The amount of fees collected in token0\",\"amount1\":\"The amount of fees collected in token1\"}},\"flash(address,uint256,uint256,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback\",\"params\":{\"amount0\":\"The amount of token0 to send\",\"amount1\":\"The amount of token1 to send\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address which will receive the token0 and token1 amounts\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"observationCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"initialize(uint160)\":{\"details\":\"Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\"params\":{\"sqrtPriceX96\":\"the initial sqrt price of the pool as a Q64.96\"}},\"mint(address,int24,int24,uint128,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends on tickLower, tickUpper, the amount of liquidity, and the current price.\",\"params\":{\"amount\":\"The amount of liquidity to mint\",\"data\":\"Any data that should be passed through to the callback\",\"recipient\":\"The address for which the liquidity will be created\",\"tickLower\":\"The lower tick of the position in which to add liquidity\",\"tickUpper\":\"The upper tick of the position in which to add liquidity\"},\"returns\":{\"amount0\":\"The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\"amount1\":\"The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\"}},\"swap(address,bool,int256,uint160,bytes)\":{\"details\":\"The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\"params\":{\"amountSpecified\":\"The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\"data\":\"Any data to be passed through to the callback\",\"recipient\":\"The address to receive the output of the swap\",\"sqrtPriceLimitX96\":\"The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\"zeroForOne\":\"The direction of the swap, true for token0 to token1, false for token1 to token0\"},\"returns\":{\"amount0\":\"The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\"amount1\":\"The delta of the balance of token1 of the pool, exact when negative, minimum when positive\"}}},\"title\":\"Permissionless pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(int24,int24,uint128)\":{\"notice\":\"Burn liquidity from the sender and account tokens owed for the liquidity to the position\"},\"collect(address,int24,int24,uint128,uint128)\":{\"notice\":\"Collects tokens owed to a position\"},\"flash(address,uint256,uint256,bytes)\":{\"notice\":\"Receive token0 and/or token1 and pay it back, plus a fee, in the callback\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of price and liquidity observations that this pool will store\"},\"initialize(uint160)\":{\"notice\":\"Sets the initial price for the pool\"},\"mint(address,int24,int24,uint128,bytes)\":{\"notice\":\"Adds liquidity for the given recipient/tickLower/tickUpper position\"},\"swap(address,bool,int256,uint160,bytes)\":{\"notice\":\"Swap token0 for token1, or token1 for token0\"}},\"notice\":\"Contains pool methods that can be called by anyone\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":\"IUniswapV3PoolActions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"burn(int24,int24,uint128)":{"notice":"Burn liquidity from the sender and account tokens owed for the liquidity to the position"},"collect(address,int24,int24,uint128,uint128)":{"notice":"Collects tokens owed to a position"},"flash(address,uint256,uint256,bytes)":{"notice":"Receive token0 and/or token1 and pay it back, plus a fee, in the callback"},"increaseObservationCardinalityNext(uint16)":{"notice":"Increase the maximum number of price and liquidity observations that this pool will store"},"initialize(uint160)":{"notice":"Sets the initial price for the pool"},"mint(address,int24,int24,uint128,bytes)":{"notice":"Adds liquidity for the given recipient/tickLower/tickUpper position"},"swap(address,bool,int256,uint160,bytes)":{"notice":"Swap token0 for token1, or token1 for token0"}},"notice":"Contains pool methods that can be called by anyone","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol":{"IUniswapV3PoolDerivedState":{"abi":[{"inputs":[{"internalType":"uint32[]","name":"secondsAgos","type":"uint32[]"}],"name":"observe","outputs":[{"internalType":"int56[]","name":"tickCumulatives","type":"int56[]"},{"internalType":"uint160[]","name":"secondsPerLiquidityCumulativeX128s","type":"uint160[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"}],"name":"snapshotCumulativesInside","outputs":[{"internalType":"int56","name":"tickCumulativeInside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityInsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsInside","type":"uint32"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"observe(uint32[])":{"details":"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.","params":{"secondsAgos":"From how long ago each cumulative tick and liquidity value should be returned"},"returns":{"secondsPerLiquidityCumulativeX128s":"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp","tickCumulatives":"Cumulative tick values as of each `secondsAgos` from the current block timestamp"}},"snapshotCumulativesInside(int24,int24)":{"details":"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.","params":{"tickLower":"The lower tick of the range","tickUpper":"The upper tick of the range"},"returns":{"secondsInside":"The snapshot of seconds per liquidity for the range","secondsPerLiquidityInsideX128":"The snapshot of seconds per liquidity for the range","tickCumulativeInside":"The snapshot of the tick accumulator for the range"}}},"title":"Pool state that is not stored","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"observe(uint32[])":"883bdbfd","snapshotCumulativesInside(int24,int24)":"a38807f2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulativeX128s\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"snapshotCumulativesInside\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulativeInside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityInsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsInside\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"secondsPerLiquidityCumulativeX128s\":\"Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"snapshotCumulativesInside(int24,int24)\":{\"details\":\"Snapshots must only be compared to other snapshots, taken over a period for which a position existed. I.e., snapshots cannot be compared if a position is not held for the entire period between when the first snapshot is taken and the second snapshot is taken.\",\"params\":{\"tickLower\":\"The lower tick of the range\",\"tickUpper\":\"The upper tick of the range\"},\"returns\":{\"secondsInside\":\"The snapshot of seconds per liquidity for the range\",\"secondsPerLiquidityInsideX128\":\"The snapshot of seconds per liquidity for the range\",\"tickCumulativeInside\":\"The snapshot of the tick accumulator for the range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"snapshotCumulativesInside(int24,int24)\":{\"notice\":\"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"observe(uint32[])":{"notice":"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"},"snapshotCumulativesInside(int24,int24)":{"notice":"Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range"}},"notice":"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol":{"IUniswapV3PoolEvents":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"Collect","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint128","name":"amount0","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"amount1","type":"uint128"}],"name":"CollectProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"paid1","type":"uint256"}],"name":"Flash","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextOld","type":"uint16"},{"indexed":false,"internalType":"uint16","name":"observationCardinalityNextNew","type":"uint16"}],"name":"IncreaseObservationCardinalityNext","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Initialize","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"feeProtocol0Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1Old","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol0New","type":"uint8"},{"indexed":false,"internalType":"uint8","name":"feeProtocol1New","type":"uint8"}],"name":"SetFeeProtocol","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"int256","name":"amount0","type":"int256"},{"indexed":false,"internalType":"int256","name":"amount1","type":"int256"},{"indexed":false,"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"indexed":false,"internalType":"uint128","name":"liquidity","type":"uint128"},{"indexed":false,"internalType":"int24","name":"tick","type":"int24"}],"name":"Swap","type":"event"}],"devdoc":{"events":{"Burn(address,int24,int24,uint128,uint256,uint256)":{"details":"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect","params":{"amount":"The amount of liquidity to remove","amount0":"The amount of token0 withdrawn","amount1":"The amount of token1 withdrawn","owner":"The owner of the position for which liquidity is removed","tickLower":"The lower tick of the position","tickUpper":"The upper tick of the position"}},"Collect(address,address,int24,int24,uint128,uint128)":{"details":"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees","params":{"amount0":"The amount of token0 fees collected","amount1":"The amount of token1 fees collected","owner":"The owner of the position for which fees are collected","tickLower":"The lower tick of the position","tickUpper":"The upper tick of the position"}},"CollectProtocol(address,address,uint128,uint128)":{"params":{"amount0":"The amount of token1 protocol fees that is withdrawn","recipient":"The address that receives the collected protocol fees","sender":"The address that collects the protocol fees"}},"Flash(address,address,uint256,uint256,uint256,uint256)":{"params":{"amount0":"The amount of token0 that was flashed","amount1":"The amount of token1 that was flashed","paid0":"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee","paid1":"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee","recipient":"The address that received the tokens from flash","sender":"The address that initiated the swap call, and that received the callback"}},"IncreaseObservationCardinalityNext(uint16,uint16)":{"details":"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.","params":{"observationCardinalityNextNew":"The updated value of the next observation cardinality","observationCardinalityNextOld":"The previous value of the next observation cardinality"}},"Initialize(uint160,int24)":{"details":"Mint/Burn/Swap cannot be emitted by the pool before Initialize","params":{"sqrtPriceX96":"The initial sqrt price of the pool, as a Q64.96","tick":"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool"}},"Mint(address,address,int24,int24,uint128,uint256,uint256)":{"params":{"amount":"The amount of liquidity minted to the position range","amount0":"How much token0 was required for the minted liquidity","amount1":"How much token1 was required for the minted liquidity","owner":"The owner of the position and recipient of any minted liquidity","sender":"The address that minted the liquidity","tickLower":"The lower tick of the position","tickUpper":"The upper tick of the position"}},"SetFeeProtocol(uint8,uint8,uint8,uint8)":{"params":{"feeProtocol0New":"The updated value of the token0 protocol fee","feeProtocol0Old":"The previous value of the token0 protocol fee","feeProtocol1New":"The updated value of the token1 protocol fee","feeProtocol1Old":"The previous value of the token1 protocol fee"}},"Swap(address,address,int256,int256,uint160,uint128,int24)":{"params":{"amount0":"The delta of the token0 balance of the pool","amount1":"The delta of the token1 balance of the pool","liquidity":"The liquidity of the pool after the swap","recipient":"The address that received the output of the swap","sender":"The address that initiated the swap call, and that received the callback","sqrtPriceX96":"The sqrt(price) of the pool after the swap, as a Q64.96","tick":"The log base 1.0001 of price of the pool after the swap"}}},"kind":"dev","methods":{},"title":"Events emitted by a pool","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"name\":\"CollectProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid1\",\"type\":\"uint256\"}],\"name\":\"Flash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextOld\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"IncreaseObservationCardinalityNext\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1Old\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol0New\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeProtocol1New\",\"type\":\"uint8\"}],\"name\":\"SetFeeProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"Swap\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"details\":\"Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\"params\":{\"amount\":\"The amount of liquidity to remove\",\"amount0\":\"The amount of token0 withdrawn\",\"amount1\":\"The amount of token1 withdrawn\",\"owner\":\"The owner of the position for which liquidity is removed\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"details\":\"Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\"params\":{\"amount0\":\"The amount of token0 fees collected\",\"amount1\":\"The amount of token1 fees collected\",\"owner\":\"The owner of the position for which fees are collected\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"CollectProtocol(address,address,uint128,uint128)\":{\"params\":{\"amount0\":\"The amount of token1 protocol fees that is withdrawn\",\"recipient\":\"The address that receives the collected protocol fees\",\"sender\":\"The address that collects the protocol fees\"}},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"amount0\":\"The amount of token0 that was flashed\",\"amount1\":\"The amount of token1 that was flashed\",\"paid0\":\"The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\"paid1\":\"The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\"recipient\":\"The address that received the tokens from flash\",\"sender\":\"The address that initiated the swap call, and that received the callback\"}},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"details\":\"observationCardinalityNext is not the observation cardinality until an observation is written at the index just before a mint/swap/burn.\",\"params\":{\"observationCardinalityNextNew\":\"The updated value of the next observation cardinality\",\"observationCardinalityNextOld\":\"The previous value of the next observation cardinality\"}},\"Initialize(uint160,int24)\":{\"details\":\"Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\"params\":{\"sqrtPriceX96\":\"The initial sqrt price of the pool, as a Q64.96\",\"tick\":\"The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\"}},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of liquidity minted to the position range\",\"amount0\":\"How much token0 was required for the minted liquidity\",\"amount1\":\"How much token1 was required for the minted liquidity\",\"owner\":\"The owner of the position and recipient of any minted liquidity\",\"sender\":\"The address that minted the liquidity\",\"tickLower\":\"The lower tick of the position\",\"tickUpper\":\"The upper tick of the position\"}},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"params\":{\"feeProtocol0New\":\"The updated value of the token0 protocol fee\",\"feeProtocol0Old\":\"The previous value of the token0 protocol fee\",\"feeProtocol1New\":\"The updated value of the token1 protocol fee\",\"feeProtocol1Old\":\"The previous value of the token1 protocol fee\"}},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"params\":{\"amount0\":\"The delta of the token0 balance of the pool\",\"amount1\":\"The delta of the token1 balance of the pool\",\"liquidity\":\"The liquidity of the pool after the swap\",\"recipient\":\"The address that received the output of the swap\",\"sender\":\"The address that initiated the swap call, and that received the callback\",\"sqrtPriceX96\":\"The sqrt(price) of the pool after the swap, as a Q64.96\",\"tick\":\"The log base 1.0001 of price of the pool after the swap\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Events emitted by a pool\",\"version\":1},\"userdoc\":{\"events\":{\"Burn(address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when a position's liquidity is removed\"},\"Collect(address,address,int24,int24,uint128,uint128)\":{\"notice\":\"Emitted when fees are collected by the owner of a position\"},\"CollectProtocol(address,address,uint128,uint128)\":{\"notice\":\"Emitted when the collected protocol fees are withdrawn by the factory owner\"},\"Flash(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted by the pool for any flashes of token0/token1\"},\"IncreaseObservationCardinalityNext(uint16,uint16)\":{\"notice\":\"Emitted by the pool for increases to the number of observations that can be stored\"},\"Initialize(uint160,int24)\":{\"notice\":\"Emitted exactly once by a pool when #initialize is first called on the pool\"},\"Mint(address,address,int24,int24,uint128,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is minted for a given position\"},\"SetFeeProtocol(uint8,uint8,uint8,uint8)\":{\"notice\":\"Emitted when the protocol fee is changed by the pool\"},\"Swap(address,address,int256,int256,uint160,uint128,int24)\":{\"notice\":\"Emitted by the pool for any swaps between token0 and token1\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Contains all events emitted by the pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":\"IUniswapV3PoolEvents\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Burn(address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when a position's liquidity is removed"},"Collect(address,address,int24,int24,uint128,uint128)":{"notice":"Emitted when fees are collected by the owner of a position"},"CollectProtocol(address,address,uint128,uint128)":{"notice":"Emitted when the collected protocol fees are withdrawn by the factory owner"},"Flash(address,address,uint256,uint256,uint256,uint256)":{"notice":"Emitted by the pool for any flashes of token0/token1"},"IncreaseObservationCardinalityNext(uint16,uint16)":{"notice":"Emitted by the pool for increases to the number of observations that can be stored"},"Initialize(uint160,int24)":{"notice":"Emitted exactly once by a pool when #initialize is first called on the pool"},"Mint(address,address,int24,int24,uint128,uint256,uint256)":{"notice":"Emitted when liquidity is minted for a given position"},"SetFeeProtocol(uint8,uint8,uint8,uint8)":{"notice":"Emitted when the protocol fee is changed by the pool"},"Swap(address,address,int256,int256,uint160,uint128,int24)":{"notice":"Emitted by the pool for any swaps between token0 and token1"}},"kind":"user","methods":{},"notice":"Contains all events emitted by the pool","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol":{"IUniswapV3PoolImmutables":{"abi":[{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"fee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxLiquidityPerTick","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tickSpacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"factory()":{"returns":{"_0":"The contract address"}},"fee()":{"returns":{"_0":"The fee"}},"maxLiquidityPerTick()":{"details":"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool","returns":{"_0":"The max amount of liquidity per tick"}},"tickSpacing()":{"details":"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.","returns":{"_0":"The tick spacing"}},"token0()":{"returns":{"_0":"The token contract address"}},"token1()":{"returns":{"_0":"The token contract address"}}},"title":"Pool state that never changes","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"factory()":"c45a0155","fee()":"ddca3f43","maxLiquidityPerTick()":"70cf754a","tickSpacing()":"d0c93a7c","token0()":"0dfe1681","token1()":"d21220a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityPerTick\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"factory()\":{\"returns\":{\"_0\":\"The contract address\"}},\"fee()\":{\"returns\":{\"_0\":\"The fee\"}},\"maxLiquidityPerTick()\":{\"details\":\"This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\"returns\":{\"_0\":\"The max amount of liquidity per tick\"}},\"tickSpacing()\":{\"details\":\"Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.\",\"returns\":{\"_0\":\"The tick spacing\"}},\"token0()\":{\"returns\":{\"_0\":\"The token contract address\"}},\"token1()\":{\"returns\":{\"_0\":\"The token contract address\"}}},\"title\":\"Pool state that never changes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"factory()\":{\"notice\":\"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\"},\"fee()\":{\"notice\":\"The pool's fee in hundredths of a bip, i.e. 1e-6\"},\"maxLiquidityPerTick()\":{\"notice\":\"The maximum amount of position liquidity that can use any tick in the range\"},\"tickSpacing()\":{\"notice\":\"The pool tick spacing\"},\"token0()\":{\"notice\":\"The first of the two tokens of the pool, sorted by address\"},\"token1()\":{\"notice\":\"The second of the two tokens of the pool, sorted by address\"}},\"notice\":\"These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":\"IUniswapV3PoolImmutables\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"factory()":{"notice":"The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"},"fee()":{"notice":"The pool's fee in hundredths of a bip, i.e. 1e-6"},"maxLiquidityPerTick()":{"notice":"The maximum amount of position liquidity that can use any tick in the range"},"tickSpacing()":{"notice":"The pool tick spacing"},"token0()":{"notice":"The first of the two tokens of the pool, sorted by address"},"token1()":{"notice":"The second of the two tokens of the pool, sorted by address"}},"notice":"These parameters are fixed for a pool forever, i.e., the methods will always return the same values","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol":{"IUniswapV3PoolOwnerActions":{"abi":[{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint128","name":"amount0Requested","type":"uint128"},{"internalType":"uint128","name":"amount1Requested","type":"uint128"}],"name":"collectProtocol","outputs":[{"internalType":"uint128","name":"amount0","type":"uint128"},{"internalType":"uint128","name":"amount1","type":"uint128"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint8","name":"feeProtocol0","type":"uint8"},{"internalType":"uint8","name":"feeProtocol1","type":"uint8"}],"name":"setFeeProtocol","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"collectProtocol(address,uint128,uint128)":{"params":{"amount0Requested":"The maximum amount of token0 to send, can be 0 to collect fees in only token1","amount1Requested":"The maximum amount of token1 to send, can be 0 to collect fees in only token0","recipient":"The address to which collected protocol fees should be sent"},"returns":{"amount0":"The protocol fee collected in token0","amount1":"The protocol fee collected in token1"}},"setFeeProtocol(uint8,uint8)":{"params":{"feeProtocol0":"new protocol fee for token0 of the pool","feeProtocol1":"new protocol fee for token1 of the pool"}}},"title":"Permissioned pool actions","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"collectProtocol(address,uint128,uint128)":"85b66729","setFeeProtocol(uint8,uint8)":"8206a4d1"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Requested\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Requested\",\"type\":\"uint128\"}],\"name\":\"collectProtocol\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"feeProtocol0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol1\",\"type\":\"uint8\"}],\"name\":\"setFeeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"params\":{\"amount0Requested\":\"The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\"amount1Requested\":\"The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\"recipient\":\"The address to which collected protocol fees should be sent\"},\"returns\":{\"amount0\":\"The protocol fee collected in token0\",\"amount1\":\"The protocol fee collected in token1\"}},\"setFeeProtocol(uint8,uint8)\":{\"params\":{\"feeProtocol0\":\"new protocol fee for token0 of the pool\",\"feeProtocol1\":\"new protocol fee for token1 of the pool\"}}},\"title\":\"Permissioned pool actions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectProtocol(address,uint128,uint128)\":{\"notice\":\"Collect the protocol fee accrued to the pool\"},\"setFeeProtocol(uint8,uint8)\":{\"notice\":\"Set the denominator of the protocol's % share of the fees\"}},\"notice\":\"Contains pool methods that may only be called by the factory owner\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":\"IUniswapV3PoolOwnerActions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"collectProtocol(address,uint128,uint128)":{"notice":"Collect the protocol fee accrued to the pool"},"setFeeProtocol(uint8,uint8)":{"notice":"Set the denominator of the protocol's % share of the fees"}},"notice":"Contains pool methods that may only be called by the factory owner","version":1}}},"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol":{"IUniswapV3PoolState":{"abi":[{"inputs":[],"name":"feeGrowthGlobal0X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeGrowthGlobal1X128","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"liquidity","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"observations","outputs":[{"internalType":"uint32","name":"blockTimestamp","type":"uint32"},{"internalType":"int56","name":"tickCumulative","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityCumulativeX128","type":"uint160"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"name":"positions","outputs":[{"internalType":"uint128","name":"_liquidity","type":"uint128"},{"internalType":"uint256","name":"feeGrowthInside0LastX128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthInside1LastX128","type":"uint256"},{"internalType":"uint128","name":"tokensOwed0","type":"uint128"},{"internalType":"uint128","name":"tokensOwed1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolFees","outputs":[{"internalType":"uint128","name":"token0","type":"uint128"},{"internalType":"uint128","name":"token1","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"},{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"uint16","name":"observationIndex","type":"uint16"},{"internalType":"uint16","name":"observationCardinality","type":"uint16"},{"internalType":"uint16","name":"observationCardinalityNext","type":"uint16"},{"internalType":"uint8","name":"feeProtocol","type":"uint8"},{"internalType":"bool","name":"unlocked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int16","name":"wordPosition","type":"int16"}],"name":"tickBitmap","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"int24","name":"tick","type":"int24"}],"name":"ticks","outputs":[{"internalType":"uint128","name":"liquidityGross","type":"uint128"},{"internalType":"int128","name":"liquidityNet","type":"int128"},{"internalType":"uint256","name":"feeGrowthOutside0X128","type":"uint256"},{"internalType":"uint256","name":"feeGrowthOutside1X128","type":"uint256"},{"internalType":"int56","name":"tickCumulativeOutside","type":"int56"},{"internalType":"uint160","name":"secondsPerLiquidityOutsideX128","type":"uint160"},{"internalType":"uint32","name":"secondsOutside","type":"uint32"},{"internalType":"bool","name":"initialized","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"feeGrowthGlobal0X128()":{"details":"This value can overflow the uint256"},"feeGrowthGlobal1X128()":{"details":"This value can overflow the uint256"},"liquidity()":{"details":"This value has no relationship to the total liquidity across all ticks"},"observations(uint256)":{"details":"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.","params":{"index":"The element of the observations array to fetch"},"returns":{"blockTimestamp":"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"}},"positions(bytes32)":{"params":{"key":"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"},"returns":{"_liquidity":"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"}},"protocolFees()":{"details":"Protocol fees will never exceed uint128 max in either token"},"slot0()":{"returns":{"sqrtPriceX96":"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"}},"ticks(int24)":{"params":{"tick":"The tick to look up"},"returns":{"liquidityGross":"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."}}},"title":"Pool state that can change","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"feeGrowthGlobal0X128()":"f3058399","feeGrowthGlobal1X128()":"46141319","liquidity()":"1a686502","observations(uint256)":"252c09d7","positions(bytes32)":"514ea4bf","protocolFees()":"1ad8b03b","slot0()":"3850c7bd","tickBitmap(int16)":"5339c296","ticks(int24)":"f30dba93"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"feeGrowthGlobal0X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGrowthGlobal1X128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulativeX128\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"token0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"token1\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"observationIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationCardinalityNext\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int16\",\"name\":\"wordPosition\",\"type\":\"int16\"}],\"name\":\"tickBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"ticks\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityGross\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"liquidityNet\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside0X128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthOutside1X128\",\"type\":\"uint256\"},{\"internalType\":\"int56\",\"name\":\"tickCumulativeOutside\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityOutsideX128\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"secondsOutside\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"details\":\"This value can overflow the uint256\"},\"feeGrowthGlobal1X128()\":{\"details\":\"This value can overflow the uint256\"},\"liquidity()\":{\"details\":\"This value has no relationship to the total liquidity across all ticks\"},\"observations(uint256)\":{\"details\":\"You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.\",\"params\":{\"index\":\"The element of the observations array to fetch\"},\"returns\":{\"blockTimestamp\":\"The timestamp of the observation, Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use\"}},\"positions(bytes32)\":{\"params\":{\"key\":\"The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\"},\"returns\":{\"_liquidity\":\"The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\"}},\"protocolFees()\":{\"details\":\"Protocol fees will never exceed uint128 max in either token\"},\"slot0()\":{\"returns\":{\"sqrtPriceX96\":\"The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy\"}},\"ticks(int24)\":{\"params\":{\"tick\":\"The tick to look up\"},\"returns\":{\"liquidityGross\":\"the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.\"}}},\"title\":\"Pool state that can change\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"feeGrowthGlobal0X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\"},\"feeGrowthGlobal1X128()\":{\"notice\":\"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\"},\"liquidity()\":{\"notice\":\"The currently in range liquidity available to the pool\"},\"observations(uint256)\":{\"notice\":\"Returns data about a specific observation index\"},\"positions(bytes32)\":{\"notice\":\"Returns the information about a position by the position's key\"},\"protocolFees()\":{\"notice\":\"The amounts of token0 and token1 that are owed to the protocol\"},\"slot0()\":{\"notice\":\"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally.\"},\"tickBitmap(int16)\":{\"notice\":\"Returns 256 packed tick initialized boolean values. See TickBitmap for more information\"},\"ticks(int24)\":{\"notice\":\"Look up information about a specific tick in the pool\"}},\"notice\":\"These methods compose the pool's state, and can change with any frequency including multiple times per transaction\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":\"IUniswapV3PoolState\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"feeGrowthGlobal0X128()":{"notice":"The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"},"feeGrowthGlobal1X128()":{"notice":"The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"},"liquidity()":{"notice":"The currently in range liquidity available to the pool"},"observations(uint256)":{"notice":"Returns data about a specific observation index"},"positions(bytes32)":{"notice":"Returns the information about a position by the position's key"},"protocolFees()":{"notice":"The amounts of token0 and token1 that are owed to the protocol"},"slot0()":{"notice":"The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."},"tickBitmap(int16)":{"notice":"Returns 256 packed tick initialized boolean values. See TickBitmap for more information"},"ticks(int24)":{"notice":"Look up information about a specific tick in the pool"}},"notice":"These methods compose the pool's state, and can change with any frequency including multiple times per transaction","version":1}}},"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol":{"IQuoterV2":{"abi":[{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"uint256","name":"amountIn","type":"uint256"}],"name":"quoteExactInput","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint160[]","name":"sqrtPriceX96AfterList","type":"uint160[]"},{"internalType":"uint32[]","name":"initializedTicksCrossedList","type":"uint32[]"},{"internalType":"uint256","name":"gasEstimate","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct IQuoterV2.QuoteExactInputSingleParams","name":"params","type":"tuple"}],"name":"quoteExactInputSingle","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceX96After","type":"uint160"},{"internalType":"uint32","name":"initializedTicksCrossed","type":"uint32"},{"internalType":"uint256","name":"gasEstimate","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"quoteExactOutput","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint160[]","name":"sqrtPriceX96AfterList","type":"uint160[]"},{"internalType":"uint32[]","name":"initializedTicksCrossedList","type":"uint32[]"},{"internalType":"uint256","name":"gasEstimate","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct IQuoterV2.QuoteExactOutputSingleParams","name":"params","type":"tuple"}],"name":"quoteExactOutputSingle","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceX96After","type":"uint160"},{"internalType":"uint32","name":"initializedTicksCrossed","type":"uint32"},{"internalType":"uint256","name":"gasEstimate","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"These functions are not marked view because they rely on calling non-view functions and reverting to compute the result. They are also not gas efficient and should not be called on-chain.","kind":"dev","methods":{"quoteExactInput(bytes,uint256)":{"params":{"amountIn":"The amount of the first token to swap","path":"The path of the swap, i.e. each token pair and the pool fee"},"returns":{"amountOut":"The amount of the last token that would be received","gasEstimate":"The estimate of the gas that the swap consumes","initializedTicksCrossedList":"List of the initialized ticks that the swap crossed for each pool in the path","sqrtPriceX96AfterList":"List of the sqrt price after the swap for each pool in the path"}},"quoteExactInputSingle((address,address,uint256,uint24,uint160))":{"params":{"params":"The params for the quote, encoded as `QuoteExactInputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountIn The desired input amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap"},"returns":{"amountOut":"The amount of `tokenOut` that would be received","gasEstimate":"The estimate of the gas that the swap consumes","initializedTicksCrossed":"The number of initialized ticks that the swap crossed","sqrtPriceX96After":"The sqrt price of the pool after the swap"}},"quoteExactOutput(bytes,uint256)":{"params":{"amountOut":"The amount of the last token to receive","path":"The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order"},"returns":{"amountIn":"The amount of first token required to be paid","gasEstimate":"The estimate of the gas that the swap consumes","initializedTicksCrossedList":"List of the initialized ticks that the swap crossed for each pool in the path","sqrtPriceX96AfterList":"List of the sqrt price after the swap for each pool in the path"}},"quoteExactOutputSingle((address,address,uint256,uint24,uint160))":{"params":{"params":"The params for the quote, encoded as `QuoteExactOutputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountOut The desired output amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap"},"returns":{"amountIn":"The amount required as the input for the swap in order to receive `amountOut`","gasEstimate":"The estimate of the gas that the swap consumes","initializedTicksCrossed":"The number of initialized ticks that the swap crossed","sqrtPriceX96After":"The sqrt price of the pool after the swap"}}},"title":"QuoterV2 Interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"quoteExactInput(bytes,uint256)":"cdca1753","quoteExactInputSingle((address,address,uint256,uint24,uint160))":"c6a5026a","quoteExactOutput(bytes,uint256)":"2f80bb1d","quoteExactOutputSingle((address,address,uint256,uint24,uint160))":"bd21704a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"quoteExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint160[]\",\"name\":\"sqrtPriceX96AfterList\",\"type\":\"uint160[]\"},{\"internalType\":\"uint32[]\",\"name\":\"initializedTicksCrossedList\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IQuoterV2.QuoteExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96After\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"initializedTicksCrossed\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"quoteExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint160[]\",\"name\":\"sqrtPriceX96AfterList\",\"type\":\"uint160[]\"},{\"internalType\":\"uint32[]\",\"name\":\"initializedTicksCrossedList\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IQuoterV2.QuoteExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96After\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"initializedTicksCrossed\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"These functions are not marked view because they rely on calling non-view functions and reverting to compute the result. They are also not gas efficient and should not be called on-chain.\",\"kind\":\"dev\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"params\":{\"amountIn\":\"The amount of the first token to swap\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee\"},\"returns\":{\"amountOut\":\"The amount of the last token that would be received\",\"gasEstimate\":\"The estimate of the gas that the swap consumes\",\"initializedTicksCrossedList\":\"List of the initialized ticks that the swap crossed for each pool in the path\",\"sqrtPriceX96AfterList\":\"List of the sqrt price after the swap for each pool in the path\"}},\"quoteExactInputSingle((address,address,uint256,uint24,uint160))\":{\"params\":{\"params\":\"The params for the quote, encoded as `QuoteExactInputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountIn The desired input amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\"},\"returns\":{\"amountOut\":\"The amount of `tokenOut` that would be received\",\"gasEstimate\":\"The estimate of the gas that the swap consumes\",\"initializedTicksCrossed\":\"The number of initialized ticks that the swap crossed\",\"sqrtPriceX96After\":\"The sqrt price of the pool after the swap\"}},\"quoteExactOutput(bytes,uint256)\":{\"params\":{\"amountOut\":\"The amount of the last token to receive\",\"path\":\"The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\"},\"returns\":{\"amountIn\":\"The amount of first token required to be paid\",\"gasEstimate\":\"The estimate of the gas that the swap consumes\",\"initializedTicksCrossedList\":\"List of the initialized ticks that the swap crossed for each pool in the path\",\"sqrtPriceX96AfterList\":\"List of the sqrt price after the swap for each pool in the path\"}},\"quoteExactOutputSingle((address,address,uint256,uint24,uint160))\":{\"params\":{\"params\":\"The params for the quote, encoded as `QuoteExactOutputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountOut The desired output amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\"},\"returns\":{\"amountIn\":\"The amount required as the input for the swap in order to receive `amountOut`\",\"gasEstimate\":\"The estimate of the gas that the swap consumes\",\"initializedTicksCrossed\":\"The number of initialized ticks that the swap crossed\",\"sqrtPriceX96After\":\"The sqrt price of the pool after the swap\"}}},\"title\":\"QuoterV2 Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"quoteExactInput(bytes,uint256)\":{\"notice\":\"Returns the amount out received for a given exact input swap without executing the swap\"},\"quoteExactInputSingle((address,address,uint256,uint24,uint160))\":{\"notice\":\"Returns the amount out received for a given exact input but for a swap of a single pool\"},\"quoteExactOutput(bytes,uint256)\":{\"notice\":\"Returns the amount in required for a given exact output swap without executing the swap\"},\"quoteExactOutputSingle((address,address,uint256,uint24,uint160))\":{\"notice\":\"Returns the amount in required to receive the given exact output amount but for a swap of a single pool\"}},\"notice\":\"Supports quoting the calculated amounts from exact input or exact output swaps.For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol\":\"IQuoterV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title QuoterV2 Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.\\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoterV2 {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInput(bytes memory path, uint256 amountIn)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    struct QuoteExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountIn The desired input amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    struct QuoteExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amount;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountOut The desired output amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n}\\n\",\"keccak256\":\"0x7e931f0cd34811851031c4f1318f59b4a4b427a2d2e2968b8e5ed87a9f7f89d6\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"quoteExactInput(bytes,uint256)":{"notice":"Returns the amount out received for a given exact input swap without executing the swap"},"quoteExactInputSingle((address,address,uint256,uint24,uint160))":{"notice":"Returns the amount out received for a given exact input but for a swap of a single pool"},"quoteExactOutput(bytes,uint256)":{"notice":"Returns the amount in required for a given exact output swap without executing the swap"},"quoteExactOutputSingle((address,address,uint256,uint24,uint160))":{"notice":"Returns the amount in required to receive the given exact output amount but for a swap of a single pool"}},"notice":"Supports quoting the calculated amounts from exact input or exact output swaps.For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.","version":1}}},"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol":{"ISwapRouter":{"abi":[{"inputs":[{"components":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMinimum","type":"uint256"}],"internalType":"struct ISwapRouter.ExactInputParams","name":"params","type":"tuple"}],"name":"exactInput","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMinimum","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct ISwapRouter.ExactInputSingleParams","name":"params","type":"tuple"}],"name":"exactInputSingle","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMaximum","type":"uint256"}],"internalType":"struct ISwapRouter.ExactOutputParams","name":"params","type":"tuple"}],"name":"exactOutput","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMaximum","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct ISwapRouter.ExactOutputSingleParams","name":"params","type":"tuple"}],"name":"exactOutputSingle","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"int256","name":"amount0Delta","type":"int256"},{"internalType":"int256","name":"amount1Delta","type":"int256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"uniswapV3SwapCallback","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"exactInput((bytes,address,uint256,uint256,uint256))":{"params":{"params":"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"},"returns":{"amountOut":"The amount of the received token"}},"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":{"params":{"params":"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"},"returns":{"amountOut":"The amount of the received token"}},"exactOutput((bytes,address,uint256,uint256,uint256))":{"params":{"params":"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"},"returns":{"amountIn":"The amount of the input token"}},"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":{"params":{"params":"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"},"returns":{"amountIn":"The amount of the input token"}},"uniswapV3SwapCallback(int256,int256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.","params":{"amount0Delta":"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.","amount1Delta":"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.","data":"Any data passed through by the caller via the IUniswapV3PoolActions#swap call"}}},"title":"Router token swapping functionality","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"exactInput((bytes,address,uint256,uint256,uint256))":"c04b8d59","exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":"414bf389","exactOutput((bytes,address,uint256,uint256,uint256))":"f28c0498","exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":"db3e2198","uniswapV3SwapCallback(int256,int256,bytes)":"fa461e33"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Router token swapping functionality\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Functions for swapping tokens via Uniswap V3\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":\"ISwapRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"exactInput((bytes,address,uint256,uint256,uint256))":{"notice":"Swaps `amountIn` of one token for as much as possible of another along the specified path"},"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":{"notice":"Swaps `amountIn` of one token for as much as possible of another token"},"exactOutput((bytes,address,uint256,uint256,uint256))":{"notice":"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)"},"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":{"notice":"Swaps as little as possible of one token for `amountOut` of another token"},"uniswapV3SwapCallback(int256,int256,bytes)":{"notice":"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."}},"notice":"Functions for swapping tokens via Uniswap V3","version":1}}},"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol":{"TransferHelper":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220a4c265821dd274464270f1ee04bee7c3abaeae463bad0b905df3502ad509a3e964736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 0xC2 PUSH6 0x821DD2744642 PUSH17 0xF1EE04BEE7C3ABAEAE463BAD0B905DF350 0x2A 0xD5 MULMOD LOG3 0xE9 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"129:2408:12:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220a4c265821dd274464270f1ee04bee7c3abaeae463bad0b905df3502ad509a3e964736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 0xC2 PUSH6 0x821DD2744642 PUSH17 0xF1EE04BEE7C3ABAEAE463BAD0B905DF350 0x2A 0xD5 MULMOD LOG3 0xE9 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"129:2408:12:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"safeApprove(address,address,uint256)":"infinite","safeTransfer(address,address,uint256)":"infinite","safeTransferETH(address,uint256)":"infinite","safeTransferFrom(address,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":\"TransferHelper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Swapper/UniswapV3Swapper.sol":{"UniswapV3Swapper":{"abi":[{"inputs":[{"internalType":"contract IYieldBox","name":"_yieldBox","type":"address"},{"internalType":"contract ISwapRouter","name":"_swapRouter","type":"address"},{"internalType":"contract IUniswapV3Factory","name":"_factory","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_old","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_new","type":"uint256"}],"name":"PoolFee","type":"event"},{"inputs":[],"name":"factory","outputs":[{"internalType":"contract IUniswapV3Factory","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenOutId","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"},{"internalType":"bytes","name":"dexData","type":"bytes"}],"name":"getInputAmount","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenInId","type":"uint256"},{"internalType":"uint256","name":"shareIn","type":"uint256"},{"internalType":"bytes","name":"dexData","type":"bytes"}],"name":"getOutputAmount","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"poolFee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint24","name":"_newFee","type":"uint24"}],"name":"setPoolFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenInId","type":"uint256"},{"internalType":"uint256","name":"tokenOutId","type":"uint256"},{"internalType":"uint256","name":"shareIn","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"bytes","name":"dexData","type":"bytes"}],"name":"swap","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"swapRouter","outputs":[{"internalType":"contract ISwapRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"getInputAmount(uint256,uint256,bytes)":{"details":"dexData examples:     - for UniV2, it should contain address[] swapPath     - for UniV3, it should contain uint256 tokenInId","params":{"dexData":"Custom DEX data for query execution","shareOut":"Shares out to compute the amount for","tokenOutId":"YieldBox asset id"}},"getOutputAmount(uint256,uint256,bytes)":{"details":"dexData examples:     - for UniV2, it should contain address[] swapPath     - for Curve, it should contain uint256[] tokenIndexes     - for UniV3, it should contain uint256 tokenOutId","params":{"dexData":"Custom DEX data for query execution","shareIn":"Shares to get the amount for","tokenInId":"YieldBox asset id"}},"setPoolFee(uint24)":{"params":{"_newFee":"the new value"}},"swap(uint256,uint256,uint256,address,uint256,bytes)":{"details":"returns both amount and sharesdexData examples:     - for UniV2, it should contain address[] swapPath     - for Curve, it should contain uint256[] tokenIndexes     - for UniV3, it should contain uint256 deadline","params":{"amountOutMin":"Minimum amount to be received","dexData":"Custom DEX data for query execution","shareIn":"Shares to be swapped","to":"Receiver address","tokenInId":"YieldBox asset id","tokenOutId":"YieldBox asset id"}}},"title":"UniswapV3 swapper contract","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60e0346100fb57601f611ab338819003918201601f19168301916001600160401b03831184841017610100578084926060946040528339810103126100fb578051906001600160a01b039081831683036100fb5760208101519082821682036100fb576040015191821682036100fb576000549260805260a05260c05261017760a31b90339060018060b81b031916171760005560405161199c9081610117823960805181818160a2015281816104f801528181610548015281816105bd015281816107df015281816108730152610a52015260a051818181610349015281816106090152610796015260c05181818161019a01526103050152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c908163089fe6aa14610bc657508063532bb19214610a2757806355a68e101461048b57806373dd250c146103945780638da5cb5b1461036d578063c31c9c0714610329578063c45a0155146102e55763c6fe95491461007757600080fd5b346102415761008536610c17565b9080939291602094859181010312610241576001600160a01b03807f0000000000000000000000000000000000000000000000000000000000000000169360405193630cf35bdd60e41b9384865235600486015260809182866024818a5afa95861561024d576000966102c2575b5060405194855280600486015282856024818a5afa94851561024d57889360009661028a575b5050606490604051978893849263442c159960e01b845260048401526024830152600060448301525afa90811561024d578590600092610259575b600054604051630b4c774160e11b81526001600160a01b0380881660048301528616602482015260a09190911c62ffffff166044820152955085908180606481015b03917f0000000000000000000000000000000000000000000000000000000000000000165afa93841561024d576000946101fa575b506fffffffffffffffffffffffffffffffff6101e96101f295610d36565b50911690611097565b604051908152f35b93508484813d8311610246575b6102118183610c4e565b81010312610241576fffffffffffffffffffffffffffffffff6101e96102396101f296610c70565b9550506101cb565b600080fd5b503d610207565b6040513d6000823e3d90fd5b915084813d8311610283575b61026f8183610c4e565b810103126102415784610196945191610154565b503d610265565b606492965090816102af92903d106102bb575b6102a78183610c4e565b810190610c84565b50509050949038610119565b503d61029d565b6102da919650833d85116102bb576102a78183610c4e565b5050905094386100f3565b346102415760003660031901126102415760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b346102415760003660031901126102415760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b346102415760003660031901126102415760206001600160a01b0360005416604051908152f35b346102415760203660031901126102415760043562ffffff80821680830361024157600054926001600160a01b0384163303610447577f2bff118b9b9e3deb4fc5204e6ba828351c954685d0b119d0e21add79f878339960407fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff9476ffffff0000000000000000000000000000000000000000948251918860a01c1682526020820152a160a01b16911617600055600080f35b606460405162461bcd60e51b815260206004820152602060248201527f556e69737761705633537761707065723a206e6f7420617574686f72697a65646044820152fd5b346102415760c0366003190112610241576064356001600160a01b03811681036102415760a43567ffffffffffffffff8111610241576104cf903690600401610be9565b9060405191630cf35bdd60e41b9182845260043560048501526080846024816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa93841561024d57600094610a02575b5060405192835260243560048401526080836024816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa92831561024d576000936109dd575b50604051916311a5cc7760e31b8352600435600484015230602484015230604484015260006064840152604435608484015260408360a48160006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af192831561024d576000936109bb575b5060405163095ea7b360e01b60208201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152604480820185905281526000908190610648606482610c4e565b60208151910182895af13d156109b4573d67ffffffffffffffff81116109455760405190610680601f8201601f191660200183610c4e565b81523d6000602083013e5b81610985575b501561095b5781602091810103126102415760005493604051948561010081011067ffffffffffffffff61010088011117610945576001600160a01b0362ffffff9261010088016040521686526001600160a01b038516602087015260a01c16604085015230606085015235608084015260a083015260843560c0830152600060e08301526001600160a01b0360e06040519363414bf389821b855282815116600486015282602082015116602486015262ffffff60408201511660448601528260608201511660648601526080810151608486015260a081015160a486015260c081015160c486015201511660e48301526020826101048160006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af191821561024d57600092610911575b5060405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052909160209183916044918391600091165af1801561024d576108e2575b506001600160a01b0360405192634d4d7cbd60e11b845260243560048501523060248501521660448301528060648301526000608483015260408260a48160006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1801561024d576040926000916108b3575b5082519182526020820152f35b6108d39150833d85116108db575b6108cb8183610c4e565b810190610cbd565b9050836108a6565b503d6108c1565b6109039060203d60201161090a575b6108fb8183610c4e565b810190610cd3565b5082610829565b503d6108f1565b9091506020813d60201161093d575b8161092d60209383610c4e565b81010312610241575190836107c7565b3d9150610920565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b8152602060048201526002602482015261534160f01b6044820152606490fd5b805180159250821561099a575b505087610691565b6109ad9250602080918301019101610cd3565b8780610992565b606061068b565b6109d591935060403d6040116108db576108cb8183610c4e565b5091866105ee565b6109f791935060803d6080116102bb576102a78183610c4e565b505090509185610579565b610a1c91945060803d6080116102bb576102a78183610c4e565b505090509285610529565b3461024157610a3536610c17565b9181939192602094859181010312610241576001600160a01b03807f0000000000000000000000000000000000000000000000000000000000000000169360405192630cf35bdd60e41b9485855280600486015260809283866024818b5afa95861561024d57600096610ba3575b5060405196875235600487015282866024818a5afa95861561024d578893600097610b7b575b5050606490604051978893849263442c159960e01b845260048401526024830152600060448301525afa90811561024d578590600092610b4a575b600054604051630b4c774160e11b81526001600160a01b0380871660048301528716602482015260a09190911c62ffffff16604482015295508590818060648101610196565b915084813d8311610b74575b610b608183610c4e565b810103126102415784610196945191610b04565b503d610b56565b60649297509081610b9792903d106102bb576102a78183610c4e565b50509050959089610ac9565b610bbb919650843d86116102bb576102a78183610c4e565b505090509489610aa3565b346102415760003660031901126102415760209062ffffff60005460a01c168152f35b9181601f840112156102415782359167ffffffffffffffff8311610241576020838186019501011161024157565b60606003198201126102415760043591602435916044359067ffffffffffffffff821161024157610c4a91600401610be9565b9091565b90601f8019910116810190811067ffffffffffffffff82111761094557604052565b51906001600160a01b038216820361024157565b919082608091031261024157815160058110156102415791610ca860208201610c70565b916060610cb760408401610c70565b92015190565b9190826040910312610241576020825192015190565b90816020910312610241575180151581036102415790565b67ffffffffffffffff81116109455760051b60200190565b805115610d105760200190565b634e487b7160e01b600052603260045260246000fd5b805160011015610d105760400190565b9060009160408051916060830167ffffffffffffffff908481108282111761105a579186928452600285526020918286019480368737603c610d7788610d03565b5284610d8288610d26565b52805194859363883bdbfd60e01b855260249788860160049a888c89015251809152604487019190845b8982821061103a5750505050908580926001600160a01b03998a910392165afa9283156110305789928a94610f1d575b505050610df2610deb82610d26565b5191610d03565b5160060b9060060b0390667fffffffffffff8213667fffffffffffff19831217610f0b5783610e2c81610e2484610d26565b511692610d03565b51169003928311610ee55760060b95603c870560020b96600081129081610ef7575b50610ecf575b80610ebd57501b77ffffffffffffffffffffffffffffffffffffffff0000000016918215610eaa575050743bffffffffffffffffffffffffffffffffffffffc4046fffffffffffffffffffffffffffffffff1690565b601290634e487b7160e01b600052526000fd5b634e487b7160e01b8152601185528390fd5b95627fffff198114610ee5576000190195610e54565b634e487b7160e01b8752601185528387fd5b915050603c6000910760060b151538610e4e565b634e487b7160e01b8852601186528488fd5b91935091503d808a843e610f318184610c4e565b820190838383031261100b5782518181116110075783019282601f8501121561100757835193610f6085610ceb565b94610f6d87519687610c4e565b808652878087019160051b8301019185831161102c578801905b82821061100f5750505085810151918211611007570181601f8201121561100b57805190610fc0610fb783610ceb565b95519586610c4e565b818552858086019260051b820101928311611007578501905b828210610feb57505050388080610ddc565b81518781168103611003578152908501908501610fd9565b8b80fd5b8a80fd5b8980fd5b81518060060b8103611028578152908801908801610f87565b8e80fd5b8d80fd5b81513d8b823e3d90fd5b835163ffffffff1685528b99508f96509384019390920191600101610dac565b634e487b7160e01b87526041600452602487fd5b8181029291811591840414171561108157565b634e487b7160e01b600052601160045260246000fd5b9291909260020b906000821260001461163e57600160ff1b821461108157816000035b620d89e881116116155760018116156115f95770ffffffffffffffffffffffffffffffffff6ffffcb933bd6fad37aa2d162d1a5940015b1692600282166115cd575b6004918281166115a1575b60088116611575575b60108116611549575b6020811661151d575b604081166114f1575b6080908181166114c6575b610100811661149b575b6102008116611470575b6104008116611445575b610800811661141a575b61100081166113ef575b61200081166113c4575b6140008116611399575b618000811661136e575b620100008116611343575b620200008116611319575b6204000081166112db575b620800001661129c575b50600012611276575b63ffffffff8360201c93161560001461126d5760ff60005b16830180931161125857506fffffffffffffffffffffffffffffffff916001600160a01b03908190811684811161122f578061120d9161106e565b941691161015611225576112229216906118f0565b90565b6112229216611895565b8061123991611644565b94169116101561124e57611222921690611826565b61122292166116d2565b601190634e487b7160e01b6000525260246000fd5b60ff60016111d2565b9180156112875760001904916111ba565b601283634e487b7160e01b6000525260246000fd5b6b048a170391f7dc42444e8fa2949194918281029281840414901517156112c6571c9260006111b1565b601183634e487b7160e01b6000525260246000fd5b946d2216e584f5fa1ea926041bedfe989081810291818304149015171561130457811c946111a7565b601184634e487b7160e01b6000525260246000fd5b946e5d6af8dedb81196699c329225ee6049081810291818304149015171561130457811c9461119c565b946f09aa508b5b7a84e1c677de54f3e99bc99081810291818304149015171561130457811c94611191565b946f31be135f97d08fd981231505542fcfa69081810291818304149015171561130457811c94611186565b946f70d869a156d2a1b890bb3df62baf32f79081810291818304149015171561130457811c9461117c565b946fa9f746462d870fdf8a65dc1f90e061e59081810291818304149015171561130457811c94611172565b946fd097f3bdfd2022b8845ad8f792aa58259081810291818304149015171561130457811c94611168565b946fe7159475a2c29b7443b29c7fa6e889d99081810291818304149015171561130457811c9461115e565b946ff3392b0822b70005940c7a398e4b70f39081810291818304149015171561130457811c94611154565b946ff987a7253ac413176f2b074cf7815e549081810291818304149015171561130457811c9461114a565b946ffcbe86c7900a88aedcffc83b479aa3a49081810291818304149015171561130457811c94611140565b946ffe5dee046a99a2a811c461f1969c30539081810291818304149015171561130457811c94611136565b936fff2ea16466c96a3843ec78b326b52861908181029181830414901517156112c65760801c9361112b565b936fff973b41fa98c081472e6896dfb254c0908181029181830414901517156112c65760801c93611122565b936fffcb9843d60f6159c9db58835c926644908181029181830414901517156112c65760801c93611119565b936fffe5caca7e10e4e61c3624eaa0941cd0908181029181830414901517156112c65760801c93611110565b936ffff2e50f5f656932ef12357cf3c7fdcc908181029181830414901517156112c65760801c93611107565b926ffff97272373d413259a46990580e213a908181029181830414901517156110815760801c926110fc565b70ffffffffffffffffffffffffffffffffff600160801b6110f1565b60405162461bcd60e51b81526020600482015260016024820152601560fa1b6044820152606490fd5b816110ba565b60001982820990828102908180841093039383850393600095146116c7576801000000000000000091848311156116c357099181831184818303956116af57508460c01b948504600160c01b1491141715611081570360401c17808004600114811517156110815790565b634e487b7160e01b81526011600452602490fd5b8580fd5b505060401c92915050565b600160801b9291600019828509938260801b92838087109603958087039614611817578583111561024157829109908019600181018091116110815781168091049161172d600096600184808a03040190868411900361106e565b9280600302966003880482036116af57600280981861174c818461106e565b89039089821161180357906117609161106e565b61176a818461106e565b890390898211611803579061177e9161106e565b611788818461106e565b890390898211611803579061179c9161106e565b6117a6818461106e565b89039089821161180357906117ba9161106e565b6117c4818461106e565b890390898211611803576117e2916117db9161106e565b809361106e565b88039788116116af575061122295966117fa9161106e565b9303041761106e565b634e487b7160e01b83526011600452602483fd5b50508092935015610241570490565b6000198282098282029081808210910393818503916000951461188a57600160801b93828511156116c35790849109928284119085828403966116af57508560801b9586041491141715611081570360801c17808004600114811517156110815790565b505060801c92915050565b600160c01b9291600019828509938260c01b92838087109603958087039614611817578583111561024157829109908019600181018091116110815781168091049161172d600096600184808a03040190868411900361106e565b600019828209908281029081808410930393838503936000951461195b57600160c01b91848311156116c357099181831184818303956116af57508460401b948504680100000000000000001491141715611081570360c01c17808004600114811517156110815790565b505060c01c9291505056fea26469706673582212202a15883c55133e1ed9b15c5b2b01c1dd96be7f9707e2ace39f99f64b2d22e68364736f6c63430008120033","opcodes":"PUSH1 0xE0 CALLVALUE PUSH2 0xFB JUMPI PUSH1 0x1F PUSH2 0x1AB3 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x100 JUMPI DUP1 DUP5 SWAP3 PUSH1 0x60 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0xFB JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP4 AND DUP4 SUB PUSH2 0xFB JUMPI PUSH1 0x20 DUP2 ADD MLOAD SWAP1 DUP3 DUP3 AND DUP3 SUB PUSH2 0xFB JUMPI PUSH1 0x40 ADD MLOAD SWAP2 DUP3 AND DUP3 SUB PUSH2 0xFB JUMPI PUSH1 0x0 SLOAD SWAP3 PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE PUSH1 0xC0 MSTORE PUSH2 0x177 PUSH1 0xA3 SHL SWAP1 CALLER SWAP1 PUSH1 0x1 DUP1 PUSH1 0xB8 SHL SUB NOT AND OR OR PUSH1 0x0 SSTORE PUSH1 0x40 MLOAD PUSH2 0x199C SWAP1 DUP2 PUSH2 0x117 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH1 0xA2 ADD MSTORE DUP2 DUP2 PUSH2 0x4F8 ADD MSTORE DUP2 DUP2 PUSH2 0x548 ADD MSTORE DUP2 DUP2 PUSH2 0x5BD ADD MSTORE DUP2 DUP2 PUSH2 0x7DF ADD MSTORE DUP2 DUP2 PUSH2 0x873 ADD MSTORE PUSH2 0xA52 ADD MSTORE PUSH1 0xA0 MLOAD DUP2 DUP2 DUP2 PUSH2 0x349 ADD MSTORE DUP2 DUP2 PUSH2 0x609 ADD MSTORE PUSH2 0x796 ADD MSTORE PUSH1 0xC0 MLOAD DUP2 DUP2 DUP2 PUSH2 0x19A ADD MSTORE PUSH2 0x305 ADD MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x89FE6AA EQ PUSH2 0xBC6 JUMPI POP DUP1 PUSH4 0x532BB192 EQ PUSH2 0xA27 JUMPI DUP1 PUSH4 0x55A68E10 EQ PUSH2 0x48B JUMPI DUP1 PUSH4 0x73DD250C EQ PUSH2 0x394 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x36D JUMPI DUP1 PUSH4 0xC31C9C07 EQ PUSH2 0x329 JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x2E5 JUMPI PUSH4 0xC6FE9549 EQ PUSH2 0x77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x241 JUMPI PUSH2 0x85 CALLDATASIZE PUSH2 0xC17 JUMP JUMPDEST SWAP1 DUP1 SWAP4 SWAP3 SWAP2 PUSH1 0x20 SWAP5 DUP6 SWAP2 DUP2 ADD SUB SLT PUSH2 0x241 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH32 0x0 AND SWAP4 PUSH1 0x40 MLOAD SWAP4 PUSH4 0xCF35BDD PUSH1 0xE4 SHL SWAP4 DUP5 DUP7 MSTORE CALLDATALOAD PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x80 SWAP2 DUP3 DUP7 PUSH1 0x24 DUP2 DUP11 GAS STATICCALL SWAP6 DUP7 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 SWAP7 PUSH2 0x2C2 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE DUP1 PUSH1 0x4 DUP7 ADD MSTORE DUP3 DUP6 PUSH1 0x24 DUP2 DUP11 GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x24D JUMPI DUP9 SWAP4 PUSH1 0x0 SWAP7 PUSH2 0x28A JUMPI JUMPDEST POP POP PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP4 DUP5 SWAP3 PUSH4 0x442C1599 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x44 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x24D JUMPI DUP6 SWAP1 PUSH1 0x0 SWAP3 PUSH2 0x259 JUMPI JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xB4C7741 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND PUSH1 0x4 DUP4 ADD MSTORE DUP7 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0xA0 SWAP2 SWAP1 SWAP2 SHR PUSH3 0xFFFFFF AND PUSH1 0x44 DUP3 ADD MSTORE SWAP6 POP DUP6 SWAP1 DUP2 DUP1 PUSH1 0x64 DUP2 ADD JUMPDEST SUB SWAP2 PUSH32 0x0 AND GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 SWAP5 PUSH2 0x1FA JUMPI JUMPDEST POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x1E9 PUSH2 0x1F2 SWAP6 PUSH2 0xD36 JUMP JUMPDEST POP SWAP2 AND SWAP1 PUSH2 0x1097 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP4 POP DUP5 DUP5 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x246 JUMPI JUMPDEST PUSH2 0x211 DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x241 JUMPI PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x1E9 PUSH2 0x239 PUSH2 0x1F2 SWAP7 PUSH2 0xC70 JUMP JUMPDEST SWAP6 POP POP PUSH2 0x1CB JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x207 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP DUP5 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x283 JUMPI JUMPDEST PUSH2 0x26F DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x241 JUMPI DUP5 PUSH2 0x196 SWAP5 MLOAD SWAP2 PUSH2 0x154 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x265 JUMP JUMPDEST PUSH1 0x64 SWAP3 SWAP7 POP SWAP1 DUP2 PUSH2 0x2AF SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x2BB JUMPI JUMPDEST PUSH2 0x2A7 DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xC84 JUMP JUMPDEST POP POP SWAP1 POP SWAP5 SWAP1 CODESIZE PUSH2 0x119 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x29D JUMP JUMPDEST PUSH2 0x2DA SWAP2 SWAP7 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x2BB JUMPI PUSH2 0x2A7 DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST POP POP SWAP1 POP SWAP5 CODESIZE PUSH2 0xF3 JUMP JUMPDEST CALLVALUE PUSH2 0x241 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x241 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x241 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x241 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x241 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x241 JUMPI PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x0 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x241 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x241 JUMPI PUSH1 0x4 CALLDATALOAD PUSH3 0xFFFFFF DUP1 DUP3 AND DUP1 DUP4 SUB PUSH2 0x241 JUMPI PUSH1 0x0 SLOAD SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND CALLER SUB PUSH2 0x447 JUMPI PUSH32 0x2BFF118B9B9E3DEB4FC5204E6BA828351C954685D0B119D0E21ADD79F8783399 PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFF000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 PUSH23 0xFFFFFF0000000000000000000000000000000000000000 SWAP5 DUP3 MLOAD SWAP2 DUP9 PUSH1 0xA0 SHR AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG1 PUSH1 0xA0 SHL AND SWAP2 AND OR PUSH1 0x0 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E69737761705633537761707065723A206E6F7420617574686F72697A6564 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x241 JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x241 JUMPI PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x241 JUMPI PUSH1 0xA4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x241 JUMPI PUSH2 0x4CF SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xBE9 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH4 0xCF35BDD PUSH1 0xE4 SHL SWAP2 DUP3 DUP5 MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x80 DUP5 PUSH1 0x24 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 SWAP5 PUSH2 0xA02 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x80 DUP4 PUSH1 0x24 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 SWAP4 PUSH2 0x9DD JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0x11A5CC77 PUSH1 0xE3 SHL DUP4 MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x4 DUP5 ADD MSTORE ADDRESS PUSH1 0x24 DUP5 ADD MSTORE ADDRESS PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x84 DUP5 ADD MSTORE PUSH1 0x40 DUP4 PUSH1 0xA4 DUP2 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 SWAP4 PUSH2 0x9BB JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP6 SWAP1 MSTORE DUP2 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x648 PUSH1 0x64 DUP3 PUSH2 0xC4E JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD DUP3 DUP10 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x9B4 JUMPI RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x945 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x680 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP4 PUSH2 0xC4E JUMP JUMPDEST DUP2 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY JUMPDEST DUP2 PUSH2 0x985 JUMPI JUMPDEST POP ISZERO PUSH2 0x95B JUMPI DUP2 PUSH1 0x20 SWAP2 DUP2 ADD SUB SLT PUSH2 0x241 JUMPI PUSH1 0x0 SLOAD SWAP4 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x100 DUP2 ADD LT PUSH8 0xFFFFFFFFFFFFFFFF PUSH2 0x100 DUP9 ADD GT OR PUSH2 0x945 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH3 0xFFFFFF SWAP3 PUSH2 0x100 DUP9 ADD PUSH1 0x40 MSTORE AND DUP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0xA0 SHR AND PUSH1 0x40 DUP6 ADD MSTORE ADDRESS PUSH1 0x60 DUP6 ADD MSTORE CALLDATALOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0xE0 PUSH1 0x40 MLOAD SWAP4 PUSH4 0x414BF389 DUP3 SHL DUP6 MSTORE DUP3 DUP2 MLOAD AND PUSH1 0x4 DUP7 ADD MSTORE DUP3 PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x24 DUP7 ADD MSTORE PUSH3 0xFFFFFF PUSH1 0x40 DUP3 ADD MLOAD AND PUSH1 0x44 DUP7 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MLOAD AND PUSH1 0x64 DUP7 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x84 DUP7 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xA4 DUP7 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0xC4 DUP7 ADD MSTORE ADD MLOAD AND PUSH1 0xE4 DUP4 ADD MSTORE PUSH1 0x20 DUP3 PUSH2 0x104 DUP2 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 SWAP3 PUSH2 0x911 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 PUSH1 0x20 SWAP2 DUP4 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 PUSH1 0x0 SWAP2 AND GAS CALL DUP1 ISZERO PUSH2 0x24D JUMPI PUSH2 0x8E2 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 MLOAD SWAP3 PUSH4 0x4D4D7CBD PUSH1 0xE1 SHL DUP5 MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x4 DUP6 ADD MSTORE ADDRESS PUSH1 0x24 DUP6 ADD MSTORE AND PUSH1 0x44 DUP4 ADD MSTORE DUP1 PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP4 ADD MSTORE PUSH1 0x40 DUP3 PUSH1 0xA4 DUP2 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS CALL DUP1 ISZERO PUSH2 0x24D JUMPI PUSH1 0x40 SWAP3 PUSH1 0x0 SWAP2 PUSH2 0x8B3 JUMPI JUMPDEST POP DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST PUSH2 0x8D3 SWAP2 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x8DB JUMPI JUMPDEST PUSH2 0x8CB DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xCBD JUMP JUMPDEST SWAP1 POP DUP4 PUSH2 0x8A6 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x8C1 JUMP JUMPDEST PUSH2 0x903 SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x90A JUMPI JUMPDEST PUSH2 0x8FB DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xCD3 JUMP JUMPDEST POP DUP3 PUSH2 0x829 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x8F1 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x93D JUMPI JUMPDEST DUP2 PUSH2 0x92D PUSH1 0x20 SWAP4 DUP4 PUSH2 0xC4E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x241 JUMPI MLOAD SWAP1 DUP4 PUSH2 0x7C7 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x920 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x5341 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP1 ISZERO SWAP3 POP DUP3 ISZERO PUSH2 0x99A JUMPI JUMPDEST POP POP DUP8 PUSH2 0x691 JUMP JUMPDEST PUSH2 0x9AD SWAP3 POP PUSH1 0x20 DUP1 SWAP2 DUP4 ADD ADD SWAP2 ADD PUSH2 0xCD3 JUMP JUMPDEST DUP8 DUP1 PUSH2 0x992 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x68B JUMP JUMPDEST PUSH2 0x9D5 SWAP2 SWAP4 POP PUSH1 0x40 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x8DB JUMPI PUSH2 0x8CB DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST POP SWAP2 DUP7 PUSH2 0x5EE JUMP JUMPDEST PUSH2 0x9F7 SWAP2 SWAP4 POP PUSH1 0x80 RETURNDATASIZE PUSH1 0x80 GT PUSH2 0x2BB JUMPI PUSH2 0x2A7 DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST POP POP SWAP1 POP SWAP2 DUP6 PUSH2 0x579 JUMP JUMPDEST PUSH2 0xA1C SWAP2 SWAP5 POP PUSH1 0x80 RETURNDATASIZE PUSH1 0x80 GT PUSH2 0x2BB JUMPI PUSH2 0x2A7 DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST POP POP SWAP1 POP SWAP3 DUP6 PUSH2 0x529 JUMP JUMPDEST CALLVALUE PUSH2 0x241 JUMPI PUSH2 0xA35 CALLDATASIZE PUSH2 0xC17 JUMP JUMPDEST SWAP2 DUP2 SWAP4 SWAP2 SWAP3 PUSH1 0x20 SWAP5 DUP6 SWAP2 DUP2 ADD SUB SLT PUSH2 0x241 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH32 0x0 AND SWAP4 PUSH1 0x40 MLOAD SWAP3 PUSH4 0xCF35BDD PUSH1 0xE4 SHL SWAP5 DUP6 DUP6 MSTORE DUP1 PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x80 SWAP3 DUP4 DUP7 PUSH1 0x24 DUP2 DUP12 GAS STATICCALL SWAP6 DUP7 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 SWAP7 PUSH2 0xBA3 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP7 DUP8 MSTORE CALLDATALOAD PUSH1 0x4 DUP8 ADD MSTORE DUP3 DUP7 PUSH1 0x24 DUP2 DUP11 GAS STATICCALL SWAP6 DUP7 ISZERO PUSH2 0x24D JUMPI DUP9 SWAP4 PUSH1 0x0 SWAP8 PUSH2 0xB7B JUMPI JUMPDEST POP POP PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP4 DUP5 SWAP3 PUSH4 0x442C1599 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x44 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x24D JUMPI DUP6 SWAP1 PUSH1 0x0 SWAP3 PUSH2 0xB4A JUMPI JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xB4C7741 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP8 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0xA0 SWAP2 SWAP1 SWAP2 SHR PUSH3 0xFFFFFF AND PUSH1 0x44 DUP3 ADD MSTORE SWAP6 POP DUP6 SWAP1 DUP2 DUP1 PUSH1 0x64 DUP2 ADD PUSH2 0x196 JUMP JUMPDEST SWAP2 POP DUP5 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xB74 JUMPI JUMPDEST PUSH2 0xB60 DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x241 JUMPI DUP5 PUSH2 0x196 SWAP5 MLOAD SWAP2 PUSH2 0xB04 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xB56 JUMP JUMPDEST PUSH1 0x64 SWAP3 SWAP8 POP SWAP1 DUP2 PUSH2 0xB97 SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x2BB JUMPI PUSH2 0x2A7 DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST POP POP SWAP1 POP SWAP6 SWAP1 DUP10 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0xBBB SWAP2 SWAP7 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x2BB JUMPI PUSH2 0x2A7 DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST POP POP SWAP1 POP SWAP5 DUP10 PUSH2 0xAA3 JUMP JUMPDEST CALLVALUE PUSH2 0x241 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x241 JUMPI PUSH1 0x20 SWAP1 PUSH3 0xFFFFFF PUSH1 0x0 SLOAD PUSH1 0xA0 SHR AND DUP2 MSTORE RETURN JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x241 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x241 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x241 JUMPI JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x241 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x241 JUMPI PUSH2 0xC4A SWAP2 PUSH1 0x4 ADD PUSH2 0xBE9 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x945 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x241 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x80 SWAP2 SUB SLT PUSH2 0x241 JUMPI DUP2 MLOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x241 JUMPI SWAP2 PUSH2 0xCA8 PUSH1 0x20 DUP3 ADD PUSH2 0xC70 JUMP JUMPDEST SWAP2 PUSH1 0x60 PUSH2 0xCB7 PUSH1 0x40 DUP5 ADD PUSH2 0xC70 JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x241 JUMPI PUSH1 0x20 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x241 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x241 JUMPI SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x945 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0xD10 JUMPI PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 LT ISZERO PUSH2 0xD10 JUMPI PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH1 0x40 DUP1 MLOAD SWAP2 PUSH1 0x60 DUP4 ADD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP5 DUP2 LT DUP3 DUP3 GT OR PUSH2 0x105A JUMPI SWAP2 DUP7 SWAP3 DUP5 MSTORE PUSH1 0x2 DUP6 MSTORE PUSH1 0x20 SWAP2 DUP3 DUP7 ADD SWAP5 DUP1 CALLDATASIZE DUP8 CALLDATACOPY PUSH1 0x3C PUSH2 0xD77 DUP9 PUSH2 0xD03 JUMP JUMPDEST MSTORE DUP5 PUSH2 0xD82 DUP9 PUSH2 0xD26 JUMP JUMPDEST MSTORE DUP1 MLOAD SWAP5 DUP6 SWAP4 PUSH4 0x883BDBFD PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x24 SWAP8 DUP9 DUP7 ADD PUSH1 0x4 SWAP11 DUP9 DUP13 DUP10 ADD MSTORE MLOAD DUP1 SWAP2 MSTORE PUSH1 0x44 DUP8 ADD SWAP2 SWAP1 DUP5 JUMPDEST DUP10 DUP3 DUP3 LT PUSH2 0x103A JUMPI POP POP POP POP SWAP1 DUP6 DUP1 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP10 DUP11 SWAP2 SUB SWAP3 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x1030 JUMPI DUP10 SWAP3 DUP11 SWAP5 PUSH2 0xF1D JUMPI JUMPDEST POP POP POP PUSH2 0xDF2 PUSH2 0xDEB DUP3 PUSH2 0xD26 JUMP JUMPDEST MLOAD SWAP2 PUSH2 0xD03 JUMP JUMPDEST MLOAD PUSH1 0x6 SIGNEXTEND SWAP1 PUSH1 0x6 SIGNEXTEND SUB SWAP1 PUSH7 0x7FFFFFFFFFFFFF DUP3 SGT PUSH7 0x7FFFFFFFFFFFFF NOT DUP4 SLT OR PUSH2 0xF0B JUMPI DUP4 PUSH2 0xE2C DUP2 PUSH2 0xE24 DUP5 PUSH2 0xD26 JUMP JUMPDEST MLOAD AND SWAP3 PUSH2 0xD03 JUMP JUMPDEST MLOAD AND SWAP1 SUB SWAP3 DUP4 GT PUSH2 0xEE5 JUMPI PUSH1 0x6 SIGNEXTEND SWAP6 PUSH1 0x3C DUP8 SDIV PUSH1 0x2 SIGNEXTEND SWAP7 PUSH1 0x0 DUP2 SLT SWAP1 DUP2 PUSH2 0xEF7 JUMPI JUMPDEST POP PUSH2 0xECF JUMPI JUMPDEST DUP1 PUSH2 0xEBD JUMPI POP SHL PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000 AND SWAP2 DUP3 ISZERO PUSH2 0xEAA JUMPI POP POP PUSH21 0x3BFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC4 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x12 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 DUP6 MSTORE DUP4 SWAP1 REVERT JUMPDEST SWAP6 PUSH3 0x7FFFFF NOT DUP2 EQ PUSH2 0xEE5 JUMPI PUSH1 0x0 NOT ADD SWAP6 PUSH2 0xE54 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x11 DUP6 MSTORE DUP4 DUP8 REVERT JUMPDEST SWAP2 POP POP PUSH1 0x3C PUSH1 0x0 SWAP2 SMOD PUSH1 0x6 SIGNEXTEND ISZERO ISZERO CODESIZE PUSH2 0xE4E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x11 DUP7 MSTORE DUP5 DUP9 REVERT JUMPDEST SWAP2 SWAP4 POP SWAP2 POP RETURNDATASIZE DUP1 DUP11 DUP5 RETURNDATACOPY PUSH2 0xF31 DUP2 DUP5 PUSH2 0xC4E JUMP JUMPDEST DUP3 ADD SWAP1 DUP4 DUP4 DUP4 SUB SLT PUSH2 0x100B JUMPI DUP3 MLOAD DUP2 DUP2 GT PUSH2 0x1007 JUMPI DUP4 ADD SWAP3 DUP3 PUSH1 0x1F DUP6 ADD SLT ISZERO PUSH2 0x1007 JUMPI DUP4 MLOAD SWAP4 PUSH2 0xF60 DUP6 PUSH2 0xCEB JUMP JUMPDEST SWAP5 PUSH2 0xF6D DUP8 MLOAD SWAP7 DUP8 PUSH2 0xC4E JUMP JUMPDEST DUP1 DUP7 MSTORE DUP8 DUP1 DUP8 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP2 DUP6 DUP4 GT PUSH2 0x102C JUMPI DUP9 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x100F JUMPI POP POP POP DUP6 DUP2 ADD MLOAD SWAP2 DUP3 GT PUSH2 0x1007 JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x100B JUMPI DUP1 MLOAD SWAP1 PUSH2 0xFC0 PUSH2 0xFB7 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP6 MLOAD SWAP6 DUP7 PUSH2 0xC4E JUMP JUMPDEST DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x1007 JUMPI DUP6 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xFEB JUMPI POP POP POP CODESIZE DUP1 DUP1 PUSH2 0xDDC JUMP JUMPDEST DUP2 MLOAD DUP8 DUP2 AND DUP2 SUB PUSH2 0x1003 JUMPI DUP2 MSTORE SWAP1 DUP6 ADD SWAP1 DUP6 ADD PUSH2 0xFD9 JUMP JUMPDEST DUP12 DUP1 REVERT JUMPDEST DUP11 DUP1 REVERT JUMPDEST DUP10 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x6 SIGNEXTEND DUP2 SUB PUSH2 0x1028 JUMPI DUP2 MSTORE SWAP1 DUP9 ADD SWAP1 DUP9 ADD PUSH2 0xF87 JUMP JUMPDEST DUP15 DUP1 REVERT JUMPDEST DUP14 DUP1 REVERT JUMPDEST DUP2 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP4 MLOAD PUSH4 0xFFFFFFFF AND DUP6 MSTORE DUP12 SWAP10 POP DUP16 SWAP7 POP SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xDAC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x1081 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 SWAP1 SWAP3 PUSH1 0x2 SIGNEXTEND SWAP1 PUSH1 0x0 DUP3 SLT PUSH1 0x0 EQ PUSH2 0x163E JUMPI PUSH1 0x1 PUSH1 0xFF SHL DUP3 EQ PUSH2 0x1081 JUMPI DUP2 PUSH1 0x0 SUB JUMPDEST PUSH3 0xD89E8 DUP2 GT PUSH2 0x1615 JUMPI PUSH1 0x1 DUP2 AND ISZERO PUSH2 0x15F9 JUMPI PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST AND SWAP3 PUSH1 0x2 DUP3 AND PUSH2 0x15CD JUMPI JUMPDEST PUSH1 0x4 SWAP2 DUP3 DUP2 AND PUSH2 0x15A1 JUMPI JUMPDEST PUSH1 0x8 DUP2 AND PUSH2 0x1575 JUMPI JUMPDEST PUSH1 0x10 DUP2 AND PUSH2 0x1549 JUMPI JUMPDEST PUSH1 0x20 DUP2 AND PUSH2 0x151D JUMPI JUMPDEST PUSH1 0x40 DUP2 AND PUSH2 0x14F1 JUMPI JUMPDEST PUSH1 0x80 SWAP1 DUP2 DUP2 AND PUSH2 0x14C6 JUMPI JUMPDEST PUSH2 0x100 DUP2 AND PUSH2 0x149B JUMPI JUMPDEST PUSH2 0x200 DUP2 AND PUSH2 0x1470 JUMPI JUMPDEST PUSH2 0x400 DUP2 AND PUSH2 0x1445 JUMPI JUMPDEST PUSH2 0x800 DUP2 AND PUSH2 0x141A JUMPI JUMPDEST PUSH2 0x1000 DUP2 AND PUSH2 0x13EF JUMPI JUMPDEST PUSH2 0x2000 DUP2 AND PUSH2 0x13C4 JUMPI JUMPDEST PUSH2 0x4000 DUP2 AND PUSH2 0x1399 JUMPI JUMPDEST PUSH2 0x8000 DUP2 AND PUSH2 0x136E JUMPI JUMPDEST PUSH3 0x10000 DUP2 AND PUSH2 0x1343 JUMPI JUMPDEST PUSH3 0x20000 DUP2 AND PUSH2 0x1319 JUMPI JUMPDEST PUSH3 0x40000 DUP2 AND PUSH2 0x12DB JUMPI JUMPDEST PUSH3 0x80000 AND PUSH2 0x129C JUMPI JUMPDEST POP PUSH1 0x0 SLT PUSH2 0x1276 JUMPI JUMPDEST PUSH4 0xFFFFFFFF DUP4 PUSH1 0x20 SHR SWAP4 AND ISZERO PUSH1 0x0 EQ PUSH2 0x126D JUMPI PUSH1 0xFF PUSH1 0x0 JUMPDEST AND DUP4 ADD DUP1 SWAP4 GT PUSH2 0x1258 JUMPI POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 SWAP1 DUP2 AND DUP5 DUP2 GT PUSH2 0x122F JUMPI DUP1 PUSH2 0x120D SWAP2 PUSH2 0x106E JUMP JUMPDEST SWAP5 AND SWAP2 AND LT ISZERO PUSH2 0x1225 JUMPI PUSH2 0x1222 SWAP3 AND SWAP1 PUSH2 0x18F0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1222 SWAP3 AND PUSH2 0x1895 JUMP JUMPDEST DUP1 PUSH2 0x1239 SWAP2 PUSH2 0x1644 JUMP JUMPDEST SWAP5 AND SWAP2 AND LT ISZERO PUSH2 0x124E JUMPI PUSH2 0x1222 SWAP3 AND SWAP1 PUSH2 0x1826 JUMP JUMPDEST PUSH2 0x1222 SWAP3 AND PUSH2 0x16D2 JUMP JUMPDEST PUSH1 0x11 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xFF PUSH1 0x1 PUSH2 0x11D2 JUMP JUMPDEST SWAP2 DUP1 ISZERO PUSH2 0x1287 JUMPI PUSH1 0x0 NOT DIV SWAP2 PUSH2 0x11BA JUMP JUMPDEST PUSH1 0x12 DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH12 0x48A170391F7DC42444E8FA2 SWAP5 SWAP2 SWAP5 SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x12C6 JUMPI SHR SWAP3 PUSH1 0x0 PUSH2 0x11B1 JUMP JUMPDEST PUSH1 0x11 DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP5 PUSH14 0x2216E584F5FA1EA926041BEDFE98 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x11A7 JUMP JUMPDEST PUSH1 0x11 DUP5 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP5 PUSH15 0x5D6AF8DEDB81196699C329225EE604 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x119C JUMP JUMPDEST SWAP5 PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x1191 JUMP JUMPDEST SWAP5 PUSH16 0x31BE135F97D08FD981231505542FCFA6 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x1186 JUMP JUMPDEST SWAP5 PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x117C JUMP JUMPDEST SWAP5 PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x1172 JUMP JUMPDEST SWAP5 PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x1168 JUMP JUMPDEST SWAP5 PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x115E JUMP JUMPDEST SWAP5 PUSH16 0xF3392B0822B70005940C7A398E4B70F3 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x1154 JUMP JUMPDEST SWAP5 PUSH16 0xF987A7253AC413176F2B074CF7815E54 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x114A JUMP JUMPDEST SWAP5 PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x1140 JUMP JUMPDEST SWAP5 PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x1136 JUMP JUMPDEST SWAP4 PUSH16 0xFF2EA16466C96A3843EC78B326B52861 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x80 SHR SWAP4 PUSH2 0x112B JUMP JUMPDEST SWAP4 PUSH16 0xFF973B41FA98C081472E6896DFB254C0 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x80 SHR SWAP4 PUSH2 0x1122 JUMP JUMPDEST SWAP4 PUSH16 0xFFCB9843D60F6159C9DB58835C926644 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x80 SHR SWAP4 PUSH2 0x1119 JUMP JUMPDEST SWAP4 PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x80 SHR SWAP4 PUSH2 0x1110 JUMP JUMPDEST SWAP4 PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x80 SHR SWAP4 PUSH2 0x1107 JUMP JUMPDEST SWAP3 PUSH16 0xFFF97272373D413259A46990580E213A SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1081 JUMPI PUSH1 0x80 SHR SWAP3 PUSH2 0x10FC JUMP JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0x10F1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP2 PUSH2 0x10BA JUMP JUMPDEST PUSH1 0x0 NOT DUP3 DUP3 MULMOD SWAP1 DUP3 DUP2 MUL SWAP1 DUP2 DUP1 DUP5 LT SWAP4 SUB SWAP4 DUP4 DUP6 SUB SWAP4 PUSH1 0x0 SWAP6 EQ PUSH2 0x16C7 JUMPI PUSH9 0x10000000000000000 SWAP2 DUP5 DUP4 GT ISZERO PUSH2 0x16C3 JUMPI MULMOD SWAP2 DUP2 DUP4 GT DUP5 DUP2 DUP4 SUB SWAP6 PUSH2 0x16AF JUMPI POP DUP5 PUSH1 0xC0 SHL SWAP5 DUP6 DIV PUSH1 0x1 PUSH1 0xC0 SHL EQ SWAP2 EQ OR ISZERO PUSH2 0x1081 JUMPI SUB PUSH1 0x40 SHR OR DUP1 DUP1 DIV PUSH1 0x1 EQ DUP2 ISZERO OR ISZERO PUSH2 0x1081 JUMPI SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP POP PUSH1 0x40 SHR SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL SWAP3 SWAP2 PUSH1 0x0 NOT DUP3 DUP6 MULMOD SWAP4 DUP3 PUSH1 0x80 SHL SWAP3 DUP4 DUP1 DUP8 LT SWAP7 SUB SWAP6 DUP1 DUP8 SUB SWAP7 EQ PUSH2 0x1817 JUMPI DUP6 DUP4 GT ISZERO PUSH2 0x241 JUMPI DUP3 SWAP2 MULMOD SWAP1 DUP1 NOT PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x1081 JUMPI DUP2 AND DUP1 SWAP2 DIV SWAP2 PUSH2 0x172D PUSH1 0x0 SWAP7 PUSH1 0x1 DUP5 DUP1 DUP11 SUB DIV ADD SWAP1 DUP7 DUP5 GT SWAP1 SUB PUSH2 0x106E JUMP JUMPDEST SWAP3 DUP1 PUSH1 0x3 MUL SWAP7 PUSH1 0x3 DUP9 DIV DUP3 SUB PUSH2 0x16AF JUMPI PUSH1 0x2 DUP1 SWAP9 XOR PUSH2 0x174C DUP2 DUP5 PUSH2 0x106E JUMP JUMPDEST DUP10 SUB SWAP1 DUP10 DUP3 GT PUSH2 0x1803 JUMPI SWAP1 PUSH2 0x1760 SWAP2 PUSH2 0x106E JUMP JUMPDEST PUSH2 0x176A DUP2 DUP5 PUSH2 0x106E JUMP JUMPDEST DUP10 SUB SWAP1 DUP10 DUP3 GT PUSH2 0x1803 JUMPI SWAP1 PUSH2 0x177E SWAP2 PUSH2 0x106E JUMP JUMPDEST PUSH2 0x1788 DUP2 DUP5 PUSH2 0x106E JUMP JUMPDEST DUP10 SUB SWAP1 DUP10 DUP3 GT PUSH2 0x1803 JUMPI SWAP1 PUSH2 0x179C SWAP2 PUSH2 0x106E JUMP JUMPDEST PUSH2 0x17A6 DUP2 DUP5 PUSH2 0x106E JUMP JUMPDEST DUP10 SUB SWAP1 DUP10 DUP3 GT PUSH2 0x1803 JUMPI SWAP1 PUSH2 0x17BA SWAP2 PUSH2 0x106E JUMP JUMPDEST PUSH2 0x17C4 DUP2 DUP5 PUSH2 0x106E JUMP JUMPDEST DUP10 SUB SWAP1 DUP10 DUP3 GT PUSH2 0x1803 JUMPI PUSH2 0x17E2 SWAP2 PUSH2 0x17DB SWAP2 PUSH2 0x106E JUMP JUMPDEST DUP1 SWAP4 PUSH2 0x106E JUMP JUMPDEST DUP9 SUB SWAP8 DUP9 GT PUSH2 0x16AF JUMPI POP PUSH2 0x1222 SWAP6 SWAP7 PUSH2 0x17FA SWAP2 PUSH2 0x106E JUMP JUMPDEST SWAP4 SUB DIV OR PUSH2 0x106E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST POP POP DUP1 SWAP3 SWAP4 POP ISZERO PUSH2 0x241 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP3 DUP3 MULMOD DUP3 DUP3 MUL SWAP1 DUP2 DUP1 DUP3 LT SWAP2 SUB SWAP4 DUP2 DUP6 SUB SWAP2 PUSH1 0x0 SWAP6 EQ PUSH2 0x188A JUMPI PUSH1 0x1 PUSH1 0x80 SHL SWAP4 DUP3 DUP6 GT ISZERO PUSH2 0x16C3 JUMPI SWAP1 DUP5 SWAP2 MULMOD SWAP3 DUP3 DUP5 GT SWAP1 DUP6 DUP3 DUP5 SUB SWAP7 PUSH2 0x16AF JUMPI POP DUP6 PUSH1 0x80 SHL SWAP6 DUP7 DIV EQ SWAP2 EQ OR ISZERO PUSH2 0x1081 JUMPI SUB PUSH1 0x80 SHR OR DUP1 DUP1 DIV PUSH1 0x1 EQ DUP2 ISZERO OR ISZERO PUSH2 0x1081 JUMPI SWAP1 JUMP JUMPDEST POP POP PUSH1 0x80 SHR SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xC0 SHL SWAP3 SWAP2 PUSH1 0x0 NOT DUP3 DUP6 MULMOD SWAP4 DUP3 PUSH1 0xC0 SHL SWAP3 DUP4 DUP1 DUP8 LT SWAP7 SUB SWAP6 DUP1 DUP8 SUB SWAP7 EQ PUSH2 0x1817 JUMPI DUP6 DUP4 GT ISZERO PUSH2 0x241 JUMPI DUP3 SWAP2 MULMOD SWAP1 DUP1 NOT PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x1081 JUMPI DUP2 AND DUP1 SWAP2 DIV SWAP2 PUSH2 0x172D PUSH1 0x0 SWAP7 PUSH1 0x1 DUP5 DUP1 DUP11 SUB DIV ADD SWAP1 DUP7 DUP5 GT SWAP1 SUB PUSH2 0x106E JUMP JUMPDEST PUSH1 0x0 NOT DUP3 DUP3 MULMOD SWAP1 DUP3 DUP2 MUL SWAP1 DUP2 DUP1 DUP5 LT SWAP4 SUB SWAP4 DUP4 DUP6 SUB SWAP4 PUSH1 0x0 SWAP6 EQ PUSH2 0x195B JUMPI PUSH1 0x1 PUSH1 0xC0 SHL SWAP2 DUP5 DUP4 GT ISZERO PUSH2 0x16C3 JUMPI MULMOD SWAP2 DUP2 DUP4 GT DUP5 DUP2 DUP4 SUB SWAP6 PUSH2 0x16AF JUMPI POP DUP5 PUSH1 0x40 SHL SWAP5 DUP6 DIV PUSH9 0x10000000000000000 EQ SWAP2 EQ OR ISZERO PUSH2 0x1081 JUMPI SUB PUSH1 0xC0 SHR OR DUP1 DUP1 DIV PUSH1 0x1 EQ DUP2 ISZERO OR ISZERO PUSH2 0x1081 JUMPI SWAP1 JUMP JUMPDEST POP POP PUSH1 0xC0 SHR SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A ISZERO DUP9 EXTCODECOPY SSTORE SGT RETURNDATACOPY 0x1E 0xD9 0xB1 0x5C JUMPDEST 0x2B ADD 0xC1 0xDD SWAP7 0xBE PUSH32 0x9707E2ACE39F99F64B2D22E68364736F6C634300081200330000000000000000 ","sourceMap":"1838:5433:13:-:0;;;;;;;;;;;;;-1:-1:-1;;1838:5433:13;;;;-1:-1:-1;;;;;1838:5433:13;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1838:5433:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1838:5433:13;2475:20;;;1838:5433;2506:24;2541:18;;1838:5433;;;2578:10;;1838:5433;;;;;;;;;;-1:-1:-1;1838:5433:13;;;;;;;;;2475:20;1838:5433;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2541:18;1838:5433;;;;;;;;;;;;-1:-1:-1;1838:5433:13;;;;;;-1:-1:-1;1838:5433:13;;;;;-1:-1:-1;1838:5433:13"},"deployedBytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":3184,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":3283,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":3049,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_enum_TokenTypet_addresst_addresst_uint256_fromMemory":{"entryPoint":3204,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_uint256t_uint256_fromMemory":{"entryPoint":3261,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_uint256t_uint256t_bytes_calldata":{"entryPoint":3095,"id":null,"parameterSlots":1,"returnSlots":4},"abi_encode_address_address_uint24":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_array_uint32_dyn":{"entryPoint":3307,"id":null,"parameterSlots":1,"returnSlots":1},"checked_mul_uint256":{"entryPoint":4206,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":3150,"id":null,"parameterSlots":2,"returnSlots":0},"fun_consult":{"entryPoint":3382,"id":1667,"parameterSlots":1,"returnSlots":2},"fun_getQuoteAtTick":{"entryPoint":4247,"id":1765,"parameterSlots":4,"returnSlots":1},"fun_mulDiv":{"entryPoint":6384,"id":1482,"parameterSlots":2,"returnSlots":1},"fun_mulDiv_12377":{"entryPoint":5700,"id":1482,"parameterSlots":2,"returnSlots":1},"fun_mulDiv_12378":{"entryPoint":5842,"id":1482,"parameterSlots":2,"returnSlots":1},"fun_mulDiv_12379":{"entryPoint":6182,"id":1482,"parameterSlots":2,"returnSlots":1},"fun_mulDiv_12380":{"entryPoint":6293,"id":1482,"parameterSlots":2,"returnSlots":1},"memory_array_index_access_uint32_dyn":{"entryPoint":3331,"id":null,"parameterSlots":1,"returnSlots":1},"memory_array_index_access_uint32_dyn_12372":{"entryPoint":3366,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"immutableReferences":{"996":[{"length":32,"start":162},{"length":32,"start":1272},{"length":32,"start":1352},{"length":32,"start":1469},{"length":32,"start":2015},{"length":32,"start":2163},{"length":32,"start":2642}],"999":[{"length":32,"start":841},{"length":32,"start":1545},{"length":32,"start":1942}],"1002":[{"length":32,"start":410},{"length":32,"start":773}]},"linkReferences":{},"object":"608080604052600436101561001357600080fd5b60003560e01c908163089fe6aa14610bc657508063532bb19214610a2757806355a68e101461048b57806373dd250c146103945780638da5cb5b1461036d578063c31c9c0714610329578063c45a0155146102e55763c6fe95491461007757600080fd5b346102415761008536610c17565b9080939291602094859181010312610241576001600160a01b03807f0000000000000000000000000000000000000000000000000000000000000000169360405193630cf35bdd60e41b9384865235600486015260809182866024818a5afa95861561024d576000966102c2575b5060405194855280600486015282856024818a5afa94851561024d57889360009661028a575b5050606490604051978893849263442c159960e01b845260048401526024830152600060448301525afa90811561024d578590600092610259575b600054604051630b4c774160e11b81526001600160a01b0380881660048301528616602482015260a09190911c62ffffff166044820152955085908180606481015b03917f0000000000000000000000000000000000000000000000000000000000000000165afa93841561024d576000946101fa575b506fffffffffffffffffffffffffffffffff6101e96101f295610d36565b50911690611097565b604051908152f35b93508484813d8311610246575b6102118183610c4e565b81010312610241576fffffffffffffffffffffffffffffffff6101e96102396101f296610c70565b9550506101cb565b600080fd5b503d610207565b6040513d6000823e3d90fd5b915084813d8311610283575b61026f8183610c4e565b810103126102415784610196945191610154565b503d610265565b606492965090816102af92903d106102bb575b6102a78183610c4e565b810190610c84565b50509050949038610119565b503d61029d565b6102da919650833d85116102bb576102a78183610c4e565b5050905094386100f3565b346102415760003660031901126102415760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b346102415760003660031901126102415760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b346102415760003660031901126102415760206001600160a01b0360005416604051908152f35b346102415760203660031901126102415760043562ffffff80821680830361024157600054926001600160a01b0384163303610447577f2bff118b9b9e3deb4fc5204e6ba828351c954685d0b119d0e21add79f878339960407fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff9476ffffff0000000000000000000000000000000000000000948251918860a01c1682526020820152a160a01b16911617600055600080f35b606460405162461bcd60e51b815260206004820152602060248201527f556e69737761705633537761707065723a206e6f7420617574686f72697a65646044820152fd5b346102415760c0366003190112610241576064356001600160a01b03811681036102415760a43567ffffffffffffffff8111610241576104cf903690600401610be9565b9060405191630cf35bdd60e41b9182845260043560048501526080846024816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa93841561024d57600094610a02575b5060405192835260243560048401526080836024816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa92831561024d576000936109dd575b50604051916311a5cc7760e31b8352600435600484015230602484015230604484015260006064840152604435608484015260408360a48160006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af192831561024d576000936109bb575b5060405163095ea7b360e01b60208201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152604480820185905281526000908190610648606482610c4e565b60208151910182895af13d156109b4573d67ffffffffffffffff81116109455760405190610680601f8201601f191660200183610c4e565b81523d6000602083013e5b81610985575b501561095b5781602091810103126102415760005493604051948561010081011067ffffffffffffffff61010088011117610945576001600160a01b0362ffffff9261010088016040521686526001600160a01b038516602087015260a01c16604085015230606085015235608084015260a083015260843560c0830152600060e08301526001600160a01b0360e06040519363414bf389821b855282815116600486015282602082015116602486015262ffffff60408201511660448601528260608201511660648601526080810151608486015260a081015160a486015260c081015160c486015201511660e48301526020826101048160006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af191821561024d57600092610911575b5060405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201849052909160209183916044918391600091165af1801561024d576108e2575b506001600160a01b0360405192634d4d7cbd60e11b845260243560048501523060248501521660448301528060648301526000608483015260408260a48160006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1801561024d576040926000916108b3575b5082519182526020820152f35b6108d39150833d85116108db575b6108cb8183610c4e565b810190610cbd565b9050836108a6565b503d6108c1565b6109039060203d60201161090a575b6108fb8183610c4e565b810190610cd3565b5082610829565b503d6108f1565b9091506020813d60201161093d575b8161092d60209383610c4e565b81010312610241575190836107c7565b3d9150610920565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b8152602060048201526002602482015261534160f01b6044820152606490fd5b805180159250821561099a575b505087610691565b6109ad9250602080918301019101610cd3565b8780610992565b606061068b565b6109d591935060403d6040116108db576108cb8183610c4e565b5091866105ee565b6109f791935060803d6080116102bb576102a78183610c4e565b505090509185610579565b610a1c91945060803d6080116102bb576102a78183610c4e565b505090509285610529565b3461024157610a3536610c17565b9181939192602094859181010312610241576001600160a01b03807f0000000000000000000000000000000000000000000000000000000000000000169360405192630cf35bdd60e41b9485855280600486015260809283866024818b5afa95861561024d57600096610ba3575b5060405196875235600487015282866024818a5afa95861561024d578893600097610b7b575b5050606490604051978893849263442c159960e01b845260048401526024830152600060448301525afa90811561024d578590600092610b4a575b600054604051630b4c774160e11b81526001600160a01b0380871660048301528716602482015260a09190911c62ffffff16604482015295508590818060648101610196565b915084813d8311610b74575b610b608183610c4e565b810103126102415784610196945191610b04565b503d610b56565b60649297509081610b9792903d106102bb576102a78183610c4e565b50509050959089610ac9565b610bbb919650843d86116102bb576102a78183610c4e565b505090509489610aa3565b346102415760003660031901126102415760209062ffffff60005460a01c168152f35b9181601f840112156102415782359167ffffffffffffffff8311610241576020838186019501011161024157565b60606003198201126102415760043591602435916044359067ffffffffffffffff821161024157610c4a91600401610be9565b9091565b90601f8019910116810190811067ffffffffffffffff82111761094557604052565b51906001600160a01b038216820361024157565b919082608091031261024157815160058110156102415791610ca860208201610c70565b916060610cb760408401610c70565b92015190565b9190826040910312610241576020825192015190565b90816020910312610241575180151581036102415790565b67ffffffffffffffff81116109455760051b60200190565b805115610d105760200190565b634e487b7160e01b600052603260045260246000fd5b805160011015610d105760400190565b9060009160408051916060830167ffffffffffffffff908481108282111761105a579186928452600285526020918286019480368737603c610d7788610d03565b5284610d8288610d26565b52805194859363883bdbfd60e01b855260249788860160049a888c89015251809152604487019190845b8982821061103a5750505050908580926001600160a01b03998a910392165afa9283156110305789928a94610f1d575b505050610df2610deb82610d26565b5191610d03565b5160060b9060060b0390667fffffffffffff8213667fffffffffffff19831217610f0b5783610e2c81610e2484610d26565b511692610d03565b51169003928311610ee55760060b95603c870560020b96600081129081610ef7575b50610ecf575b80610ebd57501b77ffffffffffffffffffffffffffffffffffffffff0000000016918215610eaa575050743bffffffffffffffffffffffffffffffffffffffc4046fffffffffffffffffffffffffffffffff1690565b601290634e487b7160e01b600052526000fd5b634e487b7160e01b8152601185528390fd5b95627fffff198114610ee5576000190195610e54565b634e487b7160e01b8752601185528387fd5b915050603c6000910760060b151538610e4e565b634e487b7160e01b8852601186528488fd5b91935091503d808a843e610f318184610c4e565b820190838383031261100b5782518181116110075783019282601f8501121561100757835193610f6085610ceb565b94610f6d87519687610c4e565b808652878087019160051b8301019185831161102c578801905b82821061100f5750505085810151918211611007570181601f8201121561100b57805190610fc0610fb783610ceb565b95519586610c4e565b818552858086019260051b820101928311611007578501905b828210610feb57505050388080610ddc565b81518781168103611003578152908501908501610fd9565b8b80fd5b8a80fd5b8980fd5b81518060060b8103611028578152908801908801610f87565b8e80fd5b8d80fd5b81513d8b823e3d90fd5b835163ffffffff1685528b99508f96509384019390920191600101610dac565b634e487b7160e01b87526041600452602487fd5b8181029291811591840414171561108157565b634e487b7160e01b600052601160045260246000fd5b9291909260020b906000821260001461163e57600160ff1b821461108157816000035b620d89e881116116155760018116156115f95770ffffffffffffffffffffffffffffffffff6ffffcb933bd6fad37aa2d162d1a5940015b1692600282166115cd575b6004918281166115a1575b60088116611575575b60108116611549575b6020811661151d575b604081166114f1575b6080908181166114c6575b610100811661149b575b6102008116611470575b6104008116611445575b610800811661141a575b61100081166113ef575b61200081166113c4575b6140008116611399575b618000811661136e575b620100008116611343575b620200008116611319575b6204000081166112db575b620800001661129c575b50600012611276575b63ffffffff8360201c93161560001461126d5760ff60005b16830180931161125857506fffffffffffffffffffffffffffffffff916001600160a01b03908190811684811161122f578061120d9161106e565b941691161015611225576112229216906118f0565b90565b6112229216611895565b8061123991611644565b94169116101561124e57611222921690611826565b61122292166116d2565b601190634e487b7160e01b6000525260246000fd5b60ff60016111d2565b9180156112875760001904916111ba565b601283634e487b7160e01b6000525260246000fd5b6b048a170391f7dc42444e8fa2949194918281029281840414901517156112c6571c9260006111b1565b601183634e487b7160e01b6000525260246000fd5b946d2216e584f5fa1ea926041bedfe989081810291818304149015171561130457811c946111a7565b601184634e487b7160e01b6000525260246000fd5b946e5d6af8dedb81196699c329225ee6049081810291818304149015171561130457811c9461119c565b946f09aa508b5b7a84e1c677de54f3e99bc99081810291818304149015171561130457811c94611191565b946f31be135f97d08fd981231505542fcfa69081810291818304149015171561130457811c94611186565b946f70d869a156d2a1b890bb3df62baf32f79081810291818304149015171561130457811c9461117c565b946fa9f746462d870fdf8a65dc1f90e061e59081810291818304149015171561130457811c94611172565b946fd097f3bdfd2022b8845ad8f792aa58259081810291818304149015171561130457811c94611168565b946fe7159475a2c29b7443b29c7fa6e889d99081810291818304149015171561130457811c9461115e565b946ff3392b0822b70005940c7a398e4b70f39081810291818304149015171561130457811c94611154565b946ff987a7253ac413176f2b074cf7815e549081810291818304149015171561130457811c9461114a565b946ffcbe86c7900a88aedcffc83b479aa3a49081810291818304149015171561130457811c94611140565b946ffe5dee046a99a2a811c461f1969c30539081810291818304149015171561130457811c94611136565b936fff2ea16466c96a3843ec78b326b52861908181029181830414901517156112c65760801c9361112b565b936fff973b41fa98c081472e6896dfb254c0908181029181830414901517156112c65760801c93611122565b936fffcb9843d60f6159c9db58835c926644908181029181830414901517156112c65760801c93611119565b936fffe5caca7e10e4e61c3624eaa0941cd0908181029181830414901517156112c65760801c93611110565b936ffff2e50f5f656932ef12357cf3c7fdcc908181029181830414901517156112c65760801c93611107565b926ffff97272373d413259a46990580e213a908181029181830414901517156110815760801c926110fc565b70ffffffffffffffffffffffffffffffffff600160801b6110f1565b60405162461bcd60e51b81526020600482015260016024820152601560fa1b6044820152606490fd5b816110ba565b60001982820990828102908180841093039383850393600095146116c7576801000000000000000091848311156116c357099181831184818303956116af57508460c01b948504600160c01b1491141715611081570360401c17808004600114811517156110815790565b634e487b7160e01b81526011600452602490fd5b8580fd5b505060401c92915050565b600160801b9291600019828509938260801b92838087109603958087039614611817578583111561024157829109908019600181018091116110815781168091049161172d600096600184808a03040190868411900361106e565b9280600302966003880482036116af57600280981861174c818461106e565b89039089821161180357906117609161106e565b61176a818461106e565b890390898211611803579061177e9161106e565b611788818461106e565b890390898211611803579061179c9161106e565b6117a6818461106e565b89039089821161180357906117ba9161106e565b6117c4818461106e565b890390898211611803576117e2916117db9161106e565b809361106e565b88039788116116af575061122295966117fa9161106e565b9303041761106e565b634e487b7160e01b83526011600452602483fd5b50508092935015610241570490565b6000198282098282029081808210910393818503916000951461188a57600160801b93828511156116c35790849109928284119085828403966116af57508560801b9586041491141715611081570360801c17808004600114811517156110815790565b505060801c92915050565b600160c01b9291600019828509938260c01b92838087109603958087039614611817578583111561024157829109908019600181018091116110815781168091049161172d600096600184808a03040190868411900361106e565b600019828209908281029081808410930393838503936000951461195b57600160c01b91848311156116c357099181831184818303956116af57508460401b948504680100000000000000001491141715611081570360c01c17808004600114811517156110815790565b505060c01c9291505056fea26469706673582212202a15883c55133e1ed9b15c5b2b01c1dd96be7f9707e2ace39f99f64b2d22e68364736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x89FE6AA EQ PUSH2 0xBC6 JUMPI POP DUP1 PUSH4 0x532BB192 EQ PUSH2 0xA27 JUMPI DUP1 PUSH4 0x55A68E10 EQ PUSH2 0x48B JUMPI DUP1 PUSH4 0x73DD250C EQ PUSH2 0x394 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x36D JUMPI DUP1 PUSH4 0xC31C9C07 EQ PUSH2 0x329 JUMPI DUP1 PUSH4 0xC45A0155 EQ PUSH2 0x2E5 JUMPI PUSH4 0xC6FE9549 EQ PUSH2 0x77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x241 JUMPI PUSH2 0x85 CALLDATASIZE PUSH2 0xC17 JUMP JUMPDEST SWAP1 DUP1 SWAP4 SWAP3 SWAP2 PUSH1 0x20 SWAP5 DUP6 SWAP2 DUP2 ADD SUB SLT PUSH2 0x241 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH32 0x0 AND SWAP4 PUSH1 0x40 MLOAD SWAP4 PUSH4 0xCF35BDD PUSH1 0xE4 SHL SWAP4 DUP5 DUP7 MSTORE CALLDATALOAD PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x80 SWAP2 DUP3 DUP7 PUSH1 0x24 DUP2 DUP11 GAS STATICCALL SWAP6 DUP7 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 SWAP7 PUSH2 0x2C2 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE DUP1 PUSH1 0x4 DUP7 ADD MSTORE DUP3 DUP6 PUSH1 0x24 DUP2 DUP11 GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x24D JUMPI DUP9 SWAP4 PUSH1 0x0 SWAP7 PUSH2 0x28A JUMPI JUMPDEST POP POP PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP4 DUP5 SWAP3 PUSH4 0x442C1599 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x44 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x24D JUMPI DUP6 SWAP1 PUSH1 0x0 SWAP3 PUSH2 0x259 JUMPI JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xB4C7741 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND PUSH1 0x4 DUP4 ADD MSTORE DUP7 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0xA0 SWAP2 SWAP1 SWAP2 SHR PUSH3 0xFFFFFF AND PUSH1 0x44 DUP3 ADD MSTORE SWAP6 POP DUP6 SWAP1 DUP2 DUP1 PUSH1 0x64 DUP2 ADD JUMPDEST SUB SWAP2 PUSH32 0x0 AND GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 SWAP5 PUSH2 0x1FA JUMPI JUMPDEST POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x1E9 PUSH2 0x1F2 SWAP6 PUSH2 0xD36 JUMP JUMPDEST POP SWAP2 AND SWAP1 PUSH2 0x1097 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP4 POP DUP5 DUP5 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x246 JUMPI JUMPDEST PUSH2 0x211 DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x241 JUMPI PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x1E9 PUSH2 0x239 PUSH2 0x1F2 SWAP7 PUSH2 0xC70 JUMP JUMPDEST SWAP6 POP POP PUSH2 0x1CB JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x207 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP DUP5 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x283 JUMPI JUMPDEST PUSH2 0x26F DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x241 JUMPI DUP5 PUSH2 0x196 SWAP5 MLOAD SWAP2 PUSH2 0x154 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x265 JUMP JUMPDEST PUSH1 0x64 SWAP3 SWAP7 POP SWAP1 DUP2 PUSH2 0x2AF SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x2BB JUMPI JUMPDEST PUSH2 0x2A7 DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xC84 JUMP JUMPDEST POP POP SWAP1 POP SWAP5 SWAP1 CODESIZE PUSH2 0x119 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x29D JUMP JUMPDEST PUSH2 0x2DA SWAP2 SWAP7 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x2BB JUMPI PUSH2 0x2A7 DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST POP POP SWAP1 POP SWAP5 CODESIZE PUSH2 0xF3 JUMP JUMPDEST CALLVALUE PUSH2 0x241 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x241 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x241 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x241 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x241 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x241 JUMPI PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x0 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x241 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x241 JUMPI PUSH1 0x4 CALLDATALOAD PUSH3 0xFFFFFF DUP1 DUP3 AND DUP1 DUP4 SUB PUSH2 0x241 JUMPI PUSH1 0x0 SLOAD SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND CALLER SUB PUSH2 0x447 JUMPI PUSH32 0x2BFF118B9B9E3DEB4FC5204E6BA828351C954685D0B119D0E21ADD79F8783399 PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFF000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 PUSH23 0xFFFFFF0000000000000000000000000000000000000000 SWAP5 DUP3 MLOAD SWAP2 DUP9 PUSH1 0xA0 SHR AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG1 PUSH1 0xA0 SHL AND SWAP2 AND OR PUSH1 0x0 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E69737761705633537761707065723A206E6F7420617574686F72697A6564 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x241 JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x241 JUMPI PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x241 JUMPI PUSH1 0xA4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x241 JUMPI PUSH2 0x4CF SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xBE9 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH4 0xCF35BDD PUSH1 0xE4 SHL SWAP2 DUP3 DUP5 MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x80 DUP5 PUSH1 0x24 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 SWAP5 PUSH2 0xA02 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x80 DUP4 PUSH1 0x24 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 SWAP4 PUSH2 0x9DD JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 PUSH4 0x11A5CC77 PUSH1 0xE3 SHL DUP4 MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x4 DUP5 ADD MSTORE ADDRESS PUSH1 0x24 DUP5 ADD MSTORE ADDRESS PUSH1 0x44 DUP5 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x84 DUP5 ADD MSTORE PUSH1 0x40 DUP4 PUSH1 0xA4 DUP2 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 SWAP4 PUSH2 0x9BB JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP6 SWAP1 MSTORE DUP2 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x648 PUSH1 0x64 DUP3 PUSH2 0xC4E JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD DUP3 DUP10 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x9B4 JUMPI RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x945 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x680 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP4 PUSH2 0xC4E JUMP JUMPDEST DUP2 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY JUMPDEST DUP2 PUSH2 0x985 JUMPI JUMPDEST POP ISZERO PUSH2 0x95B JUMPI DUP2 PUSH1 0x20 SWAP2 DUP2 ADD SUB SLT PUSH2 0x241 JUMPI PUSH1 0x0 SLOAD SWAP4 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x100 DUP2 ADD LT PUSH8 0xFFFFFFFFFFFFFFFF PUSH2 0x100 DUP9 ADD GT OR PUSH2 0x945 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH3 0xFFFFFF SWAP3 PUSH2 0x100 DUP9 ADD PUSH1 0x40 MSTORE AND DUP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x20 DUP8 ADD MSTORE PUSH1 0xA0 SHR AND PUSH1 0x40 DUP6 ADD MSTORE ADDRESS PUSH1 0x60 DUP6 ADD MSTORE CALLDATALOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0xE0 PUSH1 0x40 MLOAD SWAP4 PUSH4 0x414BF389 DUP3 SHL DUP6 MSTORE DUP3 DUP2 MLOAD AND PUSH1 0x4 DUP7 ADD MSTORE DUP3 PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x24 DUP7 ADD MSTORE PUSH3 0xFFFFFF PUSH1 0x40 DUP3 ADD MLOAD AND PUSH1 0x44 DUP7 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MLOAD AND PUSH1 0x64 DUP7 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x84 DUP7 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xA4 DUP7 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0xC4 DUP7 ADD MSTORE ADD MLOAD AND PUSH1 0xE4 DUP4 ADD MSTORE PUSH1 0x20 DUP3 PUSH2 0x104 DUP2 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 SWAP3 PUSH2 0x911 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 PUSH1 0x20 SWAP2 DUP4 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 PUSH1 0x0 SWAP2 AND GAS CALL DUP1 ISZERO PUSH2 0x24D JUMPI PUSH2 0x8E2 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 MLOAD SWAP3 PUSH4 0x4D4D7CBD PUSH1 0xE1 SHL DUP5 MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x4 DUP6 ADD MSTORE ADDRESS PUSH1 0x24 DUP6 ADD MSTORE AND PUSH1 0x44 DUP4 ADD MSTORE DUP1 PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP4 ADD MSTORE PUSH1 0x40 DUP3 PUSH1 0xA4 DUP2 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS CALL DUP1 ISZERO PUSH2 0x24D JUMPI PUSH1 0x40 SWAP3 PUSH1 0x0 SWAP2 PUSH2 0x8B3 JUMPI JUMPDEST POP DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST PUSH2 0x8D3 SWAP2 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x8DB JUMPI JUMPDEST PUSH2 0x8CB DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xCBD JUMP JUMPDEST SWAP1 POP DUP4 PUSH2 0x8A6 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x8C1 JUMP JUMPDEST PUSH2 0x903 SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x90A JUMPI JUMPDEST PUSH2 0x8FB DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xCD3 JUMP JUMPDEST POP DUP3 PUSH2 0x829 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x8F1 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x93D JUMPI JUMPDEST DUP2 PUSH2 0x92D PUSH1 0x20 SWAP4 DUP4 PUSH2 0xC4E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x241 JUMPI MLOAD SWAP1 DUP4 PUSH2 0x7C7 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x920 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2 PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x5341 PUSH1 0xF0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP1 ISZERO SWAP3 POP DUP3 ISZERO PUSH2 0x99A JUMPI JUMPDEST POP POP DUP8 PUSH2 0x691 JUMP JUMPDEST PUSH2 0x9AD SWAP3 POP PUSH1 0x20 DUP1 SWAP2 DUP4 ADD ADD SWAP2 ADD PUSH2 0xCD3 JUMP JUMPDEST DUP8 DUP1 PUSH2 0x992 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x68B JUMP JUMPDEST PUSH2 0x9D5 SWAP2 SWAP4 POP PUSH1 0x40 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x8DB JUMPI PUSH2 0x8CB DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST POP SWAP2 DUP7 PUSH2 0x5EE JUMP JUMPDEST PUSH2 0x9F7 SWAP2 SWAP4 POP PUSH1 0x80 RETURNDATASIZE PUSH1 0x80 GT PUSH2 0x2BB JUMPI PUSH2 0x2A7 DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST POP POP SWAP1 POP SWAP2 DUP6 PUSH2 0x579 JUMP JUMPDEST PUSH2 0xA1C SWAP2 SWAP5 POP PUSH1 0x80 RETURNDATASIZE PUSH1 0x80 GT PUSH2 0x2BB JUMPI PUSH2 0x2A7 DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST POP POP SWAP1 POP SWAP3 DUP6 PUSH2 0x529 JUMP JUMPDEST CALLVALUE PUSH2 0x241 JUMPI PUSH2 0xA35 CALLDATASIZE PUSH2 0xC17 JUMP JUMPDEST SWAP2 DUP2 SWAP4 SWAP2 SWAP3 PUSH1 0x20 SWAP5 DUP6 SWAP2 DUP2 ADD SUB SLT PUSH2 0x241 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH32 0x0 AND SWAP4 PUSH1 0x40 MLOAD SWAP3 PUSH4 0xCF35BDD PUSH1 0xE4 SHL SWAP5 DUP6 DUP6 MSTORE DUP1 PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x80 SWAP3 DUP4 DUP7 PUSH1 0x24 DUP2 DUP12 GAS STATICCALL SWAP6 DUP7 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 SWAP7 PUSH2 0xBA3 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP7 DUP8 MSTORE CALLDATALOAD PUSH1 0x4 DUP8 ADD MSTORE DUP3 DUP7 PUSH1 0x24 DUP2 DUP11 GAS STATICCALL SWAP6 DUP7 ISZERO PUSH2 0x24D JUMPI DUP9 SWAP4 PUSH1 0x0 SWAP8 PUSH2 0xB7B JUMPI JUMPDEST POP POP PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP4 DUP5 SWAP3 PUSH4 0x442C1599 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x44 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x24D JUMPI DUP6 SWAP1 PUSH1 0x0 SWAP3 PUSH2 0xB4A JUMPI JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH4 0xB4C7741 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x4 DUP4 ADD MSTORE DUP8 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0xA0 SWAP2 SWAP1 SWAP2 SHR PUSH3 0xFFFFFF AND PUSH1 0x44 DUP3 ADD MSTORE SWAP6 POP DUP6 SWAP1 DUP2 DUP1 PUSH1 0x64 DUP2 ADD PUSH2 0x196 JUMP JUMPDEST SWAP2 POP DUP5 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xB74 JUMPI JUMPDEST PUSH2 0xB60 DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x241 JUMPI DUP5 PUSH2 0x196 SWAP5 MLOAD SWAP2 PUSH2 0xB04 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xB56 JUMP JUMPDEST PUSH1 0x64 SWAP3 SWAP8 POP SWAP1 DUP2 PUSH2 0xB97 SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x2BB JUMPI PUSH2 0x2A7 DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST POP POP SWAP1 POP SWAP6 SWAP1 DUP10 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0xBBB SWAP2 SWAP7 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x2BB JUMPI PUSH2 0x2A7 DUP2 DUP4 PUSH2 0xC4E JUMP JUMPDEST POP POP SWAP1 POP SWAP5 DUP10 PUSH2 0xAA3 JUMP JUMPDEST CALLVALUE PUSH2 0x241 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x241 JUMPI PUSH1 0x20 SWAP1 PUSH3 0xFFFFFF PUSH1 0x0 SLOAD PUSH1 0xA0 SHR AND DUP2 MSTORE RETURN JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x241 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x241 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x241 JUMPI JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x241 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x241 JUMPI PUSH2 0xC4A SWAP2 PUSH1 0x4 ADD PUSH2 0xBE9 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x945 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x241 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x80 SWAP2 SUB SLT PUSH2 0x241 JUMPI DUP2 MLOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x241 JUMPI SWAP2 PUSH2 0xCA8 PUSH1 0x20 DUP3 ADD PUSH2 0xC70 JUMP JUMPDEST SWAP2 PUSH1 0x60 PUSH2 0xCB7 PUSH1 0x40 DUP5 ADD PUSH2 0xC70 JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x241 JUMPI PUSH1 0x20 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x241 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x241 JUMPI SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x945 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0xD10 JUMPI PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 LT ISZERO PUSH2 0xD10 JUMPI PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH1 0x40 DUP1 MLOAD SWAP2 PUSH1 0x60 DUP4 ADD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP5 DUP2 LT DUP3 DUP3 GT OR PUSH2 0x105A JUMPI SWAP2 DUP7 SWAP3 DUP5 MSTORE PUSH1 0x2 DUP6 MSTORE PUSH1 0x20 SWAP2 DUP3 DUP7 ADD SWAP5 DUP1 CALLDATASIZE DUP8 CALLDATACOPY PUSH1 0x3C PUSH2 0xD77 DUP9 PUSH2 0xD03 JUMP JUMPDEST MSTORE DUP5 PUSH2 0xD82 DUP9 PUSH2 0xD26 JUMP JUMPDEST MSTORE DUP1 MLOAD SWAP5 DUP6 SWAP4 PUSH4 0x883BDBFD PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x24 SWAP8 DUP9 DUP7 ADD PUSH1 0x4 SWAP11 DUP9 DUP13 DUP10 ADD MSTORE MLOAD DUP1 SWAP2 MSTORE PUSH1 0x44 DUP8 ADD SWAP2 SWAP1 DUP5 JUMPDEST DUP10 DUP3 DUP3 LT PUSH2 0x103A JUMPI POP POP POP POP SWAP1 DUP6 DUP1 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP10 DUP11 SWAP2 SUB SWAP3 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x1030 JUMPI DUP10 SWAP3 DUP11 SWAP5 PUSH2 0xF1D JUMPI JUMPDEST POP POP POP PUSH2 0xDF2 PUSH2 0xDEB DUP3 PUSH2 0xD26 JUMP JUMPDEST MLOAD SWAP2 PUSH2 0xD03 JUMP JUMPDEST MLOAD PUSH1 0x6 SIGNEXTEND SWAP1 PUSH1 0x6 SIGNEXTEND SUB SWAP1 PUSH7 0x7FFFFFFFFFFFFF DUP3 SGT PUSH7 0x7FFFFFFFFFFFFF NOT DUP4 SLT OR PUSH2 0xF0B JUMPI DUP4 PUSH2 0xE2C DUP2 PUSH2 0xE24 DUP5 PUSH2 0xD26 JUMP JUMPDEST MLOAD AND SWAP3 PUSH2 0xD03 JUMP JUMPDEST MLOAD AND SWAP1 SUB SWAP3 DUP4 GT PUSH2 0xEE5 JUMPI PUSH1 0x6 SIGNEXTEND SWAP6 PUSH1 0x3C DUP8 SDIV PUSH1 0x2 SIGNEXTEND SWAP7 PUSH1 0x0 DUP2 SLT SWAP1 DUP2 PUSH2 0xEF7 JUMPI JUMPDEST POP PUSH2 0xECF JUMPI JUMPDEST DUP1 PUSH2 0xEBD JUMPI POP SHL PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000 AND SWAP2 DUP3 ISZERO PUSH2 0xEAA JUMPI POP POP PUSH21 0x3BFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC4 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x12 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 DUP6 MSTORE DUP4 SWAP1 REVERT JUMPDEST SWAP6 PUSH3 0x7FFFFF NOT DUP2 EQ PUSH2 0xEE5 JUMPI PUSH1 0x0 NOT ADD SWAP6 PUSH2 0xE54 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x11 DUP6 MSTORE DUP4 DUP8 REVERT JUMPDEST SWAP2 POP POP PUSH1 0x3C PUSH1 0x0 SWAP2 SMOD PUSH1 0x6 SIGNEXTEND ISZERO ISZERO CODESIZE PUSH2 0xE4E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x11 DUP7 MSTORE DUP5 DUP9 REVERT JUMPDEST SWAP2 SWAP4 POP SWAP2 POP RETURNDATASIZE DUP1 DUP11 DUP5 RETURNDATACOPY PUSH2 0xF31 DUP2 DUP5 PUSH2 0xC4E JUMP JUMPDEST DUP3 ADD SWAP1 DUP4 DUP4 DUP4 SUB SLT PUSH2 0x100B JUMPI DUP3 MLOAD DUP2 DUP2 GT PUSH2 0x1007 JUMPI DUP4 ADD SWAP3 DUP3 PUSH1 0x1F DUP6 ADD SLT ISZERO PUSH2 0x1007 JUMPI DUP4 MLOAD SWAP4 PUSH2 0xF60 DUP6 PUSH2 0xCEB JUMP JUMPDEST SWAP5 PUSH2 0xF6D DUP8 MLOAD SWAP7 DUP8 PUSH2 0xC4E JUMP JUMPDEST DUP1 DUP7 MSTORE DUP8 DUP1 DUP8 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP2 DUP6 DUP4 GT PUSH2 0x102C JUMPI DUP9 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x100F JUMPI POP POP POP DUP6 DUP2 ADD MLOAD SWAP2 DUP3 GT PUSH2 0x1007 JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x100B JUMPI DUP1 MLOAD SWAP1 PUSH2 0xFC0 PUSH2 0xFB7 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP6 MLOAD SWAP6 DUP7 PUSH2 0xC4E JUMP JUMPDEST DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x1007 JUMPI DUP6 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xFEB JUMPI POP POP POP CODESIZE DUP1 DUP1 PUSH2 0xDDC JUMP JUMPDEST DUP2 MLOAD DUP8 DUP2 AND DUP2 SUB PUSH2 0x1003 JUMPI DUP2 MSTORE SWAP1 DUP6 ADD SWAP1 DUP6 ADD PUSH2 0xFD9 JUMP JUMPDEST DUP12 DUP1 REVERT JUMPDEST DUP11 DUP1 REVERT JUMPDEST DUP10 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x6 SIGNEXTEND DUP2 SUB PUSH2 0x1028 JUMPI DUP2 MSTORE SWAP1 DUP9 ADD SWAP1 DUP9 ADD PUSH2 0xF87 JUMP JUMPDEST DUP15 DUP1 REVERT JUMPDEST DUP14 DUP1 REVERT JUMPDEST DUP2 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP4 MLOAD PUSH4 0xFFFFFFFF AND DUP6 MSTORE DUP12 SWAP10 POP DUP16 SWAP7 POP SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xDAC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x1081 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 SWAP2 SWAP1 SWAP3 PUSH1 0x2 SIGNEXTEND SWAP1 PUSH1 0x0 DUP3 SLT PUSH1 0x0 EQ PUSH2 0x163E JUMPI PUSH1 0x1 PUSH1 0xFF SHL DUP3 EQ PUSH2 0x1081 JUMPI DUP2 PUSH1 0x0 SUB JUMPDEST PUSH3 0xD89E8 DUP2 GT PUSH2 0x1615 JUMPI PUSH1 0x1 DUP2 AND ISZERO PUSH2 0x15F9 JUMPI PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH16 0xFFFCB933BD6FAD37AA2D162D1A594001 JUMPDEST AND SWAP3 PUSH1 0x2 DUP3 AND PUSH2 0x15CD JUMPI JUMPDEST PUSH1 0x4 SWAP2 DUP3 DUP2 AND PUSH2 0x15A1 JUMPI JUMPDEST PUSH1 0x8 DUP2 AND PUSH2 0x1575 JUMPI JUMPDEST PUSH1 0x10 DUP2 AND PUSH2 0x1549 JUMPI JUMPDEST PUSH1 0x20 DUP2 AND PUSH2 0x151D JUMPI JUMPDEST PUSH1 0x40 DUP2 AND PUSH2 0x14F1 JUMPI JUMPDEST PUSH1 0x80 SWAP1 DUP2 DUP2 AND PUSH2 0x14C6 JUMPI JUMPDEST PUSH2 0x100 DUP2 AND PUSH2 0x149B JUMPI JUMPDEST PUSH2 0x200 DUP2 AND PUSH2 0x1470 JUMPI JUMPDEST PUSH2 0x400 DUP2 AND PUSH2 0x1445 JUMPI JUMPDEST PUSH2 0x800 DUP2 AND PUSH2 0x141A JUMPI JUMPDEST PUSH2 0x1000 DUP2 AND PUSH2 0x13EF JUMPI JUMPDEST PUSH2 0x2000 DUP2 AND PUSH2 0x13C4 JUMPI JUMPDEST PUSH2 0x4000 DUP2 AND PUSH2 0x1399 JUMPI JUMPDEST PUSH2 0x8000 DUP2 AND PUSH2 0x136E JUMPI JUMPDEST PUSH3 0x10000 DUP2 AND PUSH2 0x1343 JUMPI JUMPDEST PUSH3 0x20000 DUP2 AND PUSH2 0x1319 JUMPI JUMPDEST PUSH3 0x40000 DUP2 AND PUSH2 0x12DB JUMPI JUMPDEST PUSH3 0x80000 AND PUSH2 0x129C JUMPI JUMPDEST POP PUSH1 0x0 SLT PUSH2 0x1276 JUMPI JUMPDEST PUSH4 0xFFFFFFFF DUP4 PUSH1 0x20 SHR SWAP4 AND ISZERO PUSH1 0x0 EQ PUSH2 0x126D JUMPI PUSH1 0xFF PUSH1 0x0 JUMPDEST AND DUP4 ADD DUP1 SWAP4 GT PUSH2 0x1258 JUMPI POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 SWAP1 DUP2 AND DUP5 DUP2 GT PUSH2 0x122F JUMPI DUP1 PUSH2 0x120D SWAP2 PUSH2 0x106E JUMP JUMPDEST SWAP5 AND SWAP2 AND LT ISZERO PUSH2 0x1225 JUMPI PUSH2 0x1222 SWAP3 AND SWAP1 PUSH2 0x18F0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1222 SWAP3 AND PUSH2 0x1895 JUMP JUMPDEST DUP1 PUSH2 0x1239 SWAP2 PUSH2 0x1644 JUMP JUMPDEST SWAP5 AND SWAP2 AND LT ISZERO PUSH2 0x124E JUMPI PUSH2 0x1222 SWAP3 AND SWAP1 PUSH2 0x1826 JUMP JUMPDEST PUSH2 0x1222 SWAP3 AND PUSH2 0x16D2 JUMP JUMPDEST PUSH1 0x11 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xFF PUSH1 0x1 PUSH2 0x11D2 JUMP JUMPDEST SWAP2 DUP1 ISZERO PUSH2 0x1287 JUMPI PUSH1 0x0 NOT DIV SWAP2 PUSH2 0x11BA JUMP JUMPDEST PUSH1 0x12 DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH12 0x48A170391F7DC42444E8FA2 SWAP5 SWAP2 SWAP5 SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x12C6 JUMPI SHR SWAP3 PUSH1 0x0 PUSH2 0x11B1 JUMP JUMPDEST PUSH1 0x11 DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP5 PUSH14 0x2216E584F5FA1EA926041BEDFE98 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x11A7 JUMP JUMPDEST PUSH1 0x11 DUP5 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP5 PUSH15 0x5D6AF8DEDB81196699C329225EE604 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x119C JUMP JUMPDEST SWAP5 PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x1191 JUMP JUMPDEST SWAP5 PUSH16 0x31BE135F97D08FD981231505542FCFA6 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x1186 JUMP JUMPDEST SWAP5 PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x117C JUMP JUMPDEST SWAP5 PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x1172 JUMP JUMPDEST SWAP5 PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x1168 JUMP JUMPDEST SWAP5 PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x115E JUMP JUMPDEST SWAP5 PUSH16 0xF3392B0822B70005940C7A398E4B70F3 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x1154 JUMP JUMPDEST SWAP5 PUSH16 0xF987A7253AC413176F2B074CF7815E54 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x114A JUMP JUMPDEST SWAP5 PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x1140 JUMP JUMPDEST SWAP5 PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1304 JUMPI DUP2 SHR SWAP5 PUSH2 0x1136 JUMP JUMPDEST SWAP4 PUSH16 0xFF2EA16466C96A3843EC78B326B52861 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x80 SHR SWAP4 PUSH2 0x112B JUMP JUMPDEST SWAP4 PUSH16 0xFF973B41FA98C081472E6896DFB254C0 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x80 SHR SWAP4 PUSH2 0x1122 JUMP JUMPDEST SWAP4 PUSH16 0xFFCB9843D60F6159C9DB58835C926644 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x80 SHR SWAP4 PUSH2 0x1119 JUMP JUMPDEST SWAP4 PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x80 SHR SWAP4 PUSH2 0x1110 JUMP JUMPDEST SWAP4 PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x80 SHR SWAP4 PUSH2 0x1107 JUMP JUMPDEST SWAP3 PUSH16 0xFFF97272373D413259A46990580E213A SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x1081 JUMPI PUSH1 0x80 SHR SWAP3 PUSH2 0x10FC JUMP JUMPDEST PUSH17 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0x10F1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP2 PUSH2 0x10BA JUMP JUMPDEST PUSH1 0x0 NOT DUP3 DUP3 MULMOD SWAP1 DUP3 DUP2 MUL SWAP1 DUP2 DUP1 DUP5 LT SWAP4 SUB SWAP4 DUP4 DUP6 SUB SWAP4 PUSH1 0x0 SWAP6 EQ PUSH2 0x16C7 JUMPI PUSH9 0x10000000000000000 SWAP2 DUP5 DUP4 GT ISZERO PUSH2 0x16C3 JUMPI MULMOD SWAP2 DUP2 DUP4 GT DUP5 DUP2 DUP4 SUB SWAP6 PUSH2 0x16AF JUMPI POP DUP5 PUSH1 0xC0 SHL SWAP5 DUP6 DIV PUSH1 0x1 PUSH1 0xC0 SHL EQ SWAP2 EQ OR ISZERO PUSH2 0x1081 JUMPI SUB PUSH1 0x40 SHR OR DUP1 DUP1 DIV PUSH1 0x1 EQ DUP2 ISZERO OR ISZERO PUSH2 0x1081 JUMPI SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP POP PUSH1 0x40 SHR SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x80 SHL SWAP3 SWAP2 PUSH1 0x0 NOT DUP3 DUP6 MULMOD SWAP4 DUP3 PUSH1 0x80 SHL SWAP3 DUP4 DUP1 DUP8 LT SWAP7 SUB SWAP6 DUP1 DUP8 SUB SWAP7 EQ PUSH2 0x1817 JUMPI DUP6 DUP4 GT ISZERO PUSH2 0x241 JUMPI DUP3 SWAP2 MULMOD SWAP1 DUP1 NOT PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x1081 JUMPI DUP2 AND DUP1 SWAP2 DIV SWAP2 PUSH2 0x172D PUSH1 0x0 SWAP7 PUSH1 0x1 DUP5 DUP1 DUP11 SUB DIV ADD SWAP1 DUP7 DUP5 GT SWAP1 SUB PUSH2 0x106E JUMP JUMPDEST SWAP3 DUP1 PUSH1 0x3 MUL SWAP7 PUSH1 0x3 DUP9 DIV DUP3 SUB PUSH2 0x16AF JUMPI PUSH1 0x2 DUP1 SWAP9 XOR PUSH2 0x174C DUP2 DUP5 PUSH2 0x106E JUMP JUMPDEST DUP10 SUB SWAP1 DUP10 DUP3 GT PUSH2 0x1803 JUMPI SWAP1 PUSH2 0x1760 SWAP2 PUSH2 0x106E JUMP JUMPDEST PUSH2 0x176A DUP2 DUP5 PUSH2 0x106E JUMP JUMPDEST DUP10 SUB SWAP1 DUP10 DUP3 GT PUSH2 0x1803 JUMPI SWAP1 PUSH2 0x177E SWAP2 PUSH2 0x106E JUMP JUMPDEST PUSH2 0x1788 DUP2 DUP5 PUSH2 0x106E JUMP JUMPDEST DUP10 SUB SWAP1 DUP10 DUP3 GT PUSH2 0x1803 JUMPI SWAP1 PUSH2 0x179C SWAP2 PUSH2 0x106E JUMP JUMPDEST PUSH2 0x17A6 DUP2 DUP5 PUSH2 0x106E JUMP JUMPDEST DUP10 SUB SWAP1 DUP10 DUP3 GT PUSH2 0x1803 JUMPI SWAP1 PUSH2 0x17BA SWAP2 PUSH2 0x106E JUMP JUMPDEST PUSH2 0x17C4 DUP2 DUP5 PUSH2 0x106E JUMP JUMPDEST DUP10 SUB SWAP1 DUP10 DUP3 GT PUSH2 0x1803 JUMPI PUSH2 0x17E2 SWAP2 PUSH2 0x17DB SWAP2 PUSH2 0x106E JUMP JUMPDEST DUP1 SWAP4 PUSH2 0x106E JUMP JUMPDEST DUP9 SUB SWAP8 DUP9 GT PUSH2 0x16AF JUMPI POP PUSH2 0x1222 SWAP6 SWAP7 PUSH2 0x17FA SWAP2 PUSH2 0x106E JUMP JUMPDEST SWAP4 SUB DIV OR PUSH2 0x106E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST POP POP DUP1 SWAP3 SWAP4 POP ISZERO PUSH2 0x241 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP3 DUP3 MULMOD DUP3 DUP3 MUL SWAP1 DUP2 DUP1 DUP3 LT SWAP2 SUB SWAP4 DUP2 DUP6 SUB SWAP2 PUSH1 0x0 SWAP6 EQ PUSH2 0x188A JUMPI PUSH1 0x1 PUSH1 0x80 SHL SWAP4 DUP3 DUP6 GT ISZERO PUSH2 0x16C3 JUMPI SWAP1 DUP5 SWAP2 MULMOD SWAP3 DUP3 DUP5 GT SWAP1 DUP6 DUP3 DUP5 SUB SWAP7 PUSH2 0x16AF JUMPI POP DUP6 PUSH1 0x80 SHL SWAP6 DUP7 DIV EQ SWAP2 EQ OR ISZERO PUSH2 0x1081 JUMPI SUB PUSH1 0x80 SHR OR DUP1 DUP1 DIV PUSH1 0x1 EQ DUP2 ISZERO OR ISZERO PUSH2 0x1081 JUMPI SWAP1 JUMP JUMPDEST POP POP PUSH1 0x80 SHR SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xC0 SHL SWAP3 SWAP2 PUSH1 0x0 NOT DUP3 DUP6 MULMOD SWAP4 DUP3 PUSH1 0xC0 SHL SWAP3 DUP4 DUP1 DUP8 LT SWAP7 SUB SWAP6 DUP1 DUP8 SUB SWAP7 EQ PUSH2 0x1817 JUMPI DUP6 DUP4 GT ISZERO PUSH2 0x241 JUMPI DUP3 SWAP2 MULMOD SWAP1 DUP1 NOT PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x1081 JUMPI DUP2 AND DUP1 SWAP2 DIV SWAP2 PUSH2 0x172D PUSH1 0x0 SWAP7 PUSH1 0x1 DUP5 DUP1 DUP11 SUB DIV ADD SWAP1 DUP7 DUP5 GT SWAP1 SUB PUSH2 0x106E JUMP JUMPDEST PUSH1 0x0 NOT DUP3 DUP3 MULMOD SWAP1 DUP3 DUP2 MUL SWAP1 DUP2 DUP1 DUP5 LT SWAP4 SUB SWAP4 DUP4 DUP6 SUB SWAP4 PUSH1 0x0 SWAP6 EQ PUSH2 0x195B JUMPI PUSH1 0x1 PUSH1 0xC0 SHL SWAP2 DUP5 DUP4 GT ISZERO PUSH2 0x16C3 JUMPI MULMOD SWAP2 DUP2 DUP4 GT DUP5 DUP2 DUP4 SUB SWAP6 PUSH2 0x16AF JUMPI POP DUP5 PUSH1 0x40 SHL SWAP5 DUP6 DIV PUSH9 0x10000000000000000 EQ SWAP2 EQ OR ISZERO PUSH2 0x1081 JUMPI SUB PUSH1 0xC0 SHR OR DUP1 DUP1 DIV PUSH1 0x1 EQ DUP2 ISZERO OR ISZERO PUSH2 0x1081 JUMPI SWAP1 JUMP JUMPDEST POP POP PUSH1 0xC0 SHR SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A ISZERO DUP9 EXTCODECOPY SSTORE SGT RETURNDATACOPY 0x1E 0xD9 0xB1 0x5C JUMPDEST 0x2B ADD 0xC1 0xDD SWAP7 0xBE PUSH32 0x9707E2ACE39F99F64B2D22E68364736F6C634300081200330000000000000000 ","sourceMap":"1838:5433:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;4677:30;;;;;1838:5433;;;;-1:-1:-1;;;;;4746:8:13;;1838:5433;;;;;;;;4746:26;;;;1838:5433;;4746:26;;1838:5433;4746:26;;;;1838:5433;4746:26;;;;;;;;;1838:5433;4746:26;;;1838:5433;;;;4810:27;;;;1838:5433;4810:27;;1838:5433;4810:27;;1838:5433;4810:27;;;;;;;;;1838:5433;;;4810:27;;;1838:5433;;;;;;;;;;;;;;;4870:46;;1838:5433;4870:46;;1838:5433;;;;;;;;;;4870:46;;;;;;;;;1838:5433;4870:46;;;1838:5433;;;;;-1:-1:-1;;;4944:43:13;;-1:-1:-1;;;;;1838:5433:13;;;;4944:43;;1838:5433;;;;;;;;;;;;;;;;;;;-1:-1:-1;1838:5433:13;;;;;;;4944:43;;:7;;1838:5433;4944:43;;;;;;;1838:5433;4944:43;;;1838:5433;5017:31;1838:5433;5017:31;5070:136;5017:31;;:::i;:::-;1838:5433;;;5070:136;;:::i;:::-;1838:5433;;;;;;4944:43;;;;;;;;;;;;;;;;:::i;:::-;;;1838:5433;;;;;5017:31;1838:5433;5070:136;1838:5433;;:::i;:::-;4944:43;;;;;1838:5433;;;;4944:43;;;;;;1838:5433;;;;;;;;;4870:46;;;;;;;;;;;;;;;:::i;:::-;;;1838:5433;;;;;4944:43;1838:5433;;4870:46;;;;;;;;4810:27;1838:5433;4810:27;;;;;;;;;-1:-1:-1;4810:27:13;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;4746:26;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;1838:5433;;;;;;-1:-1:-1;;1838:5433:13;;;;;;;-1:-1:-1;;;;;2044:42:13;1838:5433;;;;;;;;;;-1:-1:-1;;1838:5433:13;;;;;;;-1:-1:-1;;;;;1998:39:13;1838:5433;;;;;;;;;;-1:-1:-1;;1838:5433:13;;;;;-1:-1:-1;;;;;1838:5433:13;;;;;;;;;;;;;;;-1:-1:-1;;1838:5433:13;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1838:5433:13;;2743:10;:19;1838:5433;;2815:25;1838:5433;;;;;;;;;;;;;;;;;;2815:25;1838:5433;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1838:5433:13;;;;;;-1:-1:-1;;;;;1838:5433:13;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;6116:26;;;;1838:5433;;;6116:26;;1838:5433;;6116:8;1838:5433;6116:8;-1:-1:-1;;;;;6116:8:13;1838:5433;6116:26;;;;;;;1838:5433;6116:26;;;1838:5433;;;;6180:27;;;1838:5433;;;6180:27;;1838:5433;;6116:8;1838:5433;6116:8;-1:-1:-1;;;;;6116:8:13;1838:5433;6180:27;;;;;;;1838:5433;6180:27;;;1838:5433;;;;;;;;6243:146;;1838:5433;;;6243:146;;1838:5433;6307:4;1838:5433;;;;6307:4;1838:5433;;;;;;;;;;;;;;;;6116:8;1838:5433;6116:8;1838:5433;-1:-1:-1;;;;;6116:8:13;1838:5433;6243:146;;;;;;;1838:5433;6243:146;;;1838:5433;-1:-1:-1;1838:5433:13;;-1:-1:-1;;;1838:5433:13;2032:58:12;;;-1:-1:-1;;;;;6446:10:13;1838:5433;;2032:58:12;;1838:5433:13;;;;;;;;2032:58:12;;-1:-1:-1;;;;2032:58:12;1838:5433:13;;2032:58:12;:::i;:::-;1838:5433:13;2021:70:12;;2032:58;;2021:70;;;;1838:5433:13;;;;;;;;;;;;;;2032:58:12;1838:5433:13;;-1:-1:-1;;1838:5433:13;;;;;:::i;:::-;;;;;;;;;;2109:57:12;;;1838:5433:13;;;;;6500:30;1838:5433;6500:30;;;1838:5433;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1838:5433:13;;;;;;;;;;-1:-1:-1;;;;;1838:5433:13;;;6592:373;;1838:5433;;;;;6592:373;;1838:5433;6307:4;1838:5433;6592:373;;1838:5433;;;6592:373;;1838:5433;;6592:373;;1838:5433;;;;6592:373;;1838:5433;;;6592:373;;1838:5433;-1:-1:-1;;;;;1838:5433:13;;;;;;;6990:35;;1838:5433;;;;;6990:35;;1838:5433;6592:373;1838:5433;6592:373;;1838:5433;;;;;;;;6592:373;;1838:5433;;;;;;6592:373;1838:5433;6592:373;;1838:5433;;;;;;;6592:373;;1838:5433;;;;;;6592:373;;1838:5433;;;;;;6592:373;;1838:5433;;;;;6592:373;1838:5433;;;;;;;6446:10;1838:5433;6446:10;1838:5433;-1:-1:-1;;;;;6446:10:13;1838:5433;6990:35;;;;;;;1838:5433;6990:35;;;1838:5433;-1:-1:-1;1838:5433:13;;-1:-1:-1;;;7038:54:13;;-1:-1:-1;;;;;6116:8:13;1838:5433;;;7038:54;;1838:5433;;;;;;;;;;;;;;;;;-1:-1:-1;;1838:5433:13;7038:54;;;;;;;;1838:5433;;-1:-1:-1;;;;;1838:5433:13;;;;;;7118:142;;1838:5433;;;7118:142;;1838:5433;6307:4;1838:5433;;;;;;;;;;;;;;;;;;;;6116:8;1838:5433;6116:8;1838:5433;-1:-1:-1;;;;;6116:8:13;1838:5433;7118:142;;;;;;1838:5433;;;7118:142;;;1838:5433;;;;;;;;;;;;7118:142;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;7038:54;;;1838:5433;7038:54;1838:5433;7038:54;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;6990:35;;;;1838:5433;6990:35;;1838:5433;6990:35;;;;;;1838:5433;6990:35;;;:::i;:::-;;;1838:5433;;;;;6990:35;;;;;;;-1:-1:-1;6990:35:13;;1838:5433;;;;;;;;;;;;;;;-1:-1:-1;;;1838:5433:13;;;;;;;;;;;;-1:-1:-1;;;1838:5433:13;;;;;;;2109:57:12;1838:5433:13;;2121:16:12;;;-1:-1:-1;2121:44:12;;;;2109:57;;;;;;2121:44;2141:24;;;1838:5433:13;2141:24:12;;;;;;;;:::i;:::-;2121:44;;;;1838:5433:13;;;;6243:146;;;;;1838:5433;6243:146;1838:5433;6243:146;;;;;;;:::i;:::-;;;;;;6180:27;;;;;1838:5433;6180:27;1838:5433;6180:27;;;;;;;:::i;:::-;;;;;;;;;6116:26;;;;;1838:5433;6116:26;1838:5433;6116:26;;;;;;;:::i;:::-;;;;;;;;;1838:5433;;;;;;;:::i;:::-;;;;;;;3536:30;;;;;1838:5433;;;;-1:-1:-1;;;;;3605:8:13;;1838:5433;;;;;;;;3605:26;;;;;1838:5433;3605:26;;1838:5433;3605:26;;;;1838:5433;3605:26;;;;;;;;;1838:5433;3605:26;;;1838:5433;;;;3669:27;;;1838:5433;;3669:27;;1838:5433;3669:27;;1838:5433;3669:27;;;;;;;;;1838:5433;;;3669:27;;;1838:5433;;;;;;;;;;;;;;;3728:44;;1838:5433;3728:44;;1838:5433;;;;;;;;;;3728:44;;;;;;;;;1838:5433;3728:44;;;1838:5433;;;;;-1:-1:-1;;;3800:43:13;;-1:-1:-1;;;;;1838:5433:13;;;;3800:43;;1838:5433;;;;;;;;;;;;;;;;;;;-1:-1:-1;1838:5433:13;;;;;;;3800:43;1838:5433;3728:44;;;;;;;;;;;;;;;:::i;:::-;;;1838:5433;;;;;3800:43;1838:5433;;3728:44;;;;;;;;3669:27;1838:5433;3669:27;;;;;;;;;-1:-1:-1;3669:27:13;;;;;;:::i;:::-;;;;;;;;;;3605:26;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;1838:5433;;;;;;-1:-1:-1;;1838:5433:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;1838:5433:13;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;2032:58:12;;;1838:5433:13;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;1838:5433:13;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;:::o;:::-;;;;1020:1:15;1838:5433:13;;;;;1020:1:15;1838:5433:13;;;;1143:1:15;1838:5433:13;;;;;;;:::o;808:1375:15:-;;1020:1;1838:5433:13;;;;;;;;;;;;;;;;;;;;;;;;1082:1:15;1838:5433:13;;;;;;;;;;;;;1094:27:15;;;:::i;:::-;1838:5433:13;1131:18:15;;;;:::i;:::-;1838:5433:13;;;;;;;;;1282:41:15;;1838:5433:13;;;;;1282:41:15;;;;;;1838:5433:13;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1282:41:15;;;;1838:5433:13;;1282:41:15;;;;;;;;1020:1;;1282:41;;;1838:5433:13;1363:18:15;;;1384;1363;;;:::i;:::-;1838:5433:13;1384:18:15;;:::i;:::-;1838:5433:13;;;;;;;;;;;;;;;;;;1458:67:15;1528:37;1458:67;;;;:::i;:::-;1838:5433:13;;1528:37:15;;:::i;:::-;1838:5433:13;;;;;;;;;;;;;;;1082:1:15;1838:5433:13;1716:24:15;1020:1;1716:24;;:87;;;;1838:5433:13;1699:135:15;;;1838:5433:13;;;;-1:-1:-1;1838:5433:13;;;;;;;;-1:-1:-1;;1838:5433:13;;;;;808:1375:15:o;1838:5433:13:-;;;;;;1020:1:15;1838:5433:13;;1020:1:15;1838:5433:13;;-1:-1:-1;;;1838:5433:13;;;;;;;;1699:135:15;1838:5433:13;-1:-1:-1;;1838:5433:13;;;;-1:-1:-1;;1838:5433:13;;1699:135:15;;1838:5433:13;-1:-1:-1;;;1838:5433:13;;;;;;;;1716:87:15;1838:5433:13;;;;1020:1:15;1838:5433:13;;;;1757:45:15;;1716:87;;;1838:5433:13;-1:-1:-1;;;1838:5433:13;;;;;;;;1282:41:15;;;;;;;;;;;;;;;:::i;:::-;;;1838:5433:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;1282:41:15;;;;;;;;1838:5433:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1282:41:15;1838:5433:13;;;;;;;;;;;;;;;;;;-1:-1:-1;1838:5433:13;;-1:-1:-1;1838:5433:13;;;;;;;;1143:1:15;1838:5433:13;;;;-1:-1:-1;;;1838:5433:13;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;2687:1017:15;;;;;1838:5433:13;;1490:81:16;-1:-1:-1;1490:8:16;;:81;-1:-1:-1;;;;;;1838:5433:13;;;;;-1:-1:-1;1838:5433:13;1490:81:16;477:7;1589:36;;637:9;;1668:3;1658:13;;:18;1668:3;;637:9;1691:34;1658:117;637:9;1789:13;1838:5433:13;1789:13:16;;1785:95;;1658:117;1904:3;1894:13;;;;1890:95;;1658:117;2009:3;1999:13;;1995:95;;1658:117;2114:4;2104:14;;2100:96;;1658:117;2220:4;2210:14;;2206:96;;1658:117;2326:4;2316:14;;2312:96;;1658:117;2432:4;2422:14;;;;2418:96;;1658:117;2538:5;2528:15;;2524:97;;1658:117;2645:5;2635:15;;2631:97;;1658:117;2752:5;2742:15;;2738:97;;1658:117;2859:5;2849:15;;2845:97;;1658:117;2966:6;2956:16;;2952:98;;1658:117;3074:6;3064:16;;3060:98;;1658:117;3182:6;3172:16;;3168:98;;1658:117;3290:6;3280:16;;3276:98;;1658:117;3398:7;3388:17;;3384:98;;1658:117;3506:7;3496:17;;3492:97;;1658:117;3613:7;3603:17;;3599:95;;1658:117;3718:7;3708:17;3704:90;;1658:117;3809:8;-1:-1:-1;;3805:47:16;;1658:117;637:9;1838:5433:13;2220:4:16;1838:5433:13;4215:30:16;637:9;4215:22;:30;637:9;;;1838:5433:13;-1:-1:-1;4215:30:16;1838:5433:13;;;;;;;;-1:-1:-1;1838:5433:13;;-1:-1:-1;;;;;1838:5433:13;;;;;3049:33:15;;;1838:5433:13;;3118:36:15;;;;:::i;:::-;3182:156;1838:5433:13;;;3182:22:15;1838:5433:13;;;3223:48:15;1838:5433:13;;3223:48:15;;:::i;:::-;3045:653;2687:1017::o;3182:156::-;3290:48;1838:5433:13;;3290:48:15;:::i;3045:653::-;3389:114;;;;:::i;:::-;3531:156;1838:5433:13;;;3531:22:15;1838:5433:13;;;3572:48:15;1838:5433:13;;3572:48:15;;:::i;3531:156::-;3639:48;1838:5433:13;;3639:48:15;:::i;1838:5433:13:-;;;;;;-1:-1:-1;1838:5433:13;;;-1:-1:-1;1838:5433:13;4215:30:16;1838:5433:13;1668:3:16;4215:30;;3805:47;637:9;;;;;-1:-1:-1;;637:9:16;;3805:47;;637:9;1838:5433:13;;;;;-1:-1:-1;1838:5433:13;;;-1:-1:-1;1838:5433:13;3704:90:16;3761:25;;;;1838:5433:13;;;;;;;;;;;;;;;;;-1:-1:-1;3704:90:16;;1838:5433:13;;;;;;-1:-1:-1;1838:5433:13;;;-1:-1:-1;1838:5433:13;3599:95:16;3656:30;;1838:5433:13;;;;;;;;;;;;;;;;;;3599:95:16;;1838:5433:13;;;;;;-1:-1:-1;1838:5433:13;;;-1:-1:-1;1838:5433:13;3492:97:16;3549:32;;1838:5433:13;;;;;;;;;;;;;;;;;3492:97:16;;;3384:98;3441:33;;1838:5433:13;;;;;;;;;;;;;;;;;3384:98:16;;;3276;3332:34;;1838:5433:13;;;;;;;;;;;;;;;;;3276:98:16;;;3168;3224:34;;1838:5433:13;;;;;;;;;;;;;;;;;3168:98:16;;;3060;3116:34;;1838:5433:13;;;;;;;;;;;;;;;;;3060:98:16;;;2952;3008:34;;1838:5433:13;;;;;;;;;;;;;;;;;2952:98:16;;;2845:97;2900:34;;1838:5433:13;;;;;;;;;;;;;;;;;2845:97:16;;;2738;2793:34;;1838:5433:13;;;;;;;;;;;;;;;;;2738:97:16;;;2631;2686:34;;1838:5433:13;;;;;;;;;;;;;;;;;2631:97:16;;;2524;2579:34;;1838:5433:13;;;;;;;;;;;;;;;;;2524:97:16;;;2418:96;2472:34;;1838:5433:13;;;;;;;;;;;;;;;;;2418:96:16;;;2312;2366:34;;1838:5433:13;;;;;;;;;;;;;;;2405:3:16;1838:5433:13;2312:96:16;;;2206;2260:34;;1838:5433:13;;;;;;;;;;;;;;;2299:3:16;1838:5433:13;2206:96:16;;;2100;2154:34;;1838:5433:13;;;;;;;;;;;;;;;2193:3:16;1838:5433:13;2100:96:16;;;1995:95;2048:34;;1838:5433:13;;;;;;;;;;;;;;;2087:3:16;1838:5433:13;1995:95:16;;;1890;1943:34;;1838:5433:13;;;;;;;;;;;;;;;1982:3:16;1838:5433:13;1890:95:16;;;1785;1838:34;;:5433:13;;;;;;;;;;;;;;;1877:3:16;1838:5433:13;1785:95:16;;;1658:117;637:9;-1:-1:-1;;;1658:117:16;;637:9;1838:5433:13;;-1:-1:-1;;;637:9:16;;;;;;;;;;;1838:5433:13;-1:-1:-1;;;1838:5433:13;;;637:9:16;;;;1490:81;;;;742:3782:14;-1:-1:-1;;1318:150:14;;;;;;;;;;;;;;;;;;1540:10;1838:5433:13;1540:10:14;;1536:179;;3482:7:15;1828:19:14;;;;1838:5433:13;;;2152:71:14;2287:117;;;;;;;;1838:5433:13;;;;;;;;;;-1:-1:-1;;;1838:5433:13;;;;;;;2287:117:14;2790:58;;3108:21;1838:5433:13;;;;;;;;;;;742:3782:14;:::o;1838:5433:13:-;-1:-1:-1;;;1838:5433:13;;;;;;;;;;;;1536:179:14;-1:-1:-1;;1604:74:14;;;1691:13;-1:-1:-1;;1691:13:14:o;742:3782::-;-1:-1:-1;;;3655:8:15;742:3782:14;-1:-1:-1;;742:3782:14;3655:8:15;1318:150:14;;;;;;;;;;;;;;;;1540:10;;1536:179;;1828:19;;;1838:5433:13;;;2152:71:14;;;2583:12;;;2598:1;1838:5433:13;;;;;;;2568:32:14;;2656:70;;;1838:5433:13;3117:12:14;1838:5433:13;3027:72:14;2598:1;3027:72;;;;;;2287:117;;;;;;3117:12;:::i;:::-;1838:5433:13;;3478:1:14;1838:5433:13;;3478:1:14;1838:5433:13;;;;;;3497:1:14;3477:21;;;3724:17;;;;:::i;:::-;1838:5433:13;;;;;;;;3713:28:14;;;;:::i;:::-;3782:17;;;;:::i;:::-;1838:5433:13;;;;;;;;3771:28:14;;;;:::i;:::-;3841:17;;;;:::i;:::-;1838:5433:13;;;;;;;;3830:28:14;;;;:::i;:::-;3900:17;;;;:::i;:::-;1838:5433:13;;;;;;;;3889:28:14;;;;:::i;:::-;3959:17;;;;:::i;:::-;1838:5433:13;;;;;;;;4019:17:14;3948:28;;;;:::i;:::-;4019:17;;;:::i;:::-;1838:5433:13;;;;;;;4008:28:14;4483:11;4008:28;;;;;:::i;:::-;2287:117;;2790:58;3108:21;4483:11;:::i;1838:5433:13:-;-1:-1:-1;;;1838:5433:13;;;;;;;;1536:179:14;1574:15;;;;;;;1838:5433:13;;1604:74:14;1691:13;:::o;742:3782::-;-1:-1:-1;;1318:150:14;;;;;;;;;;;;;;;;;1540:10;1838:5433:13;1540:10:14;;1536:179;;-1:-1:-1;;;1828:19:14;;;;1838:5433:13;;;2152:71:14;;;;2287:117;;;;;;;;;1838:5433:13;;;;;2790:58:14;1838:5433:13;;;;;;;;;;;2287:117:14;2790:58;;3108:21;1838:5433:13;;;;;;;;;;;742:3782:14;:::o;1536:179::-;-1:-1:-1;;1604:74:14;;;1691:13;-1:-1:-1;;1691:13:14:o;742:3782::-;-1:-1:-1;;;3306:8:15;742:3782:14;-1:-1:-1;;742:3782:14;3306:8:15;1318:150:14;;;;;;;;;;;;;;;;1540:10;;1536:179;;1828:19;;;1838:5433:13;;;2152:71:14;;;2583:12;;;2598:1;1838:5433:13;;;;;;;2568:32:14;;2656:70;;;1838:5433:13;3117:12:14;1838:5433:13;3027:72:14;2598:1;3027:72;;;;;;2287:117;;;;;;3117:12;:::i;742:3782::-;-1:-1:-1;;1318:150:14;;;;;;;;;;;;;;;;;;1540:10;1838:5433:13;1540:10:14;;1536:179;;-1:-1:-1;;;1828:19:14;;;;1838:5433:13;;;2152:71:14;2287:117;;;;;;;;1838:5433:13;;;;;;;;;;3027:72:14;1838:5433:13;;;;;;;2287:117:14;2790:58;;3108:21;1838:5433:13;;;;;;;;;;;742:3782:14;:::o;1536:179::-;-1:-1:-1;;1604:74:14;;;1691:13;-1:-1:-1;;1691:13:14:o"},"gasEstimates":{"creation":{"codeDepositCost":"1311200","executionCost":"infinite","totalCost":"infinite"},"external":{"factory()":"infinite","getInputAmount(uint256,uint256,bytes)":"infinite","getOutputAmount(uint256,uint256,bytes)":"infinite","owner()":"2364","poolFee()":"2262","setPoolFee(uint24)":"25837","swap(uint256,uint256,uint256,address,uint256,bytes)":"infinite","swapRouter()":"infinite"}},"methodIdentifiers":{"factory()":"c45a0155","getInputAmount(uint256,uint256,bytes)":"c6fe9549","getOutputAmount(uint256,uint256,bytes)":"532bb192","owner()":"8da5cb5b","poolFee()":"089fe6aa","setPoolFee(uint24)":"73dd250c","swap(uint256,uint256,uint256,address,uint256,bytes)":"55a68e10","swapRouter()":"c31c9c07"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IYieldBox\",\"name\":\"_yieldBox\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_old\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"PoolFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenOutId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dexData\",\"type\":\"bytes\"}],\"name\":\"getInputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenInId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dexData\",\"type\":\"bytes\"}],\"name\":\"getOutputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_newFee\",\"type\":\"uint24\"}],\"name\":\"setPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenInId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dexData\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getInputAmount(uint256,uint256,bytes)\":{\"details\":\"dexData examples:     - for UniV2, it should contain address[] swapPath     - for UniV3, it should contain uint256 tokenInId\",\"params\":{\"dexData\":\"Custom DEX data for query execution\",\"shareOut\":\"Shares out to compute the amount for\",\"tokenOutId\":\"YieldBox asset id\"}},\"getOutputAmount(uint256,uint256,bytes)\":{\"details\":\"dexData examples:     - for UniV2, it should contain address[] swapPath     - for Curve, it should contain uint256[] tokenIndexes     - for UniV3, it should contain uint256 tokenOutId\",\"params\":{\"dexData\":\"Custom DEX data for query execution\",\"shareIn\":\"Shares to get the amount for\",\"tokenInId\":\"YieldBox asset id\"}},\"setPoolFee(uint24)\":{\"params\":{\"_newFee\":\"the new value\"}},\"swap(uint256,uint256,uint256,address,uint256,bytes)\":{\"details\":\"returns both amount and sharesdexData examples:     - for UniV2, it should contain address[] swapPath     - for Curve, it should contain uint256[] tokenIndexes     - for UniV3, it should contain uint256 deadline\",\"params\":{\"amountOutMin\":\"Minimum amount to be received\",\"dexData\":\"Custom DEX data for query execution\",\"shareIn\":\"Shares to be swapped\",\"to\":\"Receiver address\",\"tokenInId\":\"YieldBox asset id\",\"tokenOutId\":\"YieldBox asset id\"}}},\"title\":\"UniswapV3 swapper contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"creates a new UniswapV3Swapper contract\"},\"getInputAmount(uint256,uint256,bytes)\":{\"notice\":\"returns necessary input amount for a fixed output amount\"},\"getOutputAmount(uint256,uint256,bytes)\":{\"notice\":\"returns the possible output amount for input share\"},\"setPoolFee(uint24)\":{\"notice\":\"sets a new pool fee\"},\"swap(uint256,uint256,uint256,address,uint256,bytes)\":{\"notice\":\"swaps token in with token out\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swapper/UniswapV3Swapper.sol\":\"UniswapV3Swapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title QuoterV2 Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.\\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoterV2 {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInput(bytes memory path, uint256 amountIn)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    struct QuoteExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountIn The desired input amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160[] memory sqrtPriceX96AfterList,\\n            uint32[] memory initializedTicksCrossedList,\\n            uint256 gasEstimate\\n        );\\n\\n    struct QuoteExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amount;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// fee The fee of the token pool to consider for the pair\\n    /// amountOut The desired output amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountIn,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n}\\n\",\"keccak256\":\"0x7e931f0cd34811851031c4f1318f59b4a4b427a2d2e2968b8e5ed87a9f7f89d6\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Swapper/UniswapV3Swapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol\\\";\\r\\n\\r\\nimport \\\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/ISwapper.sol\\\";\\r\\nimport \\\"./libraries/OracleLibrary.sol\\\";\\r\\n\\r\\n/*\\r\\n\\r\\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____        \\r\\n _\\\\///////\\\\\\\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/////\\\\\\\\\\\\///______/\\\\\\\\\\\\///\\\\\\\\\\\\________/\\\\\\\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__       \\r\\n  _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_      \\r\\n   _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\/\\\\\\\\\\\\______/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_     \\r\\n    _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\/////////________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \\r\\n     _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_________________\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_   \\r\\n      _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_________________\\\\/\\\\\\\\\\\\______\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\_____\\\\///\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\///\\\\\\\\\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_ \\r\\n        _______\\\\///________\\\\///________\\\\///__\\\\///______________\\\\///////////_______\\\\/////_____________\\\\/////////__\\\\///________\\\\///__\\r\\n*/\\r\\n\\r\\n/// @title UniswapV3 swapper contract\\r\\ncontract UniswapV3Swapper is ISwapper {\\r\\n    // ************ //\\r\\n    // *** VARS *** //\\r\\n    // ************ //\\r\\n    IYieldBox private immutable yieldBox;\\r\\n    ISwapRouter public immutable swapRouter;\\r\\n    IUniswapV3Factory public immutable factory;\\r\\n    address public owner;\\r\\n\\r\\n    uint24 public poolFee = 3000;\\r\\n\\r\\n    // ************** //\\r\\n    // *** EVENTS *** //\\r\\n    // ************** //\\r\\n    event PoolFee(uint256 _old, uint256 _new);\\r\\n\\r\\n    /// @notice creates a new UniswapV3Swapper contract\\r\\n    constructor(\\r\\n        IYieldBox _yieldBox,\\r\\n        ISwapRouter _swapRouter,\\r\\n        IUniswapV3Factory _factory\\r\\n    ) {\\r\\n        yieldBox = _yieldBox;\\r\\n        swapRouter = _swapRouter;\\r\\n        factory = _factory;\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @notice sets a new pool fee\\r\\n    /// @param _newFee the new value\\r\\n    function setPoolFee(uint24 _newFee) external {\\r\\n        require(msg.sender == owner, \\\"UniswapV3Swapper: not authorized\\\");\\r\\n        emit PoolFee(poolFee, _newFee);\\r\\n        poolFee = _newFee;\\r\\n    }\\r\\n\\r\\n    /// @notice returns the possible output amount for input share\\r\\n    /// @param tokenInId YieldBox asset id\\r\\n    /// @param shareIn Shares to get the amount for\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    ///     - for Curve, it should contain uint256[] tokenIndexes\\r\\n    ///     - for UniV3, it should contain uint256 tokenOutId\\r\\n    function getOutputAmount(\\r\\n        uint256 tokenInId,\\r\\n        uint256 shareIn,\\r\\n        bytes calldata dexData\\r\\n    ) external view override returns (uint256 amountOut) {\\r\\n        uint256 tokenOutId = abi.decode(dexData, (uint256));\\r\\n\\r\\n        (, address tokenIn, , ) = yieldBox.assets(tokenInId);\\r\\n        (, address tokenOut, , ) = yieldBox.assets(tokenOutId);\\r\\n\\r\\n        uint256 amountIn = yieldBox.toAmount(tokenInId, shareIn, false);\\r\\n\\r\\n        address pool = factory.getPool(tokenIn, tokenOut, poolFee);\\r\\n        (int24 tick, ) = OracleLibrary.consult(pool, 60);\\r\\n\\r\\n        amountOut = OracleLibrary.getQuoteAtTick(\\r\\n            tick,\\r\\n            uint128(amountIn),\\r\\n            tokenIn,\\r\\n            tokenOut\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice returns necessary input amount for a fixed output amount\\r\\n    /// @param tokenOutId YieldBox asset id\\r\\n    /// @param shareOut Shares out to compute the amount for\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    ///     - for UniV3, it should contain uint256 tokenInId\\r\\n    function getInputAmount(\\r\\n        uint256 tokenOutId,\\r\\n        uint256 shareOut,\\r\\n        bytes calldata dexData\\r\\n    ) external view override returns (uint256 amountIn) {\\r\\n        uint256 tokenInId = abi.decode(dexData, (uint256));\\r\\n\\r\\n        (, address tokenIn, , ) = yieldBox.assets(tokenInId);\\r\\n        (, address tokenOut, , ) = yieldBox.assets(tokenOutId);\\r\\n\\r\\n        uint256 amountOut = yieldBox.toAmount(tokenOutId, shareOut, false);\\r\\n\\r\\n        address pool = factory.getPool(tokenIn, tokenOut, poolFee);\\r\\n\\r\\n        (int24 tick, ) = OracleLibrary.consult(pool, 60);\\r\\n        amountIn = OracleLibrary.getQuoteAtTick(\\r\\n            tick,\\r\\n            uint128(amountOut),\\r\\n            tokenOut,\\r\\n            tokenIn\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice swaps token in with token out\\r\\n    /// @dev returns both amount and shares\\r\\n    /// @param tokenInId YieldBox asset id\\r\\n    /// @param tokenOutId YieldBox asset id\\r\\n    /// @param shareIn Shares to be swapped\\r\\n    /// @param to Receiver address\\r\\n    /// @param amountOutMin Minimum amount to be received\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    ///     - for Curve, it should contain uint256[] tokenIndexes\\r\\n    ///     - for UniV3, it should contain uint256 deadline\\r\\n    function swap(\\r\\n        uint256 tokenInId,\\r\\n        uint256 tokenOutId,\\r\\n        uint256 shareIn,\\r\\n        address to,\\r\\n        uint256 amountOutMin,\\r\\n        bytes calldata dexData\\r\\n    ) external override returns (uint256 amountOut, uint256 shareOut) {\\r\\n        (, address tokenIn, , ) = yieldBox.assets(tokenInId);\\r\\n        (, address tokenOut, , ) = yieldBox.assets(tokenOutId);\\r\\n\\r\\n        (uint256 amountIn, ) = yieldBox.withdraw(\\r\\n            tokenInId,\\r\\n            address(this),\\r\\n            address(this),\\r\\n            0,\\r\\n            shareIn\\r\\n        );\\r\\n\\r\\n        TransferHelper.safeApprove(tokenIn, address(swapRouter), amountIn);\\r\\n\\r\\n        uint256 deadline = abi.decode(dexData, (uint256));\\r\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\r\\n            .ExactInputSingleParams({\\r\\n                tokenIn: tokenIn,\\r\\n                tokenOut: tokenOut,\\r\\n                fee: poolFee,\\r\\n                recipient: address(this),\\r\\n                deadline: deadline,\\r\\n                amountIn: amountIn,\\r\\n                amountOutMinimum: amountOutMin,\\r\\n                sqrtPriceLimitX96: 0\\r\\n            });\\r\\n\\r\\n        amountOut = swapRouter.exactInputSingle(params);\\r\\n\\r\\n        IERC20(tokenOut).approve(address(yieldBox), amountOut);\\r\\n        (, shareOut) = yieldBox.depositAsset(\\r\\n            tokenOutId,\\r\\n            address(this),\\r\\n            to,\\r\\n            amountOut,\\r\\n            0\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x17f194a59595f2bdce965545cb6607674052654c7e8d34e2fbca2240a187895f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Swapper/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ef9d3c9331aca28f06868890b1587074ebd4d5caee46721f2ec4c46ce86b6a1\",\"license\":\"MIT\"},\"contracts/Swapper/libraries/OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.18;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./TickMath.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\n/// @title Oracle library\\n/// @notice Provides functions to integrate with V3 pool oracle\\nlibrary OracleLibrary {\\n    /// @notice Calculates time-weighted means of tick and liquidity for a given Uniswap V3 pool\\n    /// @param pool Address of the pool that we want to observe\\n    /// @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\\n    /// @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\\n    /// @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp\\n    function consult(\\n        address pool,\\n        uint32 secondsAgo\\n    )\\n        internal\\n        view\\n        returns (int24 arithmeticMeanTick, uint128 harmonicMeanLiquidity)\\n    {\\n        require(secondsAgo != 0, \\\"BP\\\");\\n\\n        uint32[] memory secondsAgos = new uint32[](2);\\n        secondsAgos[0] = secondsAgo;\\n        secondsAgos[1] = 0;\\n\\n        (\\n            int56[] memory tickCumulatives,\\n            uint160[] memory secondsPerLiquidityCumulativeX128s\\n        ) = IUniswapV3Pool(pool).observe(secondsAgos);\\n\\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n        uint160 secondsPerLiquidityCumulativesDelta = secondsPerLiquidityCumulativeX128s[\\n                1\\n            ] - secondsPerLiquidityCumulativeX128s[0];\\n\\n        arithmeticMeanTick = int24(tickCumulativesDelta / int32(secondsAgo));\\n        // Always round to negative infinity\\n        if (\\n            tickCumulativesDelta < 0 &&\\n            (tickCumulativesDelta % int32(secondsAgo) != 0)\\n        ) arithmeticMeanTick--;\\n\\n        // We are multiplying here instead of shifting to ensure that harmonicMeanLiquidity doesn't overflow uint128\\n        uint192 secondsAgoX160 = uint192(secondsAgo) * type(uint160).max;\\n        harmonicMeanLiquidity = uint128(\\n            secondsAgoX160 /\\n                (uint192(secondsPerLiquidityCumulativesDelta) << 32)\\n        );\\n    }\\n\\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\\n    /// @param tick Tick value used to calculate the quote\\n    /// @param baseAmount Amount of token to be converted\\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n    function getQuoteAtTick(\\n        int24 tick,\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken\\n    ) internal pure returns (uint256 quoteAmount) {\\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\\n\\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\\n        if (sqrtRatioX96 <= type(uint128).max) {\\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\\n        } else {\\n            uint256 ratioX128 = FullMath.mulDiv(\\n                sqrtRatioX96,\\n                sqrtRatioX96,\\n                1 << 64\\n            );\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\\n        }\\n    }\\n\\n    /// @notice Given a pool, it returns the number of seconds ago of the oldest stored observation\\n    /// @param pool Address of Uniswap V3 pool that we want to observe\\n    /// @return secondsAgo The number of seconds ago of the oldest observation stored for the pool\\n    function getOldestObservationSecondsAgo(\\n        address pool\\n    ) internal view returns (uint32 secondsAgo) {\\n        (\\n            ,\\n            ,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            ,\\n            ,\\n\\n        ) = IUniswapV3Pool(pool).slot0();\\n        require(observationCardinality > 0, \\\"NI\\\");\\n\\n        (uint32 observationTimestamp, , , bool initialized) = IUniswapV3Pool(\\n            pool\\n        ).observations((observationIndex + 1) % observationCardinality);\\n\\n        // The next index might not be initialized if the cardinality is in the process of increasing\\n        // In this case the oldest observation is always in index 0\\n        if (!initialized) {\\n            (observationTimestamp, , , ) = IUniswapV3Pool(pool).observations(0);\\n        }\\n\\n        secondsAgo = uint32(block.timestamp) - observationTimestamp;\\n    }\\n\\n    /// @notice Given a pool, it returns the tick value as of the start of the current block\\n    /// @param pool Address of Uniswap V3 pool\\n    /// @return The tick that the pool was in at the start of the current block\\n    function getBlockStartingTickAndLiquidity(\\n        address pool\\n    ) internal view returns (int24, uint128) {\\n        (\\n            ,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            ,\\n            ,\\n\\n        ) = IUniswapV3Pool(pool).slot0();\\n\\n        // 2 observations are needed to reliably calculate the block starting tick\\n        require(observationCardinality > 1, \\\"NEO\\\");\\n\\n        // If the latest observation occurred in the past, then no tick-changing trades have happened in this block\\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\\n        // We don't need to check if this observation is initialized - it is guaranteed to be.\\n        (\\n            uint32 observationTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n\\n        ) = IUniswapV3Pool(pool).observations(observationIndex);\\n        if (observationTimestamp != uint32(block.timestamp)) {\\n            return (tick, IUniswapV3Pool(pool).liquidity());\\n        }\\n\\n        uint256 prevIndex = (uint256(observationIndex) +\\n            observationCardinality -\\n            1) % observationCardinality;\\n        (\\n            uint32 prevObservationTimestamp,\\n            int56 prevTickCumulative,\\n            uint160 prevSecondsPerLiquidityCumulativeX128,\\n            bool prevInitialized\\n        ) = IUniswapV3Pool(pool).observations(prevIndex);\\n\\n        require(prevInitialized, \\\"ONI\\\");\\n\\n        uint32 delta = observationTimestamp - prevObservationTimestamp;\\n        tick = int24((tickCumulative - prevTickCumulative) / int32(delta));\\n        uint128 liquidity = uint128(\\n            (uint192(delta) * type(uint160).max) /\\n                (uint192(\\n                    secondsPerLiquidityCumulativeX128 -\\n                        prevSecondsPerLiquidityCumulativeX128\\n                ) << 32)\\n        );\\n        return (tick, liquidity);\\n    }\\n\\n    /// @notice Information for calculating a weighted arithmetic mean tick\\n    struct WeightedTickData {\\n        int24 tick;\\n        uint128 weight;\\n    }\\n\\n    /// @notice Given an array of ticks and weights, calculates the weighted arithmetic mean tick\\n    /// @param weightedTickData An array of ticks and weights\\n    /// @return weightedArithmeticMeanTick The weighted arithmetic mean tick\\n    /// @dev Each entry of `weightedTickData` should represents ticks from pools with the same underlying pool tokens. If they do not,\\n    /// extreme care must be taken to ensure that ticks are comparable (including decimal differences).\\n    /// @dev Note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price.\\n    function getWeightedArithmeticMeanTick(\\n        WeightedTickData[] memory weightedTickData\\n    ) internal pure returns (int24 weightedArithmeticMeanTick) {\\n        // Accumulates the sum of products between each tick and its weight\\n        int256 numerator;\\n\\n        // Accumulates the sum of the weights\\n        uint256 denominator;\\n\\n        // Products fit in 152 bits, so it would take an array of length ~2**104 to overflow this logic\\n        for (uint256 i; i < weightedTickData.length; i++) {\\n            numerator +=\\n                weightedTickData[i].tick *\\n                int256(uint256(weightedTickData[i].weight));\\n            denominator += weightedTickData[i].weight;\\n        }\\n\\n        weightedArithmeticMeanTick = int24(numerator / int256(denominator));\\n        // Always round to negative infinity\\n        if (numerator < 0 && (numerator % int256(denominator) != 0))\\n            weightedArithmeticMeanTick--;\\n    }\\n\\n    /// @notice Returns the \\\"synthetic\\\" tick which represents the price of the first entry in `tokens` in terms of the last\\n    /// @dev Useful for calculating relative prices along routes.\\n    /// @dev There must be one tick for each pairwise set of tokens.\\n    /// @param tokens The token contract addresses\\n    /// @param ticks The ticks, representing the price of each token pair in `tokens`\\n    /// @return syntheticTick The synthetic tick, representing the relative price of the outermost tokens in `tokens`\\n    function getChainedPrice(\\n        address[] memory tokens,\\n        int24[] memory ticks\\n    ) internal pure returns (int256 syntheticTick) {\\n        require(tokens.length - 1 == ticks.length, \\\"DL\\\");\\n        for (uint256 i = 1; i <= ticks.length; i++) {\\n            // check the tokens for address sort order, then accumulate the\\n            // ticks into the running synthetic tick, ensuring that intermediate tokens \\\"cancel out\\\"\\n            tokens[i - 1] < tokens[i]\\n                ? syntheticTick += ticks[i - 1]\\n                : syntheticTick -= ticks[i - 1];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5cd2d923a98807bff739083cb356ee11bcac0c456511c2d7f4aaa0987823bd79\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Swapper/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.18;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO =\\n        1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(\\n        int24 tick\\n    ) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0\\n            ? uint256(-int256(tick))\\n            : uint256(int256(tick));\\n        require(absTick <= uint256(uint24(MAX_TICK)), \\\"T\\\");\\n\\n        uint256 ratio = absTick & 0x1 != 0\\n            ? 0xfffcb933bd6fad37aa2d162d1a594001\\n            : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0)\\n            ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0)\\n            ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0)\\n            ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0)\\n            ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0)\\n            ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0)\\n            ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0)\\n            ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0)\\n            ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0)\\n            ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0)\\n            ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0)\\n            ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0)\\n            ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0)\\n            ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0)\\n            ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0)\\n            ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0)\\n            ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0)\\n            ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0)\\n            ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0)\\n            ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160(\\n            (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\\n        );\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(\\n        uint160 sqrtPriceX96\\n    ) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(\\n            sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\\n            \\\"R\\\"\\n        );\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24(\\n            (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\\n        );\\n        int24 tickHi = int24(\\n            (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\\n        );\\n\\n        tick = tickLow == tickHi\\n            ? tickLow\\n            : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\\n            ? tickHi\\n            : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xb6135d277a358e601310c81b16aef4635f45180ed661a0c26e97fa448fd02ced\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ISwapper {\\r\\n    /// @notice returns the possible output amount for input share\\r\\n    /// @param tokenInId YieldBox asset id\\r\\n    /// @param shareIn Shares to get the amount for\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    ///     - for Curve, it should contain uint256[] tokenIndexes\\r\\n    function getOutputAmount(\\r\\n        uint256 tokenInId,\\r\\n        uint256 shareIn,\\r\\n        bytes calldata dexData\\r\\n    ) external view returns (uint256 amountOut);\\r\\n\\r\\n    /// @notice returns necessary input amount for a fixed output amount\\r\\n    /// @param tokenOutId YieldBox asset id\\r\\n    /// @param shareOut Shares out to compute the amount for\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    function getInputAmount(\\r\\n        uint256 tokenOutId,\\r\\n        uint256 shareOut,\\r\\n        bytes calldata dexData\\r\\n    ) external view returns (uint256 amountIn);\\r\\n\\r\\n    /// @notice swaps token in with token out\\r\\n    /// @dev returns both amount and shares\\r\\n    /// @param tokenInId YieldBox asset id\\r\\n    /// @param tokenOutId YieldBox asset id\\r\\n    /// @param shareIn Shares to be swapped\\r\\n    /// @param to Receiver address\\r\\n    /// @param amountOutMin Minimum amount to be received\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    ///     - for Curve, it should contain uint256[] tokenIndexes\\r\\n    function swap(\\r\\n        uint256 tokenInId,\\r\\n        uint256 tokenOutId,\\r\\n        uint256 shareIn,\\r\\n        address to,\\r\\n        uint256 amountOutMin,\\r\\n        bytes calldata dexData\\r\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\r\\n}\\r\\n\",\"keccak256\":\"0x732f6f2f5468f60ac354afed655bc603ba7f26eb805166f011d9d985722cd55c\",\"license\":\"UNLICENSED\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title TokenType\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The YieldBox can hold different types of tokens:\\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\\nenum TokenType {\\n    Native,\\n    ERC20,\\n    ERC721,\\n    ERC1155,\\n    None\\n}\\n\",\"keccak256\":\"0xc6adb740ff68d4162214dfa9d406422a066ae2197b7f0c8df5daa7c84b4a10aa\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\n\\ninterface IYieldBox {\\n    function wrappedNative() external view returns (address wrappedNative);\\n\\n    function assets(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            TokenType tokenType,\\n            address contractAddress,\\n            address strategy,\\n            uint256 tokenId\\n        );\\n\\n    function nativeTokens(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            uint8 decimals\\n        );\\n\\n    function owner(uint256 assetId) external view returns (address owner);\\n\\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\\n\\n    function setApprovalForAsset(\\n        address operator,\\n        uint256 assetId,\\n        bool approved\\n    ) external;\\n\\n    function depositAsset(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function withdraw(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 assetId,\\n        uint256 share\\n    ) external;\\n\\n    function batchTransfer(\\n        address from,\\n        address to,\\n        uint256[] calldata assetIds_,\\n        uint256[] calldata shares_\\n    ) external;\\n\\n    function transferMultiple(\\n        address from,\\n        address[] calldata tos,\\n        uint256 assetId,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function toShare(\\n        uint256 assetId,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function toAmount(\\n        uint256 assetId,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x83e4c62b4059bbd59cac87eb714311f9304ce164ead7b45a7562067732fdc5d3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1004,"contract":"contracts/Swapper/UniswapV3Swapper.sol:UniswapV3Swapper","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":1007,"contract":"contracts/Swapper/UniswapV3Swapper.sol:UniswapV3Swapper","label":"poolFee","offset":20,"slot":"0","type":"t_uint24"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_uint24":{"encoding":"inplace","label":"uint24","numberOfBytes":"3"}}},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"creates a new UniswapV3Swapper contract"},"getInputAmount(uint256,uint256,bytes)":{"notice":"returns necessary input amount for a fixed output amount"},"getOutputAmount(uint256,uint256,bytes)":{"notice":"returns the possible output amount for input share"},"setPoolFee(uint24)":{"notice":"sets a new pool fee"},"swap(uint256,uint256,uint256,address,uint256,bytes)":{"notice":"swaps token in with token out"}},"version":1}}},"contracts/Swapper/libraries/FullMath.sol":{"FullMath":{"abi":[],"devdoc":{"details":"Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits","kind":"dev","methods":{},"title":"Contains 512-bit math functions","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212205fa8fe88ea332fddefac05e0540f3f9e5818c489446471d758f2c754414684ac64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F 0xA8 INVALID DUP9 0xEA CALLER 0x2F 0xDD 0xEF 0xAC SDIV 0xE0 SLOAD 0xF EXTCODEHASH SWAP15 PC XOR 0xC4 DUP10 PREVRANDAO PUSH5 0x71D758F2C7 SLOAD COINBASE CHAINID DUP5 0xAC PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"355:4768:14:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212205fa8fe88ea332fddefac05e0540f3f9e5818c489446471d758f2c754414684ac64736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F 0xA8 INVALID DUP9 0xEA CALLER 0x2F 0xDD 0xEF 0xAC SDIV 0xE0 SLOAD 0xF EXTCODEHASH SWAP15 PC XOR 0xC4 DUP10 PREVRANDAO PUSH5 0x71D758F2C7 SLOAD COINBASE CHAINID DUP5 0xAC PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"355:4768:14:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"mulDiv(uint256,uint256,uint256)":"infinite","mulDivRoundingUp(uint256,uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Contains 512-bit math functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swapper/libraries/FullMath.sol\":\"FullMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Swapper/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ef9d3c9331aca28f06868890b1587074ebd4d5caee46721f2ec4c46ce86b6a1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision","version":1}}},"contracts/Swapper/libraries/OracleLibrary.sol":{"OracleLibrary":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Oracle library","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220d47fa21705537b10c0743eabdcfcb9c28aba93afe641e2a5325924564beb2a8264736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 PUSH32 0xA21705537B10C0743EABDCFCB9C28ABA93AFE641E2A5325924564BEB2A826473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"279:9563:15:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220d47fa21705537b10c0743eabdcfcb9c28aba93afe641e2a5325924564beb2a8264736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD4 PUSH32 0xA21705537B10C0743EABDCFCB9C28ABA93AFE641E2A5325924564BEB2A826473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"279:9563:15:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"consult(address,uint32)":"infinite","getBlockStartingTickAndLiquidity(address)":"infinite","getChainedPrice(address[] memory,int24[] memory)":"infinite","getOldestObservationSecondsAgo(address)":"infinite","getQuoteAtTick(int24,uint128,address,address)":"infinite","getWeightedArithmeticMeanTick(struct OracleLibrary.WeightedTickData memory[] memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Oracle library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides functions to integrate with V3 pool oracle\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swapper/libraries/OracleLibrary.sol\":\"OracleLibrary\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Swapper/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9ef9d3c9331aca28f06868890b1587074ebd4d5caee46721f2ec4c46ce86b6a1\",\"license\":\"MIT\"},\"contracts/Swapper/libraries/OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.18;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./TickMath.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\n/// @title Oracle library\\n/// @notice Provides functions to integrate with V3 pool oracle\\nlibrary OracleLibrary {\\n    /// @notice Calculates time-weighted means of tick and liquidity for a given Uniswap V3 pool\\n    /// @param pool Address of the pool that we want to observe\\n    /// @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\\n    /// @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\\n    /// @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp\\n    function consult(\\n        address pool,\\n        uint32 secondsAgo\\n    )\\n        internal\\n        view\\n        returns (int24 arithmeticMeanTick, uint128 harmonicMeanLiquidity)\\n    {\\n        require(secondsAgo != 0, \\\"BP\\\");\\n\\n        uint32[] memory secondsAgos = new uint32[](2);\\n        secondsAgos[0] = secondsAgo;\\n        secondsAgos[1] = 0;\\n\\n        (\\n            int56[] memory tickCumulatives,\\n            uint160[] memory secondsPerLiquidityCumulativeX128s\\n        ) = IUniswapV3Pool(pool).observe(secondsAgos);\\n\\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n        uint160 secondsPerLiquidityCumulativesDelta = secondsPerLiquidityCumulativeX128s[\\n                1\\n            ] - secondsPerLiquidityCumulativeX128s[0];\\n\\n        arithmeticMeanTick = int24(tickCumulativesDelta / int32(secondsAgo));\\n        // Always round to negative infinity\\n        if (\\n            tickCumulativesDelta < 0 &&\\n            (tickCumulativesDelta % int32(secondsAgo) != 0)\\n        ) arithmeticMeanTick--;\\n\\n        // We are multiplying here instead of shifting to ensure that harmonicMeanLiquidity doesn't overflow uint128\\n        uint192 secondsAgoX160 = uint192(secondsAgo) * type(uint160).max;\\n        harmonicMeanLiquidity = uint128(\\n            secondsAgoX160 /\\n                (uint192(secondsPerLiquidityCumulativesDelta) << 32)\\n        );\\n    }\\n\\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\\n    /// @param tick Tick value used to calculate the quote\\n    /// @param baseAmount Amount of token to be converted\\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n    function getQuoteAtTick(\\n        int24 tick,\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken\\n    ) internal pure returns (uint256 quoteAmount) {\\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\\n\\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\\n        if (sqrtRatioX96 <= type(uint128).max) {\\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\\n        } else {\\n            uint256 ratioX128 = FullMath.mulDiv(\\n                sqrtRatioX96,\\n                sqrtRatioX96,\\n                1 << 64\\n            );\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\\n        }\\n    }\\n\\n    /// @notice Given a pool, it returns the number of seconds ago of the oldest stored observation\\n    /// @param pool Address of Uniswap V3 pool that we want to observe\\n    /// @return secondsAgo The number of seconds ago of the oldest observation stored for the pool\\n    function getOldestObservationSecondsAgo(\\n        address pool\\n    ) internal view returns (uint32 secondsAgo) {\\n        (\\n            ,\\n            ,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            ,\\n            ,\\n\\n        ) = IUniswapV3Pool(pool).slot0();\\n        require(observationCardinality > 0, \\\"NI\\\");\\n\\n        (uint32 observationTimestamp, , , bool initialized) = IUniswapV3Pool(\\n            pool\\n        ).observations((observationIndex + 1) % observationCardinality);\\n\\n        // The next index might not be initialized if the cardinality is in the process of increasing\\n        // In this case the oldest observation is always in index 0\\n        if (!initialized) {\\n            (observationTimestamp, , , ) = IUniswapV3Pool(pool).observations(0);\\n        }\\n\\n        secondsAgo = uint32(block.timestamp) - observationTimestamp;\\n    }\\n\\n    /// @notice Given a pool, it returns the tick value as of the start of the current block\\n    /// @param pool Address of Uniswap V3 pool\\n    /// @return The tick that the pool was in at the start of the current block\\n    function getBlockStartingTickAndLiquidity(\\n        address pool\\n    ) internal view returns (int24, uint128) {\\n        (\\n            ,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            ,\\n            ,\\n\\n        ) = IUniswapV3Pool(pool).slot0();\\n\\n        // 2 observations are needed to reliably calculate the block starting tick\\n        require(observationCardinality > 1, \\\"NEO\\\");\\n\\n        // If the latest observation occurred in the past, then no tick-changing trades have happened in this block\\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\\n        // We don't need to check if this observation is initialized - it is guaranteed to be.\\n        (\\n            uint32 observationTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n\\n        ) = IUniswapV3Pool(pool).observations(observationIndex);\\n        if (observationTimestamp != uint32(block.timestamp)) {\\n            return (tick, IUniswapV3Pool(pool).liquidity());\\n        }\\n\\n        uint256 prevIndex = (uint256(observationIndex) +\\n            observationCardinality -\\n            1) % observationCardinality;\\n        (\\n            uint32 prevObservationTimestamp,\\n            int56 prevTickCumulative,\\n            uint160 prevSecondsPerLiquidityCumulativeX128,\\n            bool prevInitialized\\n        ) = IUniswapV3Pool(pool).observations(prevIndex);\\n\\n        require(prevInitialized, \\\"ONI\\\");\\n\\n        uint32 delta = observationTimestamp - prevObservationTimestamp;\\n        tick = int24((tickCumulative - prevTickCumulative) / int32(delta));\\n        uint128 liquidity = uint128(\\n            (uint192(delta) * type(uint160).max) /\\n                (uint192(\\n                    secondsPerLiquidityCumulativeX128 -\\n                        prevSecondsPerLiquidityCumulativeX128\\n                ) << 32)\\n        );\\n        return (tick, liquidity);\\n    }\\n\\n    /// @notice Information for calculating a weighted arithmetic mean tick\\n    struct WeightedTickData {\\n        int24 tick;\\n        uint128 weight;\\n    }\\n\\n    /// @notice Given an array of ticks and weights, calculates the weighted arithmetic mean tick\\n    /// @param weightedTickData An array of ticks and weights\\n    /// @return weightedArithmeticMeanTick The weighted arithmetic mean tick\\n    /// @dev Each entry of `weightedTickData` should represents ticks from pools with the same underlying pool tokens. If they do not,\\n    /// extreme care must be taken to ensure that ticks are comparable (including decimal differences).\\n    /// @dev Note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price.\\n    function getWeightedArithmeticMeanTick(\\n        WeightedTickData[] memory weightedTickData\\n    ) internal pure returns (int24 weightedArithmeticMeanTick) {\\n        // Accumulates the sum of products between each tick and its weight\\n        int256 numerator;\\n\\n        // Accumulates the sum of the weights\\n        uint256 denominator;\\n\\n        // Products fit in 152 bits, so it would take an array of length ~2**104 to overflow this logic\\n        for (uint256 i; i < weightedTickData.length; i++) {\\n            numerator +=\\n                weightedTickData[i].tick *\\n                int256(uint256(weightedTickData[i].weight));\\n            denominator += weightedTickData[i].weight;\\n        }\\n\\n        weightedArithmeticMeanTick = int24(numerator / int256(denominator));\\n        // Always round to negative infinity\\n        if (numerator < 0 && (numerator % int256(denominator) != 0))\\n            weightedArithmeticMeanTick--;\\n    }\\n\\n    /// @notice Returns the \\\"synthetic\\\" tick which represents the price of the first entry in `tokens` in terms of the last\\n    /// @dev Useful for calculating relative prices along routes.\\n    /// @dev There must be one tick for each pairwise set of tokens.\\n    /// @param tokens The token contract addresses\\n    /// @param ticks The ticks, representing the price of each token pair in `tokens`\\n    /// @return syntheticTick The synthetic tick, representing the relative price of the outermost tokens in `tokens`\\n    function getChainedPrice(\\n        address[] memory tokens,\\n        int24[] memory ticks\\n    ) internal pure returns (int256 syntheticTick) {\\n        require(tokens.length - 1 == ticks.length, \\\"DL\\\");\\n        for (uint256 i = 1; i <= ticks.length; i++) {\\n            // check the tokens for address sort order, then accumulate the\\n            // ticks into the running synthetic tick, ensuring that intermediate tokens \\\"cancel out\\\"\\n            tokens[i - 1] < tokens[i]\\n                ? syntheticTick += ticks[i - 1]\\n                : syntheticTick -= ticks[i - 1];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5cd2d923a98807bff739083cb356ee11bcac0c456511c2d7f4aaa0987823bd79\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Swapper/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.18;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO =\\n        1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(\\n        int24 tick\\n    ) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0\\n            ? uint256(-int256(tick))\\n            : uint256(int256(tick));\\n        require(absTick <= uint256(uint24(MAX_TICK)), \\\"T\\\");\\n\\n        uint256 ratio = absTick & 0x1 != 0\\n            ? 0xfffcb933bd6fad37aa2d162d1a594001\\n            : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0)\\n            ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0)\\n            ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0)\\n            ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0)\\n            ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0)\\n            ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0)\\n            ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0)\\n            ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0)\\n            ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0)\\n            ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0)\\n            ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0)\\n            ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0)\\n            ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0)\\n            ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0)\\n            ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0)\\n            ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0)\\n            ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0)\\n            ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0)\\n            ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0)\\n            ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160(\\n            (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\\n        );\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(\\n        uint160 sqrtPriceX96\\n    ) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(\\n            sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\\n            \\\"R\\\"\\n        );\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24(\\n            (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\\n        );\\n        int24 tickHi = int24(\\n            (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\\n        );\\n\\n        tick = tickLow == tickHi\\n            ? tickLow\\n            : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\\n            ? tickHi\\n            : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xb6135d277a358e601310c81b16aef4635f45180ed661a0c26e97fa448fd02ced\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Provides functions to integrate with V3 pool oracle","version":1}}},"contracts/Swapper/libraries/TickMath.sol":{"TickMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"stateVariables":{"MAX_SQRT_RATIO":{"details":"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)"},"MAX_TICK":{"details":"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128"},"MIN_SQRT_RATIO":{"details":"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)"},"MIN_TICK":{"details":"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128"}},"title":"Math library for computing sqrt prices from ticks and vice versa","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122081a776716fa00702faf12a390b251d1831bd4e221b4f934742c6ed4c1331320064736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP2 0xA7 PUSH23 0x716FA00702FAF12A390B251D1831BD4E221B4F934742C6 0xED 0x4C SGT BALANCE ORIGIN STOP PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"306:8799:16:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122081a776716fa00702faf12a390b251d1831bd4e221b4f934742c6ed4c1331320064736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP2 0xA7 PUSH23 0x716FA00702FAF12A390B251D1831BD4E221B4F934742C6 0xED 0x4C SGT BALANCE ORIGIN STOP PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"306:8799:16:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"getSqrtRatioAtTick(int24)":"infinite","getTickAtSqrtRatio(uint160)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_SQRT_RATIO\":{\"details\":\"The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\"},\"MAX_TICK\":{\"details\":\"The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\"},\"MIN_SQRT_RATIO\":{\"details\":\"The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\"},\"MIN_TICK\":{\"details\":\"The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\"}},\"title\":\"Math library for computing sqrt prices from ticks and vice versa\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swapper/libraries/TickMath.sol\":\"TickMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Swapper/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.18;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO =\\n        1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(\\n        int24 tick\\n    ) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0\\n            ? uint256(-int256(tick))\\n            : uint256(int256(tick));\\n        require(absTick <= uint256(uint24(MAX_TICK)), \\\"T\\\");\\n\\n        uint256 ratio = absTick & 0x1 != 0\\n            ? 0xfffcb933bd6fad37aa2d162d1a594001\\n            : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0)\\n            ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0)\\n            ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0)\\n            ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0)\\n            ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0)\\n            ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0)\\n            ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0)\\n            ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0)\\n            ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0)\\n            ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0)\\n            ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0)\\n            ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0)\\n            ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0)\\n            ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0)\\n            ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0)\\n            ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0)\\n            ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0)\\n            ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0)\\n            ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0)\\n            ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160(\\n            (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\\n        );\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(\\n        uint160 sqrtPriceX96\\n    ) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(\\n            sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\\n            \\\"R\\\"\\n        );\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24(\\n            (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\\n        );\\n        int24 tickHi = int24(\\n            (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\\n        );\\n\\n        tick = tickLow == tickHi\\n            ? tickLow\\n            : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\\n            ? tickHi\\n            : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xb6135d277a358e601310c81b16aef4635f45180ed661a0c26e97fa448fd02ced\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports prices between 2**-128 and 2**128","version":1}}},"contracts/interfaces/ISwapper.sol":{"ISwapper":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenOutId","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"},{"internalType":"bytes","name":"dexData","type":"bytes"}],"name":"getInputAmount","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenInId","type":"uint256"},{"internalType":"uint256","name":"shareIn","type":"uint256"},{"internalType":"bytes","name":"dexData","type":"bytes"}],"name":"getOutputAmount","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenInId","type":"uint256"},{"internalType":"uint256","name":"tokenOutId","type":"uint256"},{"internalType":"uint256","name":"shareIn","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"bytes","name":"dexData","type":"bytes"}],"name":"swap","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"getInputAmount(uint256,uint256,bytes)":{"details":"dexData examples:     - for UniV2, it should contain address[] swapPath","params":{"dexData":"Custom DEX data for query execution","shareOut":"Shares out to compute the amount for","tokenOutId":"YieldBox asset id"}},"getOutputAmount(uint256,uint256,bytes)":{"details":"dexData examples:     - for UniV2, it should contain address[] swapPath     - for Curve, it should contain uint256[] tokenIndexes","params":{"dexData":"Custom DEX data for query execution","shareIn":"Shares to get the amount for","tokenInId":"YieldBox asset id"}},"swap(uint256,uint256,uint256,address,uint256,bytes)":{"details":"returns both amount and sharesdexData examples:     - for UniV2, it should contain address[] swapPath     - for Curve, it should contain uint256[] tokenIndexes","params":{"amountOutMin":"Minimum amount to be received","dexData":"Custom DEX data for query execution","shareIn":"Shares to be swapped","to":"Receiver address","tokenInId":"YieldBox asset id","tokenOutId":"YieldBox asset id"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getInputAmount(uint256,uint256,bytes)":"c6fe9549","getOutputAmount(uint256,uint256,bytes)":"532bb192","swap(uint256,uint256,uint256,address,uint256,bytes)":"55a68e10"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenOutId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dexData\",\"type\":\"bytes\"}],\"name\":\"getInputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenInId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dexData\",\"type\":\"bytes\"}],\"name\":\"getOutputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenInId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dexData\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getInputAmount(uint256,uint256,bytes)\":{\"details\":\"dexData examples:     - for UniV2, it should contain address[] swapPath\",\"params\":{\"dexData\":\"Custom DEX data for query execution\",\"shareOut\":\"Shares out to compute the amount for\",\"tokenOutId\":\"YieldBox asset id\"}},\"getOutputAmount(uint256,uint256,bytes)\":{\"details\":\"dexData examples:     - for UniV2, it should contain address[] swapPath     - for Curve, it should contain uint256[] tokenIndexes\",\"params\":{\"dexData\":\"Custom DEX data for query execution\",\"shareIn\":\"Shares to get the amount for\",\"tokenInId\":\"YieldBox asset id\"}},\"swap(uint256,uint256,uint256,address,uint256,bytes)\":{\"details\":\"returns both amount and sharesdexData examples:     - for UniV2, it should contain address[] swapPath     - for Curve, it should contain uint256[] tokenIndexes\",\"params\":{\"amountOutMin\":\"Minimum amount to be received\",\"dexData\":\"Custom DEX data for query execution\",\"shareIn\":\"Shares to be swapped\",\"to\":\"Receiver address\",\"tokenInId\":\"YieldBox asset id\",\"tokenOutId\":\"YieldBox asset id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getInputAmount(uint256,uint256,bytes)\":{\"notice\":\"returns necessary input amount for a fixed output amount\"},\"getOutputAmount(uint256,uint256,bytes)\":{\"notice\":\"returns the possible output amount for input share\"},\"swap(uint256,uint256,uint256,address,uint256,bytes)\":{\"notice\":\"swaps token in with token out\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISwapper.sol\":\"ISwapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ISwapper {\\r\\n    /// @notice returns the possible output amount for input share\\r\\n    /// @param tokenInId YieldBox asset id\\r\\n    /// @param shareIn Shares to get the amount for\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    ///     - for Curve, it should contain uint256[] tokenIndexes\\r\\n    function getOutputAmount(\\r\\n        uint256 tokenInId,\\r\\n        uint256 shareIn,\\r\\n        bytes calldata dexData\\r\\n    ) external view returns (uint256 amountOut);\\r\\n\\r\\n    /// @notice returns necessary input amount for a fixed output amount\\r\\n    /// @param tokenOutId YieldBox asset id\\r\\n    /// @param shareOut Shares out to compute the amount for\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    function getInputAmount(\\r\\n        uint256 tokenOutId,\\r\\n        uint256 shareOut,\\r\\n        bytes calldata dexData\\r\\n    ) external view returns (uint256 amountIn);\\r\\n\\r\\n    /// @notice swaps token in with token out\\r\\n    /// @dev returns both amount and shares\\r\\n    /// @param tokenInId YieldBox asset id\\r\\n    /// @param tokenOutId YieldBox asset id\\r\\n    /// @param shareIn Shares to be swapped\\r\\n    /// @param to Receiver address\\r\\n    /// @param amountOutMin Minimum amount to be received\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    ///     - for Curve, it should contain uint256[] tokenIndexes\\r\\n    function swap(\\r\\n        uint256 tokenInId,\\r\\n        uint256 tokenOutId,\\r\\n        uint256 shareIn,\\r\\n        address to,\\r\\n        uint256 amountOutMin,\\r\\n        bytes calldata dexData\\r\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\r\\n}\\r\\n\",\"keccak256\":\"0x732f6f2f5468f60ac354afed655bc603ba7f26eb805166f011d9d985722cd55c\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"getInputAmount(uint256,uint256,bytes)":{"notice":"returns necessary input amount for a fixed output amount"},"getOutputAmount(uint256,uint256,bytes)":{"notice":"returns the possible output amount for input share"},"swap(uint256,uint256,uint256,address,uint256,bytes)":{"notice":"swaps token in with token out"}},"version":1}}},"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol":{"IYieldBox":{"abi":[{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"assets","outputs":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"address","name":"strategy","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"assetIds_","type":"uint256[]"},{"internalType":"uint256[]","name":"shares_","type":"uint256[]"}],"name":"batchTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"}],"name":"depositAsset","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"nativeTokens","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"owner","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"},{"internalType":"bool","name":"roundUp","type":"bool"}],"name":"toAmount","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"roundUp","type":"bool"}],"name":"toShare","outputs":[{"internalType":"uint256","name":"share","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"totalSupply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address[]","name":"tos","type":"address[]"},{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"uint256[]","name":"shares","type":"uint256[]"}],"name":"transferMultiple","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"wrappedNative","outputs":[{"internalType":"address","name":"wrappedNative","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"assets(uint256)":"cf35bdd0","batchTransfer(address,address,uint256[],uint256[])":"daf210b1","depositAsset(uint256,address,address,uint256,uint256)":"9a9af97a","nativeTokens(uint256)":"1f0ee4c3","owner(uint256)":"a123c33e","setApprovalForAsset(address,uint256,bool)":"b8489fb5","toAmount(uint256,uint256,bool)":"442c1599","toShare(uint256,uint256,bool)":"8eb22cdd","totalSupply(uint256)":"bd85b039","transfer(address,address,uint256,uint256)":"0411b252","transferMultiple(address,address[],uint256,uint256[])":"215b595a","withdraw(uint256,address,address,uint256,uint256)":"8d2e63b8","wrappedNative()":"eb6d3a11"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"assetIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares_\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"depositAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"nativeTokens\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"roundUp\",\"type\":\"bool\"}],\"name\":\"toAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"roundUp\",\"type\":\"bool\"}],\"name\":\"toShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wrappedNative\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol\":\"IYieldBox\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title TokenType\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The YieldBox can hold different types of tokens:\\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\\nenum TokenType {\\n    Native,\\n    ERC20,\\n    ERC721,\\n    ERC1155,\\n    None\\n}\\n\",\"keccak256\":\"0xc6adb740ff68d4162214dfa9d406422a066ae2197b7f0c8df5daa7c84b4a10aa\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\n\\ninterface IYieldBox {\\n    function wrappedNative() external view returns (address wrappedNative);\\n\\n    function assets(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            TokenType tokenType,\\n            address contractAddress,\\n            address strategy,\\n            uint256 tokenId\\n        );\\n\\n    function nativeTokens(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            uint8 decimals\\n        );\\n\\n    function owner(uint256 assetId) external view returns (address owner);\\n\\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\\n\\n    function setApprovalForAsset(\\n        address operator,\\n        uint256 assetId,\\n        bool approved\\n    ) external;\\n\\n    function depositAsset(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function withdraw(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 assetId,\\n        uint256 share\\n    ) external;\\n\\n    function batchTransfer(\\n        address from,\\n        address to,\\n        uint256[] calldata assetIds_,\\n        uint256[] calldata shares_\\n    ) external;\\n\\n    function transferMultiple(\\n        address from,\\n        address[] calldata tos,\\n        uint256 assetId,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function toShare(\\n        uint256 assetId,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function toAmount(\\n        uint256 assetId,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x83e4c62b4059bbd59cac87eb714311f9304ce164ead7b45a7562067732fdc5d3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}