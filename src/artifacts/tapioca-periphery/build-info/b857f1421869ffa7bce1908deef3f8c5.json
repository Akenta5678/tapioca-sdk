{"id":"b857f1421869ffa7bce1908deef3f8c5","_format":"hh-sol-build-info-1","solcVersion":"0.8.18","solcLongVersion":"0.8.18+commit.87f61d96","input":{"language":"Solidity","sources":{"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n// solhint-disable avoid-low-level-calls\r\n// solhint-disable no-inline-assembly\r\n\r\n// WARNING!!!\r\n// Combining BoringBatchable with msg.value can cause double spending issues\r\n// https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/\r\n\r\nimport \"./interfaces/IERC20.sol\";\r\n\r\ncontract BaseBoringBatchable {\r\n    /// @dev Helper function to extract a useful revert message from a failed call.\r\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\r\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\r\n\r\n        assembly {\r\n            // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n    }\r\n\r\n    /// @notice Allows batched call to self (this contract).\r\n    /// @param calls An array of inputs for each call.\r\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\r\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\r\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\r\n    // C3: The length of the loop is fully under user control, so can't be exploited\r\n    // C7: Delegatecall is only used on the same contract, so it's safe\r\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable {\r\n        for (uint256 i = 0; i < calls.length; i++) {\r\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\r\n            if (!success && revertOnFail) {\r\n                revert(_getRevertMsg(result));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract BoringBatchable is BaseBoringBatchable {\r\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\r\n    /// Lookup `IERC20.permit`.\r\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\r\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\r\n    function permitToken(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public {\r\n        token.permit(from, to, amount, deadline, v, r, s);\r\n    }\r\n}\r\n"},"@boringcrypto/boring-solidity/contracts/BoringFactory.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./interfaces/IMasterContract.sol\";\r\n\r\n// solhint-disable no-inline-assembly\r\n\r\ncontract BoringFactory {\r\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\r\n\r\n    /// @notice Mapping from clone contracts to their masterContract.\r\n    mapping(address => address) public masterContractOf;\r\n\r\n    /// @notice Mapping from masterContract to an array of all clones\r\n    /// On mainnet events can be used to get this list, but events aren't always easy to retrieve and\r\n    /// barely work on sidechains. While this adds gas, it makes enumerating all clones much easier.\r\n    mapping(address => address[]) public clonesOf;\r\n\r\n    /// @notice Returns the count of clones that exists for a specific masterContract\r\n    /// @param masterContract The address of the master contract.\r\n    /// @return cloneCount total number of clones for the masterContract.\r\n    function clonesOfCount(address masterContract) public view returns (uint256 cloneCount) {\r\n        cloneCount = clonesOf[masterContract].length;\r\n    }\r\n\r\n    /// @notice Deploys a given master Contract as a clone.\r\n    /// Any ETH transferred with this call is forwarded to the new clone.\r\n    /// Emits `LogDeploy`.\r\n    /// @param masterContract The address of the contract to clone.\r\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\r\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\r\n    /// @return cloneAddress Address of the created clone contract.\r\n    function deploy(\r\n        address masterContract,\r\n        bytes calldata data,\r\n        bool useCreate2\r\n    ) public payable returns (address cloneAddress) {\r\n        require(masterContract != address(0), \"BoringFactory: No masterContract\");\r\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\r\n\r\n        if (useCreate2) {\r\n            // each masterContract has different code already. So clones are distinguished by their data only.\r\n            bytes32 salt = keccak256(data);\r\n\r\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\r\n            assembly {\r\n                let clone := mload(0x40)\r\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n                mstore(add(clone, 0x14), targetBytes)\r\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n                cloneAddress := create2(0, clone, 0x37, salt)\r\n            }\r\n        } else {\r\n            assembly {\r\n                let clone := mload(0x40)\r\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n                mstore(add(clone, 0x14), targetBytes)\r\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n                cloneAddress := create(0, clone, 0x37)\r\n            }\r\n        }\r\n        masterContractOf[cloneAddress] = masterContract;\r\n        clonesOf[masterContract].push(cloneAddress);\r\n\r\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\r\n\r\n        emit LogDeploy(masterContract, data, cloneAddress);\r\n    }\r\n}\r\n"},"@boringcrypto/boring-solidity/contracts/Domain.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// Based on code and smartness by Ross Campbell and Keno\r\n// Uses immutable to store the domain separator to reduce gas usage\r\n// If the chain id changes due to a fork, the forked chain will calculate on the fly.\r\npragma solidity ^0.8.0;\r\n\r\n// solhint-disable no-inline-assembly\r\n\r\ncontract Domain {\r\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256(\"EIP712Domain(uint256 chainId,address verifyingContract)\");\r\n    // See https://eips.ethereum.org/EIPS/eip-191\r\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \"\\x19\\x01\";\r\n\r\n    // solhint-disable var-name-mixedcase\r\n    bytes32 private immutable _DOMAIN_SEPARATOR;\r\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\r\n\r\n    /// @dev Calculate the DOMAIN_SEPARATOR\r\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\r\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, chainId, address(this)));\r\n    }\r\n\r\n    constructor() {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\r\n    }\r\n\r\n    /// @dev Return the DOMAIN_SEPARATOR\r\n    // It's named internal to allow making it public from the contract that uses it by creating a simple view function\r\n    // with the desired public name, such as DOMAIN_SEPARATOR or domainSeparator.\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function _domainSeparator() internal view returns (bytes32) {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\r\n    }\r\n\r\n    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\r\n        digest = keccak256(abi.encodePacked(EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA, _domainSeparator(), dataHash));\r\n    }\r\n}\r\n"},"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./IERC165.sol\";\r\n\r\ninterface IERC1155 is IERC165 {\r\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\r\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    event URI(string _value, uint256 indexed _id);\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external;\r\n\r\n    function safeBatchTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata _values,\r\n        bytes calldata _data\r\n    ) external;\r\n\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n\r\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n"},"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC1155TokenReceiver {\r\n    function onERC1155Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _id,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n\r\n    function onERC1155BatchReceived(\r\n        address _operator,\r\n        address _from,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata _values,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n}\r\n"},"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n"},"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /// @notice EIP 2612\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n"},"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\r\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\r\ninterface IERC721 /* is ERC165 */ {\r\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\r\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\r\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\r\n    ///  may be created and assigned without emitting Transfer. At the time of\r\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n    /// @dev This emits when the approved address for an NFT is changed or\r\n    ///  reaffirmed. The zero address indicates there is no approved address.\r\n    ///  When a Transfer event emits, this also indicates that the approved\r\n    ///  address for that NFT (if any) is reset to none.\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    ///  The operator can manage all NFTs of the owner.\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /// @notice Count all NFTs assigned to an owner\r\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\r\n    ///  function throws for queries about the zero address.\r\n    /// @param _owner An address for whom to query the balance\r\n    /// @return The number of NFTs owned by `_owner`, possibly zero\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    /// @notice Find the owner of an NFT\r\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\r\n    ///  about them do throw.\r\n    /// @param _tokenId The identifier for an NFT\r\n    /// @return The address of the owner of the NFT\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n    ///  `onERC721Received` on `_to` and throws if the return value is not\r\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `_to`\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev This works identically to the other function with an extra data parameter,\r\n    ///  except this function just sets data to \"\".\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n    ///  THEY MAY BE PERMANENTLY LOST\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    /// @notice Change or reaffirm the approved address for an NFT\r\n    /// @dev The zero address indicates there is no approved address.\r\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n    ///  operator of the current owner.\r\n    /// @param _approved The new approved NFT controller\r\n    /// @param _tokenId The NFT to approve\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n\r\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\r\n    ///  all of `msg.sender`'s assets\r\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\r\n    ///  multiple operators per owner.\r\n    /// @param _operator Address to add to the set of authorized operators\r\n    /// @param _approved True if the operator is approved, false to revoke approval\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /// @notice Get the approved address for a single NFT\r\n    /// @dev Throws if `_tokenId` is not a valid NFT.\r\n    /// @param _tokenId The NFT to find the approved address for\r\n    /// @return The approved address for this NFT, or the zero address if there is none\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Query if an address is an authorized operator for another address\r\n    /// @param _owner The address that owns the NFTs\r\n    /// @param _operator The address that acts on behalf of the owner\r\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\r\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\r\ninterface IERC721Metadata /* is ERC721 */ {\r\n    /// @notice A descriptive name for a collection of NFTs in this contract\r\n    function name() external view returns (string memory _name);\r\n\r\n    /// @notice An abbreviated name for NFTs in this contract\r\n    function symbol() external view returns (string memory _symbol);\r\n\r\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\r\n    ///  3986. The URI may point to a JSON file that conforms to the \"ERC721\r\n    ///  Metadata JSON Schema\".\r\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\r\n///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\r\ninterface IERC721Enumerable /* is ERC721 */ {\r\n    /// @notice Count NFTs tracked by this contract\r\n    /// @return A count of valid NFTs tracked by this contract, where each one of\r\n    ///  them has an assigned and queryable owner not equal to the zero address\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @notice Enumerate valid NFTs\r\n    /// @dev Throws if `_index` >= `totalSupply()`.\r\n    /// @param _index A counter less than `totalSupply()`\r\n    /// @return The token identifier for the `_index`th NFT,\r\n    ///  (sort order not specified)\r\n    function tokenByIndex(uint256 _index) external view returns (uint256);\r\n\r\n    /// @notice Enumerate NFTs assigned to an owner\r\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\r\n    ///  `_owner` is the zero address, representing invalid NFTs.\r\n    /// @param _owner An address where we are interested in NFTs owned by them\r\n    /// @param _index A counter less than `balanceOf(_owner)`\r\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\r\n    ///   (sort order not specified)\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\n"},"@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721TokenReceiver {\r\n    function onERC721Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _tokenId,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n}\r\n"},"@boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IMasterContract {\r\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\r\n    /// Also kown as the constructor for cloned contracts.\r\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\r\n    /// @param data Can be abi encoded arguments or anything else.\r\n    function init(bytes calldata data) external payable;\r\n}\r\n"},"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// solhint-disable no-inline-assembly\r\n// solhint-disable no-empty-blocks\r\n\r\n/// @title Base64\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @notice Provides functions for encoding/decoding base64\r\nlibrary Base64 {\r\n    function encode(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length == 0) return \"\";\r\n\r\n        // load the table into memory\r\n        string memory table = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n        // multiply by 4/3 rounded up\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        // add some extra buffer at the end required for the writing\r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            // set the actual output length\r\n            mstore(result, encodedLen)\r\n\r\n            // prepare the lookup table\r\n            let tablePtr := add(table, 1)\r\n\r\n            // input ptr\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            // result ptr, jump over length\r\n            let resultPtr := add(result, 32)\r\n\r\n            // run over the input, 3 bytes at a time\r\n            for {\r\n\r\n            } lt(dataPtr, endPtr) {\r\n\r\n            } {\r\n                // read 3 bytes\r\n                dataPtr := add(dataPtr, 3)\r\n                let input := mload(dataPtr)\r\n\r\n                // write 4 characters\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n\r\n            // padding with '='\r\n            switch mod(mload(data), 3)\r\n                case 1 {\r\n                    mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\r\n                }\r\n                case 2 {\r\n                    mstore(sub(resultPtr, 1), shl(248, 0x3d))\r\n                }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"},"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// solhint-disable no-inline-assembly\r\n\r\nlibrary BoringAddress {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendNative(address to, uint256 amount) internal {\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, ) = to.call{value: amount}(\"\");\r\n        require(success, \"BoringAddress: transfer failed\");\r\n    }\r\n}\r\n"},"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"../interfaces/IERC20.sol\";\r\n\r\n// solhint-disable avoid-low-level-calls\r\n\r\nlibrary BoringERC20 {\r\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\r\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\r\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\r\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\r\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\r\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\r\n\r\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length >= 64) {\r\n            return abi.decode(data, (string));\r\n        } else if (data.length == 32) {\r\n            uint8 i = 0;\r\n            while (i < 32 && data[i] != 0) {\r\n                i++;\r\n            }\r\n            bytes memory bytesArray = new bytes(i);\r\n            for (i = 0; i < 32 && data[i] != 0; i++) {\r\n                bytesArray[i] = data[i];\r\n            }\r\n            return string(bytesArray);\r\n        } else {\r\n            return \"???\";\r\n        }\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (string) Token symbol.\r\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (string) Token name.\r\n    function safeName(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (uint8) Token decimals.\r\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param to The address of the user to check.\r\n    /// @return amount The token amount.\r\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\r\n        require(success && data.length >= 32, \"BoringERC20: BalanceOf failed\");\r\n        amount = abi.decode(data, (uint256));\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\r\n    /// Reverts on a failed transfer.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param to Transfer tokens to.\r\n    /// @param amount The token amount.\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: Transfer failed\");\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\r\n    /// Reverts on a failed transfer.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param from Transfer tokens from.\r\n    /// @param to Transfer tokens to.\r\n    /// @param amount The token amount.\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: TransferFrom failed\");\r\n    }\r\n}\r\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/interfaces/ISwapper.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\ninterface ISwapper {\r\n    /// @notice returns the possible output amount for input share\r\n    /// @param tokenInId YieldBox asset id\r\n    /// @param shareIn Shares to get the amount for\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    ///     - for Curve, it should contain uint256[] tokenIndexes\r\n    function getOutputAmount(\r\n        uint256 tokenInId,\r\n        uint256 shareIn,\r\n        bytes calldata dexData\r\n    ) external view returns (uint256 amountOut);\r\n\r\n    /// @notice returns necessary input amount for a fixed output amount\r\n    /// @param tokenOutId YieldBox asset id\r\n    /// @param shareOut Shares out to compute the amount for\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    function getInputAmount(\r\n        uint256 tokenOutId,\r\n        uint256 shareOut,\r\n        bytes calldata dexData\r\n    ) external view returns (uint256 amountIn);\r\n\r\n    /// @notice swaps token in with token out\r\n    /// @dev returns both amount and shares\r\n    /// @param tokenInId YieldBox asset id\r\n    /// @param tokenOutId YieldBox asset id\r\n    /// @param shareIn Shares to be swapped\r\n    /// @param to Receiver address\r\n    /// @param amountOutMin Minimum amount to be received\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    ///     - for Curve, it should contain uint256[] tokenIndexes\r\n    function swap(\r\n        uint256 tokenInId,\r\n        uint256 tokenOutId,\r\n        uint256 shareIn,\r\n        address to,\r\n        uint256 amountOutMin,\r\n        bytes calldata dexData\r\n    ) external returns (uint256 amountOut, uint256 shareOut);\r\n}\r\n"},"contracts/Multicall/Multicall3.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/*\r\n\r\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\____        \r\n _\\///////\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\/////////\\\\\\_\\/////\\\\\\///______/\\\\\\///\\\\\\________/\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__       \r\n  _______\\/\\\\\\________/\\\\\\/////////\\\\\\_\\/\\\\\\_______\\/\\\\\\_____\\/\\\\\\_______/\\\\\\/__\\///\\\\\\____/\\\\\\/____________/\\\\\\/////////\\\\\\_      \r\n   _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\/\\\\\\______/\\\\\\______\\//\\\\\\__/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_     \r\n    _______\\/\\\\\\_______\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\/////////________\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \r\n     _______\\/\\\\\\_______\\/\\\\\\/////////\\\\\\_\\/\\\\\\_________________\\/\\\\\\_____\\//\\\\\\______/\\\\\\__\\//\\\\\\____________\\/\\\\\\/////////\\\\\\_   \r\n      _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_________________\\/\\\\\\______\\///\\\\\\__/\\\\\\_____\\///\\\\\\__________\\/\\\\\\_______\\/\\\\\\_  \r\n       _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\____\\///\\\\\\\\\\/________\\////\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_ \r\n        _______\\///________\\///________\\///__\\///______________\\///////////_______\\/////_____________\\/////////__\\///________\\///__\r\n\r\n*/\r\n\r\ncontract Multicall3 is Ownable {\r\n    struct Call {\r\n        address target;\r\n        bool allowFailure;\r\n        bytes callData;\r\n    }\r\n\r\n    struct CallValue {\r\n        address target;\r\n        bool allowFailure;\r\n        uint256 value;\r\n        bytes callData;\r\n    }\r\n\r\n    struct Result {\r\n        bool success;\r\n        bytes returnData;\r\n    }\r\n\r\n    function multicall(\r\n        Call[] calldata calls\r\n    ) public payable returns (Result[] memory returnData) {\r\n        uint256 length = calls.length;\r\n        returnData = new Result[](length);\r\n        Call memory calli;\r\n        for (uint256 i = 0; i < length; ) {\r\n            Result memory result = returnData[i];\r\n            calli = calls[i];\r\n\r\n            (result.success, result.returnData) = calli.target.call(\r\n                calli.callData\r\n            );\r\n            if (!result.success) {\r\n                _getRevertMsg(result.returnData);\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function multicallValue(\r\n        CallValue[] calldata calls\r\n    ) public payable returns (Result[] memory returnData) {\r\n        uint256 valAccumulator;\r\n        uint256 length = calls.length;\r\n        returnData = new Result[](length);\r\n        CallValue memory calli;\r\n        for (uint256 i = 0; i < length; ) {\r\n            Result memory result = returnData[i];\r\n            calli = calls[i];\r\n            uint256 val = calli.value;\r\n            // Humanity will be a Type V Kardashev Civilization before this overflows - andreas\r\n            // ~ 10^25 Wei in existence << ~ 10^76 size uint fits in a uint256\r\n            unchecked {\r\n                valAccumulator += val;\r\n            }\r\n            (result.success, result.returnData) = calli.target.call{value: val}(\r\n                calli.callData\r\n            );\r\n            if (!result.success) {\r\n                _getRevertMsg(result.returnData);\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        // Finally, make sure the msg.value = SUM(call[0...i].value)\r\n        require(msg.value == valAccumulator, \"Multicall3: value mismatch\");\r\n    }\r\n\r\n    function _getRevertMsg(bytes memory _returnData) private pure {\r\n        // If the _res length is less than 68, then\r\n        // the transaction failed with custom error or silently (without a revert message)\r\n        if (_returnData.length < 68) revert(\"Reason unknown\");\r\n\r\n        assembly {\r\n            // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        revert(abi.decode(_returnData, (string))); // All that remains is the revert string\r\n    }\r\n}\r\n"},"contracts/Swapper/interfaces/IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n"},"contracts/Swapper/interfaces/IUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(\r\n        address to\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"},"contracts/Swapper/libraries/SafeMath.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.6.6;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n}\r\n"},"contracts/Swapper/libraries/UniswapV2Library.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"../interfaces/IUniswapV2Pair.sol\";\r\n\r\n// solhint-disable max-line-length\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint256;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\r\n        (token0, token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB,\r\n        bytes32 pairCodeHash\r\n    ) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(\r\n            uint160(\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            hex\"ff\",\r\n                            factory,\r\n                            keccak256(abi.encodePacked(token0, token1)),\r\n                            pairCodeHash // init code hash\r\n                        )\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB,\r\n        bytes32 pairCodeHash\r\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\r\n            pairFor(factory, tokenA, tokenB, pairCodeHash)\r\n        ).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0\r\n            ? (reserve0, reserve1)\r\n            : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) internal pure returns (uint256 amountB) {\r\n        require(amountA > 0, \"UniswapV2Library: INSUFFICIENT_AMOUNT\");\r\n        require(\r\n            reserveA > 0 && reserveB > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountIn) {\r\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(\r\n        address factory,\r\n        uint256 amountIn,\r\n        address[] memory path,\r\n        bytes32 pairCodeHash\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\r\n        amounts = new uint256[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint256 i; i < path.length - 1; i++) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\r\n                factory,\r\n                path[i],\r\n                path[i + 1],\r\n                pairCodeHash\r\n            );\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(\r\n        address factory,\r\n        uint256 amountOut,\r\n        address[] memory path,\r\n        bytes32 pairCodeHash\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\r\n        amounts = new uint256[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint256 i = path.length - 1; i > 0; i--) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\r\n                factory,\r\n                path[i - 1],\r\n                path[i],\r\n                pairCodeHash\r\n            );\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n"},"contracts/Swapper/MultiSwapper.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\";\r\nimport \"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol\";\r\n\r\nimport \"../interfaces/ISwapper.sol\";\r\nimport \"./interfaces/IUniswapV2Factory.sol\";\r\nimport \"./interfaces/IUniswapV2Pair.sol\";\r\n\r\nimport \"./libraries/UniswapV2Library.sol\";\r\n\r\n/// Modified from https://github.com/sushiswap/kashi-lending/blob/master/contracts/swappers/SushiSwapMultiSwapper.sol\r\ncontract MultiSwapper is ISwapper {\r\n    using BoringERC20 for IERC20;\r\n\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n    address private immutable factory;\r\n    YieldBox private immutable yieldBox;\r\n    bytes32 private immutable pairCodeHash;\r\n\r\n    /// @notice creates a new MultiSwapper contract\r\n    /// @param _factory UniswapV2Factory address\r\n    /// @param _yieldBox YieldBox address\r\n    /// @param _pairCodeHash UniswapV2 pair code hash\r\n    constructor(address _factory, YieldBox _yieldBox, bytes32 _pairCodeHash) {\r\n        factory = _factory;\r\n        yieldBox = _yieldBox;\r\n        pairCodeHash = _pairCodeHash;\r\n    }\r\n\r\n    // ********************** //\r\n    // *** VIEW FUNCTIONS *** //\r\n    // ********************** //\r\n    /// @notice returns the possible output amount for input share\r\n    /// @param tokenInId YieldBox asset id\r\n    /// @param shareIn Shares to get the amount for\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    function getOutputAmount(\r\n        uint256 tokenInId,\r\n        uint256 shareIn,\r\n        bytes calldata dexData\r\n    ) external view override returns (uint256 amountOut) {\r\n        address[] memory path = abi.decode(dexData, (address[]));\r\n        uint256 amountIn = yieldBox.toAmount(tokenInId, shareIn, false);\r\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(\r\n            factory,\r\n            amountIn,\r\n            path,\r\n            pairCodeHash\r\n        );\r\n        amountOut = amounts[amounts.length - 1];\r\n    }\r\n\r\n    /// @notice returns necessary input amount for a fixed output amount\r\n    /// @param tokenOutId YieldBox asset id\r\n    /// @param shareOut Shares out to compute the amount for\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    function getInputAmount(\r\n        uint256 tokenOutId,\r\n        uint256 shareOut,\r\n        bytes calldata dexData\r\n    ) external view override returns (uint256 amountIn) {\r\n        address[] memory path = abi.decode(dexData, (address[]));\r\n        uint256 amountOut = yieldBox.toAmount(tokenOutId, shareOut, false);\r\n        uint256[] memory amounts = UniswapV2Library.getAmountsIn(\r\n            factory,\r\n            amountOut,\r\n            path,\r\n            pairCodeHash\r\n        );\r\n        amountIn = amounts[0];\r\n    }\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n    /// @notice swaps token in with token out\r\n    /// @dev returns both amount and shares\r\n    /// @param tokenInId YieldBox asset id\r\n    /// @param tokenOutId YieldBox asset id\r\n    /// @param shareIn Shares to be swapped\r\n    /// @param to Receiver address\r\n    /// @param amountOutMin Minimum amount to be received\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    function swap(\r\n        uint256 tokenInId,\r\n        uint256 tokenOutId,\r\n        uint256 shareIn,\r\n        address to,\r\n        uint256 amountOutMin,\r\n        bytes calldata dexData\r\n    ) external override returns (uint256 amountOut, uint256 shareOut) {\r\n        address[] memory path = abi.decode(dexData, (address[]));\r\n        (uint256 amountIn, ) = yieldBox.withdraw(\r\n            tokenInId,\r\n            address(this),\r\n            address(this),\r\n            0,\r\n            shareIn\r\n        );\r\n\r\n        amountOut = _swapExactTokensForTokens(\r\n            amountIn,\r\n            amountOutMin,\r\n            path,\r\n            address(this)\r\n        );\r\n\r\n        IERC20(path[path.length - 1]).approve(address(yieldBox), amountOut);\r\n        (, shareOut) = yieldBox.depositAsset(\r\n            tokenOutId,\r\n            address(this),\r\n            to,\r\n            amountOut,\r\n            0\r\n        );\r\n    }\r\n\r\n    // ************************* //\r\n    // *** PRIVATE FUNCTIONS *** //\r\n    // ************************* //\r\n    // Swaps an exact amount of tokens for another token through the path passed as an argument\r\n    // Returns the amount of the final token\r\n    function _swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] memory path,\r\n        address to\r\n    ) internal returns (uint256 amountOut) {\r\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(\r\n            factory,\r\n            amountIn,\r\n            path,\r\n            pairCodeHash\r\n        );\r\n        amountOut = amounts[amounts.length - 1];\r\n        require(amountOut >= amountOutMin, \"insufficient-amount-out\");\r\n        // Required for the next step\r\n        IERC20(path[0]).safeTransfer(\r\n            UniswapV2Library.pairFor(factory, path[0], path[1], pairCodeHash),\r\n            amountIn\r\n        );\r\n        _swap(amounts, path, to);\r\n    }\r\n\r\n    // requires the initial amount to have already been sent to the first pair\r\n    function _swap(\r\n        uint256[] memory amounts,\r\n        address[] memory path,\r\n        address _to\r\n    ) internal virtual {\r\n        for (uint256 i; i < path.length - 1; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\r\n            uint256 amountOut = amounts[i + 1];\r\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\r\n                ? (uint256(0), amountOut)\r\n                : (amountOut, uint256(0));\r\n            address to = i < path.length - 2\r\n                ? UniswapV2Library.pairFor(\r\n                    factory,\r\n                    output,\r\n                    path[i + 2],\r\n                    pairCodeHash\r\n                )\r\n                : _to;\r\n\r\n            IUniswapV2Pair(\r\n                UniswapV2Library.pairFor(factory, input, output, pairCodeHash)\r\n            ).swap(amount0Out, amount1Out, to, new bytes(0));\r\n        }\r\n    }\r\n}\r\n"},"contracts/TapiocaDeployer/TapiocaDeployer.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.18;\r\n\r\n// TODO - Write deployment bytecode instead of Solidity compilation output\r\n\r\n/// @author https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Create2.sol\r\ncontract TapiocaDeployer {\r\n    /**\r\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\r\n     * will be deployed can be known in advance via {computeAddress}.\r\n     *\r\n     * The bytecode for a contract can be obtained from Solidity with\r\n     * `type(contractName).creationCode`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `bytecode` must not be empty.\r\n     * - `salt` must have not been used for `bytecode` already.\r\n     * - the factory must have a balance of at least `amount`.\r\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\r\n     */\r\n    function deploy(\r\n        uint256 amount,\r\n        bytes32 salt,\r\n        bytes memory bytecode\r\n    ) external payable returns (address addr) {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Create2: insufficient balance\"\r\n        );\r\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\r\n        }\r\n        require(addr != address(0), \"Create2: Failed on deploy\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\r\n     * `bytecodeHash` or `salt` will result in a new destination address.\r\n     */\r\n    function computeAddress(\r\n        bytes32 salt,\r\n        bytes32 bytecodeHash\r\n    ) external view returns (address) {\r\n        return computeAddress(salt, bytecodeHash, address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\r\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\r\n     */\r\n    function computeAddress(\r\n        bytes32 salt,\r\n        bytes32 bytecodeHash,\r\n        address deployer\r\n    ) public pure returns (address addr) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ptr := mload(0x40) // Get free memory pointer\r\n\r\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\r\n            // |-------------------|---------------------------------------------------------------------------|\r\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\r\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\r\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\r\n            // | 0xFF              |            FF                                                             |\r\n            // |-------------------|---------------------------------------------------------------------------|\r\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\r\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\r\n\r\n            mstore(add(ptr, 0x40), bytecodeHash)\r\n            mstore(add(ptr, 0x20), salt)\r\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\r\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\r\n            mstore8(start, 0xff)\r\n            addr := keccak256(start, 85)\r\n        }\r\n    }\r\n}\r\n"},"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"./interfaces/IStrategy.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\";\nimport \"./ERC1155.sol\";\n\n// An asset is a token + a strategy\nstruct Asset {\n    TokenType tokenType;\n    address contractAddress;\n    IStrategy strategy;\n    uint256 tokenId;\n}\n\ncontract AssetRegister is ERC1155 {\n    using BoringAddress for address;\n\n    mapping(address => mapping(address => mapping(uint256 => bool))) public isApprovedForAsset;\n\n    event AssetRegistered(\n        TokenType indexed tokenType,\n        address indexed contractAddress,\n        IStrategy strategy,\n        uint256 indexed tokenId,\n        uint256 assetId\n    );\n    event ApprovalForAsset(address indexed sender, address indexed operator, uint256 assetId, bool approved);\n\n    // ids start at 1 so that id 0 means it's not yet registered\n    mapping(TokenType => mapping(address => mapping(IStrategy => mapping(uint256 => uint256)))) public ids;\n    Asset[] public assets;\n\n    constructor() {\n        assets.push(Asset(TokenType.None, address(0), NO_STRATEGY, 0));\n    }\n\n    function assetCount() public view returns (uint256) {\n        return assets.length;\n    }\n\n    function _registerAsset(\n        TokenType tokenType,\n        address contractAddress,\n        IStrategy strategy,\n        uint256 tokenId\n    ) internal returns (uint256 assetId) {\n        // Checks\n        assetId = ids[tokenType][contractAddress][strategy][tokenId];\n\n        // If assetId is 0, this is a new asset that needs to be registered\n        if (assetId == 0) {\n            // Only do these checks if a new asset needs to be created\n            require(tokenId == 0 || tokenType != TokenType.ERC20, \"YieldBox: No tokenId for ERC20\");\n            require(\n                tokenType == TokenType.Native ||\n                    (tokenType == strategy.tokenType() && contractAddress == strategy.contractAddress() && tokenId == strategy.tokenId()),\n                \"YieldBox: Strategy mismatch\"\n            );\n            // If a new token gets added, the isContract checks that this is a deployed contract. Needed for security.\n            // Prevents getting shares for a future token whose address is known in advance. For instance a token that will be deployed with CREATE2 in the future or while the contract creation is\n            // in the mempool\n            require((tokenType == TokenType.Native && contractAddress == address(0)) || contractAddress.isContract(), \"YieldBox: Not a token\");\n\n            // Effects\n            assetId = assets.length;\n            assets.push(Asset(tokenType, contractAddress, strategy, tokenId));\n            ids[tokenType][contractAddress][strategy][tokenId] = assetId;\n\n            // The actual URI isn't emitted here as per EIP1155, because that would make this call super expensive.\n            emit URI(\"\", assetId);\n            emit AssetRegistered(tokenType, contractAddress, strategy, tokenId, assetId);\n        }\n    }\n\n    function registerAsset(TokenType tokenType, address contractAddress, IStrategy strategy, uint256 tokenId) public returns (uint256 assetId) {\n        // Native assets can only be added internally by the NativeTokenFactory\n        require(\n            tokenType == TokenType.ERC20 || tokenType == TokenType.ERC721 || tokenType == TokenType.ERC1155,\n            \"AssetManager: cannot add Native\"\n        );\n        assetId = _registerAsset(tokenType, contractAddress, strategy, tokenId);\n    }\n\n    function setApprovalForAsset(address operator, uint256 assetId, bool approved) external virtual {\n        require(assetId < assetCount(), \"AssetManager: asset not valid\");\n        isApprovedForAsset[msg.sender][operator][assetId] = approved;\n\n        emit ApprovalForAsset(msg.sender, operator, assetId, approved);\n    }\n}\n"},"tapioca-sdk/dist/contracts/YieldBox/contracts/BoringMath.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nlibrary BoringMath {\n    function to128(uint256 a) internal pure returns (uint128 c) {\n        require(a <= type(uint128).max, \"BoringMath: uint128 Overflow\");\n        c = uint128(a);\n    }\n\n    function to64(uint256 a) internal pure returns (uint64 c) {\n        require(a <= type(uint64).max, \"BoringMath: uint64 Overflow\");\n        c = uint64(a);\n    }\n\n    function to32(uint256 a) internal pure returns (uint32 c) {\n        require(a <= type(uint32).max, \"BoringMath: uint32 Overflow\");\n        c = uint32(a);\n    }\n\n    function muldiv(\n        uint256 value,\n        uint256 mul,\n        uint256 div,\n        bool roundUp\n    ) internal pure returns (uint256 result) {\n        result = (value * mul) / div;\n        if (roundUp && (result * div) / mul < value) {\n            result++;\n        }\n    }\n}\n"},"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/// @title TokenType\n/// @author BoringCrypto (@Boring_Crypto)\n/// @notice The YieldBox can hold different types of tokens:\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\nenum TokenType {\n    Native,\n    ERC20,\n    ERC721,\n    ERC1155,\n    None\n}\n"},"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\";\n\n// Written by OreNoMochi (https://github.com/OreNoMochii), BoringCrypto\n\ncontract ERC1155 is IERC1155 {\n    using BoringAddress for address;\n\n    // mappings\n\n    mapping(address => mapping(address => bool)) public override isApprovedForAll; // map of operator approval\n    mapping(address => mapping(uint256 => uint256)) public override balanceOf; // map of tokens owned by\n    mapping(uint256 => uint256) public totalSupply; // totalSupply per token\n\n    function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\n        return\n            interfaceID == this.supportsInterface.selector || // EIP-165\n            interfaceID == 0xd9b67a26 || // ERC-1155\n            interfaceID == 0x0e89341c; // EIP-1155 Metadata\n    }\n\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view override returns (uint256[] memory balances) {\n        uint256 len = owners.length;\n        require(len == ids.length, \"ERC1155: Length mismatch\");\n\n        balances = new uint256[](len);\n\n        for (uint256 i = 0; i < len; i++) {\n            balances[i] = balanceOf[owners[i]][ids[i]];\n        }\n    }\n\n    function _mint(address to, uint256 id, uint256 value) internal {\n        require(to != address(0), \"No 0 address\");\n\n        balanceOf[to][id] += value;\n        totalSupply[id] += value;\n\n        emit TransferSingle(msg.sender, address(0), to, id, value);\n    }\n\n    function _burn(address from, uint256 id, uint256 value) internal {\n        require(from != address(0), \"No 0 address\");\n\n        balanceOf[from][id] -= value;\n        totalSupply[id] -= value;\n\n        emit TransferSingle(msg.sender, from, address(0), id, value);\n    }\n\n    function _transferSingle(address from, address to, uint256 id, uint256 value) internal {\n        require(to != address(0), \"No 0 address\");\n\n        balanceOf[from][id] -= value;\n        balanceOf[to][id] += value;\n\n        emit TransferSingle(msg.sender, from, to, id, value);\n    }\n\n    function _transferBatch(address from, address to, uint256[] calldata ids, uint256[] calldata values) internal {\n        require(to != address(0), \"No 0 address\");\n\n        uint256 len = ids.length;\n        for (uint256 i = 0; i < len; i++) {\n            uint256 id = ids[i];\n            uint256 value = values[i];\n            balanceOf[from][id] -= value;\n            balanceOf[to][id] += value;\n        }\n\n        emit TransferBatch(msg.sender, from, to, ids, values);\n    }\n\n    function _requireTransferAllowed(address _from, bool _approved) internal view virtual {\n        require(_from == msg.sender || _approved || isApprovedForAll[_from][msg.sender] == true, \"Transfer not allowed\");\n    }\n\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external override {\n        _requireTransferAllowed(from, false);\n\n        _transferSingle(from, to, id, value);\n\n        if (to.isContract()) {\n            require(\n                IERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, value, data) ==\n                    bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\")),\n                \"Wrong return value\"\n            );\n        }\n    }\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external override {\n        require(ids.length == values.length, \"ERC1155: Length mismatch\");\n        _requireTransferAllowed(from, false);\n\n        _transferBatch(from, to, ids, values);\n\n        if (to.isContract()) {\n            require(\n                IERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, values, data) ==\n                    bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\")),\n                \"Wrong return value\"\n            );\n        }\n    }\n\n    function setApprovalForAll(address operator, bool approved) external virtual override {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function uri(uint256 /*assetId*/) external view virtual returns (string memory) {\n        return \"\";\n    }\n}\n"},"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\";\n\ncontract ERC1155TokenReceiver is IERC1155TokenReceiver {\n    // ERC1155 receivers that simple accept the transfer\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return 0xf23a6e61; //bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return 0xbc197c81; //bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))\n    }\n}\n"},"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC721TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol\";\n\ncontract ERC721TokenReceiver is IERC721TokenReceiver {\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\n        return 0x150b7a02; //bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))\n    }\n}\n"},"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IStrategy.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"../enums/YieldBoxTokenType.sol\";\nimport \"./IYieldBox.sol\";\n\ninterface IStrategy {\n    /// Each strategy only works with a single asset. This should help make implementations simpler and more readable.\n    /// To safe gas a proxy pattern (YieldBox factory) could be used to deploy the same strategy for multiple tokens.\n\n    /// It is recommended that strategies keep a small amount of funds uninvested (like 5%) to handle small withdrawals\n    /// and deposits without triggering costly investing/divesting logic.\n\n    /// #########################\n    /// ### Basic Information ###\n    /// #########################\n\n    /// Returns the address of the yieldBox that this strategy is for\n    function yieldBox() external view returns (IYieldBox yieldBox_);\n\n    /// Returns a name for this strategy\n    function name() external view returns (string memory name_);\n\n    /// Returns a description for this strategy\n    function description() external view returns (string memory description_);\n\n    /// #######################\n    /// ### Supported Token ###\n    /// #######################\n\n    /// Returns the standard that this strategy works with\n    function tokenType() external view returns (TokenType tokenType_);\n\n    /// Returns the contract address that this strategy works with\n    function contractAddress() external view returns (address contractAddress_);\n\n    /// Returns the tokenId that this strategy works with (for EIP1155)\n    /// This is always 0 for EIP20 tokens\n    function tokenId() external view returns (uint256 tokenId_);\n\n    /// ###########################\n    /// ### Balance Information ###\n    /// ###########################\n\n    /// Returns the total value the strategy holds (principle + gain) expressed in asset token amount.\n    /// This should be cheap in gas to retrieve. Can return a bit less than the actual, but MUST NOT return more.\n    /// The gas cost of this function will be paid on any deposit or withdrawal onto and out of the YieldBox\n    /// that uses this strategy. Also, anytime a protocol converts between shares and amount, this gets called.\n    function currentBalance() external view returns (uint256 amount);\n\n    /// Returns the maximum amount that can be withdrawn\n    function withdrawable() external view returns (uint256 amount);\n\n    /// Returns the maximum amount that can be withdrawn for a low gas fee\n    /// When more than this amount is withdrawn it will trigger divesting from the actual strategy\n    /// which will incur higher gas costs\n    function cheapWithdrawable() external view returns (uint256 amount);\n\n    /// ##########################\n    /// ### YieldBox Functions ###\n    /// ##########################\n\n    /// Is called by YieldBox to signal funds have been added, the strategy may choose to act on this\n    /// When a large enough deposit is made, this should trigger the strategy to invest into the actual\n    /// strategy. This function should normally NOT be used to invest on each call as that would be costly\n    /// for small deposits.\n    /// If the strategy handles native tokens (ETH) it will receive it directly (not wrapped). It will be\n    /// up to the strategy to wrap it if needed.\n    /// Only accept this call from the YieldBox\n    function deposited(uint256 amount) external;\n\n    /// Is called by the YieldBox to ask the strategy to withdraw to the user\n    /// When a strategy keeps a little reserve for cheap withdrawals and the requested withdrawal goes over this amount,\n    /// the strategy should divest enough from the strategy to complete the withdrawal and rebalance the reserve.\n    /// If the strategy handles native tokens (ETH) it should send this, not a wrapped version.\n    /// With some strategies it might be hard to withdraw exactly the correct amount.\n    /// Only accept this call from the YieldBox\n    function withdraw(address to, uint256 amount) external;\n}\n\nIStrategy constant NO_STRATEGY = IStrategy(address(0));\n"},"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IWrappedNative.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\";\n\ninterface IWrappedNative is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"},"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"../enums/YieldBoxTokenType.sol\";\n\ninterface IYieldBox {\n    function wrappedNative() external view returns (address wrappedNative);\n\n    function assets(uint256 assetId)\n        external\n        view\n        returns (\n            TokenType tokenType,\n            address contractAddress,\n            address strategy,\n            uint256 tokenId\n        );\n\n    function nativeTokens(uint256 assetId)\n        external\n        view\n        returns (\n            string memory name,\n            string memory symbol,\n            uint8 decimals\n        );\n\n    function owner(uint256 assetId) external view returns (address owner);\n\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\n\n    function setApprovalForAsset(\n        address operator,\n        uint256 assetId,\n        bool approved\n    ) external;\n\n    function depositAsset(\n        uint256 assetId,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n\n    function withdraw(\n        uint256 assetId,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n\n    function transfer(\n        address from,\n        address to,\n        uint256 assetId,\n        uint256 share\n    ) external;\n\n    function batchTransfer(\n        address from,\n        address to,\n        uint256[] calldata assetIds_,\n        uint256[] calldata shares_\n    ) external;\n\n    function transferMultiple(\n        address from,\n        address[] calldata tos,\n        uint256 assetId,\n        uint256[] calldata shares\n    ) external;\n\n    function toShare(\n        uint256 assetId,\n        uint256 amount,\n        bool roundUp\n    ) external view returns (uint256 share);\n\n    function toAmount(\n        uint256 assetId,\n        uint256 share,\n        bool roundUp\n    ) external view returns (uint256 amount);\n}\n"},"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"./AssetRegister.sol\";\nimport \"./BoringMath.sol\";\n\nstruct NativeToken {\n    string name;\n    string symbol;\n    uint8 decimals;\n    string uri;\n}\n\n/// @title NativeTokenFactory\n/// @author BoringCrypto (@Boring_Crypto)\n/// @notice The NativeTokenFactory is a token factory to create ERC1155 tokens. This is used by YieldBox to create\n/// native tokens in YieldBox. These have many benefits:\n/// - low and predictable gas usage\n/// - simplified approval\n/// - no hidden features, all these tokens behave the same\n\ncontract NativeTokenFactory is AssetRegister {\n    using BoringMath for uint256;\n\n    mapping(uint256 => NativeToken) public nativeTokens;\n    mapping(uint256 => address) public owner;\n    mapping(uint256 => address) public pendingOwner;\n\n    event TokenCreated(address indexed creator, string name, string symbol, uint8 decimals, uint256 tokenId);\n    event OwnershipTransferred(uint256 indexed tokenId, address indexed previousOwner, address indexed newOwner);\n\n    // ***************** //\n    // *** MODIFIERS *** //\n    // ***************** //\n\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\n    /// If 'from' is msg.sender, it's allowed.\n    /// If 'msg.sender' is an address (an operator) that is approved by 'from', it's allowed.\n    modifier allowed(address _from, uint256 _id) {\n        _requireTransferAllowed(_from, isApprovedForAsset[_from][msg.sender][_id]);\n        _;\n    }\n\n    /// @notice Only allows the `owner` to execute the function.\n    /// @param tokenId The `tokenId` that the sender has to be owner of.\n    modifier onlyOwner(uint256 tokenId) {\n        require(msg.sender == owner[tokenId], \"NTF: caller is not the owner\");\n        _;\n    }\n\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\n    /// Can only be invoked by the current `owner`.\n    /// @param tokenId The `tokenId` of the token that ownership whose ownership will be transferred/renounced.\n    /// @param newOwner Address of the new owner.\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\n    function transferOwnership(uint256 tokenId, address newOwner, bool direct, bool renounce) public onlyOwner(tokenId) {\n        if (direct) {\n            // Checks\n            require(newOwner != address(0) || renounce, \"NTF: zero address\");\n\n            // Effects\n            emit OwnershipTransferred(tokenId, owner[tokenId], newOwner);\n            owner[tokenId] = newOwner;\n            pendingOwner[tokenId] = address(0);\n        } else {\n            // Effects\n            pendingOwner[tokenId] = newOwner;\n        }\n    }\n\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\n    /// @param tokenId The `tokenId` of the token that ownership is claimed for.\n    function claimOwnership(uint256 tokenId) public {\n        address _pendingOwner = pendingOwner[tokenId];\n\n        // Checks\n        require(msg.sender == _pendingOwner, \"NTF: caller != pending owner\");\n\n        // Effects\n        emit OwnershipTransferred(tokenId, owner[tokenId], _pendingOwner);\n        owner[tokenId] = _pendingOwner;\n        pendingOwner[tokenId] = address(0);\n    }\n\n    /// @notice Create a new native token. This will be an ERC1155 token. If later it's needed as an ERC20 token it can\n    /// be wrapped into an ERC20 token. Native support for ERC1155 tokens is growing though.\n    /// @param name The name of the token.\n    /// @param symbol The symbol of the token.\n    /// @param decimals The number of decimals of the token (this is just for display purposes). Should be set to 18 in normal cases.\n    function createToken(string calldata name, string calldata symbol, uint8 decimals, string calldata uri) public returns (uint32 tokenId) {\n        // To keep each Token unique in the AssetRegister, we use the assetId as the tokenId. So for native assets, the tokenId is always equal to the assetId.\n        tokenId = assets.length.to32();\n        _registerAsset(TokenType.Native, address(0), NO_STRATEGY, tokenId);\n        // Initial supply is 0, use owner can mint. For a fixed supply the owner can mint and revoke ownership.\n        // The msg.sender is the initial owner, can be changed after.\n        nativeTokens[tokenId] = NativeToken(name, symbol, decimals, uri);\n        owner[tokenId] = msg.sender;\n\n        emit TokenCreated(msg.sender, name, symbol, decimals, tokenId);\n        emit TransferSingle(msg.sender, address(0), address(0), tokenId, 0);\n        emit OwnershipTransferred(tokenId, address(0), msg.sender);\n    }\n\n    /// @notice The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\n    /// @param tokenId The token to be minted.\n    /// @param to The account to transfer the minted tokens to.\n    /// @param amount The amount of tokens to mint.\n    /// @dev For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.\n    function mint(uint256 tokenId, address to, uint256 amount) public onlyOwner(tokenId) {\n        _mint(to, tokenId, amount);\n    }\n\n    /// @notice Burns tokens. Only the holder of tokens can burn them or an approved operator.\n    /// @param tokenId The token to be burned.\n    /// @param amount The amount of tokens to burn.\n    function burn(uint256 tokenId, address from, uint256 amount) public allowed(from, tokenId) {\n        require(assets[tokenId].tokenType == TokenType.Native, \"NTF: Not native\");\n        _burn(from, tokenId, amount);\n    }\n\n    /// @notice The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\n    /// @param tokenId The token to be minted.\n    /// @param tos The accounts to transfer the minted tokens to.\n    /// @param amounts The amounts of tokens to mint.\n    /// @dev If the tos array is longer than the amounts array there will be an out of bounds error. If the amounts array is longer, the extra amounts are simply ignored.\n    /// @dev For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.\n    function batchMint(uint256 tokenId, address[] calldata tos, uint256[] calldata amounts) public onlyOwner(tokenId) {\n        uint256 len = tos.length;\n        for (uint256 i = 0; i < len; i++) {\n            _mint(tos[i], tokenId, amounts[i]);\n        }\n    }\n\n    /// @notice Burns tokens. This is only useful to be used by an operator.\n    /// @param tokenId The token to be burned.\n    /// @param froms The accounts to burn tokens from.\n    /// @param amounts The amounts of tokens to burn.\n    function batchBurn(uint256 tokenId, address[] calldata froms, uint256[] calldata amounts) public {\n        require(assets[tokenId].tokenType == TokenType.Native, \"NTF: Not native\");\n        uint256 len = froms.length;\n        for (uint256 i = 0; i < len; i++) {\n            _requireTransferAllowed(froms[i], isApprovedForAsset[froms[i]][msg.sender][tokenId]);\n            _burn(froms[i], tokenId, amounts[i]);\n        }\n    }\n}\n"},"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\n// The YieldBox\n// The original BentoBox is owned by the Sushi team to set strategies for each token. Abracadabra wanted different strategies, which led to\n// them launching their own DegenBox. The YieldBox solves this by allowing an unlimited number of strategies for each token in a fully\n// permissionless manner. The YieldBox has no owner and operates fully permissionless.\n\n// Other improvements:\n// Better system to make sure the token to share ratio doesn't reset.\n// Full support for rebasing tokens.\n\n// This contract stores funds, handles their transfers, approvals and strategies.\n\n// Copyright (c) 2021, 2022 BoringCrypto - All rights reserved\n// Twitter: @Boring_Crypto\n\n// Since the contract is permissionless, only one deployment per chain is needed. If it's not yet deployed\n// on a chain or if you want to make a derivative work, contact @BoringCrypto. The core of YieldBox is\n// copyrighted. Most of the contracts that it builds on are open source though.\n\n// BEWARE: Still under active development\n// Security review not done yet\n\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\nimport \"./interfaces/IWrappedNative.sol\";\nimport \"./interfaces/IStrategy.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/Domain.sol\";\nimport \"./ERC721TokenReceiver.sol\";\nimport \"./ERC1155TokenReceiver.sol\";\nimport \"./ERC1155.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./AssetRegister.sol\";\nimport \"./NativeTokenFactory.sol\";\nimport \"./YieldBoxRebase.sol\";\nimport \"./YieldBoxURIBuilder.sol\";\nimport \"./YieldBoxPermit.sol\";\n\n// solhint-disable no-empty-blocks\n\n/// @title YieldBox\n/// @author BoringCrypto, Keno\n/// @notice The YieldBox is a vault for tokens. The stored tokens can assigned to strategies.\n/// Yield from this will go to the token depositors.\n/// Any funds transfered directly onto the YieldBox will be lost, use the deposit function instead.\ncontract YieldBox is YieldBoxPermit, BoringBatchable, NativeTokenFactory, ERC721TokenReceiver, ERC1155TokenReceiver {\n    // ******************* //\n    // *** CONSTRUCTOR *** //\n    // ******************* //\n    using BoringAddress for address;\n    using BoringERC20 for IERC20;\n    using BoringERC20 for IWrappedNative;\n    using YieldBoxRebase for uint256;\n\n    // ************** //\n    // *** EVENTS *** //\n    // ************** //\n    event Deposited(\n        address indexed sender,\n        address indexed from,\n        address indexed to,\n        uint256 assetId,\n        uint256 amountIn,\n        uint256 shareIn,\n        uint256 amountOut,\n        uint256 shareOut,\n        bool isNFT\n    );\n\n    event Withdraw(\n        address indexed sender,\n        address indexed from,\n        address indexed to,\n        uint256 assetId,\n        uint256 amountIn,\n        uint256 shareIn,\n        uint256 amountOut,\n        uint256 shareOut\n    );\n\n    // ******************* //\n    // *** CONSTRUCTOR *** //\n    // ******************* //\n    IWrappedNative public immutable wrappedNative;\n    YieldBoxURIBuilder public immutable uriBuilder;\n\n    constructor(IWrappedNative wrappedNative_, YieldBoxURIBuilder uriBuilder_) YieldBoxPermit(\"YieldBox\") {\n        wrappedNative = wrappedNative_;\n        uriBuilder = uriBuilder_;\n    }\n\n    // ************************** //\n    // *** INTERNAL FUNCTIONS *** //\n    // ************************** //\n\n    /// @dev Returns the total balance of `token` the strategy contract holds,\n    /// plus the total amount this contract thinks the strategy holds.\n    function _tokenBalanceOf(Asset storage asset) internal view returns (uint256 amount) {\n        return asset.strategy.currentBalance();\n    }\n\n    // ************************ //\n    // *** PUBLIC FUNCTIONS *** //\n    // ************************ //\n\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\n    /// @param assetId The id of the asset.\n    /// @param from which account to pull the tokens.\n    /// @param to which account to push the tokens.\n    /// @param amount Token amount in native representation to deposit.\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\n    /// @return amountOut The amount deposited.\n    /// @return shareOut The deposited amount repesented in shares.\n    function depositAsset(\n        uint256 assetId,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) public allowed(from, assetId) returns (uint256 amountOut, uint256 shareOut) {\n        // Checks\n        Asset storage asset = assets[assetId];\n        require(asset.tokenType != TokenType.Native && asset.tokenType != TokenType.ERC721, \"YieldBox: can't deposit type\");\n\n        // Effects\n        uint256 totalAmount = _tokenBalanceOf(asset);\n        if (share == 0) {\n            // value of the share may be lower than the amount due to rounding, that's ok\n            share = amount._toShares(totalSupply[assetId], totalAmount, false);\n        } else {\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\n            amount = share._toAmount(totalSupply[assetId], totalAmount, true);\n        }\n\n        _mint(to, assetId, share);\n\n        // Interactions\n        if (asset.tokenType == TokenType.ERC20) {\n            // For ERC20 tokens, use the safe helper function to deal with broken ERC20 implementations. This actually calls transferFrom on the ERC20 contract.\n            IERC20(asset.contractAddress).safeTransferFrom(from, address(asset.strategy), amount);\n        } else {\n            // ERC1155\n            // When depositing yieldBox tokens into the yieldBox, things can be simplified\n            if (asset.contractAddress == address(this)) {\n                _transferSingle(from, address(asset.strategy), asset.tokenId, amount);\n            } else {\n                IERC1155(asset.contractAddress).safeTransferFrom(from, address(asset.strategy), asset.tokenId, amount, \"\");\n            }\n        }\n\n        asset.strategy.deposited(amount);\n\n        emit Deposited(msg.sender, from, to, assetId, amount, share, amountOut, shareOut, false);\n\n        return (amount, share);\n    }\n\n    /// @notice Deposit an NFT asset\n    /// @param assetId The id of the asset.\n    /// @param from which account to pull the tokens.\n    /// @param to which account to push the tokens.\n    /// @return amountOut The amount deposited.\n    /// @return shareOut The deposited amount repesented in shares.\n    function depositNFTAsset(\n        uint256 assetId,\n        address from,\n        address to\n    ) public allowed(from, assetId) returns (uint256 amountOut, uint256 shareOut) {\n        // Checks\n        Asset storage asset = assets[assetId];\n        require(asset.tokenType == TokenType.ERC721, \"YieldBox: not ERC721\");\n\n        // Effects\n        _mint(to, assetId, 1);\n\n        // Interactions\n        IERC721(asset.contractAddress).safeTransferFrom(from, address(asset.strategy), asset.tokenId);\n\n        asset.strategy.deposited(1);\n\n        emit Deposited(msg.sender, from, to, assetId, 1, 1, 1, 1, true);\n\n        return (1, 1);\n    }\n\n    /// @notice Deposit ETH asset\n    /// @param assetId The id of the asset.\n    /// @param to which account to push the tokens.\n    /// @param amount ETH amount to deposit.\n    /// @return amountOut The amount deposited.\n    /// @return shareOut The deposited amount repesented in shares.\n    function depositETHAsset(\n        uint256 assetId,\n        address to,\n        uint256 amount\n    ) public payable returns (uint256 amountOut, uint256 shareOut) {\n        // Checks\n        Asset storage asset = assets[assetId];\n        require(asset.tokenType == TokenType.ERC20 && asset.contractAddress == address(wrappedNative), \"YieldBox: not wrappedNative\");\n\n        // Effects\n        uint256 share = amount._toShares(totalSupply[assetId], _tokenBalanceOf(asset), false);\n\n        _mint(to, assetId, share);\n\n        // Interactions\n        wrappedNative.deposit{ value: amount }();\n        // Strategies always receive wrappedNative (supporting both wrapped and raw native tokens adds too much complexity)\n        wrappedNative.safeTransfer(address(asset.strategy), amount);\n        asset.strategy.deposited(amount);\n\n        emit Deposited(msg.sender, msg.sender, to, assetId, amount, share, amountOut, shareOut, false);\n\n        return (amount, share);\n    }\n\n    /// @notice Withdraws an amount of `token` from a user account.\n    /// @param assetId The id of the asset.\n    /// @param from which user to pull the tokens.\n    /// @param to which user to push the tokens.\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\n    /// @param share Like above, but `share` takes precedence over `amount`.\n    function withdraw(\n        uint256 assetId,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) public allowed(from, assetId) returns (uint256 amountOut, uint256 shareOut) {\n        // Checks\n        Asset storage asset = assets[assetId];\n        require(asset.tokenType != TokenType.Native, \"YieldBox: can't withdraw Native\");\n\n        // Handle ERC721 separately\n        if (asset.tokenType == TokenType.ERC721) {\n            return _withdrawNFT(asset, assetId, from, to);\n        }\n\n        return _withdrawFungible(asset, assetId, from, to, amount, share);\n    }\n\n    /// @notice Handles burning and withdrawal of ERC20 and 1155 tokens.\n    /// @param asset The asset to withdraw.\n    /// @param assetId The id of the asset.\n    /// @param from which user to pull the tokens.\n    /// @param to which user to push the tokens.\n    function _withdrawNFT(\n        Asset storage asset,\n        uint256 assetId,\n        address from,\n        address to\n    ) internal returns (uint256 amountOut, uint256 shareOut) {\n        _burn(from, assetId, 1);\n\n        // Interactions\n        asset.strategy.withdraw(to, 1);\n\n        emit Withdraw(msg.sender, from, to, assetId, 1, 1, 1, 1);\n\n        return (1, 1);\n    }\n\n    /// @notice Handles burning and withdrawal of ERC20 and 1155 tokens.\n    /// @param asset The asset to withdraw.\n    /// @param assetId The id of the asset.\n    /// @param from which user to pull the tokens.\n    /// @param to which user to push the tokens.\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\n    /// @param share Like above, but `share` takes precedence over `amount`.\n    function _withdrawFungible(\n        Asset storage asset,\n        uint256 assetId,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) internal returns (uint256 amountOut, uint256 shareOut) {\n        // Effects\n        uint256 totalAmount = _tokenBalanceOf(asset);\n        if (share == 0) {\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\n            share = amount._toShares(totalSupply[assetId], totalAmount, true);\n        } else {\n            // amount may be lower than the value of share due to rounding, that's ok\n            amount = share._toAmount(totalSupply[assetId], totalAmount, false);\n        }\n\n        _burn(from, assetId, share);\n\n        // Interactions\n        asset.strategy.withdraw(to, amount);\n\n        emit Withdraw(msg.sender, from, to, assetId, amount, share, amountOut, shareOut);\n\n        return (amount, share);\n    }\n\n    /// @notice Transfer shares from a user account to another one.\n    /// @param from which user to pull the tokens.\n    /// @param to which user to push the tokens.\n    /// @param assetId The id of the asset.\n    /// @param share The amount of `token` in shares.\n    function transfer(\n        address from,\n        address to,\n        uint256 assetId,\n        uint256 share\n    ) public allowed(from, assetId) {\n        _transferSingle(from, to, assetId, share);\n    }\n\n    function batchTransfer(\n        address from,\n        address to,\n        uint256[] calldata assetIds_,\n        uint256[] calldata shares_\n    ) public allowed(from, type(uint256).max) {\n        _transferBatch(from, to, assetIds_, shares_);\n    }\n\n    /// @notice Transfer shares from a user account to multiple other ones.\n    /// @param assetId The id of the asset.\n    /// @param from which user to pull the tokens.\n    /// @param tos The receivers of the tokens.\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\n    function transferMultiple(\n        address from,\n        address[] calldata tos,\n        uint256 assetId,\n        uint256[] calldata shares\n    ) public allowed(from, type(uint256).max) {\n        // Checks\n        uint256 len = tos.length;\n        for (uint256 i = 0; i < len; i++) {\n            require(tos[i] != address(0), \"YieldBox: to not set\"); // To avoid a bad UI from burning funds\n        }\n\n        // Effects\n        uint256 totalAmount;\n        for (uint256 i = 0; i < len; i++) {\n            address to = tos[i];\n            uint256 share_ = shares[i];\n            balanceOf[to][assetId] += share_;\n            totalAmount += share_;\n            emit TransferSingle(msg.sender, from, to, assetId, share_);\n        }\n        balanceOf[from][assetId] -= totalAmount;\n    }\n\n    /// @notice Update approval status for an operator\n    /// @param operator The address approved to perform actions on your behalf\n    /// @param approved True/False\n    function setApprovalForAll(address operator, bool approved) external override {\n        // Checks\n        require(operator != address(0), \"YieldBox: operator not set\"); // Important for security\n        require(operator != address(this), \"YieldBox: can't approve yieldBox\");\n\n        // Effects\n        _setApprovalForAll(msg.sender, operator, approved);\n    }\n\n    /// @notice Update approval status for an operator\n    /// @param _owner The YieldBox account owner\n    /// @param operator The address approved to perform actions on your behalf\n    /// @param approved True/False\n    function _setApprovalForAll(\n        address _owner,\n        address operator,\n        bool approved\n    ) internal override{\n        isApprovedForAll[_owner][operator] = approved;\n        emit ApprovalForAll(_owner, operator, approved);\n    }\n\n    /// @notice Update approval status for an operator and for a specific asset\n    /// @param operator The address approved to perform actions on your behalf\n    /// @param assetId The asset id  to update approval status for\n    /// @param approved True/False\n    function setApprovalForAsset(\n        address operator,\n        uint256 assetId,\n        bool approved\n    ) external override {\n        // Checks\n        require(operator != address(0), \"YieldBox: operator not set\"); // Important for security\n        require(operator != address(this), \"YieldBox: can't approve yieldBox\");\n        require(assetId < assetCount(), \"YieldBox: asset not valid\");\n\n        // Effects\n        _setApprovalForAsset(msg.sender, operator, assetId, approved);\n    }\n\n    /// @notice Update approval status for an operator and for a specific asset\n    /// @param _owner The owner of the asset\n    /// @param operator The address approved to perform actions on your behalf\n    /// @param assetId The asset id  to update approval status for\n    /// @param approved True/False\n    function _setApprovalForAsset(\n        address _owner,\n        address operator,\n        uint256 assetId,\n        bool approved\n    ) internal override {\n        isApprovedForAsset[_owner][operator][assetId] = approved;\n        emit ApprovalForAsset(_owner, operator, assetId, approved);\n    }\n\n    // This functionality has been split off into a separate contract. This is only a view function, so gas usage isn't a huge issue.\n    // This keeps the YieldBox contract smaller, so it can be optimized more.\n    function uri(uint256 assetId) external view override returns (string memory) {\n        return uriBuilder.uri(assets[assetId], nativeTokens[assetId], totalSupply[assetId], owner[assetId]);\n    }\n\n    function name(uint256 assetId) external view returns (string memory) {\n        return uriBuilder.name(assets[assetId], nativeTokens[assetId].name);\n    }\n\n    function symbol(uint256 assetId) external view returns (string memory) {\n        return uriBuilder.symbol(assets[assetId], nativeTokens[assetId].symbol);\n    }\n\n    function decimals(uint256 assetId) external view returns (uint8) {\n        return uriBuilder.decimals(assets[assetId], nativeTokens[assetId].decimals);\n    }\n\n    // Helper functions\n\n    /// @notice Helper function to return totals for an asset\n    /// @param assetId The regierestered asset id\n    /// @return totalShare The total amount for asset represented in shares\n    /// @return totalAmount The total amount for asset\n    function assetTotals(uint256 assetId) external view returns (uint256 totalShare, uint256 totalAmount) {\n        totalShare = totalSupply[assetId];\n        totalAmount = _tokenBalanceOf(assets[assetId]);\n    }\n\n    /// @dev Helper function to represent an `amount` of `token` in shares.\n    /// @param assetId The id of the asset.\n    /// @param amount The `token` amount.\n    /// @param roundUp If the result `share` should be rounded up.\n    /// @return share The token amount represented in shares.\n    function toShare(\n        uint256 assetId,\n        uint256 amount,\n        bool roundUp\n    ) external view returns (uint256 share) {\n        if (assets[assetId].tokenType == TokenType.Native || assets[assetId].tokenType == TokenType.ERC721) {\n            share = amount;\n        } else {\n            share = amount._toShares(totalSupply[assetId], _tokenBalanceOf(assets[assetId]), roundUp);\n        }\n    }\n\n    /// @dev Helper function represent shares back into the `token` amount.\n    /// @param assetId The id of the asset.\n    /// @param share The amount of shares.\n    /// @param roundUp If the result should be rounded up.\n    /// @return amount The share amount back into native representation.\n    function toAmount(\n        uint256 assetId,\n        uint256 share,\n        bool roundUp\n    ) external view returns (uint256 amount) {\n        if (assets[assetId].tokenType == TokenType.Native || assets[assetId].tokenType == TokenType.ERC721) {\n            amount = share;\n        } else {\n            amount = share._toAmount(totalSupply[assetId], _tokenBalanceOf(assets[assetId]), roundUp);\n        }\n    }\n\n    /// @dev Helper function represent the balance in `token` amount for a `user` for an `asset`.\n    /// @param user The `user` to get the amount for.\n    /// @param assetId The id of the asset.\n    function amountOf(address user, uint256 assetId) external view returns (uint256 amount) {\n        if (assets[assetId].tokenType == TokenType.Native || assets[assetId].tokenType == TokenType.ERC721) {\n            amount = balanceOf[user][assetId];\n        } else {\n            amount = balanceOf[user][assetId]._toAmount(totalSupply[assetId], _tokenBalanceOf(assets[assetId]), false);\n        }\n    }\n\n    /// @notice Helper function to register & deposit an asset\n    /// @param tokenType Registration token type.\n    /// @param contractAddress Token address.\n    /// @param strategy Asset's strategy address.\n    /// @param tokenId Registration token id.\n    /// @param from which user to pull the tokens.\n    /// @param to which account to push the tokens.\n    /// @param amount amount to deposit.\n    /// @param share amount to deposit represented in shares.\n    /// @return amountOut The amount deposited.\n    /// @return shareOut The deposited amount repesented in shares.\n    function deposit(\n        TokenType tokenType,\n        address contractAddress,\n        IStrategy strategy,\n        uint256 tokenId,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) public returns (uint256 amountOut, uint256 shareOut) {\n        if (tokenType == TokenType.Native) {\n            // If native token, register it as an ERC1155 asset (as that's what it is)\n            return depositAsset(registerAsset(TokenType.ERC1155, address(this), strategy, tokenId), from, to, amount, share);\n        } else {\n            return depositAsset(registerAsset(tokenType, contractAddress, strategy, tokenId), from, to, amount, share);\n        }\n    }\n\n    /// @notice Helper function to register & deposit ETH\n    /// @param strategy Asset's strategy address.\n    /// @param amount amount to deposit.\n    /// @return amountOut The amount deposited.\n    /// @return shareOut The deposited amount repesented in shares.\n    function depositETH(\n        IStrategy strategy,\n        address to,\n        uint256 amount\n    ) public payable returns (uint256 amountOut, uint256 shareOut) {\n        return depositETHAsset(registerAsset(TokenType.ERC20, address(wrappedNative), strategy, 0), to, amount);\n    }\n}\n"},"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxPermit.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"./interfaces/IYieldBox.sol\";\n\n/**\n * Modification of the OpenZeppelin ERC20Permit contract to support ERC721 tokens.\n * OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol).\n *\n * @dev Implementation of the ERC-4494 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-4494[EIP-4494].\n *\n * Adds the {permit} method, which can be used to change an account's ERC721 allowance (see {IERC721-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC721-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract YieldBoxPermit is EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 assetId,uint256 nonce,uint256 deadline)\");\n    \n\n    bytes32 private constant _PERMIT_ALL_TYPEHASH =\n        keccak256(\"PermitAll(address owner,address spender,uint256 nonce,uint256 deadline)\");\n    \n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC721 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 assetId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(block.timestamp <= deadline, \"YieldBoxPermit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, assetId, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"YieldBoxPermit: invalid signature\");\n\n        _setApprovalForAsset(owner, spender, assetId, true);\n    }\n\n\n    function _setApprovalForAsset(\n        address owner,\n        address spender,\n        uint256 assetId,\n        bool approved\n    ) internal virtual;\n\n\n    function permitAll(\n        address owner,\n        address spender,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(block.timestamp <= deadline, \"YieldBoxPermit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_ALL_TYPEHASH, owner, spender, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"YieldBoxPermit: invalid signature\");\n\n        _setApprovalForAll(owner, spender, true);\n    }\n\n    function _setApprovalForAll(\n        address _owner,\n        address operator,\n        bool approved\n    ) internal virtual;\n    \n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"},"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxRebase.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\nimport \"./interfaces/IStrategy.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/Domain.sol\";\nimport \"./ERC1155TokenReceiver.sol\";\nimport \"./ERC1155.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/BoringFactory.sol\";\n\nlibrary YieldBoxRebase {\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\n    function _toShares(\n        uint256 amount,\n        uint256 totalShares_,\n        uint256 totalAmount,\n        bool roundUp\n    ) internal pure returns (uint256 share) {\n        // To prevent reseting the ratio due to withdrawal of all shares, we start with\n        // 1 amount/1e8 shares already burned. This also starts with a 1 : 1e8 ratio which\n        // functions like 8 decimal fixed point math. This prevents ratio attacks or inaccuracy\n        // due to 'gifting' or rebasing tokens. (Up to a certain degree)\n        totalAmount++;\n        totalShares_ += 1e8;\n\n        // Calculte the shares using te current amount to share ratio\n        share = (amount * totalShares_) / totalAmount;\n\n        // Default is to round down (Solidity), round up if required\n        if (roundUp && (share * totalAmount) / totalShares_ < amount) {\n            share++;\n        }\n    }\n\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\n    function _toAmount(\n        uint256 share,\n        uint256 totalShares_,\n        uint256 totalAmount,\n        bool roundUp\n    ) internal pure returns (uint256 amount) {\n        // To prevent reseting the ratio due to withdrawal of all shares, we start with\n        // 1 amount/1e8 shares already burned. This also starts with a 1 : 1e8 ratio which\n        // functions like 8 decimal fixed point math. This prevents ratio attacks or inaccuracy\n        // due to 'gifting' or rebasing tokens. (Up to a certain degree)\n        totalAmount++;\n        totalShares_ += 1e8;\n\n        // Calculte the amount using te current amount to share ratio\n        amount = (share * totalAmount) / totalShares_;\n\n        // Default is to round down (Solidity), round up if required\n        if (roundUp && (amount * totalShares_) / totalAmount < share) {\n            amount++;\n        }\n    }\n}\n"},"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxURIBuilder.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\";\nimport \"./interfaces/IYieldBox.sol\";\nimport \"./NativeTokenFactory.sol\";\n\n// solhint-disable quotes\n\ncontract YieldBoxURIBuilder {\n    using BoringERC20 for IERC20;\n    using Strings for uint256;\n    using Base64 for bytes;\n\n    struct AssetDetails {\n        string tokenType;\n        string name;\n        string symbol;\n        uint256 decimals;\n    }\n\n    function name(Asset calldata asset, string calldata nativeName) external view returns (string memory) {\n        if (asset.strategy == NO_STRATEGY) {\n            return nativeName;\n        } else {\n            if (asset.tokenType == TokenType.ERC20) {\n                IERC20 token = IERC20(asset.contractAddress);\n                return string(abi.encodePacked(token.safeName(), \" (\", asset.strategy.name(), \")\"));\n            } else if (asset.tokenType == TokenType.ERC1155) {\n                return\n                    string(\n                        abi.encodePacked(\n                            string(\n                                abi.encodePacked(\n                                    \"ERC1155:\",\n                                    uint256(uint160(asset.contractAddress)).toHexString(20),\n                                    \"/\",\n                                    asset.tokenId.toString()\n                                )\n                            ),\n                            \" (\",\n                            asset.strategy.name(),\n                            \")\"\n                        )\n                    );\n            } else {\n                return string(abi.encodePacked(nativeName, \" (\", asset.strategy.name(), \")\"));\n            }\n        }\n    }\n\n    function symbol(Asset calldata asset, string calldata nativeSymbol) external view returns (string memory) {\n        if (asset.strategy == NO_STRATEGY) {\n            return nativeSymbol;\n        } else {\n            if (asset.tokenType == TokenType.ERC20) {\n                IERC20 token = IERC20(asset.contractAddress);\n                return string(abi.encodePacked(token.safeSymbol(), \" (\", asset.strategy.name(), \")\"));\n            } else if (asset.tokenType == TokenType.ERC1155) {\n                return string(abi.encodePacked(\"ERC1155\", \" (\", asset.strategy.name(), \")\"));\n            } else {\n                return string(abi.encodePacked(nativeSymbol, \" (\", asset.strategy.name(), \")\"));\n            }\n        }\n    }\n\n    function decimals(Asset calldata asset, uint8 nativeDecimals) external view returns (uint8) {\n        if (asset.tokenType == TokenType.ERC1155) {\n            return 0;\n        } else if (asset.tokenType == TokenType.ERC20) {\n            IERC20 token = IERC20(asset.contractAddress);\n            return token.safeDecimals();\n        } else {\n            return nativeDecimals;\n        }\n    }\n\n    function uri(\n        Asset calldata asset,\n        NativeToken calldata nativeToken,\n        uint256 totalSupply,\n        address owner\n    ) external view returns (string memory) {\n        AssetDetails memory details;\n        if (asset.tokenType == TokenType.ERC1155) {\n            // Contracts can't retrieve URIs, so the details are out of reach\n            details.tokenType = \"ERC1155\";\n            details.name = string(\n                abi.encodePacked(\"ERC1155:\", uint256(uint160(asset.contractAddress)).toHexString(20), \"/\", asset.tokenId.toString())\n            );\n            details.symbol = \"ERC1155\";\n        } else if (asset.tokenType == TokenType.ERC20) {\n            IERC20 token = IERC20(asset.contractAddress);\n            details = AssetDetails(\"ERC20\", token.safeName(), token.safeSymbol(), token.safeDecimals());\n        } else {\n            // Native\n            details.tokenType = \"Native\";\n            details.name = nativeToken.name;\n            details.symbol = nativeToken.symbol;\n            details.decimals = nativeToken.decimals;\n        }\n\n        string memory properties = string(\n            asset.tokenType != TokenType.Native\n                ? abi.encodePacked(',\"tokenAddress\":\"', uint256(uint160(asset.contractAddress)).toHexString(20), '\"')\n                : abi.encodePacked(',\"totalSupply\":', totalSupply.toString(), ',\"fixedSupply\":', owner == address(0) ? \"true\" : \"false\")\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    abi\n                        .encodePacked(\n                            '{\"name\":\"',\n                            details.name,\n                            '\",\"symbol\":\"',\n                            details.symbol,\n                            '\"',\n                            asset.tokenType == TokenType.ERC1155 ? \"\" : ',\"decimals\":',\n                            asset.tokenType == TokenType.ERC1155 ? \"\" : details.decimals.toString(),\n                            ',\"properties\":{\"strategy\":\"',\n                            uint256(uint160(address(asset.strategy))).toHexString(20),\n                            '\",\"tokenType\":\"',\n                            details.tokenType,\n                            '\"',\n                            properties,\n                            asset.tokenType == TokenType.ERC1155 ? string(abi.encodePacked(',\"tokenId\":', asset.tokenId.toString())) : \"\",\n                            \"}}\"\n                        )\n                        .encode()\n                )\n            );\n    }\n}\n"}},"settings":{"viaIR":true,"optimizer":{"enabled":true,"runs":700},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates","devdoc","userdoc"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol":{"ast":{"absolutePath":"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol","exportedSymbols":{"BaseBoringBatchable":[78],"BoringBatchable":[115],"IERC20":[540]},"id":116,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:0"},{"id":2,"literals":["experimental","ABIEncoderV2"],"nodeType":"PragmaDirective","src":"58:33:0"},{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol","file":"./interfaces/IERC20.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":116,"sourceUnit":541,"src":"341:33:0","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"BaseBoringBatchable","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":78,"linearizedBaseContracts":[78],"name":"BaseBoringBatchable","nameLocation":"387:19:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":27,"nodeType":"Block","src":"690:409:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":14,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":11,"name":"_returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"817:11:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":12,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"829:6:0","memberName":"length","nodeType":"MemberAccess","src":"817:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3638","id":13,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"838:2:0","typeDescriptions":{"typeIdentifier":"t_rational_68_by_1","typeString":"int_const 68"},"value":"68"},"src":"817:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":17,"nodeType":"IfStatement","src":"813:67:0","trueBody":{"expression":{"hexValue":"5472616e73616374696f6e2072657665727465642073696c656e746c79","id":15,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"849:31:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_d0b1e7612ebe87924453e5d4581b9067879655587bae8a2dfee438433699b890","typeString":"literal_string \"Transaction reverted silently\""},"value":"Transaction reverted silently"},"functionReturnParameters":10,"id":16,"nodeType":"Return","src":"842:38:0"}},{"AST":{"nodeType":"YulBlock","src":"902:98:0","statements":[{"nodeType":"YulAssignment","src":"952:37:0","value":{"arguments":[{"name":"_returnData","nodeType":"YulIdentifier","src":"971:11:0"},{"kind":"number","nodeType":"YulLiteral","src":"984:4:0","type":"","value":"0x04"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:0"},"nodeType":"YulFunctionCall","src":"967:22:0"},"variableNames":[{"name":"_returnData","nodeType":"YulIdentifier","src":"952:11:0"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":6,"isOffset":false,"isSlot":false,"src":"952:11:0","valueSize":1},{"declaration":6,"isOffset":false,"isSlot":false,"src":"971:11:0","valueSize":1}],"id":18,"nodeType":"InlineAssembly","src":"893:107:0"},{"expression":{"arguments":[{"id":21,"name":"_returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"1028:11:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":23,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1042:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":22,"name":"string","nodeType":"ElementaryTypeName","src":"1042:6:0","typeDescriptions":{}}}],"id":24,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1041:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}],"expression":{"id":19,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1017:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":20,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1021:6:0","memberName":"decode","nodeType":"MemberAccess","src":"1017:10:0","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1017:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":10,"id":26,"nodeType":"Return","src":"1010:40:0"}]},"documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"414:183:0","text":"@dev Helper function to extract a useful revert message from a failed call.\n If the returned data is malformed or not correctly abi encoded then this call can fail itself."},"id":28,"implemented":true,"kind":"function","modifiers":[],"name":"_getRevertMsg","nameLocation":"612:13:0","nodeType":"FunctionDefinition","parameters":{"id":7,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6,"mutability":"mutable","name":"_returnData","nameLocation":"639:11:0","nodeType":"VariableDeclaration","scope":28,"src":"626:24:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5,"name":"bytes","nodeType":"ElementaryTypeName","src":"626:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"625:26:0"},"returnParameters":{"id":10,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":28,"src":"675:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"674:15:0"},"scope":78,"src":"603:496:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":76,"nodeType":"Block","src":"1804:270:0","statements":[{"body":{"id":74,"nodeType":"Block","src":"1858:209:0","statements":[{"assignments":[49,51],"declarations":[{"constant":false,"id":49,"mutability":"mutable","name":"success","nameLocation":"1879:7:0","nodeType":"VariableDeclaration","scope":74,"src":"1874:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":48,"name":"bool","nodeType":"ElementaryTypeName","src":"1874:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":51,"mutability":"mutable","name":"result","nameLocation":"1901:6:0","nodeType":"VariableDeclaration","scope":74,"src":"1888:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":50,"name":"bytes","nodeType":"ElementaryTypeName","src":"1888:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":61,"initialValue":{"arguments":[{"baseExpression":{"id":57,"name":"calls","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"1938:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":59,"indexExpression":{"id":58,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"1944:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1938:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[{"id":54,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1919:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_BaseBoringBatchable_$78","typeString":"contract BaseBoringBatchable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BaseBoringBatchable_$78","typeString":"contract BaseBoringBatchable"}],"id":53,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1911:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":52,"name":"address","nodeType":"ElementaryTypeName","src":"1911:7:0","typeDescriptions":{}}},"id":55,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1911:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1925:12:0","memberName":"delegatecall","nodeType":"MemberAccess","src":"1911:26:0","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1911:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1873:74:0"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":63,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1966:8:0","subExpression":{"id":62,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49,"src":"1967:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":64,"name":"revertOnFail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"1978:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1966:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":73,"nodeType":"IfStatement","src":"1962:94:0","trueBody":{"id":72,"nodeType":"Block","src":"1992:64:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":68,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51,"src":"2032:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":67,"name":"_getRevertMsg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":28,"src":"2018:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":69,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2018:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":66,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"2011:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2011:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":71,"nodeType":"ExpressionStatement","src":"2011:29:0"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":41,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"1835:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":42,"name":"calls","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"1839:5:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes calldata[] calldata"}},"id":43,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1845:6:0","memberName":"length","nodeType":"MemberAccess","src":"1839:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1835:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":75,"initializationExpression":{"assignments":[38],"declarations":[{"constant":false,"id":38,"mutability":"mutable","name":"i","nameLocation":"1828:1:0","nodeType":"VariableDeclaration","scope":75,"src":"1820:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":37,"name":"uint256","nodeType":"ElementaryTypeName","src":"1820:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":40,"initialValue":{"hexValue":"30","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1832:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1820:13:0"},"loopExpression":{"expression":{"id":46,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1853:3:0","subExpression":{"id":45,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"1853:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":47,"nodeType":"ExpressionStatement","src":"1853:3:0"},"nodeType":"ForStatement","src":"1815:252:0"}]},"documentation":{"id":29,"nodeType":"StructuredDocumentation","src":"1107:213:0","text":"@notice Allows batched call to self (this contract).\n @param calls An array of inputs for each call.\n @param revertOnFail If True then reverts after a failed call and stops doing further calls."},"functionSelector":"d2423b51","id":77,"implemented":true,"kind":"function","modifiers":[],"name":"batch","nameLocation":"1738:5:0","nodeType":"FunctionDefinition","parameters":{"id":35,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"calls","nameLocation":"1761:5:0","nodeType":"VariableDeclaration","scope":77,"src":"1744:22:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":30,"name":"bytes","nodeType":"ElementaryTypeName","src":"1744:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":31,"nodeType":"ArrayTypeName","src":"1744:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":34,"mutability":"mutable","name":"revertOnFail","nameLocation":"1773:12:0","nodeType":"VariableDeclaration","scope":77,"src":"1768:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":33,"name":"bool","nodeType":"ElementaryTypeName","src":"1768:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1743:43:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[],"src":"1804:0:0"},"scope":78,"src":"1729:345:0","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":116,"src":"378:1699:0","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":79,"name":"BaseBoringBatchable","nameLocations":["2109:19:0"],"nodeType":"IdentifierPath","referencedDeclaration":78,"src":"2109:19:0"},"id":80,"nodeType":"InheritanceSpecifier","src":"2109:19:0"}],"canonicalName":"BoringBatchable","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":115,"linearizedBaseContracts":[115,78],"name":"BoringBatchable","nameLocation":"2090:15:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":113,"nodeType":"Block","src":"2680:68:0","statements":[{"expression":{"arguments":[{"id":104,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":86,"src":"2704:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":105,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"2710:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":106,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":90,"src":"2714:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":107,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":92,"src":"2722:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":108,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2732:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":109,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"2735:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":110,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2738:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":101,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"2691:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2697:6:0","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":539,"src":"2691:12:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2691:49:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112,"nodeType":"ExpressionStatement","src":"2691:49:0"}]},"documentation":{"id":81,"nodeType":"StructuredDocumentation","src":"2136:98:0","text":"@notice Call wrapper that performs `ERC20.permit` on `token`.\n Lookup `IERC20.permit`."},"functionSelector":"7c516e94","id":114,"implemented":true,"kind":"function","modifiers":[],"name":"permitToken","nameLocation":"2477:11:0","nodeType":"FunctionDefinition","parameters":{"id":99,"nodeType":"ParameterList","parameters":[{"constant":false,"id":84,"mutability":"mutable","name":"token","nameLocation":"2506:5:0","nodeType":"VariableDeclaration","scope":114,"src":"2499:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"},"typeName":{"id":83,"nodeType":"UserDefinedTypeName","pathNode":{"id":82,"name":"IERC20","nameLocations":["2499:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":540,"src":"2499:6:0"},"referencedDeclaration":540,"src":"2499:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":86,"mutability":"mutable","name":"from","nameLocation":"2530:4:0","nodeType":"VariableDeclaration","scope":114,"src":"2522:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":85,"name":"address","nodeType":"ElementaryTypeName","src":"2522:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":88,"mutability":"mutable","name":"to","nameLocation":"2553:2:0","nodeType":"VariableDeclaration","scope":114,"src":"2545:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":87,"name":"address","nodeType":"ElementaryTypeName","src":"2545:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":90,"mutability":"mutable","name":"amount","nameLocation":"2574:6:0","nodeType":"VariableDeclaration","scope":114,"src":"2566:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":89,"name":"uint256","nodeType":"ElementaryTypeName","src":"2566:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":92,"mutability":"mutable","name":"deadline","nameLocation":"2599:8:0","nodeType":"VariableDeclaration","scope":114,"src":"2591:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":91,"name":"uint256","nodeType":"ElementaryTypeName","src":"2591:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":94,"mutability":"mutable","name":"v","nameLocation":"2624:1:0","nodeType":"VariableDeclaration","scope":114,"src":"2618:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":93,"name":"uint8","nodeType":"ElementaryTypeName","src":"2618:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":96,"mutability":"mutable","name":"r","nameLocation":"2644:1:0","nodeType":"VariableDeclaration","scope":114,"src":"2636:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":95,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2636:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":98,"mutability":"mutable","name":"s","nameLocation":"2664:1:0","nodeType":"VariableDeclaration","scope":114,"src":"2656:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":97,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2656:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2488:184:0"},"returnParameters":{"id":100,"nodeType":"ParameterList","parameters":[],"src":"2680:0:0"},"scope":115,"src":"2468:280:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":116,"src":"2081:670:0","usedErrors":[]}],"src":"33:2720:0"},"id":0},"@boringcrypto/boring-solidity/contracts/BoringFactory.sol":{"ast":{"absolutePath":"@boringcrypto/boring-solidity/contracts/BoringFactory.sol","exportedSymbols":{"BoringFactory":[225],"IMasterContract":[726]},"id":226,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":117,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:1"},{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol","file":"./interfaces/IMasterContract.sol","id":118,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":226,"sourceUnit":727,"src":"58:42:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"BoringFactory","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":225,"linearizedBaseContracts":[225],"name":"BoringFactory","nameLocation":"154:13:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"d62166f3c2149208e51788b1401cc356bf5da1fc6c7886a32e18570f57d88b3b","id":126,"name":"LogDeploy","nameLocation":"181:9:1","nodeType":"EventDefinition","parameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":120,"indexed":true,"mutability":"mutable","name":"masterContract","nameLocation":"207:14:1","nodeType":"VariableDeclaration","scope":126,"src":"191:30:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":119,"name":"address","nodeType":"ElementaryTypeName","src":"191:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":122,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"229:4:1","nodeType":"VariableDeclaration","scope":126,"src":"223:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":121,"name":"bytes","nodeType":"ElementaryTypeName","src":"223:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":124,"indexed":true,"mutability":"mutable","name":"cloneAddress","nameLocation":"251:12:1","nodeType":"VariableDeclaration","scope":126,"src":"235:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":123,"name":"address","nodeType":"ElementaryTypeName","src":"235:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"190:74:1"},"src":"175:90:1"},{"constant":false,"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"273:65:1","text":"@notice Mapping from clone contracts to their masterContract."},"functionSelector":"bafe4f14","id":131,"mutability":"mutable","name":"masterContractOf","nameLocation":"379:16:1","nodeType":"VariableDeclaration","scope":225,"src":"344:51:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":130,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"352:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"344:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":129,"name":"address","nodeType":"ElementaryTypeName","src":"363:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"constant":false,"documentation":{"id":132,"nodeType":"StructuredDocumentation","src":"404:270:1","text":"@notice Mapping from masterContract to an array of all clones\n On mainnet events can be used to get this list, but events aren't always easy to retrieve and\n barely work on sidechains. While this adds gas, it makes enumerating all clones much easier."},"functionSelector":"8fd43654","id":137,"mutability":"mutable","name":"clonesOf","nameLocation":"717:8:1","nodeType":"VariableDeclaration","scope":225,"src":"680:45:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[])"},"typeName":{"id":136,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":133,"name":"address","nodeType":"ElementaryTypeName","src":"688:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"680:29:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":134,"name":"address","nodeType":"ElementaryTypeName","src":"699:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":135,"nodeType":"ArrayTypeName","src":"699:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"visibility":"public"},{"body":{"id":152,"nodeType":"Block","src":"1051:63:1","statements":[{"expression":{"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":145,"name":"cloneCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":143,"src":"1062:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"id":146,"name":"clonesOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":137,"src":"1075:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":148,"indexExpression":{"id":147,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"1084:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1075:24:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1100:6:1","memberName":"length","nodeType":"MemberAccess","src":"1075:31:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1062:44:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":151,"nodeType":"ExpressionStatement","src":"1062:44:1"}]},"documentation":{"id":138,"nodeType":"StructuredDocumentation","src":"734:223:1","text":"@notice Returns the count of clones that exists for a specific masterContract\n @param masterContract The address of the master contract.\n @return cloneCount total number of clones for the masterContract."},"functionSelector":"fba96be8","id":153,"implemented":true,"kind":"function","modifiers":[],"name":"clonesOfCount","nameLocation":"972:13:1","nodeType":"FunctionDefinition","parameters":{"id":141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":140,"mutability":"mutable","name":"masterContract","nameLocation":"994:14:1","nodeType":"VariableDeclaration","scope":153,"src":"986:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":139,"name":"address","nodeType":"ElementaryTypeName","src":"986:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"985:24:1"},"returnParameters":{"id":144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":143,"mutability":"mutable","name":"cloneCount","nameLocation":"1039:10:1","nodeType":"VariableDeclaration","scope":153,"src":"1031:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":142,"name":"uint256","nodeType":"ElementaryTypeName","src":"1031:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1030:20:1"},"scope":225,"src":"963:151:1","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":223,"nodeType":"Block","src":"1811:1600:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":166,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"1830:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1856:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1848:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":167,"name":"address","nodeType":"ElementaryTypeName","src":"1848:7:1","typeDescriptions":{}}},"id":170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1848:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1830:28:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"426f72696e67466163746f72793a204e6f206d6173746572436f6e7472616374","id":172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1860:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca263bb3a1d34921c755bbb7d563d78653106aed124fb087e2484c54b7a9af02","typeString":"literal_string \"BoringFactory: No masterContract\""},"value":"BoringFactory: No masterContract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ca263bb3a1d34921c755bbb7d563d78653106aed124fb087e2484c54b7a9af02","typeString":"literal_string \"BoringFactory: No masterContract\""}],"id":165,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1822:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1822:73:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":174,"nodeType":"ExpressionStatement","src":"1822:73:1"},{"assignments":[176],"declarations":[{"constant":false,"id":176,"mutability":"mutable","name":"targetBytes","nameLocation":"1914:11:1","nodeType":"VariableDeclaration","scope":223,"src":"1906:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":175,"name":"bytes20","nodeType":"ElementaryTypeName","src":"1906:7:1","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"id":181,"initialValue":{"arguments":[{"id":179,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"1936:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":178,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1928:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes20_$","typeString":"type(bytes20)"},"typeName":{"id":177,"name":"bytes20","nodeType":"ElementaryTypeName","src":"1928:7:1","typeDescriptions":{}}},"id":180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"nodeType":"VariableDeclarationStatement","src":"1906:45:1"},{"condition":{"id":182,"name":"useCreate2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":160,"src":"2028:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":192,"nodeType":"Block","src":"2745:413:1","statements":[{"AST":{"nodeType":"YulBlock","src":"2769:378:1","statements":[{"nodeType":"YulVariableDeclaration","src":"2788:24:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2807:4:1","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2801:5:1"},"nodeType":"YulFunctionCall","src":"2801:11:1"},"variables":[{"name":"clone","nodeType":"YulTypedName","src":"2792:5:1","type":""}]},{"expression":{"arguments":[{"name":"clone","nodeType":"YulIdentifier","src":"2837:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"2844:66:1","type":"","value":"0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2830:6:1"},"nodeType":"YulFunctionCall","src":"2830:81:1"},"nodeType":"YulExpressionStatement","src":"2830:81:1"},{"expression":{"arguments":[{"arguments":[{"name":"clone","nodeType":"YulIdentifier","src":"2940:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"2947:4:1","type":"","value":"0x14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2936:3:1"},"nodeType":"YulFunctionCall","src":"2936:16:1"},{"name":"targetBytes","nodeType":"YulIdentifier","src":"2954:11:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2929:6:1"},"nodeType":"YulFunctionCall","src":"2929:37:1"},"nodeType":"YulExpressionStatement","src":"2929:37:1"},{"expression":{"arguments":[{"arguments":[{"name":"clone","nodeType":"YulIdentifier","src":"2995:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"3002:4:1","type":"","value":"0x28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2991:3:1"},"nodeType":"YulFunctionCall","src":"2991:16:1"},{"kind":"number","nodeType":"YulLiteral","src":"3009:66:1","type":"","value":"0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2984:6:1"},"nodeType":"YulFunctionCall","src":"2984:92:1"},"nodeType":"YulExpressionStatement","src":"2984:92:1"},{"nodeType":"YulAssignment","src":"3094:38:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3117:1:1","type":"","value":"0"},{"name":"clone","nodeType":"YulIdentifier","src":"3120:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"3127:4:1","type":"","value":"0x37"}],"functionName":{"name":"create","nodeType":"YulIdentifier","src":"3110:6:1"},"nodeType":"YulFunctionCall","src":"3110:22:1"},"variableNames":[{"name":"cloneAddress","nodeType":"YulIdentifier","src":"3094:12:1"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":163,"isOffset":false,"isSlot":false,"src":"3094:12:1","valueSize":1},{"declaration":176,"isOffset":false,"isSlot":false,"src":"2954:11:1","valueSize":1}],"id":191,"nodeType":"InlineAssembly","src":"2760:387:1"}]},"id":193,"nodeType":"IfStatement","src":"2024:1134:1","trueBody":{"id":190,"nodeType":"Block","src":"2040:699:1","statements":[{"assignments":[184],"declarations":[{"constant":false,"id":184,"mutability":"mutable","name":"salt","nameLocation":"2175:4:1","nodeType":"VariableDeclaration","scope":190,"src":"2167:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":183,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2167:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":188,"initialValue":{"arguments":[{"id":186,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"2192:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":185,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2182:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2182:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2167:30:1"},{"AST":{"nodeType":"YulBlock","src":"2343:385:1","statements":[{"nodeType":"YulVariableDeclaration","src":"2362:24:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2381:4:1","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2375:5:1"},"nodeType":"YulFunctionCall","src":"2375:11:1"},"variables":[{"name":"clone","nodeType":"YulTypedName","src":"2366:5:1","type":""}]},{"expression":{"arguments":[{"name":"clone","nodeType":"YulIdentifier","src":"2411:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"2418:66:1","type":"","value":"0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2404:6:1"},"nodeType":"YulFunctionCall","src":"2404:81:1"},"nodeType":"YulExpressionStatement","src":"2404:81:1"},{"expression":{"arguments":[{"arguments":[{"name":"clone","nodeType":"YulIdentifier","src":"2514:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"2521:4:1","type":"","value":"0x14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2510:3:1"},"nodeType":"YulFunctionCall","src":"2510:16:1"},{"name":"targetBytes","nodeType":"YulIdentifier","src":"2528:11:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2503:6:1"},"nodeType":"YulFunctionCall","src":"2503:37:1"},"nodeType":"YulExpressionStatement","src":"2503:37:1"},{"expression":{"arguments":[{"arguments":[{"name":"clone","nodeType":"YulIdentifier","src":"2569:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"2576:4:1","type":"","value":"0x28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2565:3:1"},"nodeType":"YulFunctionCall","src":"2565:16:1"},{"kind":"number","nodeType":"YulLiteral","src":"2583:66:1","type":"","value":"0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2558:6:1"},"nodeType":"YulFunctionCall","src":"2558:92:1"},"nodeType":"YulExpressionStatement","src":"2558:92:1"},{"nodeType":"YulAssignment","src":"2668:45:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2692:1:1","type":"","value":"0"},{"name":"clone","nodeType":"YulIdentifier","src":"2695:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"2702:4:1","type":"","value":"0x37"},{"name":"salt","nodeType":"YulIdentifier","src":"2708:4:1"}],"functionName":{"name":"create2","nodeType":"YulIdentifier","src":"2684:7:1"},"nodeType":"YulFunctionCall","src":"2684:29:1"},"variableNames":[{"name":"cloneAddress","nodeType":"YulIdentifier","src":"2668:12:1"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":163,"isOffset":false,"isSlot":false,"src":"2668:12:1","valueSize":1},{"declaration":184,"isOffset":false,"isSlot":false,"src":"2708:4:1","valueSize":1},{"declaration":176,"isOffset":false,"isSlot":false,"src":"2528:11:1","valueSize":1}],"id":189,"nodeType":"InlineAssembly","src":"2334:394:1"}]}},{"expression":{"id":198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":194,"name":"masterContractOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"3168:16:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":196,"indexExpression":{"id":195,"name":"cloneAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"3185:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3168:30:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":197,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"3201:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3168:47:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":199,"nodeType":"ExpressionStatement","src":"3168:47:1"},{"expression":{"arguments":[{"id":204,"name":"cloneAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"3256:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":200,"name":"clonesOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":137,"src":"3226:8:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(address => address[] storage ref)"}},"id":202,"indexExpression":{"id":201,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"3235:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3226:24:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3251:4:1","memberName":"push","nodeType":"MemberAccess","src":"3226:29:1","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3226:43:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":206,"nodeType":"ExpressionStatement","src":"3226:43:1"},{"expression":{"arguments":[{"id":214,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"3335:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[{"id":208,"name":"cloneAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"3298:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":207,"name":"IMasterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"3282:15:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMasterContract_$726_$","typeString":"type(contract IMasterContract)"}},"id":209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3282:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMasterContract_$726","typeString":"contract IMasterContract"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3312:4:1","memberName":"init","nodeType":"MemberAccess","referencedDeclaration":725,"src":"3282:34:1","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) payable external"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":211,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3324:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3328:5:1","memberName":"value","nodeType":"MemberAccess","src":"3324:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3282:52:1","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_bytes_memory_ptr_$returns$__$value","typeString":"function (bytes memory) payable external"}},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3282:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":216,"nodeType":"ExpressionStatement","src":"3282:58:1"},{"eventCall":{"arguments":[{"id":218,"name":"masterContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"3368:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":219,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"3384:4:1","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":220,"name":"cloneAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"3390:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_address","typeString":"address"}],"id":217,"name":"LogDeploy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"3358:9:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_address_$returns$__$","typeString":"function (address,bytes memory,address)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3358:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":222,"nodeType":"EmitStatement","src":"3353:50:1"}]},"documentation":{"id":154,"nodeType":"StructuredDocumentation","src":"1122:525:1","text":"@notice Deploys a given master Contract as a clone.\n Any ETH transferred with this call is forwarded to the new clone.\n Emits `LogDeploy`.\n @param masterContract The address of the contract to clone.\n @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\n @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\n @return cloneAddress Address of the created clone contract."},"functionSelector":"1f54245b","id":224,"implemented":true,"kind":"function","modifiers":[],"name":"deploy","nameLocation":"1662:6:1","nodeType":"FunctionDefinition","parameters":{"id":161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":156,"mutability":"mutable","name":"masterContract","nameLocation":"1687:14:1","nodeType":"VariableDeclaration","scope":224,"src":"1679:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":155,"name":"address","nodeType":"ElementaryTypeName","src":"1679:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":158,"mutability":"mutable","name":"data","nameLocation":"1727:4:1","nodeType":"VariableDeclaration","scope":224,"src":"1712:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":157,"name":"bytes","nodeType":"ElementaryTypeName","src":"1712:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":160,"mutability":"mutable","name":"useCreate2","nameLocation":"1747:10:1","nodeType":"VariableDeclaration","scope":224,"src":"1742:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":159,"name":"bool","nodeType":"ElementaryTypeName","src":"1742:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1668:96:1"},"returnParameters":{"id":164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":163,"mutability":"mutable","name":"cloneAddress","nameLocation":"1797:12:1","nodeType":"VariableDeclaration","scope":224,"src":"1789:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":162,"name":"address","nodeType":"ElementaryTypeName","src":"1789:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1788:22:1"},"scope":225,"src":"1653:1758:1","stateMutability":"payable","virtual":false,"visibility":"public"}],"scope":226,"src":"145:3269:1","usedErrors":[]}],"src":"33:3383:1"},"id":1},"@boringcrypto/boring-solidity/contracts/Domain.sol":{"ast":{"absolutePath":"@boringcrypto/boring-solidity/contracts/Domain.sol","exportedSymbols":{"Domain":[317]},"id":318,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":227,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"247:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"Domain","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":317,"linearizedBaseContracts":[317],"name":"Domain","nameLocation":"324:6:2","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":232,"mutability":"constant","name":"DOMAIN_SEPARATOR_SIGNATURE_HASH","nameLocation":"363:31:2","nodeType":"VariableDeclaration","scope":317,"src":"338:127:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":228,"name":"bytes32","nodeType":"ElementaryTypeName","src":"338:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"454950373132446f6d61696e2875696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"407:57:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218","typeString":"literal_string \"EIP712Domain(uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218","typeString":"literal_string \"EIP712Domain(uint256 chainId,address verifyingContract)\""}],"id":229,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"397:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"397:68:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":true,"id":235,"mutability":"constant","name":"EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA","nameLocation":"547:40:2","nodeType":"VariableDeclaration","scope":317,"src":"523:77:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":233,"name":"string","nodeType":"ElementaryTypeName","src":"523:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"1901","id":234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"590:10:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},"visibility":"private"},{"constant":false,"id":237,"mutability":"immutable","name":"_DOMAIN_SEPARATOR","nameLocation":"678:17:2","nodeType":"VariableDeclaration","scope":317,"src":"652:43:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":236,"name":"bytes32","nodeType":"ElementaryTypeName","src":"652:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":239,"mutability":"immutable","name":"DOMAIN_SEPARATOR_CHAIN_ID","nameLocation":"728:25:2","nodeType":"VariableDeclaration","scope":317,"src":"702:51:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":238,"name":"uint256","nodeType":"ElementaryTypeName","src":"702:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":259,"nodeType":"Block","src":"890:104:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":250,"name":"DOMAIN_SEPARATOR_SIGNATURE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"929:31:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":251,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"962:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":254,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"979:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_Domain_$317","typeString":"contract Domain"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Domain_$317","typeString":"contract Domain"}],"id":253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"971:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":252,"name":"address","nodeType":"ElementaryTypeName","src":"971:7:2","typeDescriptions":{}}},"id":255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"971:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":248,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"918:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":249,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"922:6:2","memberName":"encode","nodeType":"MemberAccess","src":"918:10:2","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:67:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":247,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"908:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"908:78:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":246,"id":258,"nodeType":"Return","src":"901:85:2"}]},"documentation":{"id":240,"nodeType":"StructuredDocumentation","src":"762:39:2","text":"@dev Calculate the DOMAIN_SEPARATOR"},"id":260,"implemented":true,"kind":"function","modifiers":[],"name":"_calculateDomainSeparator","nameLocation":"816:25:2","nodeType":"FunctionDefinition","parameters":{"id":243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":242,"mutability":"mutable","name":"chainId","nameLocation":"850:7:2","nodeType":"VariableDeclaration","scope":260,"src":"842:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":241,"name":"uint256","nodeType":"ElementaryTypeName","src":"842:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"841:17:2"},"returnParameters":{"id":246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":260,"src":"881:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":244,"name":"bytes32","nodeType":"ElementaryTypeName","src":"881:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"880:9:2"},"scope":317,"src":"807:187:2","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":275,"nodeType":"Block","src":"1016:192:2","statements":[{"assignments":[264],"declarations":[{"constant":false,"id":264,"mutability":"mutable","name":"chainId","nameLocation":"1035:7:2","nodeType":"VariableDeclaration","scope":275,"src":"1027:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":263,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":265,"nodeType":"VariableDeclarationStatement","src":"1027:15:2"},{"AST":{"nodeType":"YulBlock","src":"1062:46:2","statements":[{"nodeType":"YulAssignment","src":"1077:20:2","value":{"arguments":[],"functionName":{"name":"chainid","nodeType":"YulIdentifier","src":"1088:7:2"},"nodeType":"YulFunctionCall","src":"1088:9:2"},"variableNames":[{"name":"chainId","nodeType":"YulIdentifier","src":"1077:7:2"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":264,"isOffset":false,"isSlot":false,"src":"1077:7:2","valueSize":1}],"id":266,"nodeType":"InlineAssembly","src":"1053:55:2"},{"expression":{"id":273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":267,"name":"_DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"1118:17:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":269,"name":"DOMAIN_SEPARATOR_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"1164:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":270,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"1192:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1164:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":268,"name":"_calculateDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"1138:25:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bytes32_$","typeString":"function (uint256) view returns (bytes32)"}},"id":272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1138:62:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1118:82:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":274,"nodeType":"ExpressionStatement","src":"1118:82:2"}]},"id":276,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":261,"nodeType":"ParameterList","parameters":[],"src":"1013:2:2"},"returnParameters":{"id":262,"nodeType":"ParameterList","parameters":[],"src":"1016:0:2"},"scope":317,"src":"1002:206:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":295,"nodeType":"Block","src":"1575:210:2","statements":[{"assignments":[283],"declarations":[{"constant":false,"id":283,"mutability":"mutable","name":"chainId","nameLocation":"1594:7:2","nodeType":"VariableDeclaration","scope":295,"src":"1586:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":282,"name":"uint256","nodeType":"ElementaryTypeName","src":"1586:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":284,"nodeType":"VariableDeclarationStatement","src":"1586:15:2"},{"AST":{"nodeType":"YulBlock","src":"1621:46:2","statements":[{"nodeType":"YulAssignment","src":"1636:20:2","value":{"arguments":[],"functionName":{"name":"chainid","nodeType":"YulIdentifier","src":"1647:7:2"},"nodeType":"YulFunctionCall","src":"1647:9:2"},"variableNames":[{"name":"chainId","nodeType":"YulIdentifier","src":"1636:7:2"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":283,"isOffset":false,"isSlot":false,"src":"1636:7:2","valueSize":1}],"id":285,"nodeType":"InlineAssembly","src":"1612:55:2"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":286,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"1684:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":287,"name":"DOMAIN_SEPARATOR_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"1695:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1684:36:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":291,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"1769:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":290,"name":"_calculateDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"1743:25:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bytes32_$","typeString":"function (uint256) view returns (bytes32)"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1743:34:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1684:93:2","trueExpression":{"id":289,"name":"_DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"1723:17:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":281,"id":294,"nodeType":"Return","src":"1677:100:2"}]},"documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"1216:36:2","text":"@dev Return the DOMAIN_SEPARATOR"},"id":296,"implemented":true,"kind":"function","modifiers":[],"name":"_domainSeparator","nameLocation":"1524:16:2","nodeType":"FunctionDefinition","parameters":{"id":278,"nodeType":"ParameterList","parameters":[],"src":"1540:2:2"},"returnParameters":{"id":281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":280,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":296,"src":"1566:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":279,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1566:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1565:9:2"},"scope":317,"src":"1515:270:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":315,"nodeType":"Block","src":"1870:127:2","statements":[{"expression":{"id":313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":303,"name":"digest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"1881:6:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":307,"name":"EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"1917:40:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"id":308,"name":"_domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":296,"src":"1959:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1959:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":310,"name":"dataHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"1979:8:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":305,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1900:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":306,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1904:12:2","memberName":"encodePacked","nodeType":"MemberAccess","src":"1900:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1900:88:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":304,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1890:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1890:99:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1881:108:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":314,"nodeType":"ExpressionStatement","src":"1881:108:2"}]},"id":316,"implemented":true,"kind":"function","modifiers":[],"name":"_getDigest","nameLocation":"1802:10:2","nodeType":"FunctionDefinition","parameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"dataHash","nameLocation":"1821:8:2","nodeType":"VariableDeclaration","scope":316,"src":"1813:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":297,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1813:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1812:18:2"},"returnParameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"digest","nameLocation":"1862:6:2","nodeType":"VariableDeclaration","scope":316,"src":"1854:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1854:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1853:16:2"},"scope":317,"src":"1793:204:2","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":318,"src":"315:1685:2","usedErrors":[]}],"src":"247:1755:2"},"id":2},"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol":{"ast":{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol","exportedSymbols":{"IERC1155":[428],"IERC165":[473]},"id":429,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":319,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:3"},{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol","file":"./IERC165.sol","id":320,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":429,"sourceUnit":474,"src":"58:23:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":321,"name":"IERC165","nameLocations":["107:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":473,"src":"107:7:3"},"id":322,"nodeType":"InheritanceSpecifier","src":"107:7:3"}],"canonicalName":"IERC1155","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":428,"linearizedBaseContracts":[428,473],"name":"IERC1155","nameLocation":"95:8:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","id":334,"name":"TransferSingle","nameLocation":"128:14:3","nodeType":"EventDefinition","parameters":{"id":333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":324,"indexed":true,"mutability":"mutable","name":"_operator","nameLocation":"159:9:3","nodeType":"VariableDeclaration","scope":334,"src":"143:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":323,"name":"address","nodeType":"ElementaryTypeName","src":"143:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":326,"indexed":true,"mutability":"mutable","name":"_from","nameLocation":"186:5:3","nodeType":"VariableDeclaration","scope":334,"src":"170:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":325,"name":"address","nodeType":"ElementaryTypeName","src":"170:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":328,"indexed":true,"mutability":"mutable","name":"_to","nameLocation":"209:3:3","nodeType":"VariableDeclaration","scope":334,"src":"193:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":327,"name":"address","nodeType":"ElementaryTypeName","src":"193:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":330,"indexed":false,"mutability":"mutable","name":"_id","nameLocation":"222:3:3","nodeType":"VariableDeclaration","scope":334,"src":"214:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":329,"name":"uint256","nodeType":"ElementaryTypeName","src":"214:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":332,"indexed":false,"mutability":"mutable","name":"_value","nameLocation":"235:6:3","nodeType":"VariableDeclaration","scope":334,"src":"227:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":331,"name":"uint256","nodeType":"ElementaryTypeName","src":"227:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"142:100:3"},"src":"122:121:3"},{"anonymous":false,"eventSelector":"4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","id":348,"name":"TransferBatch","nameLocation":"255:13:3","nodeType":"EventDefinition","parameters":{"id":347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"indexed":true,"mutability":"mutable","name":"_operator","nameLocation":"285:9:3","nodeType":"VariableDeclaration","scope":348,"src":"269:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":335,"name":"address","nodeType":"ElementaryTypeName","src":"269:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":338,"indexed":true,"mutability":"mutable","name":"_from","nameLocation":"312:5:3","nodeType":"VariableDeclaration","scope":348,"src":"296:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"296:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":340,"indexed":true,"mutability":"mutable","name":"_to","nameLocation":"335:3:3","nodeType":"VariableDeclaration","scope":348,"src":"319:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":339,"name":"address","nodeType":"ElementaryTypeName","src":"319:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":343,"indexed":false,"mutability":"mutable","name":"_ids","nameLocation":"350:4:3","nodeType":"VariableDeclaration","scope":348,"src":"340:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":341,"name":"uint256","nodeType":"ElementaryTypeName","src":"340:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":342,"nodeType":"ArrayTypeName","src":"340:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":346,"indexed":false,"mutability":"mutable","name":"_values","nameLocation":"366:7:3","nodeType":"VariableDeclaration","scope":348,"src":"356:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":344,"name":"uint256","nodeType":"ElementaryTypeName","src":"356:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":345,"nodeType":"ArrayTypeName","src":"356:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"268:106:3"},"src":"249:126:3"},{"anonymous":false,"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":356,"name":"ApprovalForAll","nameLocation":"387:14:3","nodeType":"EventDefinition","parameters":{"id":355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":350,"indexed":true,"mutability":"mutable","name":"_owner","nameLocation":"418:6:3","nodeType":"VariableDeclaration","scope":356,"src":"402:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":349,"name":"address","nodeType":"ElementaryTypeName","src":"402:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":352,"indexed":true,"mutability":"mutable","name":"_operator","nameLocation":"442:9:3","nodeType":"VariableDeclaration","scope":356,"src":"426:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":351,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":354,"indexed":false,"mutability":"mutable","name":"_approved","nameLocation":"458:9:3","nodeType":"VariableDeclaration","scope":356,"src":"453:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":353,"name":"bool","nodeType":"ElementaryTypeName","src":"453:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"401:67:3"},"src":"381:88:3"},{"anonymous":false,"eventSelector":"6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b","id":362,"name":"URI","nameLocation":"481:3:3","nodeType":"EventDefinition","parameters":{"id":361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":358,"indexed":false,"mutability":"mutable","name":"_value","nameLocation":"492:6:3","nodeType":"VariableDeclaration","scope":362,"src":"485:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":357,"name":"string","nodeType":"ElementaryTypeName","src":"485:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":360,"indexed":true,"mutability":"mutable","name":"_id","nameLocation":"516:3:3","nodeType":"VariableDeclaration","scope":362,"src":"500:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":359,"name":"uint256","nodeType":"ElementaryTypeName","src":"500:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"484:36:3"},"src":"475:46:3"},{"functionSelector":"f242432a","id":375,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"538:16:3","nodeType":"FunctionDefinition","parameters":{"id":373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":364,"mutability":"mutable","name":"_from","nameLocation":"573:5:3","nodeType":"VariableDeclaration","scope":375,"src":"565:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":363,"name":"address","nodeType":"ElementaryTypeName","src":"565:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":366,"mutability":"mutable","name":"_to","nameLocation":"597:3:3","nodeType":"VariableDeclaration","scope":375,"src":"589:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":365,"name":"address","nodeType":"ElementaryTypeName","src":"589:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":368,"mutability":"mutable","name":"_id","nameLocation":"619:3:3","nodeType":"VariableDeclaration","scope":375,"src":"611:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":367,"name":"uint256","nodeType":"ElementaryTypeName","src":"611:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"_value","nameLocation":"641:6:3","nodeType":"VariableDeclaration","scope":375,"src":"633:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":369,"name":"uint256","nodeType":"ElementaryTypeName","src":"633:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":372,"mutability":"mutable","name":"_data","nameLocation":"673:5:3","nodeType":"VariableDeclaration","scope":375,"src":"658:20:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":371,"name":"bytes","nodeType":"ElementaryTypeName","src":"658:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"554:131:3"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[],"src":"694:0:3"},"scope":428,"src":"529:166:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"2eb2c2d6","id":390,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"712:21:3","nodeType":"FunctionDefinition","parameters":{"id":388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":377,"mutability":"mutable","name":"_from","nameLocation":"752:5:3","nodeType":"VariableDeclaration","scope":390,"src":"744:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":376,"name":"address","nodeType":"ElementaryTypeName","src":"744:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":379,"mutability":"mutable","name":"_to","nameLocation":"776:3:3","nodeType":"VariableDeclaration","scope":390,"src":"768:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":378,"name":"address","nodeType":"ElementaryTypeName","src":"768:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":382,"mutability":"mutable","name":"_ids","nameLocation":"809:4:3","nodeType":"VariableDeclaration","scope":390,"src":"790:23:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":380,"name":"uint256","nodeType":"ElementaryTypeName","src":"790:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":381,"nodeType":"ArrayTypeName","src":"790:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":385,"mutability":"mutable","name":"_values","nameLocation":"843:7:3","nodeType":"VariableDeclaration","scope":390,"src":"824:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":383,"name":"uint256","nodeType":"ElementaryTypeName","src":"824:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":384,"nodeType":"ArrayTypeName","src":"824:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":387,"mutability":"mutable","name":"_data","nameLocation":"876:5:3","nodeType":"VariableDeclaration","scope":390,"src":"861:20:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":386,"name":"bytes","nodeType":"ElementaryTypeName","src":"861:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"733:155:3"},"returnParameters":{"id":389,"nodeType":"ParameterList","parameters":[],"src":"897:0:3"},"scope":428,"src":"703:195:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"00fdd58e","id":399,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"915:9:3","nodeType":"FunctionDefinition","parameters":{"id":395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":392,"mutability":"mutable","name":"_owner","nameLocation":"933:6:3","nodeType":"VariableDeclaration","scope":399,"src":"925:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":391,"name":"address","nodeType":"ElementaryTypeName","src":"925:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":394,"mutability":"mutable","name":"_id","nameLocation":"949:3:3","nodeType":"VariableDeclaration","scope":399,"src":"941:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":393,"name":"uint256","nodeType":"ElementaryTypeName","src":"941:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"924:29:3"},"returnParameters":{"id":398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":397,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":399,"src":"977:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":396,"name":"uint256","nodeType":"ElementaryTypeName","src":"977:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"976:9:3"},"scope":428,"src":"906:80:3","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"4e1273f4","id":411,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"1003:14:3","nodeType":"FunctionDefinition","parameters":{"id":406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"_owners","nameLocation":"1037:7:3","nodeType":"VariableDeclaration","scope":411,"src":"1018:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":400,"name":"address","nodeType":"ElementaryTypeName","src":"1018:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":401,"nodeType":"ArrayTypeName","src":"1018:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":405,"mutability":"mutable","name":"_ids","nameLocation":"1065:4:3","nodeType":"VariableDeclaration","scope":411,"src":"1046:23:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":403,"name":"uint256","nodeType":"ElementaryTypeName","src":"1046:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":404,"nodeType":"ArrayTypeName","src":"1046:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1017:53:3"},"returnParameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":411,"src":"1094:16:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":407,"name":"uint256","nodeType":"ElementaryTypeName","src":"1094:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":408,"nodeType":"ArrayTypeName","src":"1094:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1093:18:3"},"scope":428,"src":"994:118:3","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a22cb465","id":418,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1129:17:3","nodeType":"FunctionDefinition","parameters":{"id":416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"_operator","nameLocation":"1155:9:3","nodeType":"VariableDeclaration","scope":418,"src":"1147:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":412,"name":"address","nodeType":"ElementaryTypeName","src":"1147:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":415,"mutability":"mutable","name":"_approved","nameLocation":"1171:9:3","nodeType":"VariableDeclaration","scope":418,"src":"1166:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":414,"name":"bool","nodeType":"ElementaryTypeName","src":"1166:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1146:35:3"},"returnParameters":{"id":417,"nodeType":"ParameterList","parameters":[],"src":"1190:0:3"},"scope":428,"src":"1120:71:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e985e9c5","id":427,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"1208:16:3","nodeType":"FunctionDefinition","parameters":{"id":423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":420,"mutability":"mutable","name":"_owner","nameLocation":"1233:6:3","nodeType":"VariableDeclaration","scope":427,"src":"1225:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":419,"name":"address","nodeType":"ElementaryTypeName","src":"1225:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":422,"mutability":"mutable","name":"_operator","nameLocation":"1249:9:3","nodeType":"VariableDeclaration","scope":427,"src":"1241:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":421,"name":"address","nodeType":"ElementaryTypeName","src":"1241:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1224:35:3"},"returnParameters":{"id":426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":427,"src":"1283:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":424,"name":"bool","nodeType":"ElementaryTypeName","src":"1283:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1282:6:3"},"scope":428,"src":"1199:90:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":429,"src":"85:1207:3","usedErrors":[]}],"src":"33:1261:3"},"id":3},"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol","exportedSymbols":{"IERC1155TokenReceiver":[463]},"id":464,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":430,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"35:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155TokenReceiver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":463,"linearizedBaseContracts":[463],"name":"IERC1155TokenReceiver","nameLocation":"72:21:4","nodeType":"ContractDefinition","nodes":[{"functionSelector":"f23a6e61","id":445,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"110:17:4","nodeType":"FunctionDefinition","parameters":{"id":441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":432,"mutability":"mutable","name":"_operator","nameLocation":"146:9:4","nodeType":"VariableDeclaration","scope":445,"src":"138:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":431,"name":"address","nodeType":"ElementaryTypeName","src":"138:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":434,"mutability":"mutable","name":"_from","nameLocation":"174:5:4","nodeType":"VariableDeclaration","scope":445,"src":"166:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":433,"name":"address","nodeType":"ElementaryTypeName","src":"166:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":436,"mutability":"mutable","name":"_id","nameLocation":"198:3:4","nodeType":"VariableDeclaration","scope":445,"src":"190:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":435,"name":"uint256","nodeType":"ElementaryTypeName","src":"190:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":438,"mutability":"mutable","name":"_value","nameLocation":"220:6:4","nodeType":"VariableDeclaration","scope":445,"src":"212:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":437,"name":"uint256","nodeType":"ElementaryTypeName","src":"212:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":440,"mutability":"mutable","name":"_data","nameLocation":"252:5:4","nodeType":"VariableDeclaration","scope":445,"src":"237:20:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":439,"name":"bytes","nodeType":"ElementaryTypeName","src":"237:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"127:137:4"},"returnParameters":{"id":444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":445,"src":"283:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":442,"name":"bytes4","nodeType":"ElementaryTypeName","src":"283:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"282:8:4"},"scope":463,"src":"101:190:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"bc197c81","id":462,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"308:22:4","nodeType":"FunctionDefinition","parameters":{"id":458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":447,"mutability":"mutable","name":"_operator","nameLocation":"349:9:4","nodeType":"VariableDeclaration","scope":462,"src":"341:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":446,"name":"address","nodeType":"ElementaryTypeName","src":"341:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":449,"mutability":"mutable","name":"_from","nameLocation":"377:5:4","nodeType":"VariableDeclaration","scope":462,"src":"369:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":448,"name":"address","nodeType":"ElementaryTypeName","src":"369:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":452,"mutability":"mutable","name":"_ids","nameLocation":"412:4:4","nodeType":"VariableDeclaration","scope":462,"src":"393:23:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":450,"name":"uint256","nodeType":"ElementaryTypeName","src":"393:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":451,"nodeType":"ArrayTypeName","src":"393:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":455,"mutability":"mutable","name":"_values","nameLocation":"446:7:4","nodeType":"VariableDeclaration","scope":462,"src":"427:26:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":453,"name":"uint256","nodeType":"ElementaryTypeName","src":"427:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":454,"nodeType":"ArrayTypeName","src":"427:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":457,"mutability":"mutable","name":"_data","nameLocation":"479:5:4","nodeType":"VariableDeclaration","scope":462,"src":"464:20:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":456,"name":"bytes","nodeType":"ElementaryTypeName","src":"464:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"330:161:4"},"returnParameters":{"id":461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":462,"src":"510:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":459,"name":"bytes4","nodeType":"ElementaryTypeName","src":"510:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"509:8:4"},"scope":463,"src":"299:219:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":464,"src":"62:459:4","usedErrors":[]}],"src":"35:488:4"},"id":4},"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol":{"ast":{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[473]},"id":474,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":465,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":473,"linearizedBaseContracts":[473],"name":"IERC165","nameLocation":"70:7:5","nodeType":"ContractDefinition","nodes":[{"functionSelector":"01ffc9a7","id":472,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"94:17:5","nodeType":"FunctionDefinition","parameters":{"id":468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":467,"mutability":"mutable","name":"interfaceID","nameLocation":"119:11:5","nodeType":"VariableDeclaration","scope":472,"src":"112:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":466,"name":"bytes4","nodeType":"ElementaryTypeName","src":"112:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"111:20:5"},"returnParameters":{"id":471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":470,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":472,"src":"155:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":469,"name":"bool","nodeType":"ElementaryTypeName","src":"155:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"154:6:5"},"scope":473,"src":"85:76:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":474,"src":"60:104:5","usedErrors":[]}],"src":"33:133:5"},"id":5},"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol":{"ast":{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[540]},"id":541,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":475,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":540,"linearizedBaseContracts":[540],"name":"IERC20","nameLocation":"70:6:6","nodeType":"ContractDefinition","nodes":[{"functionSelector":"18160ddd","id":480,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"93:11:6","nodeType":"FunctionDefinition","parameters":{"id":476,"nodeType":"ParameterList","parameters":[],"src":"104:2:6"},"returnParameters":{"id":479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":478,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":480,"src":"130:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":477,"name":"uint256","nodeType":"ElementaryTypeName","src":"130:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"129:9:6"},"scope":540,"src":"84:55:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"70a08231","id":487,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"156:9:6","nodeType":"FunctionDefinition","parameters":{"id":483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":482,"mutability":"mutable","name":"account","nameLocation":"174:7:6","nodeType":"VariableDeclaration","scope":487,"src":"166:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":481,"name":"address","nodeType":"ElementaryTypeName","src":"166:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"165:17:6"},"returnParameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":487,"src":"206:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":484,"name":"uint256","nodeType":"ElementaryTypeName","src":"206:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"205:9:6"},"scope":540,"src":"147:68:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"dd62ed3e","id":496,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"232:9:6","nodeType":"FunctionDefinition","parameters":{"id":492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"owner","nameLocation":"250:5:6","nodeType":"VariableDeclaration","scope":496,"src":"242:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":488,"name":"address","nodeType":"ElementaryTypeName","src":"242:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":491,"mutability":"mutable","name":"spender","nameLocation":"265:7:6","nodeType":"VariableDeclaration","scope":496,"src":"257:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":490,"name":"address","nodeType":"ElementaryTypeName","src":"257:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"241:32:6"},"returnParameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":496,"src":"297:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":493,"name":"uint256","nodeType":"ElementaryTypeName","src":"297:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"296:9:6"},"scope":540,"src":"223:83:6","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":505,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"323:7:6","nodeType":"FunctionDefinition","parameters":{"id":501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":498,"mutability":"mutable","name":"spender","nameLocation":"339:7:6","nodeType":"VariableDeclaration","scope":505,"src":"331:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":497,"name":"address","nodeType":"ElementaryTypeName","src":"331:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":500,"mutability":"mutable","name":"amount","nameLocation":"356:6:6","nodeType":"VariableDeclaration","scope":505,"src":"348:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":499,"name":"uint256","nodeType":"ElementaryTypeName","src":"348:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"330:33:6"},"returnParameters":{"id":504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":503,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":505,"src":"382:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":502,"name":"bool","nodeType":"ElementaryTypeName","src":"382:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"381:6:6"},"scope":540,"src":"314:74:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":513,"name":"Transfer","nameLocation":"402:8:6","nodeType":"EventDefinition","parameters":{"id":512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":507,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"427:4:6","nodeType":"VariableDeclaration","scope":513,"src":"411:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":506,"name":"address","nodeType":"ElementaryTypeName","src":"411:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":509,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"449:2:6","nodeType":"VariableDeclaration","scope":513,"src":"433:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":508,"name":"address","nodeType":"ElementaryTypeName","src":"433:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":511,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"461:5:6","nodeType":"VariableDeclaration","scope":513,"src":"453:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":510,"name":"uint256","nodeType":"ElementaryTypeName","src":"453:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"410:57:6"},"src":"396:72:6"},{"anonymous":false,"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":521,"name":"Approval","nameLocation":"480:8:6","nodeType":"EventDefinition","parameters":{"id":520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":515,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"505:5:6","nodeType":"VariableDeclaration","scope":521,"src":"489:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":514,"name":"address","nodeType":"ElementaryTypeName","src":"489:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":517,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"528:7:6","nodeType":"VariableDeclaration","scope":521,"src":"512:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":516,"name":"address","nodeType":"ElementaryTypeName","src":"512:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":519,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"545:5:6","nodeType":"VariableDeclaration","scope":521,"src":"537:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":518,"name":"uint256","nodeType":"ElementaryTypeName","src":"537:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"488:63:6"},"src":"474:78:6"},{"documentation":{"id":522,"nodeType":"StructuredDocumentation","src":"560:20:6","text":"@notice EIP 2612"},"functionSelector":"d505accf","id":539,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"595:6:6","nodeType":"FunctionDefinition","parameters":{"id":537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":524,"mutability":"mutable","name":"owner","nameLocation":"620:5:6","nodeType":"VariableDeclaration","scope":539,"src":"612:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":523,"name":"address","nodeType":"ElementaryTypeName","src":"612:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":526,"mutability":"mutable","name":"spender","nameLocation":"644:7:6","nodeType":"VariableDeclaration","scope":539,"src":"636:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":525,"name":"address","nodeType":"ElementaryTypeName","src":"636:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":528,"mutability":"mutable","name":"value","nameLocation":"670:5:6","nodeType":"VariableDeclaration","scope":539,"src":"662:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":527,"name":"uint256","nodeType":"ElementaryTypeName","src":"662:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":530,"mutability":"mutable","name":"deadline","nameLocation":"694:8:6","nodeType":"VariableDeclaration","scope":539,"src":"686:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":529,"name":"uint256","nodeType":"ElementaryTypeName","src":"686:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":532,"mutability":"mutable","name":"v","nameLocation":"719:1:6","nodeType":"VariableDeclaration","scope":539,"src":"713:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":531,"name":"uint8","nodeType":"ElementaryTypeName","src":"713:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":534,"mutability":"mutable","name":"r","nameLocation":"739:1:6","nodeType":"VariableDeclaration","scope":539,"src":"731:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":533,"name":"bytes32","nodeType":"ElementaryTypeName","src":"731:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":536,"mutability":"mutable","name":"s","nameLocation":"759:1:6","nodeType":"VariableDeclaration","scope":539,"src":"751:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":535,"name":"bytes32","nodeType":"ElementaryTypeName","src":"751:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"601:166:6"},"returnParameters":{"id":538,"nodeType":"ParameterList","parameters":[],"src":"776:0:6"},"scope":540,"src":"586:191:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":541,"src":"60:720:6","usedErrors":[]}],"src":"33:749:6"},"id":6},"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol":{"ast":{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol","exportedSymbols":{"IERC721":[653],"IERC721Enumerable":[701],"IERC721Metadata":[675]},"id":702,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":542,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":543,"nodeType":"StructuredDocumentation","src":"60:170:7","text":"@title ERC-721 Non-Fungible Token Standard\n @dev See https://eips.ethereum.org/EIPS/eip-721\n  Note: the ERC-165 identifier for this interface is 0x80ac58cd."},"fullyImplemented":false,"id":653,"linearizedBaseContracts":[653],"name":"IERC721","nameLocation":"240:7:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":544,"nodeType":"StructuredDocumentation","src":"271:392:7","text":"@dev This emits when ownership of any NFT changes by any mechanism.\n  This event emits when NFTs are created (`from` == 0) and destroyed\n  (`to` == 0). Exception: during contract creation, any number of NFTs\n  may be created and assigned without emitting Transfer. At the time of\n  any transfer, the approved address for that NFT (if any) is reset to none."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":552,"name":"Transfer","nameLocation":"675:8:7","nodeType":"EventDefinition","parameters":{"id":551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":546,"indexed":true,"mutability":"mutable","name":"_from","nameLocation":"700:5:7","nodeType":"VariableDeclaration","scope":552,"src":"684:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":545,"name":"address","nodeType":"ElementaryTypeName","src":"684:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":548,"indexed":true,"mutability":"mutable","name":"_to","nameLocation":"723:3:7","nodeType":"VariableDeclaration","scope":552,"src":"707:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":547,"name":"address","nodeType":"ElementaryTypeName","src":"707:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":550,"indexed":true,"mutability":"mutable","name":"_tokenId","nameLocation":"744:8:7","nodeType":"VariableDeclaration","scope":552,"src":"728:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":549,"name":"uint256","nodeType":"ElementaryTypeName","src":"728:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"683:70:7"},"src":"669:85:7"},{"anonymous":false,"documentation":{"id":553,"nodeType":"StructuredDocumentation","src":"762:284:7","text":"@dev This emits when the approved address for an NFT is changed or\n  reaffirmed. The zero address indicates there is no approved address.\n  When a Transfer event emits, this also indicates that the approved\n  address for that NFT (if any) is reset to none."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":561,"name":"Approval","nameLocation":"1058:8:7","nodeType":"EventDefinition","parameters":{"id":560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":555,"indexed":true,"mutability":"mutable","name":"_owner","nameLocation":"1083:6:7","nodeType":"VariableDeclaration","scope":561,"src":"1067:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":554,"name":"address","nodeType":"ElementaryTypeName","src":"1067:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":557,"indexed":true,"mutability":"mutable","name":"_approved","nameLocation":"1107:9:7","nodeType":"VariableDeclaration","scope":561,"src":"1091:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":556,"name":"address","nodeType":"ElementaryTypeName","src":"1091:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":559,"indexed":true,"mutability":"mutable","name":"_tokenId","nameLocation":"1134:8:7","nodeType":"VariableDeclaration","scope":561,"src":"1118:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":558,"name":"uint256","nodeType":"ElementaryTypeName","src":"1118:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1066:77:7"},"src":"1052:92:7"},{"anonymous":false,"documentation":{"id":562,"nodeType":"StructuredDocumentation","src":"1152:130:7","text":"@dev This emits when an operator is enabled or disabled for an owner.\n  The operator can manage all NFTs of the owner."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":570,"name":"ApprovalForAll","nameLocation":"1294:14:7","nodeType":"EventDefinition","parameters":{"id":569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":564,"indexed":true,"mutability":"mutable","name":"_owner","nameLocation":"1325:6:7","nodeType":"VariableDeclaration","scope":570,"src":"1309:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":563,"name":"address","nodeType":"ElementaryTypeName","src":"1309:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":566,"indexed":true,"mutability":"mutable","name":"_operator","nameLocation":"1349:9:7","nodeType":"VariableDeclaration","scope":570,"src":"1333:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":565,"name":"address","nodeType":"ElementaryTypeName","src":"1333:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":568,"indexed":false,"mutability":"mutable","name":"_approved","nameLocation":"1365:9:7","nodeType":"VariableDeclaration","scope":570,"src":"1360:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":567,"name":"bool","nodeType":"ElementaryTypeName","src":"1360:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1308:67:7"},"src":"1288:88:7"},{"documentation":{"id":571,"nodeType":"StructuredDocumentation","src":"1384:323:7","text":"@notice Count all NFTs assigned to an owner\n @dev NFTs assigned to the zero address are considered invalid, and this\n  function throws for queries about the zero address.\n @param _owner An address for whom to query the balance\n @return The number of NFTs owned by `_owner`, possibly zero"},"functionSelector":"70a08231","id":578,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1722:9:7","nodeType":"FunctionDefinition","parameters":{"id":574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":573,"mutability":"mutable","name":"_owner","nameLocation":"1740:6:7","nodeType":"VariableDeclaration","scope":578,"src":"1732:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":572,"name":"address","nodeType":"ElementaryTypeName","src":"1732:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1731:16:7"},"returnParameters":{"id":577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":576,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":578,"src":"1771:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":575,"name":"uint256","nodeType":"ElementaryTypeName","src":"1771:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1770:9:7"},"scope":653,"src":"1713:67:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":579,"nodeType":"StructuredDocumentation","src":"1788:251:7","text":"@notice Find the owner of an NFT\n @dev NFTs assigned to zero address are considered invalid, and queries\n  about them do throw.\n @param _tokenId The identifier for an NFT\n @return The address of the owner of the NFT"},"functionSelector":"6352211e","id":586,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2054:7:7","nodeType":"FunctionDefinition","parameters":{"id":582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":581,"mutability":"mutable","name":"_tokenId","nameLocation":"2070:8:7","nodeType":"VariableDeclaration","scope":586,"src":"2062:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":580,"name":"uint256","nodeType":"ElementaryTypeName","src":"2062:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2061:18:7"},"returnParameters":{"id":585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":584,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":586,"src":"2103:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":583,"name":"address","nodeType":"ElementaryTypeName","src":"2103:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2102:9:7"},"scope":653,"src":"2045:67:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":587,"nodeType":"StructuredDocumentation","src":"2120:851:7","text":"@notice Transfers the ownership of an NFT from one address to another address\n @dev Throws unless `msg.sender` is the current owner, an authorized\n  operator, or the approved address for this NFT. Throws if `_from` is\n  not the current owner. Throws if `_to` is the zero address. Throws if\n  `_tokenId` is not a valid NFT. When transfer is complete, this function\n  checks if `_to` is a smart contract (code size > 0). If so, it calls\n  `onERC721Received` on `_to` and throws if the return value is not\n  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n @param _from The current owner of the NFT\n @param _to The new owner\n @param _tokenId The NFT to transfer\n @param data Additional data with no specified format, sent in call to `_to`"},"functionSelector":"b88d4fde","id":598,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2986:16:7","nodeType":"FunctionDefinition","parameters":{"id":596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":589,"mutability":"mutable","name":"_from","nameLocation":"3011:5:7","nodeType":"VariableDeclaration","scope":598,"src":"3003:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":588,"name":"address","nodeType":"ElementaryTypeName","src":"3003:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":591,"mutability":"mutable","name":"_to","nameLocation":"3026:3:7","nodeType":"VariableDeclaration","scope":598,"src":"3018:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":590,"name":"address","nodeType":"ElementaryTypeName","src":"3018:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":593,"mutability":"mutable","name":"_tokenId","nameLocation":"3039:8:7","nodeType":"VariableDeclaration","scope":598,"src":"3031:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":592,"name":"uint256","nodeType":"ElementaryTypeName","src":"3031:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":595,"mutability":"mutable","name":"data","nameLocation":"3064:4:7","nodeType":"VariableDeclaration","scope":598,"src":"3049:19:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":594,"name":"bytes","nodeType":"ElementaryTypeName","src":"3049:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3002:67:7"},"returnParameters":{"id":597,"nodeType":"ParameterList","parameters":[],"src":"3086:0:7"},"scope":653,"src":"2977:110:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":599,"nodeType":"StructuredDocumentation","src":"3095:353:7","text":"@notice Transfers the ownership of an NFT from one address to another address\n @dev This works identically to the other function with an extra data parameter,\n  except this function just sets data to \"\".\n @param _from The current owner of the NFT\n @param _to The new owner\n @param _tokenId The NFT to transfer"},"functionSelector":"42842e0e","id":608,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3463:16:7","nodeType":"FunctionDefinition","parameters":{"id":606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":601,"mutability":"mutable","name":"_from","nameLocation":"3488:5:7","nodeType":"VariableDeclaration","scope":608,"src":"3480:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":600,"name":"address","nodeType":"ElementaryTypeName","src":"3480:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":603,"mutability":"mutable","name":"_to","nameLocation":"3503:3:7","nodeType":"VariableDeclaration","scope":608,"src":"3495:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":602,"name":"address","nodeType":"ElementaryTypeName","src":"3495:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":605,"mutability":"mutable","name":"_tokenId","nameLocation":"3516:8:7","nodeType":"VariableDeclaration","scope":608,"src":"3508:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":604,"name":"uint256","nodeType":"ElementaryTypeName","src":"3508:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3479:46:7"},"returnParameters":{"id":607,"nodeType":"ParameterList","parameters":[],"src":"3542:0:7"},"scope":653,"src":"3454:89:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":609,"nodeType":"StructuredDocumentation","src":"3551:584:7","text":"@notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n  THEY MAY BE PERMANENTLY LOST\n @dev Throws unless `msg.sender` is the current owner, an authorized\n  operator, or the approved address for this NFT. Throws if `_from` is\n  not the current owner. Throws if `_to` is the zero address. Throws if\n  `_tokenId` is not a valid NFT.\n @param _from The current owner of the NFT\n @param _to The new owner\n @param _tokenId The NFT to transfer"},"functionSelector":"23b872dd","id":618,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4150:12:7","nodeType":"FunctionDefinition","parameters":{"id":616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":611,"mutability":"mutable","name":"_from","nameLocation":"4171:5:7","nodeType":"VariableDeclaration","scope":618,"src":"4163:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":610,"name":"address","nodeType":"ElementaryTypeName","src":"4163:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":613,"mutability":"mutable","name":"_to","nameLocation":"4186:3:7","nodeType":"VariableDeclaration","scope":618,"src":"4178:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":612,"name":"address","nodeType":"ElementaryTypeName","src":"4178:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":615,"mutability":"mutable","name":"_tokenId","nameLocation":"4199:8:7","nodeType":"VariableDeclaration","scope":618,"src":"4191:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":614,"name":"uint256","nodeType":"ElementaryTypeName","src":"4191:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4162:46:7"},"returnParameters":{"id":617,"nodeType":"ParameterList","parameters":[],"src":"4225:0:7"},"scope":653,"src":"4141:85:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":619,"nodeType":"StructuredDocumentation","src":"4234:356:7","text":"@notice Change or reaffirm the approved address for an NFT\n @dev The zero address indicates there is no approved address.\n  Throws unless `msg.sender` is the current NFT owner, or an authorized\n  operator of the current owner.\n @param _approved The new approved NFT controller\n @param _tokenId The NFT to approve"},"functionSelector":"095ea7b3","id":626,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4605:7:7","nodeType":"FunctionDefinition","parameters":{"id":624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":621,"mutability":"mutable","name":"_approved","nameLocation":"4621:9:7","nodeType":"VariableDeclaration","scope":626,"src":"4613:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":620,"name":"address","nodeType":"ElementaryTypeName","src":"4613:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":623,"mutability":"mutable","name":"_tokenId","nameLocation":"4640:8:7","nodeType":"VariableDeclaration","scope":626,"src":"4632:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":622,"name":"uint256","nodeType":"ElementaryTypeName","src":"4632:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4612:37:7"},"returnParameters":{"id":625,"nodeType":"ParameterList","parameters":[],"src":"4666:0:7"},"scope":653,"src":"4596:71:7","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":627,"nodeType":"StructuredDocumentation","src":"4675:389:7","text":"@notice Enable or disable approval for a third party (\"operator\") to manage\n  all of `msg.sender`'s assets\n @dev Emits the ApprovalForAll event. The contract MUST allow\n  multiple operators per owner.\n @param _operator Address to add to the set of authorized operators\n @param _approved True if the operator is approved, false to revoke approval"},"functionSelector":"a22cb465","id":634,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"5079:17:7","nodeType":"FunctionDefinition","parameters":{"id":632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":629,"mutability":"mutable","name":"_operator","nameLocation":"5105:9:7","nodeType":"VariableDeclaration","scope":634,"src":"5097:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":628,"name":"address","nodeType":"ElementaryTypeName","src":"5097:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":631,"mutability":"mutable","name":"_approved","nameLocation":"5121:9:7","nodeType":"VariableDeclaration","scope":634,"src":"5116:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":630,"name":"bool","nodeType":"ElementaryTypeName","src":"5116:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5096:35:7"},"returnParameters":{"id":633,"nodeType":"ParameterList","parameters":[],"src":"5140:0:7"},"scope":653,"src":"5070:71:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":635,"nodeType":"StructuredDocumentation","src":"5149:263:7","text":"@notice Get the approved address for a single NFT\n @dev Throws if `_tokenId` is not a valid NFT.\n @param _tokenId The NFT to find the approved address for\n @return The approved address for this NFT, or the zero address if there is none"},"functionSelector":"081812fc","id":642,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"5427:11:7","nodeType":"FunctionDefinition","parameters":{"id":638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":637,"mutability":"mutable","name":"_tokenId","nameLocation":"5447:8:7","nodeType":"VariableDeclaration","scope":642,"src":"5439:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":636,"name":"uint256","nodeType":"ElementaryTypeName","src":"5439:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5438:18:7"},"returnParameters":{"id":641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":640,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":642,"src":"5480:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":639,"name":"address","nodeType":"ElementaryTypeName","src":"5480:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5479:9:7"},"scope":653,"src":"5418:71:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":643,"nodeType":"StructuredDocumentation","src":"5497:293:7","text":"@notice Query if an address is an authorized operator for another address\n @param _owner The address that owns the NFTs\n @param _operator The address that acts on behalf of the owner\n @return True if `_operator` is an approved operator for `_owner`, false otherwise"},"functionSelector":"e985e9c5","id":652,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5805:16:7","nodeType":"FunctionDefinition","parameters":{"id":648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":645,"mutability":"mutable","name":"_owner","nameLocation":"5830:6:7","nodeType":"VariableDeclaration","scope":652,"src":"5822:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":644,"name":"address","nodeType":"ElementaryTypeName","src":"5822:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":647,"mutability":"mutable","name":"_operator","nameLocation":"5846:9:7","nodeType":"VariableDeclaration","scope":652,"src":"5838:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":646,"name":"address","nodeType":"ElementaryTypeName","src":"5838:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5821:35:7"},"returnParameters":{"id":651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":650,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":652,"src":"5880:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":649,"name":"bool","nodeType":"ElementaryTypeName","src":"5880:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5879:6:7"},"scope":653,"src":"5796:90:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":702,"src":"230:5659:7","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":654,"nodeType":"StructuredDocumentation","src":"5893:199:7","text":"@title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721\n  Note: the ERC-165 identifier for this interface is 0x5b5e139f."},"fullyImplemented":false,"id":675,"linearizedBaseContracts":[675],"name":"IERC721Metadata","nameLocation":"6102:15:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":655,"nodeType":"StructuredDocumentation","src":"6141:72:7","text":"@notice A descriptive name for a collection of NFTs in this contract"},"functionSelector":"06fdde03","id":660,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"6228:4:7","nodeType":"FunctionDefinition","parameters":{"id":656,"nodeType":"ParameterList","parameters":[],"src":"6232:2:7"},"returnParameters":{"id":659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":658,"mutability":"mutable","name":"_name","nameLocation":"6272:5:7","nodeType":"VariableDeclaration","scope":660,"src":"6258:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":657,"name":"string","nodeType":"ElementaryTypeName","src":"6258:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6257:21:7"},"scope":675,"src":"6219:60:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":661,"nodeType":"StructuredDocumentation","src":"6287:57:7","text":"@notice An abbreviated name for NFTs in this contract"},"functionSelector":"95d89b41","id":666,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"6359:6:7","nodeType":"FunctionDefinition","parameters":{"id":662,"nodeType":"ParameterList","parameters":[],"src":"6365:2:7"},"returnParameters":{"id":665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":664,"mutability":"mutable","name":"_symbol","nameLocation":"6405:7:7","nodeType":"VariableDeclaration","scope":666,"src":"6391:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":663,"name":"string","nodeType":"ElementaryTypeName","src":"6391:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6390:23:7"},"scope":675,"src":"6350:64:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":667,"nodeType":"StructuredDocumentation","src":"6422:265:7","text":"@notice A distinct Uniform Resource Identifier (URI) for a given asset.\n @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n  3986. The URI may point to a JSON file that conforms to the \"ERC721\n  Metadata JSON Schema\"."},"functionSelector":"c87b56dd","id":674,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"6702:8:7","nodeType":"FunctionDefinition","parameters":{"id":670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":669,"mutability":"mutable","name":"_tokenId","nameLocation":"6719:8:7","nodeType":"VariableDeclaration","scope":674,"src":"6711:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":668,"name":"uint256","nodeType":"ElementaryTypeName","src":"6711:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6710:18:7"},"returnParameters":{"id":673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":672,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":674,"src":"6752:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":671,"name":"string","nodeType":"ElementaryTypeName","src":"6752:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6751:15:7"},"scope":675,"src":"6693:74:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":702,"src":"6092:678:7","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Enumerable","contractDependencies":[],"contractKind":"interface","documentation":{"id":676,"nodeType":"StructuredDocumentation","src":"6774:202:7","text":"@title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721\n  Note: the ERC-165 identifier for this interface is 0x780e9d63."},"fullyImplemented":false,"id":701,"linearizedBaseContracts":[701],"name":"IERC721Enumerable","nameLocation":"6986:17:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":677,"nodeType":"StructuredDocumentation","src":"7027:211:7","text":"@notice Count NFTs tracked by this contract\n @return A count of valid NFTs tracked by this contract, where each one of\n  them has an assigned and queryable owner not equal to the zero address"},"functionSelector":"18160ddd","id":682,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"7253:11:7","nodeType":"FunctionDefinition","parameters":{"id":678,"nodeType":"ParameterList","parameters":[],"src":"7264:2:7"},"returnParameters":{"id":681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":680,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":682,"src":"7290:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":679,"name":"uint256","nodeType":"ElementaryTypeName","src":"7290:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7289:9:7"},"scope":701,"src":"7244:55:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":683,"nodeType":"StructuredDocumentation","src":"7307:243:7","text":"@notice Enumerate valid NFTs\n @dev Throws if `_index` >= `totalSupply()`.\n @param _index A counter less than `totalSupply()`\n @return The token identifier for the `_index`th NFT,\n  (sort order not specified)"},"functionSelector":"4f6ccce7","id":690,"implemented":false,"kind":"function","modifiers":[],"name":"tokenByIndex","nameLocation":"7565:12:7","nodeType":"FunctionDefinition","parameters":{"id":686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":685,"mutability":"mutable","name":"_index","nameLocation":"7586:6:7","nodeType":"VariableDeclaration","scope":690,"src":"7578:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":684,"name":"uint256","nodeType":"ElementaryTypeName","src":"7578:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7577:16:7"},"returnParameters":{"id":689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":688,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":690,"src":"7617:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":687,"name":"uint256","nodeType":"ElementaryTypeName","src":"7617:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7616:9:7"},"scope":701,"src":"7556:70:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":691,"nodeType":"StructuredDocumentation","src":"7634:440:7","text":"@notice Enumerate NFTs assigned to an owner\n @dev Throws if `_index` >= `balanceOf(_owner)` or if\n  `_owner` is the zero address, representing invalid NFTs.\n @param _owner An address where we are interested in NFTs owned by them\n @param _index A counter less than `balanceOf(_owner)`\n @return The token identifier for the `_index`th NFT assigned to `_owner`,\n   (sort order not specified)"},"functionSelector":"2f745c59","id":700,"implemented":false,"kind":"function","modifiers":[],"name":"tokenOfOwnerByIndex","nameLocation":"8089:19:7","nodeType":"FunctionDefinition","parameters":{"id":696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":693,"mutability":"mutable","name":"_owner","nameLocation":"8117:6:7","nodeType":"VariableDeclaration","scope":700,"src":"8109:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":692,"name":"address","nodeType":"ElementaryTypeName","src":"8109:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":695,"mutability":"mutable","name":"_index","nameLocation":"8133:6:7","nodeType":"VariableDeclaration","scope":700,"src":"8125:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":694,"name":"uint256","nodeType":"ElementaryTypeName","src":"8125:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8108:32:7"},"returnParameters":{"id":699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":700,"src":"8164:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":697,"name":"uint256","nodeType":"ElementaryTypeName","src":"8164:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8163:9:7"},"scope":701,"src":"8080:93:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":702,"src":"6976:1200:7","usedErrors":[]}],"src":"33:8145:7"},"id":7},"@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol":{"ast":{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol","exportedSymbols":{"IERC721TokenReceiver":[717]},"id":718,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":703,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721TokenReceiver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":717,"linearizedBaseContracts":[717],"name":"IERC721TokenReceiver","nameLocation":"70:20:8","nodeType":"ContractDefinition","nodes":[{"functionSelector":"150b7a02","id":716,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"107:16:8","nodeType":"FunctionDefinition","parameters":{"id":712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":705,"mutability":"mutable","name":"_operator","nameLocation":"142:9:8","nodeType":"VariableDeclaration","scope":716,"src":"134:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":704,"name":"address","nodeType":"ElementaryTypeName","src":"134:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":707,"mutability":"mutable","name":"_from","nameLocation":"170:5:8","nodeType":"VariableDeclaration","scope":716,"src":"162:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":706,"name":"address","nodeType":"ElementaryTypeName","src":"162:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":709,"mutability":"mutable","name":"_tokenId","nameLocation":"194:8:8","nodeType":"VariableDeclaration","scope":716,"src":"186:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":708,"name":"uint256","nodeType":"ElementaryTypeName","src":"186:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":711,"mutability":"mutable","name":"_data","nameLocation":"228:5:8","nodeType":"VariableDeclaration","scope":716,"src":"213:20:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":710,"name":"bytes","nodeType":"ElementaryTypeName","src":"213:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"123:117:8"},"returnParameters":{"id":715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":714,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":716,"src":"259:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":713,"name":"bytes4","nodeType":"ElementaryTypeName","src":"259:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"258:8:8"},"scope":717,"src":"98:169:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":718,"src":"60:210:8","usedErrors":[]}],"src":"33:239:8"},"id":8},"@boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol":{"ast":{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol","exportedSymbols":{"IMasterContract":[726]},"id":727,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":719,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IMasterContract","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":726,"linearizedBaseContracts":[726],"name":"IMasterContract","nameLocation":"70:15:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":720,"nodeType":"StructuredDocumentation","src":"93:261:9","text":"@notice Init function that gets called from `BoringFactory.deploy`.\n Also kown as the constructor for cloned contracts.\n Any ETH send to `BoringFactory.deploy` ends up here.\n @param data Can be abi encoded arguments or anything else."},"functionSelector":"4ddf47d4","id":725,"implemented":false,"kind":"function","modifiers":[],"name":"init","nameLocation":"369:4:9","nodeType":"FunctionDefinition","parameters":{"id":723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":722,"mutability":"mutable","name":"data","nameLocation":"389:4:9","nodeType":"VariableDeclaration","scope":725,"src":"374:19:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":721,"name":"bytes","nodeType":"ElementaryTypeName","src":"374:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"373:21:9"},"returnParameters":{"id":724,"nodeType":"ParameterList","parameters":[],"src":"411:0:9"},"scope":726,"src":"360:52:9","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":727,"src":"60:355:9","usedErrors":[]}],"src":"33:384:9"},"id":9},"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol":{"ast":{"absolutePath":"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol","exportedSymbols":{"Base64":[774]},"id":775,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":728,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"Base64","contractDependencies":[],"contractKind":"library","documentation":{"id":729,"nodeType":"StructuredDocumentation","src":"137:130:10","text":"@title Base64\n @author Brecht Devos - <brecht@loopring.org>\n @notice Provides functions for encoding/decoding base64"},"fullyImplemented":true,"id":774,"linearizedBaseContracts":[774],"name":"Base64","nameLocation":"275:6:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":772,"nodeType":"Block","src":"362:1986:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":736,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"377:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"382:6:10","memberName":"length","nodeType":"MemberAccess","src":"377:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"392:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"377:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":742,"nodeType":"IfStatement","src":"373:31:10","trueBody":{"expression":{"hexValue":"","id":740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"402:2:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":735,"id":741,"nodeType":"Return","src":"395:9:10"}},{"assignments":[744],"declarations":[{"constant":false,"id":744,"mutability":"mutable","name":"table","nameLocation":"470:5:10","nodeType":"VariableDeclaration","scope":772,"src":"456:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":743,"name":"string","nodeType":"ElementaryTypeName","src":"456:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":746,"initialValue":{"hexValue":"4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f","id":745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"478:66:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_84d8a590de33e00cbdc16e1f28c3506f5ec15c599fab9a6a4bcd575cc2f110ce","typeString":"literal_string \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\""},"value":"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"},"nodeType":"VariableDeclarationStatement","src":"456:88:10"},{"assignments":[748],"declarations":[{"constant":false,"id":748,"mutability":"mutable","name":"encodedLen","nameLocation":"604:10:10","nodeType":"VariableDeclaration","scope":772,"src":"596:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":747,"name":"uint256","nodeType":"ElementaryTypeName","src":"596:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":759,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"34","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"617:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":750,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"623:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"628:6:10","memberName":"length","nodeType":"MemberAccess","src":"623:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"637:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"623:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":754,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"622:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"33","id":755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"642:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"622:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":757,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"621:23:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"617:27:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"596:48:10"},{"assignments":[761],"declarations":[{"constant":false,"id":761,"mutability":"mutable","name":"result","nameLocation":"741:6:10","nodeType":"VariableDeclaration","scope":772,"src":"727:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":760,"name":"string","nodeType":"ElementaryTypeName","src":"727:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":768,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":764,"name":"encodedLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"761:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3332","id":765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"774:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"761:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"750:10:10","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":762,"name":"string","nodeType":"ElementaryTypeName","src":"754:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"750:27:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"727:50:10"},{"AST":{"nodeType":"YulBlock","src":"799:1516:10","statements":[{"expression":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"866:6:10"},{"name":"encodedLen","nodeType":"YulIdentifier","src":"874:10:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"859:6:10"},"nodeType":"YulFunctionCall","src":"859:26:10"},"nodeType":"YulExpressionStatement","src":"859:26:10"},{"nodeType":"YulVariableDeclaration","src":"942:29:10","value":{"arguments":[{"name":"table","nodeType":"YulIdentifier","src":"962:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"969:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"958:3:10"},"nodeType":"YulFunctionCall","src":"958:13:10"},"variables":[{"name":"tablePtr","nodeType":"YulTypedName","src":"946:8:10","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1013:19:10","value":{"name":"data","nodeType":"YulIdentifier","src":"1028:4:10"},"variables":[{"name":"dataPtr","nodeType":"YulTypedName","src":"1017:7:10","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1046:39:10","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1064:7:10"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1079:4:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1073:5:10"},"nodeType":"YulFunctionCall","src":"1073:11:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1060:3:10"},"nodeType":"YulFunctionCall","src":"1060:25:10"},"variables":[{"name":"endPtr","nodeType":"YulTypedName","src":"1050:6:10","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1146:32:10","value":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"1167:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"1175:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1163:3:10"},"nodeType":"YulFunctionCall","src":"1163:15:10"},"variables":[{"name":"resultPtr","nodeType":"YulTypedName","src":"1150:9:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"1310:701:10","statements":[{"nodeType":"YulAssignment","src":"1362:26:10","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1377:7:10"},{"kind":"number","nodeType":"YulLiteral","src":"1386:1:10","type":"","value":"3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1373:3:10"},"nodeType":"YulFunctionCall","src":"1373:15:10"},"variableNames":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1362:7:10"}]},{"nodeType":"YulVariableDeclaration","src":"1406:27:10","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1425:7:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1419:5:10"},"nodeType":"YulFunctionCall","src":"1419:14:10"},"variables":[{"name":"input","nodeType":"YulTypedName","src":"1410:5:10","type":""}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"1500:9:10"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"1521:8:10"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1539:2:10","type":"","value":"18"},{"name":"input","nodeType":"YulIdentifier","src":"1543:5:10"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1535:3:10"},"nodeType":"YulFunctionCall","src":"1535:14:10"},{"kind":"number","nodeType":"YulLiteral","src":"1551:4:10","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1531:3:10"},"nodeType":"YulFunctionCall","src":"1531:25:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1517:3:10"},"nodeType":"YulFunctionCall","src":"1517:40:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1511:5:10"},"nodeType":"YulFunctionCall","src":"1511:47:10"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1492:7:10"},"nodeType":"YulFunctionCall","src":"1492:67:10"},"nodeType":"YulExpressionStatement","src":"1492:67:10"},{"nodeType":"YulAssignment","src":"1577:30:10","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"1594:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"1605:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1590:3:10"},"nodeType":"YulFunctionCall","src":"1590:17:10"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"1577:9:10"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"1633:9:10"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"1654:8:10"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1672:2:10","type":"","value":"12"},{"name":"input","nodeType":"YulIdentifier","src":"1676:5:10"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1668:3:10"},"nodeType":"YulFunctionCall","src":"1668:14:10"},{"kind":"number","nodeType":"YulLiteral","src":"1684:4:10","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1664:3:10"},"nodeType":"YulFunctionCall","src":"1664:25:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1650:3:10"},"nodeType":"YulFunctionCall","src":"1650:40:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1644:5:10"},"nodeType":"YulFunctionCall","src":"1644:47:10"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1625:7:10"},"nodeType":"YulFunctionCall","src":"1625:67:10"},"nodeType":"YulExpressionStatement","src":"1625:67:10"},{"nodeType":"YulAssignment","src":"1710:30:10","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"1727:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"1738:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1723:3:10"},"nodeType":"YulFunctionCall","src":"1723:17:10"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"1710:9:10"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"1766:9:10"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"1787:8:10"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1805:1:10","type":"","value":"6"},{"name":"input","nodeType":"YulIdentifier","src":"1808:5:10"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1801:3:10"},"nodeType":"YulFunctionCall","src":"1801:13:10"},{"kind":"number","nodeType":"YulLiteral","src":"1816:4:10","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1797:3:10"},"nodeType":"YulFunctionCall","src":"1797:24:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1783:3:10"},"nodeType":"YulFunctionCall","src":"1783:39:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1777:5:10"},"nodeType":"YulFunctionCall","src":"1777:46:10"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1758:7:10"},"nodeType":"YulFunctionCall","src":"1758:66:10"},"nodeType":"YulExpressionStatement","src":"1758:66:10"},{"nodeType":"YulAssignment","src":"1842:30:10","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"1859:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"1870:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1855:3:10"},"nodeType":"YulFunctionCall","src":"1855:17:10"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"1842:9:10"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"1898:9:10"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"1919:8:10"},{"arguments":[{"name":"input","nodeType":"YulIdentifier","src":"1933:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"1940:4:10","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1929:3:10"},"nodeType":"YulFunctionCall","src":"1929:16:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1915:3:10"},"nodeType":"YulFunctionCall","src":"1915:31:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1909:5:10"},"nodeType":"YulFunctionCall","src":"1909:38:10"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1890:7:10"},"nodeType":"YulFunctionCall","src":"1890:58:10"},"nodeType":"YulExpressionStatement","src":"1890:58:10"},{"nodeType":"YulAssignment","src":"1966:30:10","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"1983:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"1994:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1979:3:10"},"nodeType":"YulFunctionCall","src":"1979:17:10"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"1966:9:10"}]}]},"condition":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1274:7:10"},{"name":"endPtr","nodeType":"YulIdentifier","src":"1283:6:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1271:2:10"},"nodeType":"YulFunctionCall","src":"1271:19:10"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1291:18:10","statements":[]},"pre":{"nodeType":"YulBlock","src":"1252:18:10","statements":[]},"src":"1248:763:10"},{"cases":[{"body":{"nodeType":"YulBlock","src":"2111:85:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2145:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"2156:1:10","type":"","value":"2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2141:3:10"},"nodeType":"YulFunctionCall","src":"2141:17:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2164:3:10","type":"","value":"240"},{"kind":"number","nodeType":"YulLiteral","src":"2169:6:10","type":"","value":"0x3d3d"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2160:3:10"},"nodeType":"YulFunctionCall","src":"2160:16:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2134:6:10"},"nodeType":"YulFunctionCall","src":"2134:43:10"},"nodeType":"YulExpressionStatement","src":"2134:43:10"}]},"nodeType":"YulCase","src":"2104:92:10","value":{"kind":"number","nodeType":"YulLiteral","src":"2109:1:10","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"2221:83:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2255:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"2266:1:10","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2251:3:10"},"nodeType":"YulFunctionCall","src":"2251:17:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2274:3:10","type":"","value":"248"},{"kind":"number","nodeType":"YulLiteral","src":"2279:4:10","type":"","value":"0x3d"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2270:3:10"},"nodeType":"YulFunctionCall","src":"2270:14:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2244:6:10"},"nodeType":"YulFunctionCall","src":"2244:41:10"},"nodeType":"YulExpressionStatement","src":"2244:41:10"}]},"nodeType":"YulCase","src":"2214:90:10","value":{"kind":"number","nodeType":"YulLiteral","src":"2219:1:10","type":"","value":"2"}}],"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2077:4:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2071:5:10"},"nodeType":"YulFunctionCall","src":"2071:11:10"},{"kind":"number","nodeType":"YulLiteral","src":"2084:1:10","type":"","value":"3"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"2067:3:10"},"nodeType":"YulFunctionCall","src":"2067:19:10"},"nodeType":"YulSwitch","src":"2060:244:10"}]},"evmVersion":"paris","externalReferences":[{"declaration":731,"isOffset":false,"isSlot":false,"src":"1028:4:10","valueSize":1},{"declaration":731,"isOffset":false,"isSlot":false,"src":"1079:4:10","valueSize":1},{"declaration":731,"isOffset":false,"isSlot":false,"src":"2077:4:10","valueSize":1},{"declaration":748,"isOffset":false,"isSlot":false,"src":"874:10:10","valueSize":1},{"declaration":761,"isOffset":false,"isSlot":false,"src":"1167:6:10","valueSize":1},{"declaration":761,"isOffset":false,"isSlot":false,"src":"866:6:10","valueSize":1},{"declaration":744,"isOffset":false,"isSlot":false,"src":"962:5:10","valueSize":1}],"id":769,"nodeType":"InlineAssembly","src":"790:1525:10"},{"expression":{"id":770,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"2334:6:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":735,"id":771,"nodeType":"Return","src":"2327:13:10"}]},"id":773,"implemented":true,"kind":"function","modifiers":[],"name":"encode","nameLocation":"298:6:10","nodeType":"FunctionDefinition","parameters":{"id":732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":731,"mutability":"mutable","name":"data","nameLocation":"318:4:10","nodeType":"VariableDeclaration","scope":773,"src":"305:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":730,"name":"bytes","nodeType":"ElementaryTypeName","src":"305:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"304:19:10"},"returnParameters":{"id":735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":734,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":773,"src":"347:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":733,"name":"string","nodeType":"ElementaryTypeName","src":"347:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"346:15:10"},"scope":774,"src":"289:2059:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":775,"src":"267:2084:10","usedErrors":[]}],"src":"33:2320:10"},"id":10},"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol":{"ast":{"absolutePath":"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol","exportedSymbols":{"BoringAddress":[815]},"id":816,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":776,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"BoringAddress","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":815,"linearizedBaseContracts":[815],"name":"BoringAddress","nameLocation":"109:13:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":791,"nodeType":"Block","src":"196:130:11","statements":[{"assignments":[784],"declarations":[{"constant":false,"id":784,"mutability":"mutable","name":"size","nameLocation":"215:4:11","nodeType":"VariableDeclaration","scope":791,"src":"207:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":783,"name":"uint256","nodeType":"ElementaryTypeName","src":"207:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":785,"nodeType":"VariableDeclarationStatement","src":"207:12:11"},{"AST":{"nodeType":"YulBlock","src":"239:54:11","statements":[{"nodeType":"YulAssignment","src":"254:28:11","value":{"arguments":[{"name":"account","nodeType":"YulIdentifier","src":"274:7:11"}],"functionName":{"name":"extcodesize","nodeType":"YulIdentifier","src":"262:11:11"},"nodeType":"YulFunctionCall","src":"262:20:11"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"254:4:11"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":778,"isOffset":false,"isSlot":false,"src":"274:7:11","valueSize":1},{"declaration":784,"isOffset":false,"isSlot":false,"src":"254:4:11","valueSize":1}],"id":786,"nodeType":"InlineAssembly","src":"230:63:11"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":787,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"310:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"317:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"310:8:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":782,"id":790,"nodeType":"Return","src":"303:15:11"}]},"id":792,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"139:10:11","nodeType":"FunctionDefinition","parameters":{"id":779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":778,"mutability":"mutable","name":"account","nameLocation":"158:7:11","nodeType":"VariableDeclaration","scope":792,"src":"150:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":777,"name":"address","nodeType":"ElementaryTypeName","src":"150:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"149:17:11"},"returnParameters":{"id":782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":781,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":792,"src":"190:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":780,"name":"bool","nodeType":"ElementaryTypeName","src":"190:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"189:6:11"},"scope":815,"src":"130:196:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":813,"nodeType":"Block","src":"391:185:11","statements":[{"assignments":[800,null],"declarations":[{"constant":false,"id":800,"mutability":"mutable","name":"success","nameLocation":"468:7:11","nodeType":"VariableDeclaration","scope":813,"src":"463:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":799,"name":"bool","nodeType":"ElementaryTypeName","src":"463:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":807,"initialValue":{"arguments":[{"hexValue":"","id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"504:2:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":801,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"481:2:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"484:4:11","memberName":"call","nodeType":"MemberAccess","src":"481:7:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":803,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"496:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"481:22:11","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"481:26:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"462:45:11"},{"expression":{"arguments":[{"id":809,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"526:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"426f72696e67416464726573733a207472616e73666572206661696c6564","id":810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"535:32:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_ea8829082aaec5900be5cd6d592bb7d75efe5ba71c64bf93f760a845d1a48f06","typeString":"literal_string \"BoringAddress: transfer failed\""},"value":"BoringAddress: transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ea8829082aaec5900be5cd6d592bb7d75efe5ba71c64bf93f760a845d1a48f06","typeString":"literal_string \"BoringAddress: transfer failed\""}],"id":808,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"518:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"518:50:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":812,"nodeType":"ExpressionStatement","src":"518:50:11"}]},"id":814,"implemented":true,"kind":"function","modifiers":[],"name":"sendNative","nameLocation":"343:10:11","nodeType":"FunctionDefinition","parameters":{"id":797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":794,"mutability":"mutable","name":"to","nameLocation":"362:2:11","nodeType":"VariableDeclaration","scope":814,"src":"354:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":793,"name":"address","nodeType":"ElementaryTypeName","src":"354:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":796,"mutability":"mutable","name":"amount","nameLocation":"374:6:11","nodeType":"VariableDeclaration","scope":814,"src":"366:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":795,"name":"uint256","nodeType":"ElementaryTypeName","src":"366:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"353:28:11"},"returnParameters":{"id":798,"nodeType":"ParameterList","parameters":[],"src":"391:0:11"},"scope":815,"src":"334:242:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":816,"src":"101:478:11","usedErrors":[]}],"src":"33:548:11"},"id":11},"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol":{"ast":{"absolutePath":"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol","exportedSymbols":{"BoringERC20":[1176],"IERC20":[540]},"id":1177,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":817,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:12"},{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol","file":"../interfaces/IERC20.sol","id":818,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1177,"sourceUnit":541,"src":"58:34:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"BoringERC20","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1176,"linearizedBaseContracts":[1176],"name":"BoringERC20","nameLocation":"148:11:12","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":821,"mutability":"constant","name":"SIG_SYMBOL","nameLocation":"191:10:12","nodeType":"VariableDeclaration","scope":1176,"src":"167:47:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":819,"name":"bytes4","nodeType":"ElementaryTypeName","src":"167:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783935643839623431","id":820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"204:10:12","typeDescriptions":{"typeIdentifier":"t_rational_2514000705_by_1","typeString":"int_const 2514000705"},"value":"0x95d89b41"},"visibility":"private"},{"constant":true,"id":824,"mutability":"constant","name":"SIG_NAME","nameLocation":"257:8:12","nodeType":"VariableDeclaration","scope":1176,"src":"233:45:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":822,"name":"bytes4","nodeType":"ElementaryTypeName","src":"233:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783036666464653033","id":823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"268:10:12","typeDescriptions":{"typeIdentifier":"t_rational_117300739_by_1","typeString":"int_const 117300739"},"value":"0x06fdde03"},"visibility":"private"},{"constant":true,"id":827,"mutability":"constant","name":"SIG_DECIMALS","nameLocation":"319:12:12","nodeType":"VariableDeclaration","scope":1176,"src":"295:49:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":825,"name":"bytes4","nodeType":"ElementaryTypeName","src":"295:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783331336365353637","id":826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"334:10:12","typeDescriptions":{"typeIdentifier":"t_rational_826074471_by_1","typeString":"int_const 826074471"},"value":"0x313ce567"},"visibility":"private"},{"constant":true,"id":830,"mutability":"constant","name":"SIG_BALANCE_OF","nameLocation":"389:14:12","nodeType":"VariableDeclaration","scope":1176,"src":"365:51:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":828,"name":"bytes4","nodeType":"ElementaryTypeName","src":"365:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783730613038323331","id":829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"406:10:12","typeDescriptions":{"typeIdentifier":"t_rational_1889567281_by_1","typeString":"int_const 1889567281"},"value":"0x70a08231"},"visibility":"private"},{"constant":true,"id":833,"mutability":"constant","name":"SIG_TRANSFER","nameLocation":"469:12:12","nodeType":"VariableDeclaration","scope":1176,"src":"445:49:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":831,"name":"bytes4","nodeType":"ElementaryTypeName","src":"445:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786139303539636262","id":832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"484:10:12","typeDescriptions":{"typeIdentifier":"t_rational_2835717307_by_1","typeString":"int_const 2835717307"},"value":"0xa9059cbb"},"visibility":"private"},{"constant":true,"id":836,"mutability":"constant","name":"SIG_TRANSFER_FROM","nameLocation":"554:17:12","nodeType":"VariableDeclaration","scope":1176,"src":"530:54:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":834,"name":"bytes4","nodeType":"ElementaryTypeName","src":"530:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783233623837326464","id":835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"574:10:12","typeDescriptions":{"typeIdentifier":"t_rational_599290589_by_1","typeString":"int_const 599290589"},"value":"0x23b872dd"},"visibility":"private"},{"body":{"id":922,"nodeType":"Block","src":"719:502:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":843,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"734:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:12","memberName":"length","nodeType":"MemberAccess","src":"734:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3634","id":845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"749:2:12","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"734:17:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":856,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"823:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"828:6:12","memberName":"length","nodeType":"MemberAccess","src":"823:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3332","id":858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"838:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"823:17:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":919,"nodeType":"Block","src":"1175:39:12","statements":[{"expression":{"hexValue":"3f3f3f","id":917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1197:5:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_ad68b4dd5516c9b8c2050c111c09e315e44fd13499c6724a87c1b4642b615187","typeString":"literal_string \"???\""},"value":"???"},"functionReturnParameters":842,"id":918,"nodeType":"Return","src":"1190:12:12"}]},"id":920,"nodeType":"IfStatement","src":"819:395:12","trueBody":{"id":916,"nodeType":"Block","src":"842:327:12","statements":[{"assignments":[861],"declarations":[{"constant":false,"id":861,"mutability":"mutable","name":"i","nameLocation":"863:1:12","nodeType":"VariableDeclaration","scope":916,"src":"857:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":860,"name":"uint8","nodeType":"ElementaryTypeName","src":"857:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":863,"initialValue":{"hexValue":"30","id":862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"867:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"857:11:12"},{"body":{"id":876,"nodeType":"Block","src":"914:38:12","statements":[{"expression":{"id":874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"933:3:12","subExpression":{"id":873,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"933:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":875,"nodeType":"ExpressionStatement","src":"933:3:12"}]},"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":864,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"890:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3332","id":865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"894:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"890:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":867,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"900:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":869,"indexExpression":{"id":868,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"905:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"900:7:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"911:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"900:12:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"890:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":877,"nodeType":"WhileStatement","src":"883:69:12"},{"assignments":[879],"declarations":[{"constant":false,"id":879,"mutability":"mutable","name":"bytesArray","nameLocation":"979:10:12","nodeType":"VariableDeclaration","scope":916,"src":"966:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":878,"name":"bytes","nodeType":"ElementaryTypeName","src":"966:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":884,"initialValue":{"arguments":[{"id":882,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"1002:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":881,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"992:9:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":880,"name":"bytes","nodeType":"ElementaryTypeName","src":"996:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"966:38:12"},{"body":{"id":909,"nodeType":"Block","src":"1060:58:12","statements":[{"expression":{"id":907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":901,"name":"bytesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"1079:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":903,"indexExpression":{"id":902,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"1090:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1079:13:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":904,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"1095:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":906,"indexExpression":{"id":905,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"1100:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1095:7:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1079:23:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":908,"nodeType":"ExpressionStatement","src":"1079:23:12"}]},"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":889,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"1031:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3332","id":890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1035:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1031:6:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":892,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"1041:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":894,"indexExpression":{"id":893,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"1046:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1041:7:12","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1052:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1041:12:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1031:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":910,"initializationExpression":{"expression":{"id":887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":885,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"1024:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1028:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1024:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":888,"nodeType":"ExpressionStatement","src":"1024:5:12"},"loopExpression":{"expression":{"id":899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1055:3:12","subExpression":{"id":898,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":861,"src":"1055:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":900,"nodeType":"ExpressionStatement","src":"1055:3:12"},"nodeType":"ForStatement","src":"1019:99:12"},{"expression":{"arguments":[{"id":913,"name":"bytesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"1146:10:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":912,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1139:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":911,"name":"string","nodeType":"ElementaryTypeName","src":"1139:6:12","typeDescriptions":{}}},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1139:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":842,"id":915,"nodeType":"Return","src":"1132:25:12"}]}},"id":921,"nodeType":"IfStatement","src":"730:484:12","trueBody":{"id":855,"nodeType":"Block","src":"753:60:12","statements":[{"expression":{"arguments":[{"id":849,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"786:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":851,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"793:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":850,"name":"string","nodeType":"ElementaryTypeName","src":"793:6:12","typeDescriptions":{}}}],"id":852,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"792:8:12","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}],"expression":{"id":847,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"775:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":848,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"779:6:12","memberName":"decode","nodeType":"MemberAccess","src":"775:10:12","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"775:26:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":842,"id":854,"nodeType":"Return","src":"768:33:12"}]}}]},"id":923,"implemented":true,"kind":"function","modifiers":[],"name":"returnDataToString","nameLocation":"643:18:12","nodeType":"FunctionDefinition","parameters":{"id":839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":838,"mutability":"mutable","name":"data","nameLocation":"675:4:12","nodeType":"VariableDeclaration","scope":923,"src":"662:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":837,"name":"bytes","nodeType":"ElementaryTypeName","src":"662:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"661:19:12"},"returnParameters":{"id":842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":841,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":923,"src":"704:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":840,"name":"string","nodeType":"ElementaryTypeName","src":"704:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"703:15:12"},"scope":1176,"src":"634:587:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":954,"nodeType":"Block","src":"1499:176:12","statements":[{"assignments":[933,935],"declarations":[{"constant":false,"id":933,"mutability":"mutable","name":"success","nameLocation":"1516:7:12","nodeType":"VariableDeclaration","scope":954,"src":"1511:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":932,"name":"bool","nodeType":"ElementaryTypeName","src":"1511:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":935,"mutability":"mutable","name":"data","nameLocation":"1538:4:12","nodeType":"VariableDeclaration","scope":954,"src":"1525:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":934,"name":"bytes","nodeType":"ElementaryTypeName","src":"1525:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":946,"initialValue":{"arguments":[{"arguments":[{"id":943,"name":"SIG_SYMBOL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"1595:10:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":941,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1572:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":942,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1576:18:12","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1572:22:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1572:34:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":938,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"1554:5:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}],"id":937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1546:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":936,"name":"address","nodeType":"ElementaryTypeName","src":"1546:7:12","typeDescriptions":{}}},"id":939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1546:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1561:10:12","memberName":"staticcall","nodeType":"MemberAccess","src":"1546:25:12","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1546:61:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1510:97:12"},{"expression":{"condition":{"id":947,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"1625:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"3f3f3f","id":951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1662:5:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_ad68b4dd5516c9b8c2050c111c09e315e44fd13499c6724a87c1b4642b615187","typeString":"literal_string \"???\""},"value":"???"},"id":952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1625:42:12","trueExpression":{"arguments":[{"id":949,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"1654:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":948,"name":"returnDataToString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":923,"src":"1635:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":931,"id":953,"nodeType":"Return","src":"1618:49:12"}]},"documentation":{"id":924,"nodeType":"StructuredDocumentation","src":"1229:192:12","text":"@notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\n @param token The address of the ERC-20 token contract.\n @return (string) Token symbol."},"id":955,"implemented":true,"kind":"function","modifiers":[],"name":"safeSymbol","nameLocation":"1436:10:12","nodeType":"FunctionDefinition","parameters":{"id":928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":927,"mutability":"mutable","name":"token","nameLocation":"1454:5:12","nodeType":"VariableDeclaration","scope":955,"src":"1447:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"},"typeName":{"id":926,"nodeType":"UserDefinedTypeName","pathNode":{"id":925,"name":"IERC20","nameLocations":["1447:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":540,"src":"1447:6:12"},"referencedDeclaration":540,"src":"1447:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"1446:14:12"},"returnParameters":{"id":931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":930,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":955,"src":"1484:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":929,"name":"string","nodeType":"ElementaryTypeName","src":"1484:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1483:15:12"},"scope":1176,"src":"1427:248:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":986,"nodeType":"Block","src":"1947:174:12","statements":[{"assignments":[965,967],"declarations":[{"constant":false,"id":965,"mutability":"mutable","name":"success","nameLocation":"1964:7:12","nodeType":"VariableDeclaration","scope":986,"src":"1959:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":964,"name":"bool","nodeType":"ElementaryTypeName","src":"1959:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":967,"mutability":"mutable","name":"data","nameLocation":"1986:4:12","nodeType":"VariableDeclaration","scope":986,"src":"1973:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":966,"name":"bytes","nodeType":"ElementaryTypeName","src":"1973:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":978,"initialValue":{"arguments":[{"arguments":[{"id":975,"name":"SIG_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"2043:8:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":973,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2020:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":974,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2024:18:12","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2020:22:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2020:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":970,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"2002:5:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}],"id":969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1994:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":968,"name":"address","nodeType":"ElementaryTypeName","src":"1994:7:12","typeDescriptions":{}}},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1994:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2009:10:12","memberName":"staticcall","nodeType":"MemberAccess","src":"1994:25:12","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1994:59:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1958:95:12"},{"expression":{"condition":{"id":979,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":965,"src":"2071:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"3f3f3f","id":983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2108:5:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_ad68b4dd5516c9b8c2050c111c09e315e44fd13499c6724a87c1b4642b615187","typeString":"literal_string \"???\""},"value":"???"},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2071:42:12","trueExpression":{"arguments":[{"id":981,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"2100:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":980,"name":"returnDataToString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":923,"src":"2081:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2081:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":963,"id":985,"nodeType":"Return","src":"2064:49:12"}]},"documentation":{"id":956,"nodeType":"StructuredDocumentation","src":"1683:188:12","text":"@notice Provides a safe ERC20.name version which returns '???' as fallback string.\n @param token The address of the ERC-20 token contract.\n @return (string) Token name."},"id":987,"implemented":true,"kind":"function","modifiers":[],"name":"safeName","nameLocation":"1886:8:12","nodeType":"FunctionDefinition","parameters":{"id":960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":959,"mutability":"mutable","name":"token","nameLocation":"1902:5:12","nodeType":"VariableDeclaration","scope":987,"src":"1895:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"},"typeName":{"id":958,"nodeType":"UserDefinedTypeName","pathNode":{"id":957,"name":"IERC20","nameLocations":["1895:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":540,"src":"1895:6:12"},"referencedDeclaration":540,"src":"1895:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"1894:14:12"},"returnParameters":{"id":963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":962,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":987,"src":"1932:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":961,"name":"string","nodeType":"ElementaryTypeName","src":"1932:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1931:15:12"},"scope":1176,"src":"1877:244:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1027,"nodeType":"Block","src":"2394:197:12","statements":[{"assignments":[997,999],"declarations":[{"constant":false,"id":997,"mutability":"mutable","name":"success","nameLocation":"2411:7:12","nodeType":"VariableDeclaration","scope":1027,"src":"2406:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":996,"name":"bool","nodeType":"ElementaryTypeName","src":"2406:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":999,"mutability":"mutable","name":"data","nameLocation":"2433:4:12","nodeType":"VariableDeclaration","scope":1027,"src":"2420:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":998,"name":"bytes","nodeType":"ElementaryTypeName","src":"2420:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1010,"initialValue":{"arguments":[{"arguments":[{"id":1007,"name":"SIG_DECIMALS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"2490:12:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1005,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2467:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2471:18:12","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2467:22:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2467:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1002,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"2449:5:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}],"id":1001,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2441:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1000,"name":"address","nodeType":"ElementaryTypeName","src":"2441:7:12","typeDescriptions":{}}},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2441:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2456:10:12","memberName":"staticcall","nodeType":"MemberAccess","src":"2441:25:12","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2441:63:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2405:99:12"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1011,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"2522:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1012,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"2533:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2538:6:12","memberName":"length","nodeType":"MemberAccess","src":"2533:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3332","id":1014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2548:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"2533:17:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2522:28:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"3138","id":1024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2581:2:12","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2522:61:12","trueExpression":{"arguments":[{"id":1019,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"2564:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2571:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1020,"name":"uint8","nodeType":"ElementaryTypeName","src":"2571:5:12","typeDescriptions":{}}}],"id":1022,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2570:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"expression":{"id":1017,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2553:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2557:6:12","memberName":"decode","nodeType":"MemberAccess","src":"2553:10:12","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2553:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":995,"id":1026,"nodeType":"Return","src":"2515:68:12"}]},"documentation":{"id":988,"nodeType":"StructuredDocumentation","src":"2129:193:12","text":"@notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\n @param token The address of the ERC-20 token contract.\n @return (uint8) Token decimals."},"id":1028,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecimals","nameLocation":"2337:12:12","nodeType":"FunctionDefinition","parameters":{"id":992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":991,"mutability":"mutable","name":"token","nameLocation":"2357:5:12","nodeType":"VariableDeclaration","scope":1028,"src":"2350:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"},"typeName":{"id":990,"nodeType":"UserDefinedTypeName","pathNode":{"id":989,"name":"IERC20","nameLocations":["2350:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":540,"src":"2350:6:12"},"referencedDeclaration":540,"src":"2350:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"2349:14:12"},"returnParameters":{"id":995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":994,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1028,"src":"2387:5:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":993,"name":"uint8","nodeType":"ElementaryTypeName","src":"2387:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2386:7:12"},"scope":1176,"src":"2328:263:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1075,"nodeType":"Block","src":"2973:252:12","statements":[{"assignments":[1040,1042],"declarations":[{"constant":false,"id":1040,"mutability":"mutable","name":"success","nameLocation":"2990:7:12","nodeType":"VariableDeclaration","scope":1075,"src":"2985:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1039,"name":"bool","nodeType":"ElementaryTypeName","src":"2985:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1042,"mutability":"mutable","name":"data","nameLocation":"3012:4:12","nodeType":"VariableDeclaration","scope":1075,"src":"2999:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1041,"name":"bytes","nodeType":"ElementaryTypeName","src":"2999:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1054,"initialValue":{"arguments":[{"arguments":[{"id":1050,"name":"SIG_BALANCE_OF","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"3069:14:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1051,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"3085:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1048,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3046:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1049,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3050:18:12","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3046:22:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3046:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1045,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1032,"src":"3028:5:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}],"id":1044,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3020:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1043,"name":"address","nodeType":"ElementaryTypeName","src":"3020:7:12","typeDescriptions":{}}},"id":1046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3020:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3035:10:12","memberName":"staticcall","nodeType":"MemberAccess","src":"3020:25:12","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3020:69:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2984:105:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1056,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"3108:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1057,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"3119:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3124:6:12","memberName":"length","nodeType":"MemberAccess","src":"3119:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3332","id":1059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3134:2:12","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3119:17:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3108:28:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"426f72696e6745524332303a2042616c616e63654f66206661696c6564","id":1062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3138:31:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c27773c2cfe509f541ab1b7909a1f5f9c4fb466795008093799e87d047a4ce08","typeString":"literal_string \"BoringERC20: BalanceOf failed\""},"value":"BoringERC20: BalanceOf failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c27773c2cfe509f541ab1b7909a1f5f9c4fb466795008093799e87d047a4ce08","typeString":"literal_string \"BoringERC20: BalanceOf failed\""}],"id":1055,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3100:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3100:70:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1064,"nodeType":"ExpressionStatement","src":"3100:70:12"},{"expression":{"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1065,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"3181:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1068,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"3201:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3208:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1069,"name":"uint256","nodeType":"ElementaryTypeName","src":"3208:7:12","typeDescriptions":{}}}],"id":1071,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3207:9:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":1066,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3190:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1067,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3194:6:12","memberName":"decode","nodeType":"MemberAccess","src":"3190:10:12","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3190:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3181:36:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1074,"nodeType":"ExpressionStatement","src":"3181:36:12"}]},"documentation":{"id":1029,"nodeType":"StructuredDocumentation","src":"2599:280:12","text":"@notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\n @param token The address of the ERC-20 token.\n @param to The address of the user to check.\n @return amount The token amount."},"id":1076,"implemented":true,"kind":"function","modifiers":[],"name":"safeBalanceOf","nameLocation":"2894:13:12","nodeType":"FunctionDefinition","parameters":{"id":1035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1032,"mutability":"mutable","name":"token","nameLocation":"2915:5:12","nodeType":"VariableDeclaration","scope":1076,"src":"2908:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"},"typeName":{"id":1031,"nodeType":"UserDefinedTypeName","pathNode":{"id":1030,"name":"IERC20","nameLocations":["2908:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":540,"src":"2908:6:12"},"referencedDeclaration":540,"src":"2908:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1034,"mutability":"mutable","name":"to","nameLocation":"2930:2:12","nodeType":"VariableDeclaration","scope":1076,"src":"2922:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1033,"name":"address","nodeType":"ElementaryTypeName","src":"2922:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2907:26:12"},"returnParameters":{"id":1038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1037,"mutability":"mutable","name":"amount","nameLocation":"2965:6:12","nodeType":"VariableDeclaration","scope":1076,"src":"2957:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1036,"name":"uint256","nodeType":"ElementaryTypeName","src":"2957:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2956:16:12"},"scope":1176,"src":"2885:340:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1123,"nodeType":"Block","src":"3608:233:12","statements":[{"assignments":[1088,1090],"declarations":[{"constant":false,"id":1088,"mutability":"mutable","name":"success","nameLocation":"3625:7:12","nodeType":"VariableDeclaration","scope":1123,"src":"3620:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1087,"name":"bool","nodeType":"ElementaryTypeName","src":"3620:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1090,"mutability":"mutable","name":"data","nameLocation":"3647:4:12","nodeType":"VariableDeclaration","scope":1123,"src":"3634:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1089,"name":"bytes","nodeType":"ElementaryTypeName","src":"3634:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1103,"initialValue":{"arguments":[{"arguments":[{"id":1098,"name":"SIG_TRANSFER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"3698:12:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1099,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"3712:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1100,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"3716:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1096,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3675:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1097,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3679:18:12","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3675:22:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3675:48:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1093,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"3663:5:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}],"id":1092,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3655:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1091,"name":"address","nodeType":"ElementaryTypeName","src":"3655:7:12","typeDescriptions":{}}},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3655:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3670:4:12","memberName":"call","nodeType":"MemberAccess","src":"3655:19:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3655:69:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3619:105:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1105,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"3743:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1106,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"3755:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3760:6:12","memberName":"length","nodeType":"MemberAccess","src":"3755:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3770:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3755:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1112,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"3786:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3793:4:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1113,"name":"bool","nodeType":"ElementaryTypeName","src":"3793:4:12","typeDescriptions":{}}}],"id":1115,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3792:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1110,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3775:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1111,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3779:6:12","memberName":"decode","nodeType":"MemberAccess","src":"3775:10:12","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3775:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3755:44:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1118,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3754:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3743:57:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"426f72696e6745524332303a205472616e73666572206661696c6564","id":1120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3802:30:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_1a3f0851ddc9e157ae96e52ed9dfd71a8cb4b1cf2a73b26b9f3f9e0aa9469d27","typeString":"literal_string \"BoringERC20: Transfer failed\""},"value":"BoringERC20: Transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1a3f0851ddc9e157ae96e52ed9dfd71a8cb4b1cf2a73b26b9f3f9e0aa9469d27","typeString":"literal_string \"BoringERC20: Transfer failed\""}],"id":1104,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3735:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3735:98:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1122,"nodeType":"ExpressionStatement","src":"3735:98:12"}]},"documentation":{"id":1077,"nodeType":"StructuredDocumentation","src":"3233:262:12","text":"@notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n Reverts on a failed transfer.\n @param token The address of the ERC-20 token.\n @param to Transfer tokens to.\n @param amount The token amount."},"id":1124,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"3510:12:12","nodeType":"FunctionDefinition","parameters":{"id":1085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1080,"mutability":"mutable","name":"token","nameLocation":"3540:5:12","nodeType":"VariableDeclaration","scope":1124,"src":"3533:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"},"typeName":{"id":1079,"nodeType":"UserDefinedTypeName","pathNode":{"id":1078,"name":"IERC20","nameLocations":["3533:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":540,"src":"3533:6:12"},"referencedDeclaration":540,"src":"3533:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1082,"mutability":"mutable","name":"to","nameLocation":"3564:2:12","nodeType":"VariableDeclaration","scope":1124,"src":"3556:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1081,"name":"address","nodeType":"ElementaryTypeName","src":"3556:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1084,"mutability":"mutable","name":"amount","nameLocation":"3585:6:12","nodeType":"VariableDeclaration","scope":1124,"src":"3577:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1083,"name":"uint256","nodeType":"ElementaryTypeName","src":"3577:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3522:76:12"},"returnParameters":{"id":1086,"nodeType":"ParameterList","parameters":[],"src":"3608:0:12"},"scope":1176,"src":"3501:340:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1174,"nodeType":"Block","src":"4298:248:12","statements":[{"assignments":[1138,1140],"declarations":[{"constant":false,"id":1138,"mutability":"mutable","name":"success","nameLocation":"4315:7:12","nodeType":"VariableDeclaration","scope":1174,"src":"4310:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1137,"name":"bool","nodeType":"ElementaryTypeName","src":"4310:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1140,"mutability":"mutable","name":"data","nameLocation":"4337:4:12","nodeType":"VariableDeclaration","scope":1174,"src":"4324:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1139,"name":"bytes","nodeType":"ElementaryTypeName","src":"4324:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1154,"initialValue":{"arguments":[{"arguments":[{"id":1148,"name":"SIG_TRANSFER_FROM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"4388:17:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1149,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"4407:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1150,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"4413:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1151,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"4417:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1146,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4365:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4369:18:12","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4365:22:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4365:59:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1143,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"4353:5:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}],"id":1142,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4345:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1141,"name":"address","nodeType":"ElementaryTypeName","src":"4345:7:12","typeDescriptions":{}}},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4345:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4360:4:12","memberName":"call","nodeType":"MemberAccess","src":"4345:19:12","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4345:80:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4309:116:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1156,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"4444:7:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1157,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"4456:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4461:6:12","memberName":"length","nodeType":"MemberAccess","src":"4456:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4471:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4456:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1163,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"4487:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4494:4:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1164,"name":"bool","nodeType":"ElementaryTypeName","src":"4494:4:12","typeDescriptions":{}}}],"id":1166,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4493:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1161,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4476:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4480:6:12","memberName":"decode","nodeType":"MemberAccess","src":"4476:10:12","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4476:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4456:44:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1169,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4455:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4444:57:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"426f72696e6745524332303a205472616e7366657246726f6d206661696c6564","id":1171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4503:34:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_dffd2f381f9235cb5927387124071d63a91c90f587c3edae76629d7dc4794f26","typeString":"literal_string \"BoringERC20: TransferFrom failed\""},"value":"BoringERC20: TransferFrom failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dffd2f381f9235cb5927387124071d63a91c90f587c3edae76629d7dc4794f26","typeString":"literal_string \"BoringERC20: TransferFrom failed\""}],"id":1155,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4436:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4436:102:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1173,"nodeType":"ExpressionStatement","src":"4436:102:12"}]},"documentation":{"id":1125,"nodeType":"StructuredDocumentation","src":"3849:309:12","text":"@notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n Reverts on a failed transfer.\n @param token The address of the ERC-20 token.\n @param from Transfer tokens from.\n @param to Transfer tokens to.\n @param amount The token amount."},"id":1175,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4173:16:12","nodeType":"FunctionDefinition","parameters":{"id":1135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1128,"mutability":"mutable","name":"token","nameLocation":"4207:5:12","nodeType":"VariableDeclaration","scope":1175,"src":"4200:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"},"typeName":{"id":1127,"nodeType":"UserDefinedTypeName","pathNode":{"id":1126,"name":"IERC20","nameLocations":["4200:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":540,"src":"4200:6:12"},"referencedDeclaration":540,"src":"4200:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1130,"mutability":"mutable","name":"from","nameLocation":"4231:4:12","nodeType":"VariableDeclaration","scope":1175,"src":"4223:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1129,"name":"address","nodeType":"ElementaryTypeName","src":"4223:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1132,"mutability":"mutable","name":"to","nameLocation":"4254:2:12","nodeType":"VariableDeclaration","scope":1175,"src":"4246:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1131,"name":"address","nodeType":"ElementaryTypeName","src":"4246:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1134,"mutability":"mutable","name":"amount","nameLocation":"4275:6:12","nodeType":"VariableDeclaration","scope":1175,"src":"4267:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1133,"name":"uint256","nodeType":"ElementaryTypeName","src":"4267:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4189:99:12"},"returnParameters":{"id":1136,"nodeType":"ParameterList","parameters":[],"src":"4298:0:12"},"scope":1176,"src":"4164:382:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1177,"src":"140:4409:12","usedErrors":[]}],"src":"33:4518:12"},"id":12},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1311],"Ownable":[1289]},"id":1290,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1178,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:13"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":1179,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1290,"sourceUnit":1312,"src":"127:30:13","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1181,"name":"Context","nameLocations":["683:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":1311,"src":"683:7:13"},"id":1182,"nodeType":"InheritanceSpecifier","src":"683:7:13"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1180,"nodeType":"StructuredDocumentation","src":"159:494:13","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":1289,"linearizedBaseContracts":[1289,1311],"name":"Ownable","nameLocation":"672:7:13","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1184,"mutability":"mutable","name":"_owner","nameLocation":"713:6:13","nodeType":"VariableDeclaration","scope":1289,"src":"697:22:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1183,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":1190,"name":"OwnershipTransferred","nameLocation":"732:20:13","nodeType":"EventDefinition","parameters":{"id":1189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1186,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:13","nodeType":"VariableDeclaration","scope":1190,"src":"753:29:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1185,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1188,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:13","nodeType":"VariableDeclaration","scope":1190,"src":"784:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1187,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:13"},"src":"726:84:13"},{"body":{"id":1199,"nodeType":"Block","src":"926:49:13","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1195,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"955:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1194,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"936:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1198,"nodeType":"ExpressionStatement","src":"936:32:13"}]},"documentation":{"id":1191,"nodeType":"StructuredDocumentation","src":"816:91:13","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":1200,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1192,"nodeType":"ParameterList","parameters":[],"src":"923:2:13"},"returnParameters":{"id":1193,"nodeType":"ParameterList","parameters":[],"src":"926:0:13"},"scope":1289,"src":"912:63:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1207,"nodeType":"Block","src":"1084:41:13","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1203,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"1094:11:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1205,"nodeType":"ExpressionStatement","src":"1094:13:13"},{"id":1206,"nodeType":"PlaceholderStatement","src":"1117:1:13"}]},"documentation":{"id":1201,"nodeType":"StructuredDocumentation","src":"981:77:13","text":" @dev Throws if called by any account other than the owner."},"id":1208,"name":"onlyOwner","nameLocation":"1072:9:13","nodeType":"ModifierDefinition","parameters":{"id":1202,"nodeType":"ParameterList","parameters":[],"src":"1081:2:13"},"src":"1063:62:13","virtual":false,"visibility":"internal"},{"body":{"id":1216,"nodeType":"Block","src":"1256:30:13","statements":[{"expression":{"id":1214,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"1273:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1213,"id":1215,"nodeType":"Return","src":"1266:13:13"}]},"documentation":{"id":1209,"nodeType":"StructuredDocumentation","src":"1131:65:13","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":1217,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:13","nodeType":"FunctionDefinition","parameters":{"id":1210,"nodeType":"ParameterList","parameters":[],"src":"1215:2:13"},"returnParameters":{"id":1213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1217,"src":"1247:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1211,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:13"},"scope":1289,"src":"1201:85:13","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1230,"nodeType":"Block","src":"1404:85:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1222,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1217,"src":"1422:5:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1224,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1301,"src":"1433:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":1227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":1221,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1229,"nodeType":"ExpressionStatement","src":"1414:68:13"}]},"documentation":{"id":1218,"nodeType":"StructuredDocumentation","src":"1292:62:13","text":" @dev Throws if the sender is not the owner."},"id":1231,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:13","nodeType":"FunctionDefinition","parameters":{"id":1219,"nodeType":"ParameterList","parameters":[],"src":"1379:2:13"},"returnParameters":{"id":1220,"nodeType":"ParameterList","parameters":[],"src":"1404:0:13"},"scope":1289,"src":"1359:130:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1244,"nodeType":"Block","src":"1885:47:13","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1922:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1238,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:13","typeDescriptions":{}}},"id":1241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1914:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1237,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"1895:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1895:30:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1243,"nodeType":"ExpressionStatement","src":"1895:30:13"}]},"documentation":{"id":1232,"nodeType":"StructuredDocumentation","src":"1495:331:13","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":1245,"implemented":true,"kind":"function","modifiers":[{"id":1235,"kind":"modifierInvocation","modifierName":{"id":1234,"name":"onlyOwner","nameLocations":["1875:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":1208,"src":"1875:9:13"},"nodeType":"ModifierInvocation","src":"1875:9:13"}],"name":"renounceOwnership","nameLocation":"1840:17:13","nodeType":"FunctionDefinition","parameters":{"id":1233,"nodeType":"ParameterList","parameters":[],"src":"1857:2:13"},"returnParameters":{"id":1236,"nodeType":"ParameterList","parameters":[],"src":"1885:0:13"},"scope":1289,"src":"1831:101:13","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1267,"nodeType":"Block","src":"2151:128:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1254,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"2169:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2189:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2181:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1255,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:13","typeDescriptions":{}}},"id":1258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2181:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2169:22:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":1260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2193:40:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":1253,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2161:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2161:73:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1262,"nodeType":"ExpressionStatement","src":"2161:73:13"},{"expression":{"arguments":[{"id":1264,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1248,"src":"2263:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1263,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"2244:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2244:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1266,"nodeType":"ExpressionStatement","src":"2244:28:13"}]},"documentation":{"id":1246,"nodeType":"StructuredDocumentation","src":"1938:138:13","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":1268,"implemented":true,"kind":"function","modifiers":[{"id":1251,"kind":"modifierInvocation","modifierName":{"id":1250,"name":"onlyOwner","nameLocations":["2141:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":1208,"src":"2141:9:13"},"nodeType":"ModifierInvocation","src":"2141:9:13"}],"name":"transferOwnership","nameLocation":"2090:17:13","nodeType":"FunctionDefinition","parameters":{"id":1249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1248,"mutability":"mutable","name":"newOwner","nameLocation":"2116:8:13","nodeType":"VariableDeclaration","scope":1268,"src":"2108:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1247,"name":"address","nodeType":"ElementaryTypeName","src":"2108:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2107:18:13"},"returnParameters":{"id":1252,"nodeType":"ParameterList","parameters":[],"src":"2151:0:13"},"scope":1289,"src":"2081:198:13","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1287,"nodeType":"Block","src":"2496:124:13","statements":[{"assignments":[1275],"declarations":[{"constant":false,"id":1275,"mutability":"mutable","name":"oldOwner","nameLocation":"2514:8:13","nodeType":"VariableDeclaration","scope":1287,"src":"2506:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1274,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1277,"initialValue":{"id":1276,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"2525:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2506:25:13"},{"expression":{"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1278,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"2541:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1279,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1271,"src":"2550:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2541:17:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1281,"nodeType":"ExpressionStatement","src":"2541:17:13"},{"eventCall":{"arguments":[{"id":1283,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"2594:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1284,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1271,"src":"2604:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1282,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"2573:20:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:40:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1286,"nodeType":"EmitStatement","src":"2568:45:13"}]},"documentation":{"id":1269,"nodeType":"StructuredDocumentation","src":"2285:143:13","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":1288,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2442:18:13","nodeType":"FunctionDefinition","parameters":{"id":1272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1271,"mutability":"mutable","name":"newOwner","nameLocation":"2469:8:13","nodeType":"VariableDeclaration","scope":1288,"src":"2461:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1270,"name":"address","nodeType":"ElementaryTypeName","src":"2461:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2460:18:13"},"returnParameters":{"id":1273,"nodeType":"ParameterList","parameters":[],"src":"2496:0:13"},"scope":1289,"src":"2433:187:13","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1290,"src":"654:1968:13","usedErrors":[]}],"src":"102:2521:13"},"id":13},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1311]},"id":1312,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1291,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:14"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1292,"nodeType":"StructuredDocumentation","src":"111:496:14","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1311,"linearizedBaseContracts":[1311],"name":"Context","nameLocation":"626:7:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":1300,"nodeType":"Block","src":"702:34:14","statements":[{"expression":{"expression":{"id":1297,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:14","memberName":"sender","nodeType":"MemberAccess","src":"719:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1296,"id":1299,"nodeType":"Return","src":"712:17:14"}]},"id":1301,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:14","nodeType":"FunctionDefinition","parameters":{"id":1293,"nodeType":"ParameterList","parameters":[],"src":"659:2:14"},"returnParameters":{"id":1296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1295,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1301,"src":"693:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1294,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:14"},"scope":1311,"src":"640:96:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1309,"nodeType":"Block","src":"809:32:14","statements":[{"expression":{"expression":{"id":1306,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:14","memberName":"data","nodeType":"MemberAccess","src":"826:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1305,"id":1308,"nodeType":"Return","src":"819:15:14"}]},"id":1310,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:14","nodeType":"FunctionDefinition","parameters":{"id":1302,"nodeType":"ParameterList","parameters":[],"src":"759:2:14"},"returnParameters":{"id":1305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1310,"src":"793:14:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1303,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:14"},"scope":1311,"src":"742:99:14","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1312,"src":"608:235:14","usedErrors":[]}],"src":"86:758:14"},"id":14},"@openzeppelin/contracts/utils/Counters.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","exportedSymbols":{"Counters":[1385]},"id":1386,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1313,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"Counters","contractDependencies":[],"contractKind":"library","documentation":{"id":1314,"nodeType":"StructuredDocumentation","src":"112:311:15","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":1385,"linearizedBaseContracts":[1385],"name":"Counters","nameLocation":"432:8:15","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Counters.Counter","id":1317,"members":[{"constant":false,"id":1316,"mutability":"mutable","name":"_value","nameLocation":"794:6:15","nodeType":"VariableDeclaration","scope":1317,"src":"786:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1315,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"454:7:15","nodeType":"StructDefinition","scope":1385,"src":"447:374:15","visibility":"public"},{"body":{"id":1328,"nodeType":"Block","src":"901:38:15","statements":[{"expression":{"expression":{"id":1325,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"918:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1326,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"926:6:15","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1316,"src":"918:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1324,"id":1327,"nodeType":"Return","src":"911:21:15"}]},"id":1329,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"836:7:15","nodeType":"FunctionDefinition","parameters":{"id":1321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1320,"mutability":"mutable","name":"counter","nameLocation":"860:7:15","nodeType":"VariableDeclaration","scope":1329,"src":"844:23:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1319,"nodeType":"UserDefinedTypeName","pathNode":{"id":1318,"name":"Counter","nameLocations":["844:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":1317,"src":"844:7:15"},"referencedDeclaration":1317,"src":"844:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"843:25:15"},"returnParameters":{"id":1324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1329,"src":"892:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1322,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"891:9:15"},"scope":1385,"src":"827:112:15","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1342,"nodeType":"Block","src":"998:70:15","statements":[{"id":1341,"nodeType":"UncheckedBlock","src":"1008:54:15","statements":[{"expression":{"id":1339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1335,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"1032:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1337,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1040:6:15","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1316,"src":"1032:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1032:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1340,"nodeType":"ExpressionStatement","src":"1032:19:15"}]}]},"id":1343,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"954:9:15","nodeType":"FunctionDefinition","parameters":{"id":1333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1332,"mutability":"mutable","name":"counter","nameLocation":"980:7:15","nodeType":"VariableDeclaration","scope":1343,"src":"964:23:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1331,"nodeType":"UserDefinedTypeName","pathNode":{"id":1330,"name":"Counter","nameLocations":["964:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":1317,"src":"964:7:15"},"referencedDeclaration":1317,"src":"964:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"963:25:15"},"returnParameters":{"id":1334,"nodeType":"ParameterList","parameters":[],"src":"998:0:15"},"scope":1385,"src":"945:123:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1370,"nodeType":"Block","src":"1127:176:15","statements":[{"assignments":[1350],"declarations":[{"constant":false,"id":1350,"mutability":"mutable","name":"value","nameLocation":"1145:5:15","nodeType":"VariableDeclaration","scope":1370,"src":"1137:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1349,"name":"uint256","nodeType":"ElementaryTypeName","src":"1137:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1353,"initialValue":{"expression":{"id":1351,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1346,"src":"1153:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1352,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1161:6:15","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1316,"src":"1153:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1137:30:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1355,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1350,"src":"1185:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1193:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1185:9:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":1358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1196:29:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":1354,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1177:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1177:49:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1360,"nodeType":"ExpressionStatement","src":"1177:49:15"},{"id":1369,"nodeType":"UncheckedBlock","src":"1236:61:15","statements":[{"expression":{"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1361,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1346,"src":"1260:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1363,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1268:6:15","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1316,"src":"1260:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1364,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1350,"src":"1277:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1285:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1277:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1260:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1368,"nodeType":"ExpressionStatement","src":"1260:26:15"}]}]},"id":1371,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1083:9:15","nodeType":"FunctionDefinition","parameters":{"id":1347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1346,"mutability":"mutable","name":"counter","nameLocation":"1109:7:15","nodeType":"VariableDeclaration","scope":1371,"src":"1093:23:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1345,"nodeType":"UserDefinedTypeName","pathNode":{"id":1344,"name":"Counter","nameLocations":["1093:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":1317,"src":"1093:7:15"},"referencedDeclaration":1317,"src":"1093:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1092:25:15"},"returnParameters":{"id":1348,"nodeType":"ParameterList","parameters":[],"src":"1127:0:15"},"scope":1385,"src":"1074:229:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1383,"nodeType":"Block","src":"1358:35:15","statements":[{"expression":{"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1377,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1374,"src":"1368:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1379,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1376:6:15","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1316,"src":"1368:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1385:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1368:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1382,"nodeType":"ExpressionStatement","src":"1368:18:15"}]},"id":1384,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1318:5:15","nodeType":"FunctionDefinition","parameters":{"id":1375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1374,"mutability":"mutable","name":"counter","nameLocation":"1340:7:15","nodeType":"VariableDeclaration","scope":1384,"src":"1324:23:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1373,"nodeType":"UserDefinedTypeName","pathNode":{"id":1372,"name":"Counter","nameLocations":["1324:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":1317,"src":"1324:7:15"},"referencedDeclaration":1317,"src":"1324:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1323:25:15"},"returnParameters":{"id":1376,"nodeType":"ParameterList","parameters":[],"src":"1358:0:15"},"scope":1385,"src":"1309:84:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1386,"src":"424:971:15","usedErrors":[]}],"src":"87:1309:15"},"id":15},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2940],"Strings":[1560]},"id":1561,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1387,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:16"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1388,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1561,"sourceUnit":2941,"src":"126:25:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1389,"nodeType":"StructuredDocumentation","src":"153:34:16","text":" @dev String operations."},"fullyImplemented":true,"id":1560,"linearizedBaseContracts":[1560],"name":"Strings","nameLocation":"196:7:16","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1392,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:16","nodeType":"VariableDeclaration","scope":1560,"src":"210:54:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1390,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:16","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1395,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:16","nodeType":"VariableDeclaration","scope":1560,"src":"270:43:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1393,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:16","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1442,"nodeType":"Block","src":"486:625:16","statements":[{"id":1441,"nodeType":"UncheckedBlock","src":"496:609:16","statements":[{"assignments":[1404],"declarations":[{"constant":false,"id":1404,"mutability":"mutable","name":"length","nameLocation":"528:6:16","nodeType":"VariableDeclaration","scope":1441,"src":"520:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1403,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1411,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"548:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1405,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"537:4:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2940_$","typeString":"type(library Math)"}},"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"542:5:16","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2777,"src":"537:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:16"},{"assignments":[1413],"declarations":[{"constant":false,"id":1413,"mutability":"mutable","name":"buffer","nameLocation":"586:6:16","nodeType":"VariableDeclaration","scope":1441,"src":"572:20:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1412,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1418,"initialValue":{"arguments":[{"id":1416,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"606:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1415,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1414,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"595:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:16"},{"assignments":[1420],"declarations":[{"constant":false,"id":1420,"mutability":"mutable","name":"ptr","nameLocation":"635:3:16","nodeType":"VariableDeclaration","scope":1441,"src":"627:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1419,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1421,"nodeType":"VariableDeclarationStatement","src":"627:11:16"},{"AST":{"nodeType":"YulBlock","src":"708:67:16","statements":[{"nodeType":"YulAssignment","src":"726:35:16","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:16"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:16","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:16"},"nodeType":"YulFunctionCall","src":"745:15:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:16"},"nodeType":"YulFunctionCall","src":"733:28:16"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1413,"isOffset":false,"isSlot":false,"src":"737:6:16","valueSize":1},{"declaration":1404,"isOffset":false,"isSlot":false,"src":"753:6:16","valueSize":1},{"declaration":1420,"isOffset":false,"isSlot":false,"src":"726:3:16","valueSize":1}],"id":1422,"nodeType":"InlineAssembly","src":"699:76:16"},{"body":{"id":1437,"nodeType":"Block","src":"801:267:16","statements":[{"expression":{"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:16","subExpression":{"id":1424,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"819:3:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1426,"nodeType":"ExpressionStatement","src":"819:5:16"},{"AST":{"nodeType":"YulBlock","src":"902:84:16","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:16"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:16"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:16","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:16"},"nodeType":"YulFunctionCall","src":"942:14:16"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:16"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:16"},"nodeType":"YulFunctionCall","src":"937:30:16"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:16"},"nodeType":"YulFunctionCall","src":"924:44:16"},"nodeType":"YulExpressionStatement","src":"924:44:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1392,"isOffset":false,"isSlot":false,"src":"958:8:16","valueSize":1},{"declaration":1420,"isOffset":false,"isSlot":false,"src":"932:3:16","valueSize":1},{"declaration":1398,"isOffset":false,"isSlot":false,"src":"946:5:16","valueSize":1}],"id":1427,"nodeType":"InlineAssembly","src":"893:93:16"},{"expression":{"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1428,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"1003:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1431,"nodeType":"ExpressionStatement","src":"1003:11:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1432,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"1036:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1436,"nodeType":"IfStatement","src":"1032:21:16","trueBody":{"id":1435,"nodeType":"Break","src":"1048:5:16"}}]},"condition":{"hexValue":"74727565","id":1423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1438,"nodeType":"WhileStatement","src":"788:280:16"},{"expression":{"id":1439,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"1088:6:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1402,"id":1440,"nodeType":"Return","src":"1081:13:16"}]}]},"documentation":{"id":1396,"nodeType":"StructuredDocumentation","src":"320:90:16","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1443,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:16","nodeType":"FunctionDefinition","parameters":{"id":1399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1398,"mutability":"mutable","name":"value","nameLocation":"441:5:16","nodeType":"VariableDeclaration","scope":1443,"src":"433:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1397,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:16"},"returnParameters":{"id":1402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1401,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1443,"src":"471:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1400,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:16"},"scope":1560,"src":"415:696:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1462,"nodeType":"Block","src":"1290:100:16","statements":[{"id":1461,"nodeType":"UncheckedBlock","src":"1300:84:16","statements":[{"expression":{"arguments":[{"id":1452,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"1343:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1455,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"1362:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1453,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"1350:4:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2940_$","typeString":"type(library Math)"}},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1355:6:16","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2900,"src":"1350:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1451,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1463,1539,1559],"referencedDeclaration":1539,"src":"1331:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1450,"id":1460,"nodeType":"Return","src":"1324:49:16"}]}]},"documentation":{"id":1444,"nodeType":"StructuredDocumentation","src":"1117:94:16","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1463,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:16","nodeType":"FunctionDefinition","parameters":{"id":1447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1446,"mutability":"mutable","name":"value","nameLocation":"1245:5:16","nodeType":"VariableDeclaration","scope":1463,"src":"1237:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1445,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:16"},"returnParameters":{"id":1450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1449,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1463,"src":"1275:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1448,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:16"},"scope":1560,"src":"1216:174:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1538,"nodeType":"Block","src":"1603:347:16","statements":[{"assignments":[1474],"declarations":[{"constant":false,"id":1474,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:16","nodeType":"VariableDeclaration","scope":1538,"src":"1613:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1473,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1483,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1478,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"1649:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1476,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1475,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:16"},{"expression":{"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1484,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"1670:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1486,"indexExpression":{"hexValue":"30","id":1485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1489,"nodeType":"ExpressionStatement","src":"1670:15:16"},{"expression":{"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1490,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"1695:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1492,"indexExpression":{"hexValue":"31","id":1491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1495,"nodeType":"ExpressionStatement","src":"1695:15:16"},{"body":{"id":1524,"nodeType":"Block","src":"1765:83:16","statements":[{"expression":{"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1510,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"1779:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1512,"indexExpression":{"id":1511,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"1786:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1513,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"1791:8:16","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1517,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1514,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"1800:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:16","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1519,"nodeType":"ExpressionStatement","src":"1779:33:16"},{"expression":{"id":1522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1520,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"1826:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1523,"nodeType":"ExpressionStatement","src":"1826:11:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1504,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"1753:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1525,"initializationExpression":{"assignments":[1497],"declarations":[{"constant":false,"id":1497,"mutability":"mutable","name":"i","nameLocation":"1733:1:16","nodeType":"VariableDeclaration","scope":1525,"src":"1725:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1496,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1503,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1499,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"1741:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:16"},"loopExpression":{"expression":{"id":1508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:16","subExpression":{"id":1507,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"1762:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1509,"nodeType":"ExpressionStatement","src":"1760:3:16"},"nodeType":"ForStatement","src":"1720:128:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1527,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"1865:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1526,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:55:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1532,"nodeType":"ExpressionStatement","src":"1857:55:16"},{"expression":{"arguments":[{"id":1535,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"1936:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1534,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1533,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:16","typeDescriptions":{}}},"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1472,"id":1537,"nodeType":"Return","src":"1922:21:16"}]},"documentation":{"id":1464,"nodeType":"StructuredDocumentation","src":"1396:112:16","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1539,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:16","nodeType":"FunctionDefinition","parameters":{"id":1469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1466,"mutability":"mutable","name":"value","nameLocation":"1542:5:16","nodeType":"VariableDeclaration","scope":1539,"src":"1534:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1465,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1468,"mutability":"mutable","name":"length","nameLocation":"1557:6:16","nodeType":"VariableDeclaration","scope":1539,"src":"1549:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1467,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:16"},"returnParameters":{"id":1472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1539,"src":"1588:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1470,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:16"},"scope":1560,"src":"1513:437:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1558,"nodeType":"Block","src":"2175:76:16","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1552,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"2220:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1551,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1550,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:16","typeDescriptions":{}}},"id":1553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1549,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1548,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:16","typeDescriptions":{}}},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1555,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1395,"src":"2228:15:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1547,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1463,1539,1559],"referencedDeclaration":1539,"src":"2192:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1546,"id":1557,"nodeType":"Return","src":"2185:59:16"}]},"documentation":{"id":1540,"nodeType":"StructuredDocumentation","src":"1956:141:16","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1559,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:16","nodeType":"FunctionDefinition","parameters":{"id":1543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1542,"mutability":"mutable","name":"addr","nameLocation":"2131:4:16","nodeType":"VariableDeclaration","scope":1559,"src":"2123:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1541,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:16"},"returnParameters":{"id":1546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1545,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1559,"src":"2160:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1544,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:16"},"scope":1560,"src":"2102:149:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1561,"src":"188:2065:16","usedErrors":[]}],"src":"101:2153:16"},"id":16},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[1921],"Math":[2940],"Strings":[1560]},"id":1922,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1562,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:17"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":1563,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1922,"sourceUnit":1561,"src":"137:24:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":1564,"nodeType":"StructuredDocumentation","src":"163:205:17","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":1921,"linearizedBaseContracts":[1921],"name":"ECDSA","nameLocation":"377:5:17","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":1570,"members":[{"id":1565,"name":"NoError","nameLocation":"417:7:17","nodeType":"EnumValue","src":"417:7:17"},{"id":1566,"name":"InvalidSignature","nameLocation":"434:16:17","nodeType":"EnumValue","src":"434:16:17"},{"id":1567,"name":"InvalidSignatureLength","nameLocation":"460:22:17","nodeType":"EnumValue","src":"460:22:17"},{"id":1568,"name":"InvalidSignatureS","nameLocation":"492:17:17","nodeType":"EnumValue","src":"492:17:17"},{"id":1569,"name":"InvalidSignatureV","nameLocation":"519:17:17","nodeType":"EnumValue","src":"519:17:17"}],"name":"RecoverError","nameLocation":"394:12:17","nodeType":"EnumDefinition","src":"389:175:17"},{"body":{"id":1613,"nodeType":"Block","src":"624:457:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1576,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"638:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1577,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"647:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1570_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1578,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"660:7:17","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1565,"src":"647:20:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}},"src":"638:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1582,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"734:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1583,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"743:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1570_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1584,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"756:16:17","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1566,"src":"743:29:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}},"src":"734:38:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"},"id":1594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1591,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"843:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1592,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"852:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1570_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1593,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:22:17","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1567,"src":"852:35:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}},"src":"843:44:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1600,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"965:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1601,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"974:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1570_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1602,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"987:17:17","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1568,"src":"974:30:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}},"src":"965:39:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1609,"nodeType":"IfStatement","src":"961:114:17","trueBody":{"id":1608,"nodeType":"Block","src":"1006:69:17","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":1605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":1604,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:17","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:44:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1607,"nodeType":"ExpressionStatement","src":"1020:44:17"}]}},"id":1610,"nodeType":"IfStatement","src":"839:236:17","trueBody":{"id":1599,"nodeType":"Block","src":"889:66:17","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":1596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":1595,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:17","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:41:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1598,"nodeType":"ExpressionStatement","src":"903:41:17"}]}},"id":1611,"nodeType":"IfStatement","src":"730:345:17","trueBody":{"id":1590,"nodeType":"Block","src":"774:59:17","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":1587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":1586,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:17","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"788:34:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1589,"nodeType":"ExpressionStatement","src":"788:34:17"}]}},"id":1612,"nodeType":"IfStatement","src":"634:441:17","trueBody":{"id":1581,"nodeType":"Block","src":"669:55:17","statements":[{"functionReturnParameters":1575,"id":1580,"nodeType":"Return","src":"683:7:17"}]}}]},"id":1614,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:17","nodeType":"FunctionDefinition","parameters":{"id":1574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1573,"mutability":"mutable","name":"error","nameLocation":"604:5:17","nodeType":"VariableDeclaration","scope":1614,"src":"591:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1572,"nodeType":"UserDefinedTypeName","pathNode":{"id":1571,"name":"RecoverError","nameLocations":["591:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":1570,"src":"591:12:17"},"referencedDeclaration":1570,"src":"591:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"590:20:17"},"returnParameters":{"id":1575,"nodeType":"ParameterList","parameters":[],"src":"624:0:17"},"scope":1921,"src":"570:511:17","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1659,"nodeType":"Block","src":"2249:626:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1627,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"2263:9:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:17","memberName":"length","nodeType":"MemberAccess","src":"2263:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":1629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2283:2:17","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2263:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1657,"nodeType":"Block","src":"2788:81:17","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1650,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2810:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1649,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:17","typeDescriptions":{}}},"id":1652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2810:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1653,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"2822:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1570_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2835:22:17","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1567,"src":"2822:35:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}}],"id":1655,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:49:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1570_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1626,"id":1656,"nodeType":"Return","src":"2802:56:17"}]},"id":1658,"nodeType":"IfStatement","src":"2259:610:17","trueBody":{"id":1648,"nodeType":"Block","src":"2287:495:17","statements":[{"assignments":[1632],"declarations":[{"constant":false,"id":1632,"mutability":"mutable","name":"r","nameLocation":"2309:1:17","nodeType":"VariableDeclaration","scope":1648,"src":"2301:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1631,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1633,"nodeType":"VariableDeclarationStatement","src":"2301:9:17"},{"assignments":[1635],"declarations":[{"constant":false,"id":1635,"mutability":"mutable","name":"s","nameLocation":"2332:1:17","nodeType":"VariableDeclaration","scope":1648,"src":"2324:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1634,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1636,"nodeType":"VariableDeclarationStatement","src":"2324:9:17"},{"assignments":[1638],"declarations":[{"constant":false,"id":1638,"mutability":"mutable","name":"v","nameLocation":"2353:1:17","nodeType":"VariableDeclaration","scope":1648,"src":"2347:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1637,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1639,"nodeType":"VariableDeclarationStatement","src":"2347:7:17"},{"AST":{"nodeType":"YulBlock","src":"2555:171:17","statements":[{"nodeType":"YulAssignment","src":"2573:32:17","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2588:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2599:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2584:3:17"},"nodeType":"YulFunctionCall","src":"2584:20:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2578:5:17"},"nodeType":"YulFunctionCall","src":"2578:27:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2573:1:17"}]},{"nodeType":"YulAssignment","src":"2622:32:17","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2637:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2648:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:17"},"nodeType":"YulFunctionCall","src":"2633:20:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2627:5:17"},"nodeType":"YulFunctionCall","src":"2627:27:17"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2622:1:17"}]},{"nodeType":"YulAssignment","src":"2671:41:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2681:1:17","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2694:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2705:4:17","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2690:3:17"},"nodeType":"YulFunctionCall","src":"2690:20:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2684:5:17"},"nodeType":"YulFunctionCall","src":"2684:27:17"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2676:4:17"},"nodeType":"YulFunctionCall","src":"2676:36:17"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2671:1:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1632,"isOffset":false,"isSlot":false,"src":"2573:1:17","valueSize":1},{"declaration":1635,"isOffset":false,"isSlot":false,"src":"2622:1:17","valueSize":1},{"declaration":1619,"isOffset":false,"isSlot":false,"src":"2588:9:17","valueSize":1},{"declaration":1619,"isOffset":false,"isSlot":false,"src":"2637:9:17","valueSize":1},{"declaration":1619,"isOffset":false,"isSlot":false,"src":"2694:9:17","valueSize":1},{"declaration":1638,"isOffset":false,"isSlot":false,"src":"2671:1:17","valueSize":1}],"id":1640,"nodeType":"InlineAssembly","src":"2546:180:17"},{"expression":{"arguments":[{"id":1642,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"2757:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1643,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"2763:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1644,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"2766:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1645,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1635,"src":"2769:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1641,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1660,1734,1828],"referencedDeclaration":1828,"src":"2746:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1570_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":1646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2746:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1570_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1626,"id":1647,"nodeType":"Return","src":"2739:32:17"}]}}]},"documentation":{"id":1615,"nodeType":"StructuredDocumentation","src":"1087:1053:17","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":1660,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2154:10:17","nodeType":"FunctionDefinition","parameters":{"id":1620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1617,"mutability":"mutable","name":"hash","nameLocation":"2173:4:17","nodeType":"VariableDeclaration","scope":1660,"src":"2165:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1616,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2165:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1619,"mutability":"mutable","name":"signature","nameLocation":"2192:9:17","nodeType":"VariableDeclaration","scope":1660,"src":"2179:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1618,"name":"bytes","nodeType":"ElementaryTypeName","src":"2179:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2164:38:17"},"returnParameters":{"id":1626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1622,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1660,"src":"2226:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1621,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1625,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1660,"src":"2235:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1624,"nodeType":"UserDefinedTypeName","pathNode":{"id":1623,"name":"RecoverError","nameLocations":["2235:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":1570,"src":"2235:12:17"},"referencedDeclaration":1570,"src":"2235:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"2225:23:17"},"scope":1921,"src":"2145:730:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1686,"nodeType":"Block","src":"3748:140:17","statements":[{"assignments":[1671,1674],"declarations":[{"constant":false,"id":1671,"mutability":"mutable","name":"recovered","nameLocation":"3767:9:17","nodeType":"VariableDeclaration","scope":1686,"src":"3759:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1670,"name":"address","nodeType":"ElementaryTypeName","src":"3759:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1674,"mutability":"mutable","name":"error","nameLocation":"3791:5:17","nodeType":"VariableDeclaration","scope":1686,"src":"3778:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1673,"nodeType":"UserDefinedTypeName","pathNode":{"id":1672,"name":"RecoverError","nameLocations":["3778:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":1570,"src":"3778:12:17"},"referencedDeclaration":1570,"src":"3778:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":1679,"initialValue":{"arguments":[{"id":1676,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"3811:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1677,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"3817:9:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1675,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1660,1734,1828],"referencedDeclaration":1660,"src":"3800:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1570_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:27:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1570_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3758:69:17"},{"expression":{"arguments":[{"id":1681,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1674,"src":"3849:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}],"id":1680,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"3837:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1570_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3837:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1683,"nodeType":"ExpressionStatement","src":"3837:18:17"},{"expression":{"id":1684,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"3872:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1669,"id":1685,"nodeType":"Return","src":"3865:16:17"}]},"documentation":{"id":1661,"nodeType":"StructuredDocumentation","src":"2881:775:17","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":1687,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3670:7:17","nodeType":"FunctionDefinition","parameters":{"id":1666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1663,"mutability":"mutable","name":"hash","nameLocation":"3686:4:17","nodeType":"VariableDeclaration","scope":1687,"src":"3678:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1662,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3678:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1665,"mutability":"mutable","name":"signature","nameLocation":"3705:9:17","nodeType":"VariableDeclaration","scope":1687,"src":"3692:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1664,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:38:17"},"returnParameters":{"id":1669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1668,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1687,"src":"3739:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1667,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3738:9:17"},"scope":1921,"src":"3661:227:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1733,"nodeType":"Block","src":"4275:203:17","statements":[{"assignments":[1703],"declarations":[{"constant":false,"id":1703,"mutability":"mutable","name":"s","nameLocation":"4293:1:17","nodeType":"VariableDeclaration","scope":1733,"src":"4285:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1702,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4285:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1710,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1704,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"4297:2:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":1707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4310:66:17","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":1706,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4302:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1705,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4302:7:17","typeDescriptions":{}}},"id":1708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4302:75:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4297:80:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4285:92:17"},{"assignments":[1712],"declarations":[{"constant":false,"id":1712,"mutability":"mutable","name":"v","nameLocation":"4393:1:17","nodeType":"VariableDeclaration","scope":1733,"src":"4387:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1711,"name":"uint8","nodeType":"ElementaryTypeName","src":"4387:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1725,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1717,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"4412:2:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1716,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4404:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1715,"name":"uint256","nodeType":"ElementaryTypeName","src":"4404:7:17","typeDescriptions":{}}},"id":1718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4404:11:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4419:3:17","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4404:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1721,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4403:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":1722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4426:2:17","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4403:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4397:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1713,"name":"uint8","nodeType":"ElementaryTypeName","src":"4397:5:17","typeDescriptions":{}}},"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4397:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4387:42:17"},{"expression":{"arguments":[{"id":1727,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"4457:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1728,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"4463:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1729,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"4466:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1730,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"4469:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1726,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1660,1734,1828],"referencedDeclaration":1828,"src":"4446:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1570_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":1731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4446:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1570_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1701,"id":1732,"nodeType":"Return","src":"4439:32:17"}]},"documentation":{"id":1688,"nodeType":"StructuredDocumentation","src":"3894:243:17","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":1734,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4151:10:17","nodeType":"FunctionDefinition","parameters":{"id":1695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1690,"mutability":"mutable","name":"hash","nameLocation":"4179:4:17","nodeType":"VariableDeclaration","scope":1734,"src":"4171:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1689,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4171:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1692,"mutability":"mutable","name":"r","nameLocation":"4201:1:17","nodeType":"VariableDeclaration","scope":1734,"src":"4193:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1691,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4193:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1694,"mutability":"mutable","name":"vs","nameLocation":"4220:2:17","nodeType":"VariableDeclaration","scope":1734,"src":"4212:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1693,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4212:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:67:17"},"returnParameters":{"id":1701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1697,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1734,"src":"4252:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1696,"name":"address","nodeType":"ElementaryTypeName","src":"4252:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1700,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1734,"src":"4261:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1699,"nodeType":"UserDefinedTypeName","pathNode":{"id":1698,"name":"RecoverError","nameLocations":["4261:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":1570,"src":"4261:12:17"},"referencedDeclaration":1570,"src":"4261:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4251:23:17"},"scope":1921,"src":"4142:336:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1763,"nodeType":"Block","src":"4759:136:17","statements":[{"assignments":[1747,1750],"declarations":[{"constant":false,"id":1747,"mutability":"mutable","name":"recovered","nameLocation":"4778:9:17","nodeType":"VariableDeclaration","scope":1763,"src":"4770:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1746,"name":"address","nodeType":"ElementaryTypeName","src":"4770:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1750,"mutability":"mutable","name":"error","nameLocation":"4802:5:17","nodeType":"VariableDeclaration","scope":1763,"src":"4789:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1749,"nodeType":"UserDefinedTypeName","pathNode":{"id":1748,"name":"RecoverError","nameLocations":["4789:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":1570,"src":"4789:12:17"},"referencedDeclaration":1570,"src":"4789:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":1756,"initialValue":{"arguments":[{"id":1752,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1737,"src":"4822:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1753,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"4828:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1754,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"4831:2:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1751,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1660,1734,1828],"referencedDeclaration":1734,"src":"4811:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1570_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":1755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4811:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1570_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4769:65:17"},{"expression":{"arguments":[{"id":1758,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"4856:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}],"id":1757,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"4844:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1570_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4844:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1760,"nodeType":"ExpressionStatement","src":"4844:18:17"},{"expression":{"id":1761,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"4879:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1745,"id":1762,"nodeType":"Return","src":"4872:16:17"}]},"documentation":{"id":1735,"nodeType":"StructuredDocumentation","src":"4484:154:17","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":1764,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4652:7:17","nodeType":"FunctionDefinition","parameters":{"id":1742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1737,"mutability":"mutable","name":"hash","nameLocation":"4677:4:17","nodeType":"VariableDeclaration","scope":1764,"src":"4669:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1736,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4669:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1739,"mutability":"mutable","name":"r","nameLocation":"4699:1:17","nodeType":"VariableDeclaration","scope":1764,"src":"4691:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1738,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4691:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1741,"mutability":"mutable","name":"vs","nameLocation":"4718:2:17","nodeType":"VariableDeclaration","scope":1764,"src":"4710:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1740,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4710:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4659:67:17"},"returnParameters":{"id":1745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1744,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1764,"src":"4750:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1743,"name":"address","nodeType":"ElementaryTypeName","src":"4750:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4749:9:17"},"scope":1921,"src":"4643:252:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1827,"nodeType":"Block","src":"5218:1345:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1783,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1773,"src":"6114:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6106:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1781,"name":"uint256","nodeType":"ElementaryTypeName","src":"6106:7:17","typeDescriptions":{}}},"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6106:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":1785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6119:66:17","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6106:79:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1796,"nodeType":"IfStatement","src":"6102:161:17","trueBody":{"id":1795,"nodeType":"Block","src":"6187:76:17","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6217:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1788,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6209:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1787,"name":"address","nodeType":"ElementaryTypeName","src":"6209:7:17","typeDescriptions":{}}},"id":1790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6209:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1791,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"6221:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1570_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1792,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6234:17:17","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1568,"src":"6221:30:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}}],"id":1793,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6208:44:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1570_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1780,"id":1794,"nodeType":"Return","src":"6201:51:17"}]}},{"assignments":[1798],"declarations":[{"constant":false,"id":1798,"mutability":"mutable","name":"signer","nameLocation":"6365:6:17","nodeType":"VariableDeclaration","scope":1827,"src":"6357:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1797,"name":"address","nodeType":"ElementaryTypeName","src":"6357:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1805,"initialValue":{"arguments":[{"id":1800,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"6384:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1801,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"6390:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1802,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"6393:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1803,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1773,"src":"6396:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1799,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6374:9:17","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6374:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6357:41:17"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1806,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"6412:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6430:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1808,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6422:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1807,"name":"address","nodeType":"ElementaryTypeName","src":"6422:7:17","typeDescriptions":{}}},"id":1810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6422:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6412:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1821,"nodeType":"IfStatement","src":"6408:101:17","trueBody":{"id":1820,"nodeType":"Block","src":"6434:75:17","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6464:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1813,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6456:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1812,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:17","typeDescriptions":{}}},"id":1815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6456:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1816,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"6468:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1570_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6481:16:17","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1566,"src":"6468:29:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}}],"id":1818,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6455:43:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1570_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1780,"id":1819,"nodeType":"Return","src":"6448:50:17"}]}},{"expression":{"components":[{"id":1822,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"6527:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1823,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"6535:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1570_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1824,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6548:7:17","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1565,"src":"6535:20:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}}],"id":1825,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6526:30:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1570_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1780,"id":1826,"nodeType":"Return","src":"6519:37:17"}]},"documentation":{"id":1765,"nodeType":"StructuredDocumentation","src":"4901:163:17","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":1828,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5078:10:17","nodeType":"FunctionDefinition","parameters":{"id":1774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1767,"mutability":"mutable","name":"hash","nameLocation":"5106:4:17","nodeType":"VariableDeclaration","scope":1828,"src":"5098:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1766,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5098:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1769,"mutability":"mutable","name":"v","nameLocation":"5126:1:17","nodeType":"VariableDeclaration","scope":1828,"src":"5120:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1768,"name":"uint8","nodeType":"ElementaryTypeName","src":"5120:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1771,"mutability":"mutable","name":"r","nameLocation":"5145:1:17","nodeType":"VariableDeclaration","scope":1828,"src":"5137:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1770,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5137:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1773,"mutability":"mutable","name":"s","nameLocation":"5164:1:17","nodeType":"VariableDeclaration","scope":1828,"src":"5156:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1772,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5156:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5088:83:17"},"returnParameters":{"id":1780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1776,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1828,"src":"5195:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1775,"name":"address","nodeType":"ElementaryTypeName","src":"5195:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1779,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1828,"src":"5204:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1778,"nodeType":"UserDefinedTypeName","pathNode":{"id":1777,"name":"RecoverError","nameLocations":["5204:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":1570,"src":"5204:12:17"},"referencedDeclaration":1570,"src":"5204:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"5194:23:17"},"scope":1921,"src":"5069:1494:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1860,"nodeType":"Block","src":"6828:138:17","statements":[{"assignments":[1843,1846],"declarations":[{"constant":false,"id":1843,"mutability":"mutable","name":"recovered","nameLocation":"6847:9:17","nodeType":"VariableDeclaration","scope":1860,"src":"6839:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1842,"name":"address","nodeType":"ElementaryTypeName","src":"6839:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1846,"mutability":"mutable","name":"error","nameLocation":"6871:5:17","nodeType":"VariableDeclaration","scope":1860,"src":"6858:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1845,"nodeType":"UserDefinedTypeName","pathNode":{"id":1844,"name":"RecoverError","nameLocations":["6858:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":1570,"src":"6858:12:17"},"referencedDeclaration":1570,"src":"6858:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":1853,"initialValue":{"arguments":[{"id":1848,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"6891:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1849,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1833,"src":"6897:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1850,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"6900:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1851,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1837,"src":"6903:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1847,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1660,1734,1828],"referencedDeclaration":1828,"src":"6880:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1570_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6880:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1570_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6838:67:17"},{"expression":{"arguments":[{"id":1855,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1846,"src":"6927:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1570","typeString":"enum ECDSA.RecoverError"}],"id":1854,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"6915:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1570_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6915:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1857,"nodeType":"ExpressionStatement","src":"6915:18:17"},{"expression":{"id":1858,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"6950:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1841,"id":1859,"nodeType":"Return","src":"6943:16:17"}]},"documentation":{"id":1829,"nodeType":"StructuredDocumentation","src":"6569:122:17","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":1861,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6705:7:17","nodeType":"FunctionDefinition","parameters":{"id":1838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1831,"mutability":"mutable","name":"hash","nameLocation":"6730:4:17","nodeType":"VariableDeclaration","scope":1861,"src":"6722:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1830,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6722:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1833,"mutability":"mutable","name":"v","nameLocation":"6750:1:17","nodeType":"VariableDeclaration","scope":1861,"src":"6744:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1832,"name":"uint8","nodeType":"ElementaryTypeName","src":"6744:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1835,"mutability":"mutable","name":"r","nameLocation":"6769:1:17","nodeType":"VariableDeclaration","scope":1861,"src":"6761:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1834,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6761:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1837,"mutability":"mutable","name":"s","nameLocation":"6788:1:17","nodeType":"VariableDeclaration","scope":1861,"src":"6780:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1836,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6780:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6712:83:17"},"returnParameters":{"id":1841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1840,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1861,"src":"6819:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1839,"name":"address","nodeType":"ElementaryTypeName","src":"6819:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6818:9:17"},"scope":1921,"src":"6696:270:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1877,"nodeType":"Block","src":"7334:187:17","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":1872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7472:34:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":1873,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"7508:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1870,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7455:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1871,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7459:12:17","memberName":"encodePacked","nodeType":"MemberAccess","src":"7455:16:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7455:58:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1869,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7445:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7445:69:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1868,"id":1876,"nodeType":"Return","src":"7438:76:17"}]},"documentation":{"id":1862,"nodeType":"StructuredDocumentation","src":"6972:279:17","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1878,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7265:22:17","nodeType":"FunctionDefinition","parameters":{"id":1865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1864,"mutability":"mutable","name":"hash","nameLocation":"7296:4:17","nodeType":"VariableDeclaration","scope":1878,"src":"7288:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1863,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7288:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7287:14:17"},"returnParameters":{"id":1868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1878,"src":"7325:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1866,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7325:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7324:9:17"},"scope":1921,"src":"7256:265:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1899,"nodeType":"Block","src":"7886:116:17","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":1889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7930:32:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":1892,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1881,"src":"7981:1:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7983:6:17","memberName":"length","nodeType":"MemberAccess","src":"7981:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1890,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"7964:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$1560_$","typeString":"type(library Strings)"}},"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7972:8:17","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1443,"src":"7964:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7964:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1895,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1881,"src":"7992:1:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1887,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7913:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7917:12:17","memberName":"encodePacked","nodeType":"MemberAccess","src":"7913:16:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7913:81:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1886,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7903:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7903:92:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1885,"id":1898,"nodeType":"Return","src":"7896:99:17"}]},"documentation":{"id":1879,"nodeType":"StructuredDocumentation","src":"7527:274:17","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1900,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7815:22:17","nodeType":"FunctionDefinition","parameters":{"id":1882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1881,"mutability":"mutable","name":"s","nameLocation":"7851:1:17","nodeType":"VariableDeclaration","scope":1900,"src":"7838:14:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1880,"name":"bytes","nodeType":"ElementaryTypeName","src":"7838:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7837:16:17"},"returnParameters":{"id":1885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1884,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1900,"src":"7877:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1883,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7877:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7876:9:17"},"scope":1921,"src":"7806:196:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1919,"nodeType":"Block","src":"8443:92:17","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1901","id":1913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8487:10:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"id":1914,"name":"domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1903,"src":"8499:15:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1915,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"8516:10:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1911,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8470:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1912,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8474:12:17","memberName":"encodePacked","nodeType":"MemberAccess","src":"8470:16:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8470:57:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1910,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8460:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8460:68:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1909,"id":1918,"nodeType":"Return","src":"8453:75:17"}]},"documentation":{"id":1901,"nodeType":"StructuredDocumentation","src":"8008:328:17","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":1920,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8350:15:17","nodeType":"FunctionDefinition","parameters":{"id":1906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1903,"mutability":"mutable","name":"domainSeparator","nameLocation":"8374:15:17","nodeType":"VariableDeclaration","scope":1920,"src":"8366:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1902,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8366:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1905,"mutability":"mutable","name":"structHash","nameLocation":"8399:10:17","nodeType":"VariableDeclaration","scope":1920,"src":"8391:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1904,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8391:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8365:45:17"},"returnParameters":{"id":1909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1908,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1920,"src":"8434:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1907,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8434:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8433:9:17"},"scope":1921,"src":"8341:194:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1922,"src":"369:8168:17","usedErrors":[]}],"src":"112:8426:17"},"id":17},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","exportedSymbols":{"ECDSA":[1921],"EIP712":[2075],"Math":[2940],"Strings":[1560]},"id":2076,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1923,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:18"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"./ECDSA.sol","id":1924,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2076,"sourceUnit":1922,"src":"138:21:18","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"EIP712","contractDependencies":[],"contractKind":"contract","documentation":{"id":1925,"nodeType":"StructuredDocumentation","src":"161:1142:18","text":" @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n _Available since v3.4._"},"fullyImplemented":true,"id":2075,"linearizedBaseContracts":[2075],"name":"EIP712","nameLocation":"1322:6:18","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1927,"mutability":"immutable","name":"_CACHED_DOMAIN_SEPARATOR","nameLocation":"1598:24:18","nodeType":"VariableDeclaration","scope":2075,"src":"1572:50:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1926,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1572:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":1929,"mutability":"immutable","name":"_CACHED_CHAIN_ID","nameLocation":"1654:16:18","nodeType":"VariableDeclaration","scope":2075,"src":"1628:42:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1928,"name":"uint256","nodeType":"ElementaryTypeName","src":"1628:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":1931,"mutability":"immutable","name":"_CACHED_THIS","nameLocation":"1702:12:18","nodeType":"VariableDeclaration","scope":2075,"src":"1676:38:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1930,"name":"address","nodeType":"ElementaryTypeName","src":"1676:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":1933,"mutability":"immutable","name":"_HASHED_NAME","nameLocation":"1747:12:18","nodeType":"VariableDeclaration","scope":2075,"src":"1721:38:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1932,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1721:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":1935,"mutability":"immutable","name":"_HASHED_VERSION","nameLocation":"1791:15:18","nodeType":"VariableDeclaration","scope":2075,"src":"1765:41:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1934,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1765:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":1937,"mutability":"immutable","name":"_TYPE_HASH","nameLocation":"1838:10:18","nodeType":"VariableDeclaration","scope":2075,"src":"1812:36:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1936,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1812:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":2001,"nodeType":"Block","src":"2519:547:18","statements":[{"assignments":[1946],"declarations":[{"constant":false,"id":1946,"mutability":"mutable","name":"hashedName","nameLocation":"2537:10:18","nodeType":"VariableDeclaration","scope":2001,"src":"2529:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1945,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2529:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1953,"initialValue":{"arguments":[{"arguments":[{"id":1950,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1940,"src":"2566:4:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1949,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2560:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1948,"name":"bytes","nodeType":"ElementaryTypeName","src":"2560:5:18","typeDescriptions":{}}},"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2560:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1947,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2550:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2550:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2529:43:18"},{"assignments":[1955],"declarations":[{"constant":false,"id":1955,"mutability":"mutable","name":"hashedVersion","nameLocation":"2590:13:18","nodeType":"VariableDeclaration","scope":2001,"src":"2582:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1954,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2582:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1962,"initialValue":{"arguments":[{"arguments":[{"id":1959,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"2622:7:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1958,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2616:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1957,"name":"bytes","nodeType":"ElementaryTypeName","src":"2616:5:18","typeDescriptions":{}}},"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2616:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1956,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2606:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2606:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2582:49:18"},{"assignments":[1964],"declarations":[{"constant":false,"id":1964,"mutability":"mutable","name":"typeHash","nameLocation":"2649:8:18","nodeType":"VariableDeclaration","scope":2001,"src":"2641:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1963,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2641:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1968,"initialValue":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":1966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2683:84:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":1965,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2660:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2660:117:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2641:136:18"},{"expression":{"id":1971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1969,"name":"_HASHED_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"2787:12:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1970,"name":"hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"2802:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2787:25:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1972,"nodeType":"ExpressionStatement","src":"2787:25:18"},{"expression":{"id":1975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1973,"name":"_HASHED_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"2822:15:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1974,"name":"hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"2840:13:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2822:31:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1976,"nodeType":"ExpressionStatement","src":"2822:31:18"},{"expression":{"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1977,"name":"_CACHED_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"2863:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1978,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2882:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2888:7:18","memberName":"chainid","nodeType":"MemberAccess","src":"2882:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2863:32:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1981,"nodeType":"ExpressionStatement","src":"2863:32:18"},{"expression":{"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1982,"name":"_CACHED_DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"2905:24:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1984,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1964,"src":"2954:8:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1985,"name":"hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"2964:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1986,"name":"hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"2976:13:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1983,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"2932:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) view returns (bytes32)"}},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2932:58:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2905:85:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1989,"nodeType":"ExpressionStatement","src":"2905:85:18"},{"expression":{"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1990,"name":"_CACHED_THIS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1931,"src":"3000:12:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1993,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3023:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$2075","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$2075","typeString":"contract EIP712"}],"id":1992,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3015:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1991,"name":"address","nodeType":"ElementaryTypeName","src":"3015:7:18","typeDescriptions":{}}},"id":1994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3015:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3000:28:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1996,"nodeType":"ExpressionStatement","src":"3000:28:18"},{"expression":{"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1997,"name":"_TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1937,"src":"3038:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1998,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1964,"src":"3051:8:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3038:21:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2000,"nodeType":"ExpressionStatement","src":"3038:21:18"}]},"documentation":{"id":1938,"nodeType":"StructuredDocumentation","src":"1900:559:18","text":" @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."},"id":2002,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1940,"mutability":"mutable","name":"name","nameLocation":"2490:4:18","nodeType":"VariableDeclaration","scope":2002,"src":"2476:18:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1939,"name":"string","nodeType":"ElementaryTypeName","src":"2476:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1942,"mutability":"mutable","name":"version","nameLocation":"2510:7:18","nodeType":"VariableDeclaration","scope":2002,"src":"2496:21:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1941,"name":"string","nodeType":"ElementaryTypeName","src":"2496:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2475:43:18"},"returnParameters":{"id":1944,"nodeType":"ParameterList","parameters":[],"src":"2519:0:18"},"scope":2075,"src":"2464:602:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2030,"nodeType":"Block","src":"3214:246:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2010,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3236:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$2075","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$2075","typeString":"contract EIP712"}],"id":2009,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3228:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2008,"name":"address","nodeType":"ElementaryTypeName","src":"3228:7:18","typeDescriptions":{}}},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3228:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2012,"name":"_CACHED_THIS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1931,"src":"3245:12:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3228:29:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2014,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3261:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3267:7:18","memberName":"chainid","nodeType":"MemberAccess","src":"3261:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2016,"name":"_CACHED_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"3278:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3261:33:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3228:66:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2028,"nodeType":"Block","src":"3358:96:18","statements":[{"expression":{"arguments":[{"id":2023,"name":"_TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1937,"src":"3401:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2024,"name":"_HASHED_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"3413:12:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2025,"name":"_HASHED_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"3427:15:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2022,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"3379:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) view returns (bytes32)"}},"id":2026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3379:64:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2007,"id":2027,"nodeType":"Return","src":"3372:71:18"}]},"id":2029,"nodeType":"IfStatement","src":"3224:230:18","trueBody":{"id":2021,"nodeType":"Block","src":"3296:56:18","statements":[{"expression":{"id":2019,"name":"_CACHED_DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1927,"src":"3317:24:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2007,"id":2020,"nodeType":"Return","src":"3310:31:18"}]}}]},"documentation":{"id":2003,"nodeType":"StructuredDocumentation","src":"3072:75:18","text":" @dev Returns the domain separator for the current chain."},"id":2031,"implemented":true,"kind":"function","modifiers":[],"name":"_domainSeparatorV4","nameLocation":"3161:18:18","nodeType":"FunctionDefinition","parameters":{"id":2004,"nodeType":"ParameterList","parameters":[],"src":"3179:2:18"},"returnParameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2031,"src":"3205:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2005,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3205:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3204:9:18"},"scope":2075,"src":"3152:308:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2057,"nodeType":"Block","src":"3615:108:18","statements":[{"expression":{"arguments":[{"arguments":[{"id":2045,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"3653:8:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2046,"name":"nameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2035,"src":"3663:8:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2047,"name":"versionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2037,"src":"3673:11:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":2048,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3686:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3692:7:18","memberName":"chainid","nodeType":"MemberAccess","src":"3686:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2052,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3709:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$2075","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$2075","typeString":"contract EIP712"}],"id":2051,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3701:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2050,"name":"address","nodeType":"ElementaryTypeName","src":"3701:7:18","typeDescriptions":{}}},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3701:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2043,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3642:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2044,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3646:6:18","memberName":"encode","nodeType":"MemberAccess","src":"3642:10:18","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3642:73:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2042,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3632:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3632:84:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2041,"id":2056,"nodeType":"Return","src":"3625:91:18"}]},"id":2058,"implemented":true,"kind":"function","modifiers":[],"name":"_buildDomainSeparator","nameLocation":"3475:21:18","nodeType":"FunctionDefinition","parameters":{"id":2038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2033,"mutability":"mutable","name":"typeHash","nameLocation":"3514:8:18","nodeType":"VariableDeclaration","scope":2058,"src":"3506:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2032,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3506:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2035,"mutability":"mutable","name":"nameHash","nameLocation":"3540:8:18","nodeType":"VariableDeclaration","scope":2058,"src":"3532:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2034,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3532:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2037,"mutability":"mutable","name":"versionHash","nameLocation":"3566:11:18","nodeType":"VariableDeclaration","scope":2058,"src":"3558:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2036,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3558:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3496:87:18"},"returnParameters":{"id":2041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2040,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2058,"src":"3606:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2039,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3606:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3605:9:18"},"scope":2075,"src":"3466:257:18","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2073,"nodeType":"Block","src":"4434:79:18","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2068,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"4473:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4473:20:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2070,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2061,"src":"4495:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2066,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"4451:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$1921_$","typeString":"type(library ECDSA)"}},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4457:15:18","memberName":"toTypedDataHash","nodeType":"MemberAccess","referencedDeclaration":1920,"src":"4451:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4451:55:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2065,"id":2072,"nodeType":"Return","src":"4444:62:18"}]},"documentation":{"id":2059,"nodeType":"StructuredDocumentation","src":"3729:614:18","text":" @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"},"id":2074,"implemented":true,"kind":"function","modifiers":[],"name":"_hashTypedDataV4","nameLocation":"4357:16:18","nodeType":"FunctionDefinition","parameters":{"id":2062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2061,"mutability":"mutable","name":"structHash","nameLocation":"4382:10:18","nodeType":"VariableDeclaration","scope":2074,"src":"4374:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2060,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4374:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4373:20:18"},"returnParameters":{"id":2065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2064,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2074,"src":"4425:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2063,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4425:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4424:9:18"},"scope":2075,"src":"4348:165:18","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2076,"src":"1304:3211:18","usedErrors":[]}],"src":"113:4403:18"},"id":18},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2940]},"id":2941,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2077,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2078,"nodeType":"StructuredDocumentation","src":"128:73:19","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2940,"linearizedBaseContracts":[2940],"name":"Math","nameLocation":"210:4:19","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":2082,"members":[{"id":2079,"name":"Down","nameLocation":"245:4:19","nodeType":"EnumValue","src":"245:4:19"},{"id":2080,"name":"Up","nameLocation":"287:2:19","nodeType":"EnumValue","src":"287:2:19"},{"id":2081,"name":"Zero","nameLocation":"318:4:19","nodeType":"EnumValue","src":"318:4:19"}],"name":"Rounding","nameLocation":"226:8:19","nodeType":"EnumDefinition","src":"221:122:19"},{"body":{"id":2099,"nodeType":"Block","src":"480:37:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2092,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2085,"src":"497:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2093,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2087,"src":"501:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2096,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2087,"src":"509:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:19","trueExpression":{"id":2095,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2085,"src":"505:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2091,"id":2098,"nodeType":"Return","src":"490:20:19"}]},"documentation":{"id":2083,"nodeType":"StructuredDocumentation","src":"349:59:19","text":" @dev Returns the largest of two numbers."},"id":2100,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:19","nodeType":"FunctionDefinition","parameters":{"id":2088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2085,"mutability":"mutable","name":"a","nameLocation":"434:1:19","nodeType":"VariableDeclaration","scope":2100,"src":"426:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2084,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2087,"mutability":"mutable","name":"b","nameLocation":"445:1:19","nodeType":"VariableDeclaration","scope":2100,"src":"437:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2086,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:19"},"returnParameters":{"id":2091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2090,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2100,"src":"471:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2089,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:19"},"scope":2940,"src":"413:104:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2117,"nodeType":"Block","src":"655:37:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2110,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"672:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2111,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"676:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2114,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"684:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:19","trueExpression":{"id":2113,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"680:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2109,"id":2116,"nodeType":"Return","src":"665:20:19"}]},"documentation":{"id":2101,"nodeType":"StructuredDocumentation","src":"523:60:19","text":" @dev Returns the smallest of two numbers."},"id":2118,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:19","nodeType":"FunctionDefinition","parameters":{"id":2106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2103,"mutability":"mutable","name":"a","nameLocation":"609:1:19","nodeType":"VariableDeclaration","scope":2118,"src":"601:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2102,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2105,"mutability":"mutable","name":"b","nameLocation":"620:1:19","nodeType":"VariableDeclaration","scope":2118,"src":"612:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2104,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:19"},"returnParameters":{"id":2109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2118,"src":"646:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2107,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:19"},"scope":2940,"src":"588:104:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2140,"nodeType":"Block","src":"876:82:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2128,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"931:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2129,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"935:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2131,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2132,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"941:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2133,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"945:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2135,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2127,"id":2139,"nodeType":"Return","src":"923:28:19"}]},"documentation":{"id":2119,"nodeType":"StructuredDocumentation","src":"698:102:19","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2141,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:19","nodeType":"FunctionDefinition","parameters":{"id":2124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2121,"mutability":"mutable","name":"a","nameLocation":"830:1:19","nodeType":"VariableDeclaration","scope":2141,"src":"822:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2120,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2123,"mutability":"mutable","name":"b","nameLocation":"841:1:19","nodeType":"VariableDeclaration","scope":2141,"src":"833:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2122,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:19"},"returnParameters":{"id":2127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2126,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2141,"src":"867:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2125,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:19"},"scope":2940,"src":"805:153:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2165,"nodeType":"Block","src":"1228:123:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2151,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2144,"src":"1316:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2155,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2144,"src":"1330:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2158,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2159,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2146,"src":"1339:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:19","trueExpression":{"hexValue":"30","id":2154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2150,"id":2164,"nodeType":"Return","src":"1309:35:19"}]},"documentation":{"id":2142,"nodeType":"StructuredDocumentation","src":"964:188:19","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2166,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:19","nodeType":"FunctionDefinition","parameters":{"id":2147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2144,"mutability":"mutable","name":"a","nameLocation":"1182:1:19","nodeType":"VariableDeclaration","scope":2166,"src":"1174:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2143,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2146,"mutability":"mutable","name":"b","nameLocation":"1193:1:19","nodeType":"VariableDeclaration","scope":2166,"src":"1185:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2145,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:19"},"returnParameters":{"id":2150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2149,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2166,"src":"1219:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2148,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:19"},"scope":2940,"src":"1157:194:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2287,"nodeType":"Block","src":"1795:3797:19","statements":[{"id":2286,"nodeType":"UncheckedBlock","src":"1805:3781:19","statements":[{"assignments":[2179],"declarations":[{"constant":false,"id":2179,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:19","nodeType":"VariableDeclaration","scope":2286,"src":"2126:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2178,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2180,"nodeType":"VariableDeclarationStatement","src":"2126:13:19"},{"assignments":[2182],"declarations":[{"constant":false,"id":2182,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:19","nodeType":"VariableDeclaration","scope":2286,"src":"2198:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2181,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2183,"nodeType":"VariableDeclarationStatement","src":"2198:13:19"},{"AST":{"nodeType":"YulBlock","src":"2278:157:19","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:19","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:19"},"nodeType":"YulFunctionCall","src":"2319:6:19"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:19"},"nodeType":"YulFunctionCall","src":"2306:20:19"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:19","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:19"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:19"},"nodeType":"YulFunctionCall","src":"2352:9:19"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:19"}]},{"nodeType":"YulAssignment","src":"2378:43:19","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:19"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:19"},"nodeType":"YulFunctionCall","src":"2391:14:19"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:19"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:19"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:19"},"nodeType":"YulFunctionCall","src":"2407:13:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:19"},"nodeType":"YulFunctionCall","src":"2387:34:19"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:19"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2179,"isOffset":false,"isSlot":false,"src":"2343:5:19","valueSize":1},{"declaration":2179,"isOffset":false,"isSlot":false,"src":"2399:5:19","valueSize":1},{"declaration":2179,"isOffset":false,"isSlot":false,"src":"2414:5:19","valueSize":1},{"declaration":2182,"isOffset":false,"isSlot":false,"src":"2378:5:19","valueSize":1},{"declaration":2169,"isOffset":false,"isSlot":false,"src":"2313:1:19","valueSize":1},{"declaration":2169,"isOffset":false,"isSlot":false,"src":"2356:1:19","valueSize":1},{"declaration":2171,"isOffset":false,"isSlot":false,"src":"2316:1:19","valueSize":1},{"declaration":2171,"isOffset":false,"isSlot":false,"src":"2359:1:19","valueSize":1}],"id":2184,"nodeType":"InlineAssembly","src":"2269:166:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2185,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"2516:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2193,"nodeType":"IfStatement","src":"2512:75:19","trueBody":{"id":2192,"nodeType":"Block","src":"2528:59:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2188,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2179,"src":"2553:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2189,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"2561:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2177,"id":2191,"nodeType":"Return","src":"2546:26:19"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2195,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"2697:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2196,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"2711:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2194,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2199,"nodeType":"ExpressionStatement","src":"2689:28:19"},{"assignments":[2201],"declarations":[{"constant":false,"id":2201,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:19","nodeType":"VariableDeclaration","scope":2286,"src":"2973:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2200,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2202,"nodeType":"VariableDeclarationStatement","src":"2973:17:19"},{"AST":{"nodeType":"YulBlock","src":"3013:291:19","statements":[{"nodeType":"YulAssignment","src":"3082:38:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:19"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:19"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:19"},"nodeType":"YulFunctionCall","src":"3095:25:19"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:19"}]},{"nodeType":"YulAssignment","src":"3202:41:19","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:19"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:19"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:19"},"nodeType":"YulFunctionCall","src":"3222:20:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:19"},"nodeType":"YulFunctionCall","src":"3211:32:19"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:19"}]},{"nodeType":"YulAssignment","src":"3260:30:19","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:19"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:19"},"nodeType":"YulFunctionCall","src":"3269:21:19"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:19"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2173,"isOffset":false,"isSlot":false,"src":"3108:11:19","valueSize":1},{"declaration":2179,"isOffset":false,"isSlot":false,"src":"3236:5:19","valueSize":1},{"declaration":2179,"isOffset":false,"isSlot":false,"src":"3260:5:19","valueSize":1},{"declaration":2179,"isOffset":false,"isSlot":false,"src":"3273:5:19","valueSize":1},{"declaration":2182,"isOffset":false,"isSlot":false,"src":"3202:5:19","valueSize":1},{"declaration":2182,"isOffset":false,"isSlot":false,"src":"3215:5:19","valueSize":1},{"declaration":2201,"isOffset":false,"isSlot":false,"src":"3082:9:19","valueSize":1},{"declaration":2201,"isOffset":false,"isSlot":false,"src":"3225:9:19","valueSize":1},{"declaration":2201,"isOffset":false,"isSlot":false,"src":"3280:9:19","valueSize":1},{"declaration":2169,"isOffset":false,"isSlot":false,"src":"3102:1:19","valueSize":1},{"declaration":2171,"isOffset":false,"isSlot":false,"src":"3105:1:19","valueSize":1}],"id":2203,"nodeType":"InlineAssembly","src":"3004:300:19"},{"assignments":[2205],"declarations":[{"constant":false,"id":2205,"mutability":"mutable","name":"twos","nameLocation":"3619:4:19","nodeType":"VariableDeclaration","scope":2286,"src":"3611:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2204,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2213,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2206,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"3626:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:19","subExpression":{"id":2207,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"3642:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2211,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:19"},{"AST":{"nodeType":"YulBlock","src":"3681:362:19","statements":[{"nodeType":"YulAssignment","src":"3746:37:19","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:19"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:19"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:19"},"nodeType":"YulFunctionCall","src":"3761:22:19"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:19"}]},{"nodeType":"YulAssignment","src":"3850:25:19","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:19"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:19"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:19"},"nodeType":"YulFunctionCall","src":"3859:16:19"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:19"}]},{"nodeType":"YulAssignment","src":"3990:39:19","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:19","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:19"},"nodeType":"YulFunctionCall","src":"4006:12:19"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:19"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:19"},"nodeType":"YulFunctionCall","src":"4002:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:19"},"nodeType":"YulFunctionCall","src":"3998:31:19"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:19"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2173,"isOffset":false,"isSlot":false,"src":"3746:11:19","valueSize":1},{"declaration":2173,"isOffset":false,"isSlot":false,"src":"3765:11:19","valueSize":1},{"declaration":2179,"isOffset":false,"isSlot":false,"src":"3850:5:19","valueSize":1},{"declaration":2179,"isOffset":false,"isSlot":false,"src":"3863:5:19","valueSize":1},{"declaration":2205,"isOffset":false,"isSlot":false,"src":"3778:4:19","valueSize":1},{"declaration":2205,"isOffset":false,"isSlot":false,"src":"3870:4:19","valueSize":1},{"declaration":2205,"isOffset":false,"isSlot":false,"src":"3990:4:19","valueSize":1},{"declaration":2205,"isOffset":false,"isSlot":false,"src":"4013:4:19","valueSize":1},{"declaration":2205,"isOffset":false,"isSlot":false,"src":"4020:4:19","valueSize":1}],"id":2214,"nodeType":"InlineAssembly","src":"3672:371:19"},{"expression":{"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2215,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2179,"src":"4109:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2216,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"4118:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2217,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"4126:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2220,"nodeType":"ExpressionStatement","src":"4109:21:19"},{"assignments":[2222],"declarations":[{"constant":false,"id":2222,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:19","nodeType":"VariableDeclaration","scope":2286,"src":"4448:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2221,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2229,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:19","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2224,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"4471:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2226,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:19"},{"expression":{"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2230,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"4704:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2232,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"4719:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2233,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"4733:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2237,"nodeType":"ExpressionStatement","src":"4704:36:19"},{"expression":{"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2238,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"4773:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2240,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"4788:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2241,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"4802:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2245,"nodeType":"ExpressionStatement","src":"4773:36:19"},{"expression":{"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2246,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"4843:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2248,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"4858:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2249,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"4872:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2253,"nodeType":"ExpressionStatement","src":"4843:36:19"},{"expression":{"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2254,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"4913:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2256,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"4928:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2257,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"4942:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2261,"nodeType":"ExpressionStatement","src":"4913:36:19"},{"expression":{"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2262,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"4983:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2264,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"4998:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2265,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"5012:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2269,"nodeType":"ExpressionStatement","src":"4983:36:19"},{"expression":{"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2270,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"5054:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2272,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"5069:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2273,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"5083:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2277,"nodeType":"ExpressionStatement","src":"5054:36:19"},{"expression":{"id":2282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2278,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"5524:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2279,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2179,"src":"5533:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2280,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"5541:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2283,"nodeType":"ExpressionStatement","src":"5524:24:19"},{"expression":{"id":2284,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"5569:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2177,"id":2285,"nodeType":"Return","src":"5562:13:19"}]}]},"documentation":{"id":2167,"nodeType":"StructuredDocumentation","src":"1357:305:19","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2288,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:19","nodeType":"FunctionDefinition","parameters":{"id":2174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2169,"mutability":"mutable","name":"x","nameLocation":"1700:1:19","nodeType":"VariableDeclaration","scope":2288,"src":"1692:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2168,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2171,"mutability":"mutable","name":"y","nameLocation":"1719:1:19","nodeType":"VariableDeclaration","scope":2288,"src":"1711:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2170,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2173,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:19","nodeType":"VariableDeclaration","scope":2288,"src":"1730:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2172,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:19"},"returnParameters":{"id":2177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2176,"mutability":"mutable","name":"result","nameLocation":"1787:6:19","nodeType":"VariableDeclaration","scope":2288,"src":"1779:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2175,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:19"},"scope":2940,"src":"1667:3925:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2331,"nodeType":"Block","src":"5872:189:19","statements":[{"assignments":[2304],"declarations":[{"constant":false,"id":2304,"mutability":"mutable","name":"result","nameLocation":"5890:6:19","nodeType":"VariableDeclaration","scope":2331,"src":"5882:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2303,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2310,"initialValue":{"arguments":[{"id":2306,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"5906:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2307,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"5909:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2308,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2295,"src":"5912:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2305,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2288,2332],"referencedDeclaration":2288,"src":"5899:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5899:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:19"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"},"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2311,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"5938:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2312,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"5950:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2082_$","typeString":"type(enum Math.Rounding)"}},"id":2313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5959:2:19","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2080,"src":"5950:11:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"}},"src":"5938:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2316,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2291,"src":"5972:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2317,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2293,"src":"5975:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2318,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2295,"src":"5978:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2315,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:19","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2328,"nodeType":"IfStatement","src":"5934:98:19","trueBody":{"id":2327,"nodeType":"Block","src":"5996:36:19","statements":[{"expression":{"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2323,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"6010:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2326,"nodeType":"ExpressionStatement","src":"6010:11:19"}]}},{"expression":{"id":2329,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"6048:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2302,"id":2330,"nodeType":"Return","src":"6041:13:19"}]},"documentation":{"id":2289,"nodeType":"StructuredDocumentation","src":"5598:121:19","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2332,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:19","nodeType":"FunctionDefinition","parameters":{"id":2299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2291,"mutability":"mutable","name":"x","nameLocation":"5757:1:19","nodeType":"VariableDeclaration","scope":2332,"src":"5749:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2290,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2293,"mutability":"mutable","name":"y","nameLocation":"5776:1:19","nodeType":"VariableDeclaration","scope":2332,"src":"5768:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2292,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2295,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:19","nodeType":"VariableDeclaration","scope":2332,"src":"5787:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2294,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2298,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:19","nodeType":"VariableDeclaration","scope":2332,"src":"5816:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"},"typeName":{"id":2297,"nodeType":"UserDefinedTypeName","pathNode":{"id":2296,"name":"Rounding","nameLocations":["5816:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":2082,"src":"5816:8:19"},"referencedDeclaration":2082,"src":"5816:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:19"},"returnParameters":{"id":2302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2332,"src":"5863:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2300,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:19"},"scope":2940,"src":"5724:337:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2443,"nodeType":"Block","src":"6337:1585:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2340,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"6351:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2346,"nodeType":"IfStatement","src":"6347:45:19","trueBody":{"id":2345,"nodeType":"Block","src":"6359:33:19","statements":[{"expression":{"hexValue":"30","id":2343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2339,"id":2344,"nodeType":"Return","src":"6373:8:19"}]}},{"assignments":[2348],"declarations":[{"constant":false,"id":2348,"mutability":"mutable","name":"result","nameLocation":"7079:6:19","nodeType":"VariableDeclaration","scope":2443,"src":"7071:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2347,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2357,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2351,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"7099:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2350,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2612,2648],"referencedDeclaration":2612,"src":"7094:4:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7094:7:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2355,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:19"},{"id":2442,"nodeType":"UncheckedBlock","src":"7508:408:19","statements":[{"expression":{"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2358,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7532:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2359,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7542:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2360,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"7551:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2361,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7555:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2364,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2368,"nodeType":"ExpressionStatement","src":"7532:35:19"},{"expression":{"id":2378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2369,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7581:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2370,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7591:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2371,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"7600:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2372,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7604:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2375,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2379,"nodeType":"ExpressionStatement","src":"7581:35:19"},{"expression":{"id":2389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2380,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7630:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2381,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7640:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2382,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"7649:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2383,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7653:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2386,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2390,"nodeType":"ExpressionStatement","src":"7630:35:19"},{"expression":{"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2391,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7679:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2392,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7689:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2393,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"7698:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2394,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7702:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2397,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2401,"nodeType":"ExpressionStatement","src":"7679:35:19"},{"expression":{"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2402,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7728:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2403,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7738:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2404,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"7747:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2405,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7751:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2408,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2412,"nodeType":"ExpressionStatement","src":"7728:35:19"},{"expression":{"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2413,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7777:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2414,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7787:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2415,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"7796:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2416,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7800:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2419,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2423,"nodeType":"ExpressionStatement","src":"7777:35:19"},{"expression":{"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2424,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7826:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2425,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7836:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2426,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"7845:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2427,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7849:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2430,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2434,"nodeType":"ExpressionStatement","src":"7826:35:19"},{"expression":{"arguments":[{"id":2436,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7886:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2437,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"7894:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2438,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"7898:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2435,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2118,"src":"7882:3:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7882:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2339,"id":2441,"nodeType":"Return","src":"7875:30:19"}]}]},"documentation":{"id":2333,"nodeType":"StructuredDocumentation","src":"6067:208:19","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2444,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:19","nodeType":"FunctionDefinition","parameters":{"id":2336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2335,"mutability":"mutable","name":"a","nameLocation":"6302:1:19","nodeType":"VariableDeclaration","scope":2444,"src":"6294:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2334,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:19"},"returnParameters":{"id":2339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2338,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2444,"src":"6328:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2337,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:19"},"scope":2940,"src":"6280:1642:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2479,"nodeType":"Block","src":"8098:161:19","statements":[{"id":2478,"nodeType":"UncheckedBlock","src":"8108:145:19","statements":[{"assignments":[2456],"declarations":[{"constant":false,"id":2456,"mutability":"mutable","name":"result","nameLocation":"8140:6:19","nodeType":"VariableDeclaration","scope":2478,"src":"8132:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2455,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2460,"initialValue":{"arguments":[{"id":2458,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2447,"src":"8154:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2457,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2444,2480],"referencedDeclaration":2444,"src":"8149:4:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8149:7:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2461,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"8177:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"},"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2462,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"8187:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2463,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"8199:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2082_$","typeString":"type(enum Math.Rounding)"}},"id":2464,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8208:2:19","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2080,"src":"8199:11:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"}},"src":"8187:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2466,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"8214:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2467,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"8223:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2469,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2447,"src":"8232:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:19","trueExpression":{"hexValue":"31","id":2472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2475,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2454,"id":2477,"nodeType":"Return","src":"8170:72:19"}]}]},"documentation":{"id":2445,"nodeType":"StructuredDocumentation","src":"7928:89:19","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2480,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:19","nodeType":"FunctionDefinition","parameters":{"id":2451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2447,"mutability":"mutable","name":"a","nameLocation":"8044:1:19","nodeType":"VariableDeclaration","scope":2480,"src":"8036:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2446,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2450,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:19","nodeType":"VariableDeclaration","scope":2480,"src":"8047:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"},"typeName":{"id":2449,"nodeType":"UserDefinedTypeName","pathNode":{"id":2448,"name":"Rounding","nameLocations":["8047:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":2082,"src":"8047:8:19"},"referencedDeclaration":2082,"src":"8047:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:19"},"returnParameters":{"id":2454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2453,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2480,"src":"8089:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2452,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:19"},"scope":2940,"src":"8022:237:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2611,"nodeType":"Block","src":"8444:922:19","statements":[{"assignments":[2489],"declarations":[{"constant":false,"id":2489,"mutability":"mutable","name":"result","nameLocation":"8462:6:19","nodeType":"VariableDeclaration","scope":2611,"src":"8454:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2488,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2491,"initialValue":{"hexValue":"30","id":2490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:19"},{"id":2608,"nodeType":"UncheckedBlock","src":"8482:855:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2492,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"8510:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2506,"nodeType":"IfStatement","src":"8506:99:19","trueBody":{"id":2505,"nodeType":"Block","src":"8528:77:19","statements":[{"expression":{"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2497,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"8546:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2500,"nodeType":"ExpressionStatement","src":"8546:13:19"},{"expression":{"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2501,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"8577:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2504,"nodeType":"ExpressionStatement","src":"8577:13:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2507,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"8622:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2521,"nodeType":"IfStatement","src":"8618:96:19","trueBody":{"id":2520,"nodeType":"Block","src":"8639:75:19","statements":[{"expression":{"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2512,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"8657:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2515,"nodeType":"ExpressionStatement","src":"8657:12:19"},{"expression":{"id":2518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2516,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"8687:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2519,"nodeType":"ExpressionStatement","src":"8687:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2522,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"8731:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2536,"nodeType":"IfStatement","src":"8727:96:19","trueBody":{"id":2535,"nodeType":"Block","src":"8748:75:19","statements":[{"expression":{"id":2529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2527,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"8766:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2530,"nodeType":"ExpressionStatement","src":"8766:12:19"},{"expression":{"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2531,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"8796:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2534,"nodeType":"ExpressionStatement","src":"8796:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2537,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"8840:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2551,"nodeType":"IfStatement","src":"8836:96:19","trueBody":{"id":2550,"nodeType":"Block","src":"8857:75:19","statements":[{"expression":{"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2542,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"8875:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2545,"nodeType":"ExpressionStatement","src":"8875:12:19"},{"expression":{"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2546,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"8905:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2549,"nodeType":"ExpressionStatement","src":"8905:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2552,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"8949:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2566,"nodeType":"IfStatement","src":"8945:93:19","trueBody":{"id":2565,"nodeType":"Block","src":"8965:73:19","statements":[{"expression":{"id":2559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2557,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"8983:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2560,"nodeType":"ExpressionStatement","src":"8983:11:19"},{"expression":{"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2561,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"9012:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2564,"nodeType":"ExpressionStatement","src":"9012:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2567,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"9055:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2581,"nodeType":"IfStatement","src":"9051:93:19","trueBody":{"id":2580,"nodeType":"Block","src":"9071:73:19","statements":[{"expression":{"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2572,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"9089:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2575,"nodeType":"ExpressionStatement","src":"9089:11:19"},{"expression":{"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2576,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"9118:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2579,"nodeType":"ExpressionStatement","src":"9118:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2582,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"9161:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2596,"nodeType":"IfStatement","src":"9157:93:19","trueBody":{"id":2595,"nodeType":"Block","src":"9177:73:19","statements":[{"expression":{"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2587,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"9195:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2590,"nodeType":"ExpressionStatement","src":"9195:11:19"},{"expression":{"id":2593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2591,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"9224:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2594,"nodeType":"ExpressionStatement","src":"9224:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2597,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"9267:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2607,"nodeType":"IfStatement","src":"9263:64:19","trueBody":{"id":2606,"nodeType":"Block","src":"9283:44:19","statements":[{"expression":{"id":2604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2602,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"9301:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2605,"nodeType":"ExpressionStatement","src":"9301:11:19"}]}}]},{"expression":{"id":2609,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2489,"src":"9353:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2487,"id":2610,"nodeType":"Return","src":"9346:13:19"}]},"documentation":{"id":2481,"nodeType":"StructuredDocumentation","src":"8265:113:19","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2612,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:19","nodeType":"FunctionDefinition","parameters":{"id":2484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2483,"mutability":"mutable","name":"value","nameLocation":"8405:5:19","nodeType":"VariableDeclaration","scope":2612,"src":"8397:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2482,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:19"},"returnParameters":{"id":2487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2486,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2612,"src":"8435:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2485,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:19"},"scope":2940,"src":"8383:983:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2647,"nodeType":"Block","src":"9599:165:19","statements":[{"id":2646,"nodeType":"UncheckedBlock","src":"9609:149:19","statements":[{"assignments":[2624],"declarations":[{"constant":false,"id":2624,"mutability":"mutable","name":"result","nameLocation":"9641:6:19","nodeType":"VariableDeclaration","scope":2646,"src":"9633:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2623,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2628,"initialValue":{"arguments":[{"id":2626,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2615,"src":"9655:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2625,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2612,2648],"referencedDeclaration":2612,"src":"9650:4:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9650:11:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2629,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"9682:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2630,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2618,"src":"9692:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2631,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"9704:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2082_$","typeString":"type(enum Math.Rounding)"}},"id":2632,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9713:2:19","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2080,"src":"9704:11:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"}},"src":"9692:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2635,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"9724:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2637,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2615,"src":"9733:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:19","trueExpression":{"hexValue":"31","id":2640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2643,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2622,"id":2645,"nodeType":"Return","src":"9675:72:19"}]}]},"documentation":{"id":2613,"nodeType":"StructuredDocumentation","src":"9372:142:19","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2648,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:19","nodeType":"FunctionDefinition","parameters":{"id":2619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2615,"mutability":"mutable","name":"value","nameLocation":"9541:5:19","nodeType":"VariableDeclaration","scope":2648,"src":"9533:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2614,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2618,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:19","nodeType":"VariableDeclaration","scope":2648,"src":"9548:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"},"typeName":{"id":2617,"nodeType":"UserDefinedTypeName","pathNode":{"id":2616,"name":"Rounding","nameLocations":["9548:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":2082,"src":"9548:8:19"},"referencedDeclaration":2082,"src":"9548:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:19"},"returnParameters":{"id":2622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2648,"src":"9590:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2620,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:19"},"scope":2940,"src":"9519:245:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2776,"nodeType":"Block","src":"9951:828:19","statements":[{"assignments":[2657],"declarations":[{"constant":false,"id":2657,"mutability":"mutable","name":"result","nameLocation":"9969:6:19","nodeType":"VariableDeclaration","scope":2776,"src":"9961:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2656,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2659,"initialValue":{"hexValue":"30","id":2658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:19"},{"id":2773,"nodeType":"UncheckedBlock","src":"9989:761:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2660,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"10017:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2676,"nodeType":"IfStatement","src":"10013:99:19","trueBody":{"id":2675,"nodeType":"Block","src":"10034:78:19","statements":[{"expression":{"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2665,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"10052:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2668,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2670,"nodeType":"ExpressionStatement","src":"10052:15:19"},{"expression":{"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2671,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"10085:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2674,"nodeType":"ExpressionStatement","src":"10085:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2677,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"10129:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2680,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2693,"nodeType":"IfStatement","src":"10125:99:19","trueBody":{"id":2692,"nodeType":"Block","src":"10146:78:19","statements":[{"expression":{"id":2686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2682,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"10164:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2685,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2687,"nodeType":"ExpressionStatement","src":"10164:15:19"},{"expression":{"id":2690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2688,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"10197:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2691,"nodeType":"ExpressionStatement","src":"10197:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2694,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"10241:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2697,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2710,"nodeType":"IfStatement","src":"10237:99:19","trueBody":{"id":2709,"nodeType":"Block","src":"10258:78:19","statements":[{"expression":{"id":2703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2699,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"10276:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2702,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:19","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2704,"nodeType":"ExpressionStatement","src":"10276:15:19"},{"expression":{"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2705,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"10309:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2708,"nodeType":"ExpressionStatement","src":"10309:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2711,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"10353:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2727,"nodeType":"IfStatement","src":"10349:96:19","trueBody":{"id":2726,"nodeType":"Block","src":"10369:76:19","statements":[{"expression":{"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2716,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"10387:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:19","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2721,"nodeType":"ExpressionStatement","src":"10387:14:19"},{"expression":{"id":2724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2722,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"10419:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2725,"nodeType":"ExpressionStatement","src":"10419:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2728,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"10462:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2731,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:19","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2744,"nodeType":"IfStatement","src":"10458:96:19","trueBody":{"id":2743,"nodeType":"Block","src":"10478:76:19","statements":[{"expression":{"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2733,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"10496:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:19","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2738,"nodeType":"ExpressionStatement","src":"10496:14:19"},{"expression":{"id":2741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2739,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"10528:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2742,"nodeType":"ExpressionStatement","src":"10528:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2745,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"10571:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2748,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2761,"nodeType":"IfStatement","src":"10567:96:19","trueBody":{"id":2760,"nodeType":"Block","src":"10587:76:19","statements":[{"expression":{"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2750,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"10605:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2753,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2755,"nodeType":"ExpressionStatement","src":"10605:14:19"},{"expression":{"id":2758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2756,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"10637:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2759,"nodeType":"ExpressionStatement","src":"10637:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2762,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"10680:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2765,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2772,"nodeType":"IfStatement","src":"10676:64:19","trueBody":{"id":2771,"nodeType":"Block","src":"10696:44:19","statements":[{"expression":{"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2767,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"10714:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2770,"nodeType":"ExpressionStatement","src":"10714:11:19"}]}}]},{"expression":{"id":2774,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"10766:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2655,"id":2775,"nodeType":"Return","src":"10759:13:19"}]},"documentation":{"id":2649,"nodeType":"StructuredDocumentation","src":"9770:114:19","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2777,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:19","nodeType":"FunctionDefinition","parameters":{"id":2652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2651,"mutability":"mutable","name":"value","nameLocation":"9912:5:19","nodeType":"VariableDeclaration","scope":2777,"src":"9904:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2650,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:19"},"returnParameters":{"id":2655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2654,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2777,"src":"9942:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2653,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:19"},"scope":2940,"src":"9889:890:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2812,"nodeType":"Block","src":"11014:165:19","statements":[{"id":2811,"nodeType":"UncheckedBlock","src":"11024:149:19","statements":[{"assignments":[2789],"declarations":[{"constant":false,"id":2789,"mutability":"mutable","name":"result","nameLocation":"11056:6:19","nodeType":"VariableDeclaration","scope":2811,"src":"11048:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2788,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2793,"initialValue":{"arguments":[{"id":2791,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2780,"src":"11071:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2790,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2777,2813],"referencedDeclaration":2777,"src":"11065:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2794,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"11098:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"},"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2795,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2783,"src":"11108:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2796,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"11120:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2082_$","typeString":"type(enum Math.Rounding)"}},"id":2797,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11129:2:19","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2080,"src":"11120:11:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"}},"src":"11108:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2800,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"11139:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2802,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2780,"src":"11148:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:19","trueExpression":{"hexValue":"31","id":2805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2808,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2787,"id":2810,"nodeType":"Return","src":"11091:71:19"}]}]},"documentation":{"id":2778,"nodeType":"StructuredDocumentation","src":"10785:143:19","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2813,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:19","nodeType":"FunctionDefinition","parameters":{"id":2784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2780,"mutability":"mutable","name":"value","nameLocation":"10956:5:19","nodeType":"VariableDeclaration","scope":2813,"src":"10948:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2779,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2783,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:19","nodeType":"VariableDeclaration","scope":2813,"src":"10963:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"},"typeName":{"id":2782,"nodeType":"UserDefinedTypeName","pathNode":{"id":2781,"name":"Rounding","nameLocations":["10963:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":2082,"src":"10963:8:19"},"referencedDeclaration":2082,"src":"10963:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:19"},"returnParameters":{"id":2787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2786,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2813,"src":"11005:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2785,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:19"},"scope":2940,"src":"10933:246:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2899,"nodeType":"Block","src":"11493:600:19","statements":[{"assignments":[2822],"declarations":[{"constant":false,"id":2822,"mutability":"mutable","name":"result","nameLocation":"11511:6:19","nodeType":"VariableDeclaration","scope":2899,"src":"11503:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2821,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2824,"initialValue":{"hexValue":"30","id":2823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:19"},{"id":2896,"nodeType":"UncheckedBlock","src":"11531:533:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2825,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"11559:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2839,"nodeType":"IfStatement","src":"11555:98:19","trueBody":{"id":2838,"nodeType":"Block","src":"11577:76:19","statements":[{"expression":{"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2830,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"11595:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:19","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2833,"nodeType":"ExpressionStatement","src":"11595:13:19"},{"expression":{"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2834,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2822,"src":"11626:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2837,"nodeType":"ExpressionStatement","src":"11626:12:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2840,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"11670:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2854,"nodeType":"IfStatement","src":"11666:95:19","trueBody":{"id":2853,"nodeType":"Block","src":"11687:74:19","statements":[{"expression":{"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2845,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"11705:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2848,"nodeType":"ExpressionStatement","src":"11705:12:19"},{"expression":{"id":2851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2849,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2822,"src":"11735:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2852,"nodeType":"ExpressionStatement","src":"11735:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2855,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"11778:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2869,"nodeType":"IfStatement","src":"11774:95:19","trueBody":{"id":2868,"nodeType":"Block","src":"11795:74:19","statements":[{"expression":{"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2860,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"11813:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:19","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2863,"nodeType":"ExpressionStatement","src":"11813:12:19"},{"expression":{"id":2866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2864,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2822,"src":"11843:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:19","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2867,"nodeType":"ExpressionStatement","src":"11843:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2870,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"11886:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2884,"nodeType":"IfStatement","src":"11882:95:19","trueBody":{"id":2883,"nodeType":"Block","src":"11903:74:19","statements":[{"expression":{"id":2877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2875,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"11921:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:19","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2878,"nodeType":"ExpressionStatement","src":"11921:12:19"},{"expression":{"id":2881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2879,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2822,"src":"11951:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:19","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2882,"nodeType":"ExpressionStatement","src":"11951:11:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2885,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"11994:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2895,"nodeType":"IfStatement","src":"11990:64:19","trueBody":{"id":2894,"nodeType":"Block","src":"12010:44:19","statements":[{"expression":{"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2890,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2822,"src":"12028:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2893,"nodeType":"ExpressionStatement","src":"12028:11:19"}]}}]},{"expression":{"id":2897,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2822,"src":"12080:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2820,"id":2898,"nodeType":"Return","src":"12073:13:19"}]},"documentation":{"id":2814,"nodeType":"StructuredDocumentation","src":"11185:240:19","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2900,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:19","nodeType":"FunctionDefinition","parameters":{"id":2817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2816,"mutability":"mutable","name":"value","nameLocation":"11454:5:19","nodeType":"VariableDeclaration","scope":2900,"src":"11446:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2815,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:19"},"returnParameters":{"id":2820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2819,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2900,"src":"11484:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2818,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:19"},"scope":2940,"src":"11430:663:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2938,"nodeType":"Block","src":"12329:173:19","statements":[{"id":2937,"nodeType":"UncheckedBlock","src":"12339:157:19","statements":[{"assignments":[2912],"declarations":[{"constant":false,"id":2912,"mutability":"mutable","name":"result","nameLocation":"12371:6:19","nodeType":"VariableDeclaration","scope":2937,"src":"12363:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2911,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2916,"initialValue":{"arguments":[{"id":2914,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"12387:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2913,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2900,2939],"referencedDeclaration":2900,"src":"12380:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12380:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2917,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2912,"src":"12414:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2918,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"12424:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2919,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"12436:8:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2082_$","typeString":"type(enum Math.Rounding)"}},"id":2920,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12445:2:19","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2080,"src":"12436:11:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"}},"src":"12424:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2923,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2912,"src":"12457:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":2924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:19","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2926,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2928,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"12471:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:19","trueExpression":{"hexValue":"31","id":2931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2934,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2910,"id":2936,"nodeType":"Return","src":"12407:78:19"}]}]},"documentation":{"id":2901,"nodeType":"StructuredDocumentation","src":"12099:143:19","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2939,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:19","nodeType":"FunctionDefinition","parameters":{"id":2907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2903,"mutability":"mutable","name":"value","nameLocation":"12271:5:19","nodeType":"VariableDeclaration","scope":2939,"src":"12263:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2902,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2906,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:19","nodeType":"VariableDeclaration","scope":2939,"src":"12278:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"},"typeName":{"id":2905,"nodeType":"UserDefinedTypeName","pathNode":{"id":2904,"name":"Rounding","nameLocations":["12278:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":2082,"src":"12278:8:19"},"referencedDeclaration":2082,"src":"12278:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2082","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:19"},"returnParameters":{"id":2910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2909,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2939,"src":"12320:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2908,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:19"},"scope":2940,"src":"12247:255:19","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2941,"src":"202:12302:19","usedErrors":[]}],"src":"103:12402:19"},"id":19},"contracts/Multicall/Multicall3.sol":{"ast":{"absolutePath":"contracts/Multicall/Multicall3.sol","exportedSymbols":{"Context":[1311],"Multicall3":[3176],"Ownable":[1289]},"id":3177,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":2942,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"40:24:20"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":2943,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3177,"sourceUnit":1290,"src":"68:52:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2944,"name":"Ownable","nameLocations":["1358:7:20"],"nodeType":"IdentifierPath","referencedDeclaration":1289,"src":"1358:7:20"},"id":2945,"nodeType":"InheritanceSpecifier","src":"1358:7:20"}],"canonicalName":"Multicall3","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3176,"linearizedBaseContracts":[3176,1289,1311],"name":"Multicall3","nameLocation":"1344:10:20","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Multicall3.Call","id":2952,"members":[{"constant":false,"id":2947,"mutability":"mutable","name":"target","nameLocation":"1404:6:20","nodeType":"VariableDeclaration","scope":2952,"src":"1396:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2946,"name":"address","nodeType":"ElementaryTypeName","src":"1396:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2949,"mutability":"mutable","name":"allowFailure","nameLocation":"1426:12:20","nodeType":"VariableDeclaration","scope":2952,"src":"1421:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2948,"name":"bool","nodeType":"ElementaryTypeName","src":"1421:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2951,"mutability":"mutable","name":"callData","nameLocation":"1455:8:20","nodeType":"VariableDeclaration","scope":2952,"src":"1449:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2950,"name":"bytes","nodeType":"ElementaryTypeName","src":"1449:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"Call","nameLocation":"1380:4:20","nodeType":"StructDefinition","scope":3176,"src":"1373:98:20","visibility":"public"},{"canonicalName":"Multicall3.CallValue","id":2961,"members":[{"constant":false,"id":2954,"mutability":"mutable","name":"target","nameLocation":"1515:6:20","nodeType":"VariableDeclaration","scope":2961,"src":"1507:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2953,"name":"address","nodeType":"ElementaryTypeName","src":"1507:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2956,"mutability":"mutable","name":"allowFailure","nameLocation":"1537:12:20","nodeType":"VariableDeclaration","scope":2961,"src":"1532:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2955,"name":"bool","nodeType":"ElementaryTypeName","src":"1532:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2958,"mutability":"mutable","name":"value","nameLocation":"1568:5:20","nodeType":"VariableDeclaration","scope":2961,"src":"1560:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2957,"name":"uint256","nodeType":"ElementaryTypeName","src":"1560:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2960,"mutability":"mutable","name":"callData","nameLocation":"1590:8:20","nodeType":"VariableDeclaration","scope":2961,"src":"1584:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2959,"name":"bytes","nodeType":"ElementaryTypeName","src":"1584:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"CallValue","nameLocation":"1486:9:20","nodeType":"StructDefinition","scope":3176,"src":"1479:127:20","visibility":"public"},{"canonicalName":"Multicall3.Result","id":2966,"members":[{"constant":false,"id":2963,"mutability":"mutable","name":"success","nameLocation":"1644:7:20","nodeType":"VariableDeclaration","scope":2966,"src":"1639:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2962,"name":"bool","nodeType":"ElementaryTypeName","src":"1639:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2965,"mutability":"mutable","name":"returnData","nameLocation":"1668:10:20","nodeType":"VariableDeclaration","scope":2966,"src":"1662:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2964,"name":"bytes","nodeType":"ElementaryTypeName","src":"1662:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"Result","nameLocation":"1621:6:20","nodeType":"StructDefinition","scope":3176,"src":"1614:72:20","visibility":"public"},{"body":{"id":3045,"nodeType":"Block","src":"1804:542:20","statements":[{"assignments":[2978],"declarations":[{"constant":false,"id":2978,"mutability":"mutable","name":"length","nameLocation":"1823:6:20","nodeType":"VariableDeclaration","scope":3045,"src":"1815:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2977,"name":"uint256","nodeType":"ElementaryTypeName","src":"1815:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2981,"initialValue":{"expression":{"id":2979,"name":"calls","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2970,"src":"1832:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Call_$2952_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Multicall3.Call calldata[] calldata"}},"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1838:6:20","memberName":"length","nodeType":"MemberAccess","src":"1832:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1815:29:20"},{"expression":{"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2982,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"1855:10:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Result_$2966_memory_ptr_$dyn_memory_ptr","typeString":"struct Multicall3.Result memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2987,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2978,"src":"1881:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2986,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1868:12:20","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Result_$2966_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct Multicall3.Result memory[] memory)"},"typeName":{"baseType":{"id":2984,"nodeType":"UserDefinedTypeName","pathNode":{"id":2983,"name":"Result","nameLocations":["1872:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2966,"src":"1872:6:20"},"referencedDeclaration":2966,"src":"1872:6:20","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_storage_ptr","typeString":"struct Multicall3.Result"}},"id":2985,"nodeType":"ArrayTypeName","src":"1872:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Result_$2966_storage_$dyn_storage_ptr","typeString":"struct Multicall3.Result[]"}}},"id":2988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1868:20:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Result_$2966_memory_ptr_$dyn_memory_ptr","typeString":"struct Multicall3.Result memory[] memory"}},"src":"1855:33:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Result_$2966_memory_ptr_$dyn_memory_ptr","typeString":"struct Multicall3.Result memory[] memory"}},"id":2990,"nodeType":"ExpressionStatement","src":"1855:33:20"},{"assignments":[2993],"declarations":[{"constant":false,"id":2993,"mutability":"mutable","name":"calli","nameLocation":"1911:5:20","nodeType":"VariableDeclaration","scope":3045,"src":"1899:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Call_$2952_memory_ptr","typeString":"struct Multicall3.Call"},"typeName":{"id":2992,"nodeType":"UserDefinedTypeName","pathNode":{"id":2991,"name":"Call","nameLocations":["1899:4:20"],"nodeType":"IdentifierPath","referencedDeclaration":2952,"src":"1899:4:20"},"referencedDeclaration":2952,"src":"1899:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Call_$2952_storage_ptr","typeString":"struct Multicall3.Call"}},"visibility":"internal"}],"id":2994,"nodeType":"VariableDeclarationStatement","src":"1899:17:20"},{"body":{"id":3043,"nodeType":"Block","src":"1961:378:20","statements":[{"assignments":[3004],"declarations":[{"constant":false,"id":3004,"mutability":"mutable","name":"result","nameLocation":"1990:6:20","nodeType":"VariableDeclaration","scope":3043,"src":"1976:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_memory_ptr","typeString":"struct Multicall3.Result"},"typeName":{"id":3003,"nodeType":"UserDefinedTypeName","pathNode":{"id":3002,"name":"Result","nameLocations":["1976:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2966,"src":"1976:6:20"},"referencedDeclaration":2966,"src":"1976:6:20","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_storage_ptr","typeString":"struct Multicall3.Result"}},"visibility":"internal"}],"id":3008,"initialValue":{"baseExpression":{"id":3005,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"1999:10:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Result_$2966_memory_ptr_$dyn_memory_ptr","typeString":"struct Multicall3.Result memory[] memory"}},"id":3007,"indexExpression":{"id":3006,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2996,"src":"2010:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1999:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_memory_ptr","typeString":"struct Multicall3.Result memory"}},"nodeType":"VariableDeclarationStatement","src":"1976:36:20"},{"expression":{"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3009,"name":"calli","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"2027:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_Call_$2952_memory_ptr","typeString":"struct Multicall3.Call memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3010,"name":"calls","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2970,"src":"2035:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Call_$2952_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Multicall3.Call calldata[] calldata"}},"id":3012,"indexExpression":{"id":3011,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2996,"src":"2041:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2035:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_Call_$2952_calldata_ptr","typeString":"struct Multicall3.Call calldata"}},"src":"2027:16:20","typeDescriptions":{"typeIdentifier":"t_struct$_Call_$2952_memory_ptr","typeString":"struct Multicall3.Call memory"}},"id":3014,"nodeType":"ExpressionStatement","src":"2027:16:20"},{"expression":{"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"expression":{"id":3015,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"2061:6:20","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_memory_ptr","typeString":"struct Multicall3.Result memory"}},"id":3017,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2068:7:20","memberName":"success","nodeType":"MemberAccess","referencedDeclaration":2963,"src":"2061:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":3018,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"2077:6:20","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_memory_ptr","typeString":"struct Multicall3.Result memory"}},"id":3019,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2084:10:20","memberName":"returnData","nodeType":"MemberAccess","referencedDeclaration":2965,"src":"2077:17:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":3020,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"2060:35:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":3024,"name":"calli","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"2134:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_Call_$2952_memory_ptr","typeString":"struct Multicall3.Call memory"}},"id":3025,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2140:8:20","memberName":"callData","nodeType":"MemberAccess","referencedDeclaration":2951,"src":"2134:14:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"expression":{"id":3021,"name":"calli","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2993,"src":"2098:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_Call_$2952_memory_ptr","typeString":"struct Multicall3.Call memory"}},"id":3022,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2104:6:20","memberName":"target","nodeType":"MemberAccess","referencedDeclaration":2947,"src":"2098:12:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2111:4:20","memberName":"call","nodeType":"MemberAccess","src":"2098:17:20","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2098:65:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"src":"2060:103:20","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3028,"nodeType":"ExpressionStatement","src":"2060:103:20"},{"condition":{"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2182:15:20","subExpression":{"expression":{"id":3029,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"2183:6:20","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_memory_ptr","typeString":"struct Multicall3.Result memory"}},"id":3030,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2190:7:20","memberName":"success","nodeType":"MemberAccess","referencedDeclaration":2963,"src":"2183:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3038,"nodeType":"IfStatement","src":"2178:88:20","trueBody":{"id":3037,"nodeType":"Block","src":"2199:67:20","statements":[{"expression":{"arguments":[{"expression":{"id":3033,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"2232:6:20","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_memory_ptr","typeString":"struct Multicall3.Result memory"}},"id":3034,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2239:10:20","memberName":"returnData","nodeType":"MemberAccess","referencedDeclaration":2965,"src":"2232:17:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3032,"name":"_getRevertMsg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3175,"src":"2218:13:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":3035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2218:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3036,"nodeType":"ExpressionStatement","src":"2218:32:20"}]}},{"id":3042,"nodeType":"UncheckedBlock","src":"2280:48:20","statements":[{"expression":{"id":3040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2309:3:20","subExpression":{"id":3039,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2996,"src":"2311:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3041,"nodeType":"ExpressionStatement","src":"2309:3:20"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2999,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2996,"src":"1947:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3000,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2978,"src":"1951:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1947:10:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3044,"initializationExpression":{"assignments":[2996],"declarations":[{"constant":false,"id":2996,"mutability":"mutable","name":"i","nameLocation":"1940:1:20","nodeType":"VariableDeclaration","scope":3044,"src":"1932:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2995,"name":"uint256","nodeType":"ElementaryTypeName","src":"1932:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2998,"initialValue":{"hexValue":"30","id":2997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1944:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1932:13:20"},"nodeType":"ForStatement","src":"1927:412:20"}]},"functionSelector":"e8bbf5d7","id":3046,"implemented":true,"kind":"function","modifiers":[],"name":"multicall","nameLocation":"1703:9:20","nodeType":"FunctionDefinition","parameters":{"id":2971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2970,"mutability":"mutable","name":"calls","nameLocation":"1739:5:20","nodeType":"VariableDeclaration","scope":3046,"src":"1723:21:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Call_$2952_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Multicall3.Call[]"},"typeName":{"baseType":{"id":2968,"nodeType":"UserDefinedTypeName","pathNode":{"id":2967,"name":"Call","nameLocations":["1723:4:20"],"nodeType":"IdentifierPath","referencedDeclaration":2952,"src":"1723:4:20"},"referencedDeclaration":2952,"src":"1723:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Call_$2952_storage_ptr","typeString":"struct Multicall3.Call"}},"id":2969,"nodeType":"ArrayTypeName","src":"1723:6:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Call_$2952_storage_$dyn_storage_ptr","typeString":"struct Multicall3.Call[]"}},"visibility":"internal"}],"src":"1712:39:20"},"returnParameters":{"id":2976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2975,"mutability":"mutable","name":"returnData","nameLocation":"1792:10:20","nodeType":"VariableDeclaration","scope":3046,"src":"1776:26:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Result_$2966_memory_ptr_$dyn_memory_ptr","typeString":"struct Multicall3.Result[]"},"typeName":{"baseType":{"id":2973,"nodeType":"UserDefinedTypeName","pathNode":{"id":2972,"name":"Result","nameLocations":["1776:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2966,"src":"1776:6:20"},"referencedDeclaration":2966,"src":"1776:6:20","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_storage_ptr","typeString":"struct Multicall3.Result"}},"id":2974,"nodeType":"ArrayTypeName","src":"1776:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Result_$2966_storage_$dyn_storage_ptr","typeString":"struct Multicall3.Result[]"}},"visibility":"internal"}],"src":"1775:28:20"},"scope":3176,"src":"1694:652:20","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":3148,"nodeType":"Block","src":"2474:1034:20","statements":[{"assignments":[3058],"declarations":[{"constant":false,"id":3058,"mutability":"mutable","name":"valAccumulator","nameLocation":"2493:14:20","nodeType":"VariableDeclaration","scope":3148,"src":"2485:22:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3057,"name":"uint256","nodeType":"ElementaryTypeName","src":"2485:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3059,"nodeType":"VariableDeclarationStatement","src":"2485:22:20"},{"assignments":[3061],"declarations":[{"constant":false,"id":3061,"mutability":"mutable","name":"length","nameLocation":"2526:6:20","nodeType":"VariableDeclaration","scope":3148,"src":"2518:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3060,"name":"uint256","nodeType":"ElementaryTypeName","src":"2518:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3064,"initialValue":{"expression":{"id":3062,"name":"calls","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3050,"src":"2535:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_CallValue_$2961_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Multicall3.CallValue calldata[] calldata"}},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2541:6:20","memberName":"length","nodeType":"MemberAccess","src":"2535:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2518:29:20"},{"expression":{"id":3072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3065,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3055,"src":"2558:10:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Result_$2966_memory_ptr_$dyn_memory_ptr","typeString":"struct Multicall3.Result memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3070,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3061,"src":"2584:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2571:12:20","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Result_$2966_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct Multicall3.Result memory[] memory)"},"typeName":{"baseType":{"id":3067,"nodeType":"UserDefinedTypeName","pathNode":{"id":3066,"name":"Result","nameLocations":["2575:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2966,"src":"2575:6:20"},"referencedDeclaration":2966,"src":"2575:6:20","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_storage_ptr","typeString":"struct Multicall3.Result"}},"id":3068,"nodeType":"ArrayTypeName","src":"2575:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Result_$2966_storage_$dyn_storage_ptr","typeString":"struct Multicall3.Result[]"}}},"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2571:20:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Result_$2966_memory_ptr_$dyn_memory_ptr","typeString":"struct Multicall3.Result memory[] memory"}},"src":"2558:33:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Result_$2966_memory_ptr_$dyn_memory_ptr","typeString":"struct Multicall3.Result memory[] memory"}},"id":3073,"nodeType":"ExpressionStatement","src":"2558:33:20"},{"assignments":[3076],"declarations":[{"constant":false,"id":3076,"mutability":"mutable","name":"calli","nameLocation":"2619:5:20","nodeType":"VariableDeclaration","scope":3148,"src":"2602:22:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CallValue_$2961_memory_ptr","typeString":"struct Multicall3.CallValue"},"typeName":{"id":3075,"nodeType":"UserDefinedTypeName","pathNode":{"id":3074,"name":"CallValue","nameLocations":["2602:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":2961,"src":"2602:9:20"},"referencedDeclaration":2961,"src":"2602:9:20","typeDescriptions":{"typeIdentifier":"t_struct$_CallValue_$2961_storage_ptr","typeString":"struct Multicall3.CallValue"}},"visibility":"internal"}],"id":3077,"nodeType":"VariableDeclarationStatement","src":"2602:22:20"},{"body":{"id":3138,"nodeType":"Block","src":"2669:685:20","statements":[{"assignments":[3087],"declarations":[{"constant":false,"id":3087,"mutability":"mutable","name":"result","nameLocation":"2698:6:20","nodeType":"VariableDeclaration","scope":3138,"src":"2684:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_memory_ptr","typeString":"struct Multicall3.Result"},"typeName":{"id":3086,"nodeType":"UserDefinedTypeName","pathNode":{"id":3085,"name":"Result","nameLocations":["2684:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2966,"src":"2684:6:20"},"referencedDeclaration":2966,"src":"2684:6:20","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_storage_ptr","typeString":"struct Multicall3.Result"}},"visibility":"internal"}],"id":3091,"initialValue":{"baseExpression":{"id":3088,"name":"returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3055,"src":"2707:10:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Result_$2966_memory_ptr_$dyn_memory_ptr","typeString":"struct Multicall3.Result memory[] memory"}},"id":3090,"indexExpression":{"id":3089,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"2718:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2707:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_memory_ptr","typeString":"struct Multicall3.Result memory"}},"nodeType":"VariableDeclarationStatement","src":"2684:36:20"},{"expression":{"id":3096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3092,"name":"calli","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"2735:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_CallValue_$2961_memory_ptr","typeString":"struct Multicall3.CallValue memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3093,"name":"calls","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3050,"src":"2743:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_CallValue_$2961_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Multicall3.CallValue calldata[] calldata"}},"id":3095,"indexExpression":{"id":3094,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"2749:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2743:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_CallValue_$2961_calldata_ptr","typeString":"struct Multicall3.CallValue calldata"}},"src":"2735:16:20","typeDescriptions":{"typeIdentifier":"t_struct$_CallValue_$2961_memory_ptr","typeString":"struct Multicall3.CallValue memory"}},"id":3097,"nodeType":"ExpressionStatement","src":"2735:16:20"},{"assignments":[3099],"declarations":[{"constant":false,"id":3099,"mutability":"mutable","name":"val","nameLocation":"2774:3:20","nodeType":"VariableDeclaration","scope":3138,"src":"2766:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3098,"name":"uint256","nodeType":"ElementaryTypeName","src":"2766:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3102,"initialValue":{"expression":{"id":3100,"name":"calli","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"2780:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_CallValue_$2961_memory_ptr","typeString":"struct Multicall3.CallValue memory"}},"id":3101,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2786:5:20","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2958,"src":"2780:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2766:25:20"},{"id":3107,"nodeType":"UncheckedBlock","src":"2983:66:20","statements":[{"expression":{"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3103,"name":"valAccumulator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"3012:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3104,"name":"val","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3099,"src":"3030:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3012:21:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3106,"nodeType":"ExpressionStatement","src":"3012:21:20"}]},{"expression":{"id":3122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"expression":{"id":3108,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"3064:6:20","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_memory_ptr","typeString":"struct Multicall3.Result memory"}},"id":3110,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3071:7:20","memberName":"success","nodeType":"MemberAccess","referencedDeclaration":2963,"src":"3064:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":3111,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"3080:6:20","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_memory_ptr","typeString":"struct Multicall3.Result memory"}},"id":3112,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3087:10:20","memberName":"returnData","nodeType":"MemberAccess","referencedDeclaration":2965,"src":"3080:17:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"id":3113,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"3063:35:20","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":3119,"name":"calli","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"3149:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_CallValue_$2961_memory_ptr","typeString":"struct Multicall3.CallValue memory"}},"id":3120,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3155:8:20","memberName":"callData","nodeType":"MemberAccess","referencedDeclaration":2960,"src":"3149:14:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"expression":{"id":3114,"name":"calli","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"3101:5:20","typeDescriptions":{"typeIdentifier":"t_struct$_CallValue_$2961_memory_ptr","typeString":"struct Multicall3.CallValue memory"}},"id":3115,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3107:6:20","memberName":"target","nodeType":"MemberAccess","referencedDeclaration":2954,"src":"3101:12:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3114:4:20","memberName":"call","nodeType":"MemberAccess","src":"3101:17:20","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3117,"name":"val","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3099,"src":"3126:3:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3101:29:20","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3101:77:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"src":"3063:115:20","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3123,"nodeType":"ExpressionStatement","src":"3063:115:20"},{"condition":{"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3197:15:20","subExpression":{"expression":{"id":3124,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"3198:6:20","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_memory_ptr","typeString":"struct Multicall3.Result memory"}},"id":3125,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3205:7:20","memberName":"success","nodeType":"MemberAccess","referencedDeclaration":2963,"src":"3198:14:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3133,"nodeType":"IfStatement","src":"3193:88:20","trueBody":{"id":3132,"nodeType":"Block","src":"3214:67:20","statements":[{"expression":{"arguments":[{"expression":{"id":3128,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"3247:6:20","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_memory_ptr","typeString":"struct Multicall3.Result memory"}},"id":3129,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3254:10:20","memberName":"returnData","nodeType":"MemberAccess","referencedDeclaration":2965,"src":"3247:17:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3127,"name":"_getRevertMsg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3175,"src":"3233:13:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3233:32:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3131,"nodeType":"ExpressionStatement","src":"3233:32:20"}]}},{"id":3137,"nodeType":"UncheckedBlock","src":"3295:48:20","statements":[{"expression":{"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3324:3:20","subExpression":{"id":3134,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"3326:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3136,"nodeType":"ExpressionStatement","src":"3324:3:20"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3082,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"2655:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3083,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3061,"src":"2659:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2655:10:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3139,"initializationExpression":{"assignments":[3079],"declarations":[{"constant":false,"id":3079,"mutability":"mutable","name":"i","nameLocation":"2648:1:20","nodeType":"VariableDeclaration","scope":3139,"src":"2640:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3078,"name":"uint256","nodeType":"ElementaryTypeName","src":"2640:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3081,"initialValue":{"hexValue":"30","id":3080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2652:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2640:13:20"},"nodeType":"ForStatement","src":"2635:719:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3141,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3442:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3446:5:20","memberName":"value","nodeType":"MemberAccess","src":"3442:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3143,"name":"valAccumulator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"3455:14:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3442:27:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d756c746963616c6c333a2076616c7565206d69736d61746368","id":3145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3471:28:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_52d1b5fbcd1a89add74bb8157dc5d3d128a6df96345d91050302a8ad17d52eb9","typeString":"literal_string \"Multicall3: value mismatch\""},"value":"Multicall3: value mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_52d1b5fbcd1a89add74bb8157dc5d3d128a6df96345d91050302a8ad17d52eb9","typeString":"literal_string \"Multicall3: value mismatch\""}],"id":3140,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3434:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3434:66:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3147,"nodeType":"ExpressionStatement","src":"3434:66:20"}]},"functionSelector":"6e5a9cbb","id":3149,"implemented":true,"kind":"function","modifiers":[],"name":"multicallValue","nameLocation":"2363:14:20","nodeType":"FunctionDefinition","parameters":{"id":3051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3050,"mutability":"mutable","name":"calls","nameLocation":"2409:5:20","nodeType":"VariableDeclaration","scope":3149,"src":"2388:26:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_CallValue_$2961_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Multicall3.CallValue[]"},"typeName":{"baseType":{"id":3048,"nodeType":"UserDefinedTypeName","pathNode":{"id":3047,"name":"CallValue","nameLocations":["2388:9:20"],"nodeType":"IdentifierPath","referencedDeclaration":2961,"src":"2388:9:20"},"referencedDeclaration":2961,"src":"2388:9:20","typeDescriptions":{"typeIdentifier":"t_struct$_CallValue_$2961_storage_ptr","typeString":"struct Multicall3.CallValue"}},"id":3049,"nodeType":"ArrayTypeName","src":"2388:11:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_CallValue_$2961_storage_$dyn_storage_ptr","typeString":"struct Multicall3.CallValue[]"}},"visibility":"internal"}],"src":"2377:44:20"},"returnParameters":{"id":3056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3055,"mutability":"mutable","name":"returnData","nameLocation":"2462:10:20","nodeType":"VariableDeclaration","scope":3149,"src":"2446:26:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Result_$2966_memory_ptr_$dyn_memory_ptr","typeString":"struct Multicall3.Result[]"},"typeName":{"baseType":{"id":3053,"nodeType":"UserDefinedTypeName","pathNode":{"id":3052,"name":"Result","nameLocations":["2446:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2966,"src":"2446:6:20"},"referencedDeclaration":2966,"src":"2446:6:20","typeDescriptions":{"typeIdentifier":"t_struct$_Result_$2966_storage_ptr","typeString":"struct Multicall3.Result"}},"id":3054,"nodeType":"ArrayTypeName","src":"2446:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Result_$2966_storage_$dyn_storage_ptr","typeString":"struct Multicall3.Result[]"}},"visibility":"internal"}],"src":"2445:28:20"},"scope":3176,"src":"2354:1154:20","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":3174,"nodeType":"Block","src":"3578:429:20","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3154,"name":"_returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"3738:11:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3750:6:20","memberName":"length","nodeType":"MemberAccess","src":"3738:18:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3638","id":3156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3759:2:20","typeDescriptions":{"typeIdentifier":"t_rational_68_by_1","typeString":"int_const 68"},"value":"68"},"src":"3738:23:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3162,"nodeType":"IfStatement","src":"3734:53:20","trueBody":{"expression":{"arguments":[{"hexValue":"526561736f6e20756e6b6e6f776e","id":3159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3770:16:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_b32f4b50b725d2cdca49fe69c0dd6db304348674d9e6eb3fb496d591a21d2684","typeString":"literal_string \"Reason unknown\""},"value":"Reason unknown"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b32f4b50b725d2cdca49fe69c0dd6db304348674d9e6eb3fb496d591a21d2684","typeString":"literal_string \"Reason unknown\""}],"id":3158,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3763:6:20","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3763:24:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3161,"nodeType":"ExpressionStatement","src":"3763:24:20"}},{"AST":{"nodeType":"YulBlock","src":"3809:98:20","statements":[{"nodeType":"YulAssignment","src":"3859:37:20","value":{"arguments":[{"name":"_returnData","nodeType":"YulIdentifier","src":"3878:11:20"},{"kind":"number","nodeType":"YulLiteral","src":"3891:4:20","type":"","value":"0x04"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3874:3:20"},"nodeType":"YulFunctionCall","src":"3874:22:20"},"variableNames":[{"name":"_returnData","nodeType":"YulIdentifier","src":"3859:11:20"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3151,"isOffset":false,"isSlot":false,"src":"3859:11:20","valueSize":1},{"declaration":3151,"isOffset":false,"isSlot":false,"src":"3878:11:20","valueSize":1}],"id":3163,"nodeType":"InlineAssembly","src":"3800:107:20"},{"expression":{"arguments":[{"arguments":[{"id":3167,"name":"_returnData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3151,"src":"3935:11:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3949:6:20","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3168,"name":"string","nodeType":"ElementaryTypeName","src":"3949:6:20","typeDescriptions":{}}}],"id":3170,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3948:8:20","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}],"expression":{"id":3165,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3924:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3166,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3928:6:20","memberName":"decode","nodeType":"MemberAccess","src":"3924:10:20","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3924:33:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3164,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3917:6:20","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3917:41:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3173,"nodeType":"ExpressionStatement","src":"3917:41:20"}]},"id":3175,"implemented":true,"kind":"function","modifiers":[],"name":"_getRevertMsg","nameLocation":"3525:13:20","nodeType":"FunctionDefinition","parameters":{"id":3152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3151,"mutability":"mutable","name":"_returnData","nameLocation":"3552:11:20","nodeType":"VariableDeclaration","scope":3175,"src":"3539:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3150,"name":"bytes","nodeType":"ElementaryTypeName","src":"3539:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3538:26:20"},"returnParameters":{"id":3153,"nodeType":"ParameterList","parameters":[],"src":"3578:0:20"},"scope":3176,"src":"3516:491:20","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3177,"src":"1335:2675:20","usedErrors":[]}],"src":"40:3972:20"},"id":20},"contracts/Swapper/MultiSwapper.sol":{"ast":{"absolutePath":"contracts/Swapper/MultiSwapper.sol","exportedSymbols":{"Asset":[4632],"AssetRegister":[4927],"Base64":[774],"BaseBoringBatchable":[78],"BoringAddress":[815],"BoringBatchable":[115],"BoringERC20":[1176],"BoringFactory":[225],"BoringMath":[5046],"Counters":[1385],"Domain":[317],"ECDSA":[1921],"EIP712":[2075],"ERC1155":[5557],"ERC1155TokenReceiver":[5603],"ERC721TokenReceiver":[5626],"IERC1155":[428],"IERC1155TokenReceiver":[463],"IERC165":[473],"IERC20":[540],"IERC721":[653],"IERC721Enumerable":[701],"IERC721Metadata":[675],"IERC721TokenReceiver":[717],"IMasterContract":[726],"IStrategy":[8364],"ISwapper":[4616],"IUniswapV2Factory":[3685],"IUniswapV2Pair":[3927],"IWrappedNative":[8387],"IYieldBox":[8538],"Math":[2940],"MultiSwapper":[3622],"NO_STRATEGY":[8373],"NativeToken":[5639],"NativeTokenFactory":[6069],"SafeMath":[4002],"Strings":[1560],"TokenType":[8288],"UniswapV2Library":[4488],"YieldBox":[7407],"YieldBoxPermit":[7661],"YieldBoxRebase":[7767],"YieldBoxURIBuilder":[8280]},"id":3623,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3178,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"40:24:21"},{"absolutePath":"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol","file":"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol","id":3179,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3623,"sourceUnit":1177,"src":"68:75:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol","file":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol","id":3180,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3623,"sourceUnit":7408,"src":"145:68:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/ISwapper.sol","file":"../interfaces/ISwapper.sol","id":3181,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3623,"sourceUnit":4617,"src":"217:36:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/Swapper/interfaces/IUniswapV2Factory.sol","file":"./interfaces/IUniswapV2Factory.sol","id":3182,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3623,"sourceUnit":3686,"src":"255:44:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/Swapper/interfaces/IUniswapV2Pair.sol","file":"./interfaces/IUniswapV2Pair.sol","id":3183,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3623,"sourceUnit":3928,"src":"301:41:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/Swapper/libraries/UniswapV2Library.sol","file":"./libraries/UniswapV2Library.sol","id":3184,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3623,"sourceUnit":4489,"src":"346:42:21","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3186,"name":"ISwapper","nameLocations":["536:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":4616,"src":"536:8:21"},"id":3187,"nodeType":"InheritanceSpecifier","src":"536:8:21"}],"canonicalName":"MultiSwapper","contractDependencies":[],"contractKind":"contract","documentation":{"id":3185,"nodeType":"StructuredDocumentation","src":"392:119:21","text":"Modified from https://github.com/sushiswap/kashi-lending/blob/master/contracts/swappers/SushiSwapMultiSwapper.sol"},"fullyImplemented":true,"id":3622,"linearizedBaseContracts":[3622,4616],"name":"MultiSwapper","nameLocation":"520:12:21","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3191,"libraryName":{"id":3188,"name":"BoringERC20","nameLocations":["558:11:21"],"nodeType":"IdentifierPath","referencedDeclaration":1176,"src":"558:11:21"},"nodeType":"UsingForDirective","src":"552:29:21","typeName":{"id":3190,"nodeType":"UserDefinedTypeName","pathNode":{"id":3189,"name":"IERC20","nameLocations":["574:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":540,"src":"574:6:21"},"referencedDeclaration":540,"src":"574:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}}},{"constant":false,"id":3193,"mutability":"immutable","name":"factory","nameLocation":"687:7:21","nodeType":"VariableDeclaration","scope":3622,"src":"661:33:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3192,"name":"address","nodeType":"ElementaryTypeName","src":"661:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":3196,"mutability":"immutable","name":"yieldBox","nameLocation":"728:8:21","nodeType":"VariableDeclaration","scope":3622,"src":"701:35:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"},"typeName":{"id":3195,"nodeType":"UserDefinedTypeName","pathNode":{"id":3194,"name":"YieldBox","nameLocations":["701:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":7407,"src":"701:8:21"},"referencedDeclaration":7407,"src":"701:8:21","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}},"visibility":"private"},{"constant":false,"id":3198,"mutability":"immutable","name":"pairCodeHash","nameLocation":"769:12:21","nodeType":"VariableDeclaration","scope":3622,"src":"743:38:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3197,"name":"bytes32","nodeType":"ElementaryTypeName","src":"743:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":3221,"nodeType":"Block","src":"1064:107:21","statements":[{"expression":{"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3209,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"1075:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3210,"name":"_factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"1085:8:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1075:18:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3212,"nodeType":"ExpressionStatement","src":"1075:18:21"},{"expression":{"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3213,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"1104:8:21","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3214,"name":"_yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3204,"src":"1115:9:21","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}},"src":"1104:20:21","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}},"id":3216,"nodeType":"ExpressionStatement","src":"1104:20:21"},{"expression":{"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3217,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"1135:12:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3218,"name":"_pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3206,"src":"1150:13:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1135:28:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3220,"nodeType":"ExpressionStatement","src":"1135:28:21"}]},"documentation":{"id":3199,"nodeType":"StructuredDocumentation","src":"790:195:21","text":"@notice creates a new MultiSwapper contract\n @param _factory UniswapV2Factory address\n @param _yieldBox YieldBox address\n @param _pairCodeHash UniswapV2 pair code hash"},"id":3222,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3201,"mutability":"mutable","name":"_factory","nameLocation":"1011:8:21","nodeType":"VariableDeclaration","scope":3222,"src":"1003:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3200,"name":"address","nodeType":"ElementaryTypeName","src":"1003:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3204,"mutability":"mutable","name":"_yieldBox","nameLocation":"1030:9:21","nodeType":"VariableDeclaration","scope":3222,"src":"1021:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"},"typeName":{"id":3203,"nodeType":"UserDefinedTypeName","pathNode":{"id":3202,"name":"YieldBox","nameLocations":["1021:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":7407,"src":"1021:8:21"},"referencedDeclaration":7407,"src":"1021:8:21","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}},"visibility":"internal"},{"constant":false,"id":3206,"mutability":"mutable","name":"_pairCodeHash","nameLocation":"1049:13:21","nodeType":"VariableDeclaration","scope":3222,"src":"1041:21:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3205,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1041:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1002:61:21"},"returnParameters":{"id":3208,"nodeType":"ParameterList","parameters":[],"src":"1064:0:21"},"scope":3622,"src":"991:180:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[4583],"body":{"id":3280,"nodeType":"Block","src":"1771:369:21","statements":[{"assignments":[3239],"declarations":[{"constant":false,"id":3239,"mutability":"mutable","name":"path","nameLocation":"1799:4:21","nodeType":"VariableDeclaration","scope":3280,"src":"1782:21:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3237,"name":"address","nodeType":"ElementaryTypeName","src":"1782:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3238,"nodeType":"ArrayTypeName","src":"1782:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":3248,"initialValue":{"arguments":[{"id":3242,"name":"dexData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3229,"src":"1817:7:21","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"baseExpression":{"id":3244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1827:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3243,"name":"address","nodeType":"ElementaryTypeName","src":"1827:7:21","typeDescriptions":{}}},"id":3245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"1827:9:21","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"type(address[] memory)"}}],"id":3246,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1826:11:21","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"type(address[] memory)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"type(address[] memory)"}],"expression":{"id":3240,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1806:3:21","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3241,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1810:6:21","memberName":"decode","nodeType":"MemberAccess","src":"1806:10:21","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1806:32:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1782:56:21"},{"assignments":[3250],"declarations":[{"constant":false,"id":3250,"mutability":"mutable","name":"amountIn","nameLocation":"1857:8:21","nodeType":"VariableDeclaration","scope":3280,"src":"1849:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3249,"name":"uint256","nodeType":"ElementaryTypeName","src":"1849:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3257,"initialValue":{"arguments":[{"id":3253,"name":"tokenInId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3225,"src":"1886:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3254,"name":"shareIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3227,"src":"1897:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":3255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1906:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3251,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"1868:8:21","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}},"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1877:8:21","memberName":"toAmount","nodeType":"MemberAccess","referencedDeclaration":7255,"src":"1868:17:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$_t_uint256_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint256,uint256,bool) view external returns (uint256)"}},"id":3256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1868:44:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1849:63:21"},{"assignments":[3262],"declarations":[{"constant":false,"id":3262,"mutability":"mutable","name":"amounts","nameLocation":"1940:7:21","nodeType":"VariableDeclaration","scope":3280,"src":"1923:24:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3260,"name":"uint256","nodeType":"ElementaryTypeName","src":"1923:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3261,"nodeType":"ArrayTypeName","src":"1923:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":3270,"initialValue":{"arguments":[{"id":3265,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"1995:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3266,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"2017:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3267,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3239,"src":"2040:4:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"id":3268,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"2059:12:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3263,"name":"UniswapV2Library","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4488,"src":"1950:16:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UniswapV2Library_$4488_$","typeString":"type(library UniswapV2Library)"}},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1967:13:21","memberName":"getAmountsOut","nodeType":"MemberAccess","referencedDeclaration":4399,"src":"1950:30:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_bytes32_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,uint256,address[] memory,bytes32) view returns (uint256[] memory)"}},"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1950:132:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1923:159:21"},{"expression":{"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3271,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"2093:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3272,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"2105:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3277,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3273,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"2113:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2121:6:21","memberName":"length","nodeType":"MemberAccess","src":"2113:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2130:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2113:18:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2105:27:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2093:39:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3279,"nodeType":"ExpressionStatement","src":"2093:39:21"}]},"documentation":{"id":3223,"nodeType":"StructuredDocumentation","src":"1281:314:21","text":"@notice returns the possible output amount for input share\n @param tokenInId YieldBox asset id\n @param shareIn Shares to get the amount for\n @param dexData Custom DEX data for query execution\n @dev dexData examples:\n     - for UniV2, it should contain address[] swapPath"},"functionSelector":"532bb192","id":3281,"implemented":true,"kind":"function","modifiers":[],"name":"getOutputAmount","nameLocation":"1610:15:21","nodeType":"FunctionDefinition","overrides":{"id":3231,"nodeType":"OverrideSpecifier","overrides":[],"src":"1734:8:21"},"parameters":{"id":3230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3225,"mutability":"mutable","name":"tokenInId","nameLocation":"1644:9:21","nodeType":"VariableDeclaration","scope":3281,"src":"1636:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3224,"name":"uint256","nodeType":"ElementaryTypeName","src":"1636:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3227,"mutability":"mutable","name":"shareIn","nameLocation":"1672:7:21","nodeType":"VariableDeclaration","scope":3281,"src":"1664:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3226,"name":"uint256","nodeType":"ElementaryTypeName","src":"1664:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3229,"mutability":"mutable","name":"dexData","nameLocation":"1705:7:21","nodeType":"VariableDeclaration","scope":3281,"src":"1690:22:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3228,"name":"bytes","nodeType":"ElementaryTypeName","src":"1690:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1625:94:21"},"returnParameters":{"id":3234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3233,"mutability":"mutable","name":"amountOut","nameLocation":"1760:9:21","nodeType":"VariableDeclaration","scope":3281,"src":"1752:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3232,"name":"uint256","nodeType":"ElementaryTypeName","src":"1752:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1751:19:21"},"scope":3622,"src":"1601:539:21","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4595],"body":{"id":3336,"nodeType":"Block","src":"2654:354:21","statements":[{"assignments":[3298],"declarations":[{"constant":false,"id":3298,"mutability":"mutable","name":"path","nameLocation":"2682:4:21","nodeType":"VariableDeclaration","scope":3336,"src":"2665:21:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3296,"name":"address","nodeType":"ElementaryTypeName","src":"2665:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3297,"nodeType":"ArrayTypeName","src":"2665:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":3307,"initialValue":{"arguments":[{"id":3301,"name":"dexData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3288,"src":"2700:7:21","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"baseExpression":{"id":3303,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2710:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3302,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:21","typeDescriptions":{}}},"id":3304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"2710:9:21","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"type(address[] memory)"}}],"id":3305,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2709:11:21","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"type(address[] memory)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"type(address[] memory)"}],"expression":{"id":3299,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2689:3:21","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3300,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2693:6:21","memberName":"decode","nodeType":"MemberAccess","src":"2689:10:21","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:32:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"2665:56:21"},{"assignments":[3309],"declarations":[{"constant":false,"id":3309,"mutability":"mutable","name":"amountOut","nameLocation":"2740:9:21","nodeType":"VariableDeclaration","scope":3336,"src":"2732:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3308,"name":"uint256","nodeType":"ElementaryTypeName","src":"2732:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3316,"initialValue":{"arguments":[{"id":3312,"name":"tokenOutId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"2770:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3313,"name":"shareOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3286,"src":"2782:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":3314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2792:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":3310,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"2752:8:21","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}},"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:8:21","memberName":"toAmount","nodeType":"MemberAccess","referencedDeclaration":7255,"src":"2752:17:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$_t_uint256_$_t_bool_$returns$_t_uint256_$","typeString":"function (uint256,uint256,bool) view external returns (uint256)"}},"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2752:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2732:66:21"},{"assignments":[3321],"declarations":[{"constant":false,"id":3321,"mutability":"mutable","name":"amounts","nameLocation":"2826:7:21","nodeType":"VariableDeclaration","scope":3336,"src":"2809:24:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3319,"name":"uint256","nodeType":"ElementaryTypeName","src":"2809:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3320,"nodeType":"ArrayTypeName","src":"2809:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":3329,"initialValue":{"arguments":[{"id":3324,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"2880:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3325,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3309,"src":"2902:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3326,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"2926:4:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"id":3327,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"2945:12:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3322,"name":"UniswapV2Library","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4488,"src":"2836:16:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UniswapV2Library_$4488_$","typeString":"type(library UniswapV2Library)"}},"id":3323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2853:12:21","memberName":"getAmountsIn","nodeType":"MemberAccess","referencedDeclaration":4487,"src":"2836:29:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_bytes32_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,uint256,address[] memory,bytes32) view returns (uint256[] memory)"}},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2836:132:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"2809:159:21"},{"expression":{"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3330,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"2979:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3331,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3321,"src":"2990:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3333,"indexExpression":{"hexValue":"30","id":3332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2998:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2990:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2979:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3335,"nodeType":"ExpressionStatement","src":"2979:21:21"}]},"documentation":{"id":3282,"nodeType":"StructuredDocumentation","src":"2148:330:21","text":"@notice returns necessary input amount for a fixed output amount\n @param tokenOutId YieldBox asset id\n @param shareOut Shares out to compute the amount for\n @param dexData Custom DEX data for query execution\n @dev dexData examples:\n     - for UniV2, it should contain address[] swapPath"},"functionSelector":"c6fe9549","id":3337,"implemented":true,"kind":"function","modifiers":[],"name":"getInputAmount","nameLocation":"2493:14:21","nodeType":"FunctionDefinition","overrides":{"id":3290,"nodeType":"OverrideSpecifier","overrides":[],"src":"2618:8:21"},"parameters":{"id":3289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3284,"mutability":"mutable","name":"tokenOutId","nameLocation":"2526:10:21","nodeType":"VariableDeclaration","scope":3337,"src":"2518:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3283,"name":"uint256","nodeType":"ElementaryTypeName","src":"2518:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3286,"mutability":"mutable","name":"shareOut","nameLocation":"2555:8:21","nodeType":"VariableDeclaration","scope":3337,"src":"2547:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3285,"name":"uint256","nodeType":"ElementaryTypeName","src":"2547:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3288,"mutability":"mutable","name":"dexData","nameLocation":"2589:7:21","nodeType":"VariableDeclaration","scope":3337,"src":"2574:22:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3287,"name":"bytes","nodeType":"ElementaryTypeName","src":"2574:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2507:96:21"},"returnParameters":{"id":3293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3292,"mutability":"mutable","name":"amountIn","nameLocation":"2644:8:21","nodeType":"VariableDeclaration","scope":3337,"src":"2636:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3291,"name":"uint256","nodeType":"ElementaryTypeName","src":"2636:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2635:18:21"},"scope":3622,"src":"2484:524:21","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4615],"body":{"id":3432,"nodeType":"Block","src":"3853:661:21","statements":[{"assignments":[3362],"declarations":[{"constant":false,"id":3362,"mutability":"mutable","name":"path","nameLocation":"3881:4:21","nodeType":"VariableDeclaration","scope":3432,"src":"3864:21:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3360,"name":"address","nodeType":"ElementaryTypeName","src":"3864:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3361,"nodeType":"ArrayTypeName","src":"3864:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":3371,"initialValue":{"arguments":[{"id":3365,"name":"dexData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3350,"src":"3899:7:21","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"baseExpression":{"id":3367,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3909:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3366,"name":"address","nodeType":"ElementaryTypeName","src":"3909:7:21","typeDescriptions":{}}},"id":3368,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"3909:9:21","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"type(address[] memory)"}}],"id":3369,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3908:11:21","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"type(address[] memory)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"type(address[] memory)"}],"expression":{"id":3363,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3888:3:21","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3892:6:21","memberName":"decode","nodeType":"MemberAccess","src":"3888:10:21","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3888:32:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3864:56:21"},{"assignments":[3373,null],"declarations":[{"constant":false,"id":3373,"mutability":"mutable","name":"amountIn","nameLocation":"3940:8:21","nodeType":"VariableDeclaration","scope":3432,"src":"3932:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3372,"name":"uint256","nodeType":"ElementaryTypeName","src":"3932:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":3388,"initialValue":{"arguments":[{"id":3376,"name":"tokenInId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3340,"src":"3986:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3379,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4018:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_MultiSwapper_$3622","typeString":"contract MultiSwapper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_MultiSwapper_$3622","typeString":"contract MultiSwapper"}],"id":3378,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4010:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3377,"name":"address","nodeType":"ElementaryTypeName","src":"4010:7:21","typeDescriptions":{}}},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4010:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3383,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4046:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_MultiSwapper_$3622","typeString":"contract MultiSwapper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_MultiSwapper_$3622","typeString":"contract MultiSwapper"}],"id":3382,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4038:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3381,"name":"address","nodeType":"ElementaryTypeName","src":"4038:7:21","typeDescriptions":{}}},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4038:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":3385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4066:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3386,"name":"shareIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3344,"src":"4082:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3374,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"3954:8:21","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}},"id":3375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3963:8:21","memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":6609,"src":"3954:17:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,address,address,uint256,uint256) external returns (uint256,uint256)"}},"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3954:146:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"3931:169:21"},{"expression":{"id":3399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3389,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3354,"src":"4113:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3391,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3373,"src":"4165:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3392,"name":"amountOutMin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3348,"src":"4188:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3393,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3362,"src":"4215:4:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"arguments":[{"id":3396,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4242:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_MultiSwapper_$3622","typeString":"contract MultiSwapper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_MultiSwapper_$3622","typeString":"contract MultiSwapper"}],"id":3395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4234:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3394,"name":"address","nodeType":"ElementaryTypeName","src":"4234:7:21","typeDescriptions":{}}},"id":3397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4234:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3390,"name":"_swapExactTokensForTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"4125:25:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$returns$_t_uint256_$","typeString":"function (uint256,uint256,address[] memory,address) returns (uint256)"}},"id":3398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4125:133:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4113:145:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3400,"nodeType":"ExpressionStatement","src":"4113:145:21"},{"expression":{"arguments":[{"arguments":[{"id":3412,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"4317:8:21","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}],"id":3411,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4309:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3410,"name":"address","nodeType":"ElementaryTypeName","src":"4309:7:21","typeDescriptions":{}}},"id":3413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4309:17:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3414,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3354,"src":"4328:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"baseExpression":{"id":3402,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3362,"src":"4278:4:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3407,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3403,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3362,"src":"4283:4:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4288:6:21","memberName":"length","nodeType":"MemberAccess","src":"4283:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4297:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4283:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4278:21:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3401,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"4271:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$540_$","typeString":"type(contract IERC20)"}},"id":3408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4271:29:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4301:7:21","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":505,"src":"4271:37:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4271:67:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3416,"nodeType":"ExpressionStatement","src":"4271:67:21"},{"expression":{"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[null,{"id":3417,"name":"shareOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"4352:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3418,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"4349:12:21","typeDescriptions":{"typeIdentifier":"t_tuple$__$_t_uint256_$","typeString":"tuple(,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3421,"name":"tokenOutId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3342,"src":"4400:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3424,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4433:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_MultiSwapper_$3622","typeString":"contract MultiSwapper"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_MultiSwapper_$3622","typeString":"contract MultiSwapper"}],"id":3423,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4425:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3422,"name":"address","nodeType":"ElementaryTypeName","src":"4425:7:21","typeDescriptions":{}}},"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4425:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3426,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3346,"src":"4453:2:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3427,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3354,"src":"4470:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":3428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4494:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":3419,"name":"yieldBox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3196,"src":"4364:8:21","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}},"id":3420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4373:12:21","memberName":"depositAsset","nodeType":"MemberAccess","referencedDeclaration":6364,"src":"4364:21:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,address,address,uint256,uint256) external returns (uint256,uint256)"}},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4364:142:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"4349:157:21","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3431,"nodeType":"ExpressionStatement","src":"4349:157:21"}]},"documentation":{"id":3338,"nodeType":"StructuredDocumentation","src":"3124:470:21","text":"@notice swaps token in with token out\n @dev returns both amount and shares\n @param tokenInId YieldBox asset id\n @param tokenOutId YieldBox asset id\n @param shareIn Shares to be swapped\n @param to Receiver address\n @param amountOutMin Minimum amount to be received\n @param dexData Custom DEX data for query execution\n @dev dexData examples:\n     - for UniV2, it should contain address[] swapPath"},"functionSelector":"55a68e10","id":3433,"implemented":true,"kind":"function","modifiers":[],"name":"swap","nameLocation":"3609:4:21","nodeType":"FunctionDefinition","overrides":{"id":3352,"nodeType":"OverrideSpecifier","overrides":[],"src":"3798:8:21"},"parameters":{"id":3351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3340,"mutability":"mutable","name":"tokenInId","nameLocation":"3632:9:21","nodeType":"VariableDeclaration","scope":3433,"src":"3624:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3339,"name":"uint256","nodeType":"ElementaryTypeName","src":"3624:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3342,"mutability":"mutable","name":"tokenOutId","nameLocation":"3660:10:21","nodeType":"VariableDeclaration","scope":3433,"src":"3652:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3341,"name":"uint256","nodeType":"ElementaryTypeName","src":"3652:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3344,"mutability":"mutable","name":"shareIn","nameLocation":"3689:7:21","nodeType":"VariableDeclaration","scope":3433,"src":"3681:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3343,"name":"uint256","nodeType":"ElementaryTypeName","src":"3681:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3346,"mutability":"mutable","name":"to","nameLocation":"3715:2:21","nodeType":"VariableDeclaration","scope":3433,"src":"3707:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3345,"name":"address","nodeType":"ElementaryTypeName","src":"3707:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3348,"mutability":"mutable","name":"amountOutMin","nameLocation":"3736:12:21","nodeType":"VariableDeclaration","scope":3433,"src":"3728:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3347,"name":"uint256","nodeType":"ElementaryTypeName","src":"3728:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3350,"mutability":"mutable","name":"dexData","nameLocation":"3774:7:21","nodeType":"VariableDeclaration","scope":3433,"src":"3759:22:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3349,"name":"bytes","nodeType":"ElementaryTypeName","src":"3759:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3613:175:21"},"returnParameters":{"id":3357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3354,"mutability":"mutable","name":"amountOut","nameLocation":"3824:9:21","nodeType":"VariableDeclaration","scope":3433,"src":"3816:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3353,"name":"uint256","nodeType":"ElementaryTypeName","src":"3816:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3356,"mutability":"mutable","name":"shareOut","nameLocation":"3843:8:21","nodeType":"VariableDeclaration","scope":3433,"src":"3835:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3355,"name":"uint256","nodeType":"ElementaryTypeName","src":"3835:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3815:37:21"},"scope":3622,"src":"3600:914:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3502,"nodeType":"Block","src":"4966:527:21","statements":[{"assignments":[3451],"declarations":[{"constant":false,"id":3451,"mutability":"mutable","name":"amounts","nameLocation":"4994:7:21","nodeType":"VariableDeclaration","scope":3502,"src":"4977:24:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3449,"name":"uint256","nodeType":"ElementaryTypeName","src":"4977:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3450,"nodeType":"ArrayTypeName","src":"4977:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":3459,"initialValue":{"arguments":[{"id":3454,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"5049:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3455,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3435,"src":"5071:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3456,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3440,"src":"5094:4:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"id":3457,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"5113:12:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3452,"name":"UniswapV2Library","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4488,"src":"5004:16:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UniswapV2Library_$4488_$","typeString":"type(library UniswapV2Library)"}},"id":3453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5021:13:21","memberName":"getAmountsOut","nodeType":"MemberAccess","referencedDeclaration":4399,"src":"5004:30:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_bytes32_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (address,uint256,address[] memory,bytes32) view returns (uint256[] memory)"}},"id":3458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5004:132:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"4977:159:21"},{"expression":{"id":3467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3460,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3445,"src":"5147:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3461,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3451,"src":"5159:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3466,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3462,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3451,"src":"5167:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5175:6:21","memberName":"length","nodeType":"MemberAccess","src":"5167:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5184:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5167:18:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5159:27:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5147:39:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3468,"nodeType":"ExpressionStatement","src":"5147:39:21"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3470,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3445,"src":"5205:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3471,"name":"amountOutMin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3437,"src":"5218:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5205:25:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e73756666696369656e742d616d6f756e742d6f7574","id":3473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5232:25:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_f9bba043a83225eb6b59e03a620d9be35c0c01b2645fd69986af78bab24b3d55","typeString":"literal_string \"insufficient-amount-out\""},"value":"insufficient-amount-out"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f9bba043a83225eb6b59e03a620d9be35c0c01b2645fd69986af78bab24b3d55","typeString":"literal_string \"insufficient-amount-out\""}],"id":3469,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5197:7:21","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5197:61:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3475,"nodeType":"ExpressionStatement","src":"5197:61:21"},{"expression":{"arguments":[{"arguments":[{"id":3484,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"5376:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3485,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3440,"src":"5385:4:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3487,"indexExpression":{"hexValue":"30","id":3486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5390:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5385:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3488,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3440,"src":"5394:4:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3490,"indexExpression":{"hexValue":"31","id":3489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5399:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5394:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3491,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"5403:12:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3482,"name":"UniswapV2Library","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4488,"src":"5351:16:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UniswapV2Library_$4488_$","typeString":"type(library UniswapV2Library)"}},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5368:7:21","memberName":"pairFor","nodeType":"MemberAccess","referencedDeclaration":4103,"src":"5351:24:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$_t_address_$_t_bytes32_$returns$_t_address_$","typeString":"function (address,address,address,bytes32) pure returns (address)"}},"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5351:65:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3493,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3435,"src":"5431:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"baseExpression":{"id":3477,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3440,"src":"5315:4:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3479,"indexExpression":{"hexValue":"30","id":3478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5320:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5315:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3476,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"5308:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$540_$","typeString":"type(contract IERC20)"}},"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5308:15:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"id":3481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5324:12:21","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1124,"src":"5308:28:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$540_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$540_$","typeString":"function (contract IERC20,address,uint256)"}},"id":3494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5308:142:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3495,"nodeType":"ExpressionStatement","src":"5308:142:21"},{"expression":{"arguments":[{"id":3497,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3451,"src":"5467:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":3498,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3440,"src":"5476:4:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"id":3499,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3442,"src":"5482:2:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3496,"name":"_swap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3621,"src":"5461:5:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_address_$dyn_memory_ptr_$_t_address_$returns$__$","typeString":"function (uint256[] memory,address[] memory,address)"}},"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5461:24:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3501,"nodeType":"ExpressionStatement","src":"5461:24:21"}]},"id":3503,"implemented":true,"kind":"function","modifiers":[],"name":"_swapExactTokensForTokens","nameLocation":"4785:25:21","nodeType":"FunctionDefinition","parameters":{"id":3443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3435,"mutability":"mutable","name":"amountIn","nameLocation":"4829:8:21","nodeType":"VariableDeclaration","scope":3503,"src":"4821:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3434,"name":"uint256","nodeType":"ElementaryTypeName","src":"4821:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3437,"mutability":"mutable","name":"amountOutMin","nameLocation":"4856:12:21","nodeType":"VariableDeclaration","scope":3503,"src":"4848:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3436,"name":"uint256","nodeType":"ElementaryTypeName","src":"4848:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3440,"mutability":"mutable","name":"path","nameLocation":"4896:4:21","nodeType":"VariableDeclaration","scope":3503,"src":"4879:21:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3438,"name":"address","nodeType":"ElementaryTypeName","src":"4879:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3439,"nodeType":"ArrayTypeName","src":"4879:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3442,"mutability":"mutable","name":"to","nameLocation":"4919:2:21","nodeType":"VariableDeclaration","scope":3503,"src":"4911:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3441,"name":"address","nodeType":"ElementaryTypeName","src":"4911:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4810:118:21"},"returnParameters":{"id":3446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3445,"mutability":"mutable","name":"amountOut","nameLocation":"4955:9:21","nodeType":"VariableDeclaration","scope":3503,"src":"4947:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3444,"name":"uint256","nodeType":"ElementaryTypeName","src":"4947:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4946:19:21"},"scope":3622,"src":"4776:717:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3620,"nodeType":"Block","src":"5709:864:21","statements":[{"body":{"id":3618,"nodeType":"Block","src":"5762:804:21","statements":[{"assignments":[3527,3529],"declarations":[{"constant":false,"id":3527,"mutability":"mutable","name":"input","nameLocation":"5786:5:21","nodeType":"VariableDeclaration","scope":3618,"src":"5778:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3526,"name":"address","nodeType":"ElementaryTypeName","src":"5778:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3529,"mutability":"mutable","name":"output","nameLocation":"5801:6:21","nodeType":"VariableDeclaration","scope":3618,"src":"5793:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3528,"name":"address","nodeType":"ElementaryTypeName","src":"5793:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3539,"initialValue":{"components":[{"baseExpression":{"id":3530,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3509,"src":"5812:4:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3532,"indexExpression":{"id":3531,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3515,"src":"5817:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5812:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3533,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3509,"src":"5821:4:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3537,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3534,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3515,"src":"5826:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5830:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5826:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5821:11:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3538,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5811:22:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"5777:56:21"},{"assignments":[3541,null],"declarations":[{"constant":false,"id":3541,"mutability":"mutable","name":"token0","nameLocation":"5857:6:21","nodeType":"VariableDeclaration","scope":3618,"src":"5849:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3540,"name":"address","nodeType":"ElementaryTypeName","src":"5849:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},null],"id":3547,"initialValue":{"arguments":[{"id":3544,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"5897:5:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3545,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"5904:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3542,"name":"UniswapV2Library","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4488,"src":"5869:16:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UniswapV2Library_$4488_$","typeString":"type(library UniswapV2Library)"}},"id":3543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5886:10:21","memberName":"sortTokens","nodeType":"MemberAccess","referencedDeclaration":4053,"src":"5869:27:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$returns$_t_address_$_t_address_$","typeString":"function (address,address) pure returns (address,address)"}},"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5869:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"5848:63:21"},{"assignments":[3549],"declarations":[{"constant":false,"id":3549,"mutability":"mutable","name":"amountOut","nameLocation":"5934:9:21","nodeType":"VariableDeclaration","scope":3618,"src":"5926:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3548,"name":"uint256","nodeType":"ElementaryTypeName","src":"5926:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3555,"initialValue":{"baseExpression":{"id":3550,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3506,"src":"5946:7:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3554,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3551,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3515,"src":"5954:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5958:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5954:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5946:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5926:34:21"},{"assignments":[3557,3559],"declarations":[{"constant":false,"id":3557,"mutability":"mutable","name":"amount0Out","nameLocation":"5984:10:21","nodeType":"VariableDeclaration","scope":3618,"src":"5976:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3556,"name":"uint256","nodeType":"ElementaryTypeName","src":"5976:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3559,"mutability":"mutable","name":"amount1Out","nameLocation":"6004:10:21","nodeType":"VariableDeclaration","scope":3618,"src":"5996:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3558,"name":"uint256","nodeType":"ElementaryTypeName","src":"5996:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3576,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3560,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"6018:5:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3561,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"6027:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6018:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":3569,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"6097:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":3572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6116:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3571,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6108:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3570,"name":"uint256","nodeType":"ElementaryTypeName","src":"6108:7:21","typeDescriptions":{}}},"id":3573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6108:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3574,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6096:23:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":3575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6018:101:21","trueExpression":{"components":[{"arguments":[{"hexValue":"30","id":3565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6062:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3564,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6054:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3563,"name":"uint256","nodeType":"ElementaryTypeName","src":"6054:7:21","typeDescriptions":{}}},"id":3566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6054:10:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3567,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"6066:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3568,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6053:23:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"5975:144:21"},{"assignments":[3578],"declarations":[{"constant":false,"id":3578,"mutability":"mutable","name":"to","nameLocation":"6142:2:21","nodeType":"VariableDeclaration","scope":3618,"src":"6134:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3577,"name":"address","nodeType":"ElementaryTypeName","src":"6134:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3598,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3579,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3515,"src":"6147:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3580,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3509,"src":"6151:4:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6156:6:21","memberName":"length","nodeType":"MemberAccess","src":"6151:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"32","id":3582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6165:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6151:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6147:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3596,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3511,"src":"6377:3:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6147:233:21","trueExpression":{"arguments":[{"id":3587,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"6233:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3588,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"6263:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3589,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3509,"src":"6292:4:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3593,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3590,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3515,"src":"6297:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":3591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6301:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6297:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6292:11:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3594,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"6326:12:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3585,"name":"UniswapV2Library","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4488,"src":"6186:16:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UniswapV2Library_$4488_$","typeString":"type(library UniswapV2Library)"}},"id":3586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6203:7:21","memberName":"pairFor","nodeType":"MemberAccess","referencedDeclaration":4103,"src":"6186:24:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$_t_address_$_t_bytes32_$returns$_t_address_$","typeString":"function (address,address,address,bytes32) pure returns (address)"}},"id":3595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:171:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6134:246:21"},{"expression":{"arguments":[{"id":3609,"name":"amount0Out","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3557,"src":"6513:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3610,"name":"amount1Out","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"6525:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3611,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3578,"src":"6537:2:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6551:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3613,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"6541:9:21","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3612,"name":"bytes","nodeType":"ElementaryTypeName","src":"6545:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6541:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"arguments":[{"id":3602,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"6455:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3603,"name":"input","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"6464:5:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3604,"name":"output","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"6471:6:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3605,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"6479:12:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3600,"name":"UniswapV2Library","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4488,"src":"6430:16:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_UniswapV2Library_$4488_$","typeString":"type(library UniswapV2Library)"}},"id":3601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6447:7:21","memberName":"pairFor","nodeType":"MemberAccess","referencedDeclaration":4103,"src":"6430:24:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$_t_address_$_t_bytes32_$returns$_t_address_$","typeString":"function (address,address,address,bytes32) pure returns (address)"}},"id":3606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:62:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3599,"name":"IUniswapV2Pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3927,"src":"6397:14:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV2Pair_$3927_$","typeString":"type(contract IUniswapV2Pair)"}},"id":3607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6397:110:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$3927","typeString":"contract IUniswapV2Pair"}},"id":3608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6508:4:21","memberName":"swap","nodeType":"MemberAccess","referencedDeclaration":3911,"src":"6397:115:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_uint256_$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (uint256,uint256,address,bytes memory) external"}},"id":3616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6397:157:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3617,"nodeType":"ExpressionStatement","src":"6397:157:21"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3517,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3515,"src":"5736:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3518,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3509,"src":"5740:4:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5745:6:21","memberName":"length","nodeType":"MemberAccess","src":"5740:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5754:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5740:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5736:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3619,"initializationExpression":{"assignments":[3515],"declarations":[{"constant":false,"id":3515,"mutability":"mutable","name":"i","nameLocation":"5733:1:21","nodeType":"VariableDeclaration","scope":3619,"src":"5725:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3514,"name":"uint256","nodeType":"ElementaryTypeName","src":"5725:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3516,"nodeType":"VariableDeclarationStatement","src":"5725:9:21"},"loopExpression":{"expression":{"id":3524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5757:3:21","subExpression":{"id":3523,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3515,"src":"5757:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3525,"nodeType":"ExpressionStatement","src":"5757:3:21"},"nodeType":"ForStatement","src":"5720:846:21"}]},"id":3621,"implemented":true,"kind":"function","modifiers":[],"name":"_swap","nameLocation":"5590:5:21","nodeType":"FunctionDefinition","parameters":{"id":3512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3506,"mutability":"mutable","name":"amounts","nameLocation":"5623:7:21","nodeType":"VariableDeclaration","scope":3621,"src":"5606:24:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3504,"name":"uint256","nodeType":"ElementaryTypeName","src":"5606:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3505,"nodeType":"ArrayTypeName","src":"5606:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3509,"mutability":"mutable","name":"path","nameLocation":"5658:4:21","nodeType":"VariableDeclaration","scope":3621,"src":"5641:21:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3507,"name":"address","nodeType":"ElementaryTypeName","src":"5641:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3508,"nodeType":"ArrayTypeName","src":"5641:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3511,"mutability":"mutable","name":"_to","nameLocation":"5681:3:21","nodeType":"VariableDeclaration","scope":3621,"src":"5673:11:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3510,"name":"address","nodeType":"ElementaryTypeName","src":"5673:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5595:96:21"},"returnParameters":{"id":3513,"nodeType":"ParameterList","parameters":[],"src":"5709:0:21"},"scope":3622,"src":"5581:992:21","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3623,"src":"511:6065:21","usedErrors":[]}],"src":"40:6538:21"},"id":21},"contracts/Swapper/interfaces/IUniswapV2Factory.sol":{"ast":{"absolutePath":"contracts/Swapper/interfaces/IUniswapV2Factory.sol","exportedSymbols":{"IUniswapV2Factory":[3685]},"id":3686,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3624,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"42:24:22"},{"abstract":false,"baseContracts":[],"canonicalName":"IUniswapV2Factory","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3685,"linearizedBaseContracts":[3685],"name":"IUniswapV2Factory","nameLocation":"80:17:22","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9","id":3634,"name":"PairCreated","nameLocation":"111:11:22","nodeType":"EventDefinition","parameters":{"id":3633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3626,"indexed":true,"mutability":"mutable","name":"token0","nameLocation":"149:6:22","nodeType":"VariableDeclaration","scope":3634,"src":"133:22:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3625,"name":"address","nodeType":"ElementaryTypeName","src":"133:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3628,"indexed":true,"mutability":"mutable","name":"token1","nameLocation":"182:6:22","nodeType":"VariableDeclaration","scope":3634,"src":"166:22:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3627,"name":"address","nodeType":"ElementaryTypeName","src":"166:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3630,"indexed":false,"mutability":"mutable","name":"pair","nameLocation":"207:4:22","nodeType":"VariableDeclaration","scope":3634,"src":"199:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3629,"name":"address","nodeType":"ElementaryTypeName","src":"199:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3632,"indexed":false,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3634,"src":"222:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3631,"name":"uint256","nodeType":"ElementaryTypeName","src":"222:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"122:114:22"},"src":"105:132:22"},{"functionSelector":"017e7e58","id":3639,"implemented":false,"kind":"function","modifiers":[],"name":"feeTo","nameLocation":"254:5:22","nodeType":"FunctionDefinition","parameters":{"id":3635,"nodeType":"ParameterList","parameters":[],"src":"259:2:22"},"returnParameters":{"id":3638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3637,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3639,"src":"285:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3636,"name":"address","nodeType":"ElementaryTypeName","src":"285:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"284:9:22"},"scope":3685,"src":"245:49:22","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"094b7415","id":3644,"implemented":false,"kind":"function","modifiers":[],"name":"feeToSetter","nameLocation":"311:11:22","nodeType":"FunctionDefinition","parameters":{"id":3640,"nodeType":"ParameterList","parameters":[],"src":"322:2:22"},"returnParameters":{"id":3643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3642,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3644,"src":"348:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3641,"name":"address","nodeType":"ElementaryTypeName","src":"348:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"347:9:22"},"scope":3685,"src":"302:55:22","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e6a43905","id":3653,"implemented":false,"kind":"function","modifiers":[],"name":"getPair","nameLocation":"374:7:22","nodeType":"FunctionDefinition","parameters":{"id":3649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3646,"mutability":"mutable","name":"tokenA","nameLocation":"400:6:22","nodeType":"VariableDeclaration","scope":3653,"src":"392:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3645,"name":"address","nodeType":"ElementaryTypeName","src":"392:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3648,"mutability":"mutable","name":"tokenB","nameLocation":"425:6:22","nodeType":"VariableDeclaration","scope":3653,"src":"417:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3647,"name":"address","nodeType":"ElementaryTypeName","src":"417:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"381:57:22"},"returnParameters":{"id":3652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3651,"mutability":"mutable","name":"pair","nameLocation":"470:4:22","nodeType":"VariableDeclaration","scope":3653,"src":"462:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3650,"name":"address","nodeType":"ElementaryTypeName","src":"462:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"461:14:22"},"scope":3685,"src":"365:111:22","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"1e3dd18b","id":3660,"implemented":false,"kind":"function","modifiers":[],"name":"allPairs","nameLocation":"493:8:22","nodeType":"FunctionDefinition","parameters":{"id":3656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3655,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3660,"src":"502:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3654,"name":"uint256","nodeType":"ElementaryTypeName","src":"502:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"501:9:22"},"returnParameters":{"id":3659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3658,"mutability":"mutable","name":"pair","nameLocation":"542:4:22","nodeType":"VariableDeclaration","scope":3660,"src":"534:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3657,"name":"address","nodeType":"ElementaryTypeName","src":"534:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"533:14:22"},"scope":3685,"src":"484:64:22","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"574f2ba3","id":3665,"implemented":false,"kind":"function","modifiers":[],"name":"allPairsLength","nameLocation":"565:14:22","nodeType":"FunctionDefinition","parameters":{"id":3661,"nodeType":"ParameterList","parameters":[],"src":"579:2:22"},"returnParameters":{"id":3664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3663,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3665,"src":"605:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3662,"name":"uint256","nodeType":"ElementaryTypeName","src":"605:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"604:9:22"},"scope":3685,"src":"556:58:22","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"c9c65396","id":3674,"implemented":false,"kind":"function","modifiers":[],"name":"createPair","nameLocation":"631:10:22","nodeType":"FunctionDefinition","parameters":{"id":3670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3667,"mutability":"mutable","name":"tokenA","nameLocation":"660:6:22","nodeType":"VariableDeclaration","scope":3674,"src":"652:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3666,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3669,"mutability":"mutable","name":"tokenB","nameLocation":"685:6:22","nodeType":"VariableDeclaration","scope":3674,"src":"677:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3668,"name":"address","nodeType":"ElementaryTypeName","src":"677:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"641:57:22"},"returnParameters":{"id":3673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3672,"mutability":"mutable","name":"pair","nameLocation":"725:4:22","nodeType":"VariableDeclaration","scope":3674,"src":"717:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3671,"name":"address","nodeType":"ElementaryTypeName","src":"717:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"716:14:22"},"scope":3685,"src":"622:109:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f46901ed","id":3679,"implemented":false,"kind":"function","modifiers":[],"name":"setFeeTo","nameLocation":"748:8:22","nodeType":"FunctionDefinition","parameters":{"id":3677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3676,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3679,"src":"757:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3675,"name":"address","nodeType":"ElementaryTypeName","src":"757:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"756:9:22"},"returnParameters":{"id":3678,"nodeType":"ParameterList","parameters":[],"src":"774:0:22"},"scope":3685,"src":"739:36:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a2e74af6","id":3684,"implemented":false,"kind":"function","modifiers":[],"name":"setFeeToSetter","nameLocation":"792:14:22","nodeType":"FunctionDefinition","parameters":{"id":3682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3681,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3684,"src":"807:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3680,"name":"address","nodeType":"ElementaryTypeName","src":"807:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"806:9:22"},"returnParameters":{"id":3683,"nodeType":"ParameterList","parameters":[],"src":"824:0:22"},"scope":3685,"src":"783:42:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3686,"src":"70:758:22","usedErrors":[]}],"src":"42:788:22"},"id":22},"contracts/Swapper/interfaces/IUniswapV2Pair.sol":{"ast":{"absolutePath":"contracts/Swapper/interfaces/IUniswapV2Pair.sol","exportedSymbols":{"IUniswapV2Pair":[3927]},"id":3928,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3687,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"42:24:23"},{"abstract":false,"baseContracts":[],"canonicalName":"IUniswapV2Pair","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3927,"linearizedBaseContracts":[3927],"name":"IUniswapV2Pair","nameLocation":"80:14:23","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":3695,"name":"Approval","nameLocation":"108:8:23","nodeType":"EventDefinition","parameters":{"id":3694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3689,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"143:5:23","nodeType":"VariableDeclaration","scope":3695,"src":"127:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3688,"name":"address","nodeType":"ElementaryTypeName","src":"127:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3691,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"175:7:23","nodeType":"VariableDeclaration","scope":3695,"src":"159:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3690,"name":"address","nodeType":"ElementaryTypeName","src":"159:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3693,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"201:5:23","nodeType":"VariableDeclaration","scope":3695,"src":"193:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3692,"name":"uint256","nodeType":"ElementaryTypeName","src":"193:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"116:97:23"},"src":"102:112:23"},{"anonymous":false,"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":3703,"name":"Transfer","nameLocation":"226:8:23","nodeType":"EventDefinition","parameters":{"id":3702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3697,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"251:4:23","nodeType":"VariableDeclaration","scope":3703,"src":"235:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3696,"name":"address","nodeType":"ElementaryTypeName","src":"235:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3699,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"273:2:23","nodeType":"VariableDeclaration","scope":3703,"src":"257:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3698,"name":"address","nodeType":"ElementaryTypeName","src":"257:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3701,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"285:5:23","nodeType":"VariableDeclaration","scope":3703,"src":"277:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3700,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"234:57:23"},"src":"220:72:23"},{"functionSelector":"06fdde03","id":3708,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"309:4:23","nodeType":"FunctionDefinition","parameters":{"id":3704,"nodeType":"ParameterList","parameters":[],"src":"313:2:23"},"returnParameters":{"id":3707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3706,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3708,"src":"339:13:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3705,"name":"string","nodeType":"ElementaryTypeName","src":"339:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"338:15:23"},"scope":3927,"src":"300:54:23","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"95d89b41","id":3713,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"371:6:23","nodeType":"FunctionDefinition","parameters":{"id":3709,"nodeType":"ParameterList","parameters":[],"src":"377:2:23"},"returnParameters":{"id":3712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3711,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3713,"src":"403:13:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3710,"name":"string","nodeType":"ElementaryTypeName","src":"403:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"402:15:23"},"scope":3927,"src":"362:56:23","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"313ce567","id":3718,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"435:8:23","nodeType":"FunctionDefinition","parameters":{"id":3714,"nodeType":"ParameterList","parameters":[],"src":"443:2:23"},"returnParameters":{"id":3717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3716,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3718,"src":"469:5:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3715,"name":"uint8","nodeType":"ElementaryTypeName","src":"469:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"468:7:23"},"scope":3927,"src":"426:50:23","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"18160ddd","id":3723,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"493:11:23","nodeType":"FunctionDefinition","parameters":{"id":3719,"nodeType":"ParameterList","parameters":[],"src":"504:2:23"},"returnParameters":{"id":3722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3721,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3723,"src":"530:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3720,"name":"uint256","nodeType":"ElementaryTypeName","src":"530:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"529:9:23"},"scope":3927,"src":"484:55:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"70a08231","id":3730,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"556:9:23","nodeType":"FunctionDefinition","parameters":{"id":3726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3725,"mutability":"mutable","name":"owner","nameLocation":"574:5:23","nodeType":"VariableDeclaration","scope":3730,"src":"566:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3724,"name":"address","nodeType":"ElementaryTypeName","src":"566:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"565:15:23"},"returnParameters":{"id":3729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3728,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3730,"src":"604:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3727,"name":"uint256","nodeType":"ElementaryTypeName","src":"604:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"603:9:23"},"scope":3927,"src":"547:66:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"dd62ed3e","id":3739,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"630:9:23","nodeType":"FunctionDefinition","parameters":{"id":3735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3732,"mutability":"mutable","name":"owner","nameLocation":"658:5:23","nodeType":"VariableDeclaration","scope":3739,"src":"650:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3731,"name":"address","nodeType":"ElementaryTypeName","src":"650:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3734,"mutability":"mutable","name":"spender","nameLocation":"682:7:23","nodeType":"VariableDeclaration","scope":3739,"src":"674:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3733,"name":"address","nodeType":"ElementaryTypeName","src":"674:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"639:57:23"},"returnParameters":{"id":3738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3737,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3739,"src":"720:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3736,"name":"uint256","nodeType":"ElementaryTypeName","src":"720:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"719:9:23"},"scope":3927,"src":"621:108:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":3748,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"746:7:23","nodeType":"FunctionDefinition","parameters":{"id":3744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3741,"mutability":"mutable","name":"spender","nameLocation":"762:7:23","nodeType":"VariableDeclaration","scope":3748,"src":"754:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3740,"name":"address","nodeType":"ElementaryTypeName","src":"754:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3743,"mutability":"mutable","name":"value","nameLocation":"779:5:23","nodeType":"VariableDeclaration","scope":3748,"src":"771:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3742,"name":"uint256","nodeType":"ElementaryTypeName","src":"771:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"753:32:23"},"returnParameters":{"id":3747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3746,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3748,"src":"804:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3745,"name":"bool","nodeType":"ElementaryTypeName","src":"804:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:6:23"},"scope":3927,"src":"737:73:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a9059cbb","id":3757,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"827:8:23","nodeType":"FunctionDefinition","parameters":{"id":3753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3750,"mutability":"mutable","name":"to","nameLocation":"844:2:23","nodeType":"VariableDeclaration","scope":3757,"src":"836:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3749,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3752,"mutability":"mutable","name":"value","nameLocation":"856:5:23","nodeType":"VariableDeclaration","scope":3757,"src":"848:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3751,"name":"uint256","nodeType":"ElementaryTypeName","src":"848:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"835:27:23"},"returnParameters":{"id":3756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3755,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3757,"src":"881:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3754,"name":"bool","nodeType":"ElementaryTypeName","src":"881:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"880:6:23"},"scope":3927,"src":"818:69:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"23b872dd","id":3768,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"904:12:23","nodeType":"FunctionDefinition","parameters":{"id":3764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3759,"mutability":"mutable","name":"from","nameLocation":"935:4:23","nodeType":"VariableDeclaration","scope":3768,"src":"927:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3758,"name":"address","nodeType":"ElementaryTypeName","src":"927:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3761,"mutability":"mutable","name":"to","nameLocation":"958:2:23","nodeType":"VariableDeclaration","scope":3768,"src":"950:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3760,"name":"address","nodeType":"ElementaryTypeName","src":"950:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3763,"mutability":"mutable","name":"value","nameLocation":"979:5:23","nodeType":"VariableDeclaration","scope":3768,"src":"971:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3762,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"916:75:23"},"returnParameters":{"id":3767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3766,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3768,"src":"1010:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3765,"name":"bool","nodeType":"ElementaryTypeName","src":"1010:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1009:6:23"},"scope":3927,"src":"895:121:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"3644e515","id":3773,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"1033:16:23","nodeType":"FunctionDefinition","parameters":{"id":3769,"nodeType":"ParameterList","parameters":[],"src":"1049:2:23"},"returnParameters":{"id":3772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3771,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3773,"src":"1075:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3770,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1075:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1074:9:23"},"scope":3927,"src":"1024:60:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"30adf81f","id":3778,"implemented":false,"kind":"function","modifiers":[],"name":"PERMIT_TYPEHASH","nameLocation":"1101:15:23","nodeType":"FunctionDefinition","parameters":{"id":3774,"nodeType":"ParameterList","parameters":[],"src":"1116:2:23"},"returnParameters":{"id":3777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3776,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3778,"src":"1142:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3775,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1142:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1141:9:23"},"scope":3927,"src":"1092:59:23","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"7ecebe00","id":3785,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1168:6:23","nodeType":"FunctionDefinition","parameters":{"id":3781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3780,"mutability":"mutable","name":"owner","nameLocation":"1183:5:23","nodeType":"VariableDeclaration","scope":3785,"src":"1175:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3779,"name":"address","nodeType":"ElementaryTypeName","src":"1175:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1174:15:23"},"returnParameters":{"id":3784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3783,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3785,"src":"1213:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3782,"name":"uint256","nodeType":"ElementaryTypeName","src":"1213:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1212:9:23"},"scope":3927,"src":"1159:63:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d505accf","id":3802,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1239:6:23","nodeType":"FunctionDefinition","parameters":{"id":3800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3787,"mutability":"mutable","name":"owner","nameLocation":"1264:5:23","nodeType":"VariableDeclaration","scope":3802,"src":"1256:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3786,"name":"address","nodeType":"ElementaryTypeName","src":"1256:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3789,"mutability":"mutable","name":"spender","nameLocation":"1288:7:23","nodeType":"VariableDeclaration","scope":3802,"src":"1280:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3788,"name":"address","nodeType":"ElementaryTypeName","src":"1280:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3791,"mutability":"mutable","name":"value","nameLocation":"1314:5:23","nodeType":"VariableDeclaration","scope":3802,"src":"1306:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3790,"name":"uint256","nodeType":"ElementaryTypeName","src":"1306:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3793,"mutability":"mutable","name":"deadline","nameLocation":"1338:8:23","nodeType":"VariableDeclaration","scope":3802,"src":"1330:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3792,"name":"uint256","nodeType":"ElementaryTypeName","src":"1330:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3795,"mutability":"mutable","name":"v","nameLocation":"1363:1:23","nodeType":"VariableDeclaration","scope":3802,"src":"1357:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3794,"name":"uint8","nodeType":"ElementaryTypeName","src":"1357:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3797,"mutability":"mutable","name":"r","nameLocation":"1383:1:23","nodeType":"VariableDeclaration","scope":3802,"src":"1375:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3796,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1375:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3799,"mutability":"mutable","name":"s","nameLocation":"1403:1:23","nodeType":"VariableDeclaration","scope":3802,"src":"1395:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3798,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1395:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1245:166:23"},"returnParameters":{"id":3801,"nodeType":"ParameterList","parameters":[],"src":"1420:0:23"},"scope":3927,"src":"1230:191:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"eventSelector":"4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f","id":3810,"name":"Mint","nameLocation":"1435:4:23","nodeType":"EventDefinition","parameters":{"id":3809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3804,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1456:6:23","nodeType":"VariableDeclaration","scope":3810,"src":"1440:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3803,"name":"address","nodeType":"ElementaryTypeName","src":"1440:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3806,"indexed":false,"mutability":"mutable","name":"amount0","nameLocation":"1472:7:23","nodeType":"VariableDeclaration","scope":3810,"src":"1464:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3805,"name":"uint256","nodeType":"ElementaryTypeName","src":"1464:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3808,"indexed":false,"mutability":"mutable","name":"amount1","nameLocation":"1489:7:23","nodeType":"VariableDeclaration","scope":3810,"src":"1481:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3807,"name":"uint256","nodeType":"ElementaryTypeName","src":"1481:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1439:58:23"},"src":"1429:69:23"},{"anonymous":false,"eventSelector":"dccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496","id":3820,"name":"Burn","nameLocation":"1510:4:23","nodeType":"EventDefinition","parameters":{"id":3819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3812,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1541:6:23","nodeType":"VariableDeclaration","scope":3820,"src":"1525:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3811,"name":"address","nodeType":"ElementaryTypeName","src":"1525:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3814,"indexed":false,"mutability":"mutable","name":"amount0","nameLocation":"1566:7:23","nodeType":"VariableDeclaration","scope":3820,"src":"1558:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3813,"name":"uint256","nodeType":"ElementaryTypeName","src":"1558:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3816,"indexed":false,"mutability":"mutable","name":"amount1","nameLocation":"1592:7:23","nodeType":"VariableDeclaration","scope":3820,"src":"1584:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3815,"name":"uint256","nodeType":"ElementaryTypeName","src":"1584:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3818,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1626:2:23","nodeType":"VariableDeclaration","scope":3820,"src":"1610:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3817,"name":"address","nodeType":"ElementaryTypeName","src":"1610:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1514:121:23"},"src":"1504:132:23"},{"anonymous":false,"eventSelector":"d78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822","id":3834,"name":"Swap","nameLocation":"1648:4:23","nodeType":"EventDefinition","parameters":{"id":3833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3822,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1679:6:23","nodeType":"VariableDeclaration","scope":3834,"src":"1663:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3821,"name":"address","nodeType":"ElementaryTypeName","src":"1663:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3824,"indexed":false,"mutability":"mutable","name":"amount0In","nameLocation":"1704:9:23","nodeType":"VariableDeclaration","scope":3834,"src":"1696:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3823,"name":"uint256","nodeType":"ElementaryTypeName","src":"1696:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3826,"indexed":false,"mutability":"mutable","name":"amount1In","nameLocation":"1732:9:23","nodeType":"VariableDeclaration","scope":3834,"src":"1724:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3825,"name":"uint256","nodeType":"ElementaryTypeName","src":"1724:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3828,"indexed":false,"mutability":"mutable","name":"amount0Out","nameLocation":"1760:10:23","nodeType":"VariableDeclaration","scope":3834,"src":"1752:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3827,"name":"uint256","nodeType":"ElementaryTypeName","src":"1752:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3830,"indexed":false,"mutability":"mutable","name":"amount1Out","nameLocation":"1789:10:23","nodeType":"VariableDeclaration","scope":3834,"src":"1781:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3829,"name":"uint256","nodeType":"ElementaryTypeName","src":"1781:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3832,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1826:2:23","nodeType":"VariableDeclaration","scope":3834,"src":"1810:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3831,"name":"address","nodeType":"ElementaryTypeName","src":"1810:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1652:183:23"},"src":"1642:194:23"},{"anonymous":false,"eventSelector":"1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1","id":3840,"name":"Sync","nameLocation":"1848:4:23","nodeType":"EventDefinition","parameters":{"id":3839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3836,"indexed":false,"mutability":"mutable","name":"reserve0","nameLocation":"1861:8:23","nodeType":"VariableDeclaration","scope":3840,"src":"1853:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":3835,"name":"uint112","nodeType":"ElementaryTypeName","src":"1853:7:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":3838,"indexed":false,"mutability":"mutable","name":"reserve1","nameLocation":"1879:8:23","nodeType":"VariableDeclaration","scope":3840,"src":"1871:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":3837,"name":"uint112","nodeType":"ElementaryTypeName","src":"1871:7:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"src":"1852:36:23"},"src":"1842:47:23"},{"functionSelector":"ba9a7a56","id":3845,"implemented":false,"kind":"function","modifiers":[],"name":"MINIMUM_LIQUIDITY","nameLocation":"1906:17:23","nodeType":"FunctionDefinition","parameters":{"id":3841,"nodeType":"ParameterList","parameters":[],"src":"1923:2:23"},"returnParameters":{"id":3844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3843,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3845,"src":"1949:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3842,"name":"uint256","nodeType":"ElementaryTypeName","src":"1949:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1948:9:23"},"scope":3927,"src":"1897:61:23","stateMutability":"pure","virtual":false,"visibility":"external"},{"functionSelector":"c45a0155","id":3850,"implemented":false,"kind":"function","modifiers":[],"name":"factory","nameLocation":"1975:7:23","nodeType":"FunctionDefinition","parameters":{"id":3846,"nodeType":"ParameterList","parameters":[],"src":"1982:2:23"},"returnParameters":{"id":3849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3848,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3850,"src":"2008:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3847,"name":"address","nodeType":"ElementaryTypeName","src":"2008:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2007:9:23"},"scope":3927,"src":"1966:51:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0dfe1681","id":3855,"implemented":false,"kind":"function","modifiers":[],"name":"token0","nameLocation":"2034:6:23","nodeType":"FunctionDefinition","parameters":{"id":3851,"nodeType":"ParameterList","parameters":[],"src":"2040:2:23"},"returnParameters":{"id":3854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3853,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3855,"src":"2066:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3852,"name":"address","nodeType":"ElementaryTypeName","src":"2066:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2065:9:23"},"scope":3927,"src":"2025:50:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d21220a7","id":3860,"implemented":false,"kind":"function","modifiers":[],"name":"token1","nameLocation":"2092:6:23","nodeType":"FunctionDefinition","parameters":{"id":3856,"nodeType":"ParameterList","parameters":[],"src":"2098:2:23"},"returnParameters":{"id":3859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3858,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3860,"src":"2124:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3857,"name":"address","nodeType":"ElementaryTypeName","src":"2124:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2123:9:23"},"scope":3927,"src":"2083:50:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0902f1ac","id":3869,"implemented":false,"kind":"function","modifiers":[],"name":"getReserves","nameLocation":"2150:11:23","nodeType":"FunctionDefinition","parameters":{"id":3861,"nodeType":"ParameterList","parameters":[],"src":"2161:2:23"},"returnParameters":{"id":3868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3863,"mutability":"mutable","name":"reserve0","nameLocation":"2222:8:23","nodeType":"VariableDeclaration","scope":3869,"src":"2214:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":3862,"name":"uint112","nodeType":"ElementaryTypeName","src":"2214:7:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":3865,"mutability":"mutable","name":"reserve1","nameLocation":"2240:8:23","nodeType":"VariableDeclaration","scope":3869,"src":"2232:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":3864,"name":"uint112","nodeType":"ElementaryTypeName","src":"2232:7:23","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":3867,"mutability":"mutable","name":"blockTimestampLast","nameLocation":"2257:18:23","nodeType":"VariableDeclaration","scope":3869,"src":"2250:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3866,"name":"uint32","nodeType":"ElementaryTypeName","src":"2250:6:23","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2213:63:23"},"scope":3927,"src":"2141:136:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"5909c0d5","id":3874,"implemented":false,"kind":"function","modifiers":[],"name":"price0CumulativeLast","nameLocation":"2294:20:23","nodeType":"FunctionDefinition","parameters":{"id":3870,"nodeType":"ParameterList","parameters":[],"src":"2314:2:23"},"returnParameters":{"id":3873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3872,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3874,"src":"2340:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3871,"name":"uint256","nodeType":"ElementaryTypeName","src":"2340:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2339:9:23"},"scope":3927,"src":"2285:64:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"5a3d5493","id":3879,"implemented":false,"kind":"function","modifiers":[],"name":"price1CumulativeLast","nameLocation":"2366:20:23","nodeType":"FunctionDefinition","parameters":{"id":3875,"nodeType":"ParameterList","parameters":[],"src":"2386:2:23"},"returnParameters":{"id":3878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3877,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3879,"src":"2412:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3876,"name":"uint256","nodeType":"ElementaryTypeName","src":"2412:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2411:9:23"},"scope":3927,"src":"2357:64:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"7464fc3d","id":3884,"implemented":false,"kind":"function","modifiers":[],"name":"kLast","nameLocation":"2438:5:23","nodeType":"FunctionDefinition","parameters":{"id":3880,"nodeType":"ParameterList","parameters":[],"src":"2443:2:23"},"returnParameters":{"id":3883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3882,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3884,"src":"2469:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3881,"name":"uint256","nodeType":"ElementaryTypeName","src":"2469:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2468:9:23"},"scope":3927,"src":"2429:49:23","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"6a627842","id":3891,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"2495:4:23","nodeType":"FunctionDefinition","parameters":{"id":3887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3886,"mutability":"mutable","name":"to","nameLocation":"2508:2:23","nodeType":"VariableDeclaration","scope":3891,"src":"2500:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3885,"name":"address","nodeType":"ElementaryTypeName","src":"2500:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2499:12:23"},"returnParameters":{"id":3890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3889,"mutability":"mutable","name":"liquidity","nameLocation":"2538:9:23","nodeType":"VariableDeclaration","scope":3891,"src":"2530:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3888,"name":"uint256","nodeType":"ElementaryTypeName","src":"2530:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2529:19:23"},"scope":3927,"src":"2486:63:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"89afcb44","id":3900,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"2566:4:23","nodeType":"FunctionDefinition","parameters":{"id":3894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3893,"mutability":"mutable","name":"to","nameLocation":"2589:2:23","nodeType":"VariableDeclaration","scope":3900,"src":"2581:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3892,"name":"address","nodeType":"ElementaryTypeName","src":"2581:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2570:28:23"},"returnParameters":{"id":3899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3896,"mutability":"mutable","name":"amount0","nameLocation":"2625:7:23","nodeType":"VariableDeclaration","scope":3900,"src":"2617:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3895,"name":"uint256","nodeType":"ElementaryTypeName","src":"2617:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3898,"mutability":"mutable","name":"amount1","nameLocation":"2642:7:23","nodeType":"VariableDeclaration","scope":3900,"src":"2634:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3897,"name":"uint256","nodeType":"ElementaryTypeName","src":"2634:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2616:34:23"},"scope":3927,"src":"2557:94:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"022c0d9f","id":3911,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nameLocation":"2668:4:23","nodeType":"FunctionDefinition","parameters":{"id":3909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3902,"mutability":"mutable","name":"amount0Out","nameLocation":"2691:10:23","nodeType":"VariableDeclaration","scope":3911,"src":"2683:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3901,"name":"uint256","nodeType":"ElementaryTypeName","src":"2683:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3904,"mutability":"mutable","name":"amount1Out","nameLocation":"2720:10:23","nodeType":"VariableDeclaration","scope":3911,"src":"2712:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3903,"name":"uint256","nodeType":"ElementaryTypeName","src":"2712:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3906,"mutability":"mutable","name":"to","nameLocation":"2749:2:23","nodeType":"VariableDeclaration","scope":3911,"src":"2741:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3905,"name":"address","nodeType":"ElementaryTypeName","src":"2741:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3908,"mutability":"mutable","name":"data","nameLocation":"2777:4:23","nodeType":"VariableDeclaration","scope":3911,"src":"2762:19:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3907,"name":"bytes","nodeType":"ElementaryTypeName","src":"2762:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2672:116:23"},"returnParameters":{"id":3910,"nodeType":"ParameterList","parameters":[],"src":"2797:0:23"},"scope":3927,"src":"2659:139:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"bc25cf77","id":3916,"implemented":false,"kind":"function","modifiers":[],"name":"skim","nameLocation":"2815:4:23","nodeType":"FunctionDefinition","parameters":{"id":3914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3913,"mutability":"mutable","name":"to","nameLocation":"2828:2:23","nodeType":"VariableDeclaration","scope":3916,"src":"2820:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3912,"name":"address","nodeType":"ElementaryTypeName","src":"2820:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2819:12:23"},"returnParameters":{"id":3915,"nodeType":"ParameterList","parameters":[],"src":"2840:0:23"},"scope":3927,"src":"2806:35:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"fff6cae9","id":3919,"implemented":false,"kind":"function","modifiers":[],"name":"sync","nameLocation":"2858:4:23","nodeType":"FunctionDefinition","parameters":{"id":3917,"nodeType":"ParameterList","parameters":[],"src":"2862:2:23"},"returnParameters":{"id":3918,"nodeType":"ParameterList","parameters":[],"src":"2873:0:23"},"scope":3927,"src":"2849:25:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"485cc955","id":3926,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"2891:10:23","nodeType":"FunctionDefinition","parameters":{"id":3924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3921,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3926,"src":"2902:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3920,"name":"address","nodeType":"ElementaryTypeName","src":"2902:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3923,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3926,"src":"2911:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3922,"name":"address","nodeType":"ElementaryTypeName","src":"2911:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2901:18:23"},"returnParameters":{"id":3925,"nodeType":"ParameterList","parameters":[],"src":"2928:0:23"},"scope":3927,"src":"2882:47:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3928,"src":"70:2862:23","usedErrors":[]}],"src":"42:2892:23"},"id":23},"contracts/Swapper/libraries/SafeMath.sol":{"ast":{"absolutePath":"contracts/Swapper/libraries/SafeMath.sol","exportedSymbols":{"SafeMath":[4002]},"id":4003,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3929,"literals":["solidity",">=","0.6",".6"],"nodeType":"PragmaDirective","src":"42:24:24"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":4002,"linearizedBaseContracts":[4002],"name":"SafeMath","nameLocation":"186:8:24","nodeType":"ContractDefinition","nodes":[{"body":{"id":3950,"nodeType":"Block","src":"271:68:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":3943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3939,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3936,"src":"291:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3940,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3931,"src":"295:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3941,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3933,"src":"299:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"295:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"291:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3944,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"290:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3945,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3931,"src":"305:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"290:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"64732d6d6174682d6164642d6f766572666c6f77","id":3947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"308:22:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db","typeString":"literal_string \"ds-math-add-overflow\""},"value":"ds-math-add-overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3903056b84ed2aba2be78662dc6c5c99b160cebe9af9bd9493d0fc28ff16f6db","typeString":"literal_string \"ds-math-add-overflow\""}],"id":3938,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"282:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"282:49:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3949,"nodeType":"ExpressionStatement","src":"282:49:24"}]},"id":3951,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"211:3:24","nodeType":"FunctionDefinition","parameters":{"id":3934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3931,"mutability":"mutable","name":"x","nameLocation":"223:1:24","nodeType":"VariableDeclaration","scope":3951,"src":"215:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3930,"name":"uint256","nodeType":"ElementaryTypeName","src":"215:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3933,"mutability":"mutable","name":"y","nameLocation":"234:1:24","nodeType":"VariableDeclaration","scope":3951,"src":"226:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3932,"name":"uint256","nodeType":"ElementaryTypeName","src":"226:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"214:22:24"},"returnParameters":{"id":3937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3936,"mutability":"mutable","name":"z","nameLocation":"268:1:24","nodeType":"VariableDeclaration","scope":3951,"src":"260:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3935,"name":"uint256","nodeType":"ElementaryTypeName","src":"260:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"259:11:24"},"scope":4002,"src":"202:137:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3972,"nodeType":"Block","src":"416:69:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":3965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3961,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3958,"src":"436:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3962,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3953,"src":"440:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3963,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"444:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"440:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"436:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3966,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"435:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3967,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3953,"src":"450:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"435:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"64732d6d6174682d7375622d756e646572666c6f77","id":3969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"453:23:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590","typeString":"literal_string \"ds-math-sub-underflow\""},"value":"ds-math-sub-underflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_03b20b9f6e6e7905f077509fd420fb44afc685f254bcefe49147296e1ba25590","typeString":"literal_string \"ds-math-sub-underflow\""}],"id":3960,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"427:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"427:50:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3971,"nodeType":"ExpressionStatement","src":"427:50:24"}]},"id":3973,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"356:3:24","nodeType":"FunctionDefinition","parameters":{"id":3956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3953,"mutability":"mutable","name":"x","nameLocation":"368:1:24","nodeType":"VariableDeclaration","scope":3973,"src":"360:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3952,"name":"uint256","nodeType":"ElementaryTypeName","src":"360:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3955,"mutability":"mutable","name":"y","nameLocation":"379:1:24","nodeType":"VariableDeclaration","scope":3973,"src":"371:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3954,"name":"uint256","nodeType":"ElementaryTypeName","src":"371:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"359:22:24"},"returnParameters":{"id":3959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3958,"mutability":"mutable","name":"z","nameLocation":"413:1:24","nodeType":"VariableDeclaration","scope":3973,"src":"405:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3957,"name":"uint256","nodeType":"ElementaryTypeName","src":"405:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"404:11:24"},"scope":4002,"src":"347:138:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4000,"nodeType":"Block","src":"562:82:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3983,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"581:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"586:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"581:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"id":3990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3986,"name":"z","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"592:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3987,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"596:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3988,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"600:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"596:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"592:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3991,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"591:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3992,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"605:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"591:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3994,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"610:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"591:20:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"581:30:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"64732d6d6174682d6d756c2d6f766572666c6f77","id":3997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"613:22:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd","typeString":"literal_string \"ds-math-mul-overflow\""},"value":"ds-math-mul-overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_25a0ef6406c6af6852555433653ce478274cd9f03a5dec44d001868a76b3bfdd","typeString":"literal_string \"ds-math-mul-overflow\""}],"id":3982,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"573:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"573:63:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3999,"nodeType":"ExpressionStatement","src":"573:63:24"}]},"id":4001,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"502:3:24","nodeType":"FunctionDefinition","parameters":{"id":3978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3975,"mutability":"mutable","name":"x","nameLocation":"514:1:24","nodeType":"VariableDeclaration","scope":4001,"src":"506:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3974,"name":"uint256","nodeType":"ElementaryTypeName","src":"506:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3977,"mutability":"mutable","name":"y","nameLocation":"525:1:24","nodeType":"VariableDeclaration","scope":4001,"src":"517:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3976,"name":"uint256","nodeType":"ElementaryTypeName","src":"517:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"505:22:24"},"returnParameters":{"id":3981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3980,"mutability":"mutable","name":"z","nameLocation":"559:1:24","nodeType":"VariableDeclaration","scope":4001,"src":"551:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3979,"name":"uint256","nodeType":"ElementaryTypeName","src":"551:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"550:11:24"},"scope":4002,"src":"493:151:24","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4003,"src":"178:469:24","usedErrors":[]}],"src":"42:607:24"},"id":24},"contracts/Swapper/libraries/UniswapV2Library.sol":{"ast":{"absolutePath":"contracts/Swapper/libraries/UniswapV2Library.sol","exportedSymbols":{"IUniswapV2Pair":[3927],"SafeMath":[4002],"UniswapV2Library":[4488]},"id":4489,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":4004,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"39:24:25"},{"absolutePath":"contracts/Swapper/libraries/SafeMath.sol","file":"./SafeMath.sol","id":4005,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4489,"sourceUnit":4003,"src":"67:24:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/Swapper/interfaces/IUniswapV2Pair.sol","file":"../interfaces/IUniswapV2Pair.sol","id":4006,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4489,"sourceUnit":3928,"src":"93:42:25","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"UniswapV2Library","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":4488,"linearizedBaseContracts":[4488],"name":"UniswapV2Library","nameLocation":"185:16:25","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4009,"libraryName":{"id":4007,"name":"SafeMath","nameLocations":["215:8:25"],"nodeType":"IdentifierPath","referencedDeclaration":4002,"src":"215:8:25"},"nodeType":"UsingForDirective","src":"209:27:25","typeName":{"id":4008,"name":"uint256","nodeType":"ElementaryTypeName","src":"228:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"body":{"id":4052,"nodeType":"Block","src":"477:268:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4021,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"496:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4022,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"506:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"496:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a204944454e544943414c5f414444524553534553","id":4024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"514:39:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_4ddc3ca35a8b7ccaa016ab70252fdf3396ded4f4fd8375f95b1e9d99790fcdca","typeString":"literal_string \"UniswapV2Library: IDENTICAL_ADDRESSES\""},"value":"UniswapV2Library: IDENTICAL_ADDRESSES"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4ddc3ca35a8b7ccaa016ab70252fdf3396ded4f4fd8375f95b1e9d99790fcdca","typeString":"literal_string \"UniswapV2Library: IDENTICAL_ADDRESSES\""}],"id":4020,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"488:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"488:66:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4026,"nodeType":"ExpressionStatement","src":"488:66:25"},{"expression":{"id":4040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":4027,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"566:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4028,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4018,"src":"574:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4029,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"565:16:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4030,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"584:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4031,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"593:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"584:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":4036,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"648:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4037,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"656:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4038,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"647:16:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"id":4039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"584:79:25","trueExpression":{"components":[{"id":4033,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4011,"src":"616:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4034,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4013,"src":"624:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4035,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"615:16:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"src":"565:98:25","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4041,"nodeType":"ExpressionStatement","src":"565:98:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4043,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4016,"src":"682:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"700:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4045,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"692:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4044,"name":"address","nodeType":"ElementaryTypeName","src":"692:7:25","typeDescriptions":{}}},"id":4047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"692:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"682:20:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a205a45524f5f41444452455353","id":4049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"704:32:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_db0dda5a73ac3122e17df097fa2cbce2c5161b45d20c7d6cf363d3b147392c83","typeString":"literal_string \"UniswapV2Library: ZERO_ADDRESS\""},"value":"UniswapV2Library: ZERO_ADDRESS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_db0dda5a73ac3122e17df097fa2cbce2c5161b45d20c7d6cf363d3b147392c83","typeString":"literal_string \"UniswapV2Library: ZERO_ADDRESS\""}],"id":4042,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"674:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"674:63:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4051,"nodeType":"ExpressionStatement","src":"674:63:25"}]},"id":4053,"implemented":true,"kind":"function","modifiers":[],"name":"sortTokens","nameLocation":"354:10:25","nodeType":"FunctionDefinition","parameters":{"id":4014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4011,"mutability":"mutable","name":"tokenA","nameLocation":"383:6:25","nodeType":"VariableDeclaration","scope":4053,"src":"375:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4010,"name":"address","nodeType":"ElementaryTypeName","src":"375:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4013,"mutability":"mutable","name":"tokenB","nameLocation":"408:6:25","nodeType":"VariableDeclaration","scope":4053,"src":"400:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4012,"name":"address","nodeType":"ElementaryTypeName","src":"400:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"364:57:25"},"returnParameters":{"id":4019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4016,"mutability":"mutable","name":"token0","nameLocation":"453:6:25","nodeType":"VariableDeclaration","scope":4053,"src":"445:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4015,"name":"address","nodeType":"ElementaryTypeName","src":"445:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4018,"mutability":"mutable","name":"token1","nameLocation":"469:6:25","nodeType":"VariableDeclaration","scope":4053,"src":"461:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4017,"name":"address","nodeType":"ElementaryTypeName","src":"461:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"444:32:25"},"scope":4488,"src":"345:400:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4102,"nodeType":"Block","src":"1005:534:25","statements":[{"assignments":[4067,4069],"declarations":[{"constant":false,"id":4067,"mutability":"mutable","name":"token0","nameLocation":"1025:6:25","nodeType":"VariableDeclaration","scope":4102,"src":"1017:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4066,"name":"address","nodeType":"ElementaryTypeName","src":"1017:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4069,"mutability":"mutable","name":"token1","nameLocation":"1041:6:25","nodeType":"VariableDeclaration","scope":4102,"src":"1033:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4068,"name":"address","nodeType":"ElementaryTypeName","src":"1033:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4074,"initialValue":{"arguments":[{"id":4071,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"1062:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4072,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4059,"src":"1070:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4070,"name":"sortTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"1051:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$returns$_t_address_$_t_address_$","typeString":"function (address,address) pure returns (address,address)"}},"id":4073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1051:26:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"1016:61:25"},{"expression":{"id":4100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4075,"name":"pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4064,"src":"1088:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"hexValue":"ff","id":4085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"1256:7:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9","typeString":"literal_string hex\"ff\""}},{"id":4086,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4055,"src":"1294:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"arguments":[{"id":4090,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"1359:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4091,"name":"token1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"1367:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4088,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1342:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4089,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1346:12:25","memberName":"encodePacked","nodeType":"MemberAccess","src":"1342:16:25","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:32:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4087,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1332:9:25","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1332:43:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4094,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"1406:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b1a944cf13a9a1c08facb2c9e98623ef3254d2ddb48113885c3e8e97fec8db9","typeString":"literal_string hex\"ff\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4083,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1209:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4084,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1213:12:25","memberName":"encodePacked","nodeType":"MemberAccess","src":"1209:16:25","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1209:254:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4082,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1173:9:25","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1173:313:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4081,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1143:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4080,"name":"uint256","nodeType":"ElementaryTypeName","src":"1143:7:25","typeDescriptions":{}}},"id":4097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1143:362:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4079,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1117:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4078,"name":"uint160","nodeType":"ElementaryTypeName","src":"1117:7:25","typeDescriptions":{}}},"id":4098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1117:403:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1095:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4076,"name":"address","nodeType":"ElementaryTypeName","src":"1095:7:25","typeDescriptions":{}}},"id":4099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1095:436:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1088:443:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4101,"nodeType":"ExpressionStatement","src":"1088:443:25"}]},"id":4103,"implemented":true,"kind":"function","modifiers":[],"name":"pairFor","nameLocation":"846:7:25","nodeType":"FunctionDefinition","parameters":{"id":4062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4055,"mutability":"mutable","name":"factory","nameLocation":"872:7:25","nodeType":"VariableDeclaration","scope":4103,"src":"864:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4054,"name":"address","nodeType":"ElementaryTypeName","src":"864:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4057,"mutability":"mutable","name":"tokenA","nameLocation":"898:6:25","nodeType":"VariableDeclaration","scope":4103,"src":"890:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4056,"name":"address","nodeType":"ElementaryTypeName","src":"890:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4059,"mutability":"mutable","name":"tokenB","nameLocation":"923:6:25","nodeType":"VariableDeclaration","scope":4103,"src":"915:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4058,"name":"address","nodeType":"ElementaryTypeName","src":"915:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4061,"mutability":"mutable","name":"pairCodeHash","nameLocation":"948:12:25","nodeType":"VariableDeclaration","scope":4103,"src":"940:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4060,"name":"bytes32","nodeType":"ElementaryTypeName","src":"940:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"853:114:25"},"returnParameters":{"id":4065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4064,"mutability":"mutable","name":"pair","nameLocation":"999:4:25","nodeType":"VariableDeclaration","scope":4103,"src":"991:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4063,"name":"address","nodeType":"ElementaryTypeName","src":"991:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"990:14:25"},"scope":4488,"src":"837:702:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4155,"nodeType":"Block","src":"1791:340:25","statements":[{"assignments":[4119,null],"declarations":[{"constant":false,"id":4119,"mutability":"mutable","name":"token0","nameLocation":"1811:6:25","nodeType":"VariableDeclaration","scope":4155,"src":"1803:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4118,"name":"address","nodeType":"ElementaryTypeName","src":"1803:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},null],"id":4124,"initialValue":{"arguments":[{"id":4121,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"1834:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4122,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"1842:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4120,"name":"sortTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"1823:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$returns$_t_address_$_t_address_$","typeString":"function (address,address) pure returns (address,address)"}},"id":4123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1823:26:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$","typeString":"tuple(address,address)"}},"nodeType":"VariableDeclarationStatement","src":"1802:47:25"},{"assignments":[4126,4128,null],"declarations":[{"constant":false,"id":4126,"mutability":"mutable","name":"reserve0","nameLocation":"1869:8:25","nodeType":"VariableDeclaration","scope":4155,"src":"1861:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4125,"name":"uint256","nodeType":"ElementaryTypeName","src":"1861:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4128,"mutability":"mutable","name":"reserve1","nameLocation":"1887:8:25","nodeType":"VariableDeclaration","scope":4155,"src":"1879:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4127,"name":"uint256","nodeType":"ElementaryTypeName","src":"1879:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},null],"id":4139,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"arguments":[{"id":4131,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"1938:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4132,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"1947:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4133,"name":"tokenB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4109,"src":"1955:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4134,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"1963:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4130,"name":"pairFor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4103,"src":"1930:7:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_address_$_t_address_$_t_bytes32_$returns$_t_address_$","typeString":"function (address,address,address,bytes32) pure returns (address)"}},"id":4135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1930:46:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4129,"name":"IUniswapV2Pair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3927,"src":"1901:14:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IUniswapV2Pair_$3927_$","typeString":"type(contract IUniswapV2Pair)"}},"id":4136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:86:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IUniswapV2Pair_$3927","typeString":"contract IUniswapV2Pair"}},"id":4137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1988:11:25","memberName":"getReserves","nodeType":"MemberAccess","referencedDeclaration":3869,"src":"1901:98:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint112_$_t_uint112_$_t_uint32_$","typeString":"function () view external returns (uint112,uint112,uint32)"}},"id":4138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:100:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint112_$_t_uint112_$_t_uint32_$","typeString":"tuple(uint112,uint112,uint32)"}},"nodeType":"VariableDeclarationStatement","src":"1860:141:25"},{"expression":{"id":4153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":4140,"name":"reserveA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4114,"src":"2013:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4141,"name":"reserveB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4116,"src":"2023:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4142,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"2012:20:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4143,"name":"tokenA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4107,"src":"2035:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4144,"name":"token0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4119,"src":"2045:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2035:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"components":[{"id":4149,"name":"reserve1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4128,"src":"2104:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4150,"name":"reserve0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4126,"src":"2114:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4151,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2103:20:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"id":4152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2035:88:25","trueExpression":{"components":[{"id":4146,"name":"reserve0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4126,"src":"2068:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4147,"name":"reserve1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4128,"src":"2078:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4148,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2067:20:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"2012:111:25","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4154,"nodeType":"ExpressionStatement","src":"2012:111:25"}]},"id":4156,"implemented":true,"kind":"function","modifiers":[],"name":"getReserves","nameLocation":"1606:11:25","nodeType":"FunctionDefinition","parameters":{"id":4112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4105,"mutability":"mutable","name":"factory","nameLocation":"1636:7:25","nodeType":"VariableDeclaration","scope":4156,"src":"1628:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4104,"name":"address","nodeType":"ElementaryTypeName","src":"1628:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4107,"mutability":"mutable","name":"tokenA","nameLocation":"1662:6:25","nodeType":"VariableDeclaration","scope":4156,"src":"1654:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4106,"name":"address","nodeType":"ElementaryTypeName","src":"1654:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4109,"mutability":"mutable","name":"tokenB","nameLocation":"1687:6:25","nodeType":"VariableDeclaration","scope":4156,"src":"1679:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4108,"name":"address","nodeType":"ElementaryTypeName","src":"1679:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4111,"mutability":"mutable","name":"pairCodeHash","nameLocation":"1712:12:25","nodeType":"VariableDeclaration","scope":4156,"src":"1704:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4110,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1704:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1617:114:25"},"returnParameters":{"id":4117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4114,"mutability":"mutable","name":"reserveA","nameLocation":"1763:8:25","nodeType":"VariableDeclaration","scope":4156,"src":"1755:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4113,"name":"uint256","nodeType":"ElementaryTypeName","src":"1755:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4116,"mutability":"mutable","name":"reserveB","nameLocation":"1781:8:25","nodeType":"VariableDeclaration","scope":4156,"src":"1773:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4115,"name":"uint256","nodeType":"ElementaryTypeName","src":"1773:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1754:36:25"},"scope":4488,"src":"1597:534:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4194,"nodeType":"Block","src":"2386:262:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4168,"name":"amountA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4158,"src":"2405:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2405:11:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a20494e53554646494349454e545f414d4f554e54","id":4171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2418:39:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_b3ea0cd729028efbc737ad3cde1d4d854e6f2c136b354fbaea9389d68bc3a146","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_AMOUNT\""},"value":"UniswapV2Library: INSUFFICIENT_AMOUNT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b3ea0cd729028efbc737ad3cde1d4d854e6f2c136b354fbaea9389d68bc3a146","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_AMOUNT\""}],"id":4167,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2397:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2397:61:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4173,"nodeType":"ExpressionStatement","src":"2397:61:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4175,"name":"reserveA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4160,"src":"2491:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2502:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2491:12:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4178,"name":"reserveB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"2507:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2518:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2507:12:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2491:28:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a20494e53554646494349454e545f4c4951554944495459","id":4182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:42:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_7e8d6b265173dbbd87b3b9e2bf4238bea6caf2b2bbeb63f859a738aec9e761c8","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\""},"value":"UniswapV2Library: INSUFFICIENT_LIQUIDITY"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7e8d6b265173dbbd87b3b9e2bf4238bea6caf2b2bbeb63f859a738aec9e761c8","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\""}],"id":4174,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2469:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2469:118:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4184,"nodeType":"ExpressionStatement","src":"2469:118:25"},{"expression":{"id":4192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4185,"name":"amountB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4165,"src":"2598:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4188,"name":"reserveB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4162,"src":"2620:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4186,"name":"amountA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4158,"src":"2608:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2616:3:25","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":4001,"src":"2608:11:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2608:21:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4190,"name":"reserveA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4160,"src":"2632:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2608:32:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2598:42:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4193,"nodeType":"ExpressionStatement","src":"2598:42:25"}]},"id":4195,"implemented":true,"kind":"function","modifiers":[],"name":"quote","nameLocation":"2253:5:25","nodeType":"FunctionDefinition","parameters":{"id":4163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4158,"mutability":"mutable","name":"amountA","nameLocation":"2277:7:25","nodeType":"VariableDeclaration","scope":4195,"src":"2269:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4157,"name":"uint256","nodeType":"ElementaryTypeName","src":"2269:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4160,"mutability":"mutable","name":"reserveA","nameLocation":"2303:8:25","nodeType":"VariableDeclaration","scope":4195,"src":"2295:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4159,"name":"uint256","nodeType":"ElementaryTypeName","src":"2295:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4162,"mutability":"mutable","name":"reserveB","nameLocation":"2330:8:25","nodeType":"VariableDeclaration","scope":4195,"src":"2322:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4161,"name":"uint256","nodeType":"ElementaryTypeName","src":"2322:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2258:87:25"},"returnParameters":{"id":4166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4165,"mutability":"mutable","name":"amountB","nameLocation":"2377:7:25","nodeType":"VariableDeclaration","scope":4195,"src":"2369:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4164,"name":"uint256","nodeType":"ElementaryTypeName","src":"2369:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2368:17:25"},"scope":4488,"src":"2244:404:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4254,"nodeType":"Block","src":"2925:454:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4207,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"2944:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2955:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2944:12:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54","id":4210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2958:45:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_ec21b006eb37ef20d0f4abcabd34de6854fa68af48294244e0263dc05c1dbbae","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\""},"value":"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ec21b006eb37ef20d0f4abcabd34de6854fa68af48294244e0263dc05c1dbbae","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\""}],"id":4206,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2936:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2936:68:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4212,"nodeType":"ExpressionStatement","src":"2936:68:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4214,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4199,"src":"3037:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3049:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3037:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4217,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"3054:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3067:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3054:14:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3037:31:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a20494e53554646494349454e545f4c4951554944495459","id":4221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3083:42:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_7e8d6b265173dbbd87b3b9e2bf4238bea6caf2b2bbeb63f859a738aec9e761c8","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\""},"value":"UniswapV2Library: INSUFFICIENT_LIQUIDITY"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7e8d6b265173dbbd87b3b9e2bf4238bea6caf2b2bbeb63f859a738aec9e761c8","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\""}],"id":4213,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3015:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3015:121:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4223,"nodeType":"ExpressionStatement","src":"3015:121:25"},{"assignments":[4225],"declarations":[{"constant":false,"id":4225,"mutability":"mutable","name":"amountInWithFee","nameLocation":"3155:15:25","nodeType":"VariableDeclaration","scope":4254,"src":"3147:23:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4224,"name":"uint256","nodeType":"ElementaryTypeName","src":"3147:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4230,"initialValue":{"arguments":[{"hexValue":"393937","id":4228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3186:3:25","typeDescriptions":{"typeIdentifier":"t_rational_997_by_1","typeString":"int_const 997"},"value":"997"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_997_by_1","typeString":"int_const 997"}],"expression":{"id":4226,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"3173:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3182:3:25","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":4001,"src":"3173:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3173:17:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3147:43:25"},{"assignments":[4232],"declarations":[{"constant":false,"id":4232,"mutability":"mutable","name":"numerator","nameLocation":"3209:9:25","nodeType":"VariableDeclaration","scope":4254,"src":"3201:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4231,"name":"uint256","nodeType":"ElementaryTypeName","src":"3201:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4237,"initialValue":{"arguments":[{"id":4235,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"3241:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4233,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4225,"src":"3221:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3237:3:25","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":4001,"src":"3221:19:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3221:31:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3201:51:25"},{"assignments":[4239],"declarations":[{"constant":false,"id":4239,"mutability":"mutable","name":"denominator","nameLocation":"3271:11:25","nodeType":"VariableDeclaration","scope":4254,"src":"3263:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4238,"name":"uint256","nodeType":"ElementaryTypeName","src":"3263:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4247,"initialValue":{"arguments":[{"id":4245,"name":"amountInWithFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4225,"src":"3309:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"hexValue":"31303030","id":4242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3299:4:25","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"}],"expression":{"id":4240,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4199,"src":"3285:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3295:3:25","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":4001,"src":"3285:13:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3285:19:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3305:3:25","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":3951,"src":"3285:23:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3285:40:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3263:62:25"},{"expression":{"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4248,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4204,"src":"3336:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4249,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4232,"src":"3348:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4250,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4239,"src":"3360:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3348:23:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3336:35:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4253,"nodeType":"ExpressionStatement","src":"3336:35:25"}]},"id":4255,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountOut","nameLocation":"2779:12:25","nodeType":"FunctionDefinition","parameters":{"id":4202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4197,"mutability":"mutable","name":"amountIn","nameLocation":"2810:8:25","nodeType":"VariableDeclaration","scope":4255,"src":"2802:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4196,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4199,"mutability":"mutable","name":"reserveIn","nameLocation":"2837:9:25","nodeType":"VariableDeclaration","scope":4255,"src":"2829:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4198,"name":"uint256","nodeType":"ElementaryTypeName","src":"2829:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4201,"mutability":"mutable","name":"reserveOut","nameLocation":"2865:10:25","nodeType":"VariableDeclaration","scope":4255,"src":"2857:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4200,"name":"uint256","nodeType":"ElementaryTypeName","src":"2857:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2791:91:25"},"returnParameters":{"id":4205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4204,"mutability":"mutable","name":"amountOut","nameLocation":"2914:9:25","nodeType":"VariableDeclaration","scope":4255,"src":"2906:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4203,"name":"uint256","nodeType":"ElementaryTypeName","src":"2906:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2905:19:25"},"scope":4488,"src":"2770:609:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4314,"nodeType":"Block","src":"3654:407:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4267,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"3673:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3685:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3673:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e54","id":4270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3688:46:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_35fb781059090c30aacad20e29b2e40e67f217617fc46f86031ed4eb14923a82","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\""},"value":"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_35fb781059090c30aacad20e29b2e40e67f217617fc46f86031ed4eb14923a82","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\""}],"id":4266,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3665:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3665:70:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4272,"nodeType":"ExpressionStatement","src":"3665:70:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4274,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4259,"src":"3768:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3780:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3768:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4277,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"3785:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3798:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3785:14:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3768:31:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a20494e53554646494349454e545f4c4951554944495459","id":4281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3814:42:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_7e8d6b265173dbbd87b3b9e2bf4238bea6caf2b2bbeb63f859a738aec9e761c8","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\""},"value":"UniswapV2Library: INSUFFICIENT_LIQUIDITY"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7e8d6b265173dbbd87b3b9e2bf4238bea6caf2b2bbeb63f859a738aec9e761c8","typeString":"literal_string \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\""}],"id":4273,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3746:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3746:121:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4283,"nodeType":"ExpressionStatement","src":"3746:121:25"},{"assignments":[4285],"declarations":[{"constant":false,"id":4285,"mutability":"mutable","name":"numerator","nameLocation":"3886:9:25","nodeType":"VariableDeclaration","scope":4314,"src":"3878:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4284,"name":"uint256","nodeType":"ElementaryTypeName","src":"3878:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4293,"initialValue":{"arguments":[{"hexValue":"31303030","id":4291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3927:4:25","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"}],"expression":{"arguments":[{"id":4288,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"3912:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4286,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4259,"src":"3898:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3908:3:25","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":4001,"src":"3898:13:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3898:24:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3923:3:25","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":4001,"src":"3898:28:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3898:34:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3878:54:25"},{"assignments":[4295],"declarations":[{"constant":false,"id":4295,"mutability":"mutable","name":"denominator","nameLocation":"3951:11:25","nodeType":"VariableDeclaration","scope":4314,"src":"3943:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4294,"name":"uint256","nodeType":"ElementaryTypeName","src":"3943:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4303,"initialValue":{"arguments":[{"hexValue":"393937","id":4301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3995:3:25","typeDescriptions":{"typeIdentifier":"t_rational_997_by_1","typeString":"int_const 997"},"value":"997"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_997_by_1","typeString":"int_const 997"}],"expression":{"arguments":[{"id":4298,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"3980:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4296,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"3965:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3976:3:25","memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":3973,"src":"3965:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3965:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3991:3:25","memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":4001,"src":"3965:29:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3965:34:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3943:56:25"},{"expression":{"id":4312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4304,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"4010:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"31","id":4310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4051:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4305,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4285,"src":"4022:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4306,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4295,"src":"4034:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4022:23:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4308,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4021:25:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4047:3:25","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":3951,"src":"4021:29:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4021:32:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4010:43:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4313,"nodeType":"ExpressionStatement","src":"4010:43:25"}]},"id":4315,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountIn","nameLocation":"3509:11:25","nodeType":"FunctionDefinition","parameters":{"id":4262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4257,"mutability":"mutable","name":"amountOut","nameLocation":"3539:9:25","nodeType":"VariableDeclaration","scope":4315,"src":"3531:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4256,"name":"uint256","nodeType":"ElementaryTypeName","src":"3531:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4259,"mutability":"mutable","name":"reserveIn","nameLocation":"3567:9:25","nodeType":"VariableDeclaration","scope":4315,"src":"3559:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4258,"name":"uint256","nodeType":"ElementaryTypeName","src":"3559:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4261,"mutability":"mutable","name":"reserveOut","nameLocation":"3595:10:25","nodeType":"VariableDeclaration","scope":4315,"src":"3587:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4260,"name":"uint256","nodeType":"ElementaryTypeName","src":"3587:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3520:92:25"},"returnParameters":{"id":4265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4264,"mutability":"mutable","name":"amountIn","nameLocation":"3644:8:25","nodeType":"VariableDeclaration","scope":4315,"src":"3636:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4263,"name":"uint256","nodeType":"ElementaryTypeName","src":"3636:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3635:18:25"},"scope":4488,"src":"3500:561:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4398,"nodeType":"Block","src":"4338:496:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4331,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4322,"src":"4357:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4362:6:25","memberName":"length","nodeType":"MemberAccess","src":"4357:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"32","id":4333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4372:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4357:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a20494e56414c49445f50415448","id":4335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4375:32:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_75377551ce0fccd63c5f6648306f9f916607f3ae50cffb38430d29ad981b8222","typeString":"literal_string \"UniswapV2Library: INVALID_PATH\""},"value":"UniswapV2Library: INVALID_PATH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_75377551ce0fccd63c5f6648306f9f916607f3ae50cffb38430d29ad981b8222","typeString":"literal_string \"UniswapV2Library: INVALID_PATH\""}],"id":4330,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4349:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4349:59:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4337,"nodeType":"ExpressionStatement","src":"4349:59:25"},{"expression":{"id":4345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4338,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"4419:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":4342,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4322,"src":"4443:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4448:6:25","memberName":"length","nodeType":"MemberAccess","src":"4443:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4341,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4429:13:25","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":4339,"name":"uint256","nodeType":"ElementaryTypeName","src":"4433:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4340,"nodeType":"ArrayTypeName","src":"4433:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":4344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4429:26:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"src":"4419:36:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4346,"nodeType":"ExpressionStatement","src":"4419:36:25"},{"expression":{"id":4351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4347,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"4466:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4349,"indexExpression":{"hexValue":"30","id":4348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4474:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4466:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4350,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4319,"src":"4479:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4466:21:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4352,"nodeType":"ExpressionStatement","src":"4466:21:25"},{"body":{"id":4396,"nodeType":"Block","src":"4540:287:25","statements":[{"assignments":[4366,4368],"declarations":[{"constant":false,"id":4366,"mutability":"mutable","name":"reserveIn","nameLocation":"4564:9:25","nodeType":"VariableDeclaration","scope":4396,"src":"4556:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4365,"name":"uint256","nodeType":"ElementaryTypeName","src":"4556:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4368,"mutability":"mutable","name":"reserveOut","nameLocation":"4583:10:25","nodeType":"VariableDeclaration","scope":4396,"src":"4575:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4367,"name":"uint256","nodeType":"ElementaryTypeName","src":"4575:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4381,"initialValue":{"arguments":[{"id":4370,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"4627:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":4371,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4322,"src":"4653:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4373,"indexExpression":{"id":4372,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"4658:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4653:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":4374,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4322,"src":"4679:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4378,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4375,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"4684:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4688:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4684:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4679:11:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4379,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4324,"src":"4709:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4369,"name":"getReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"4597:11:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_bytes32_$returns$_t_uint256_$_t_uint256_$","typeString":"function (address,address,address,bytes32) view returns (uint256,uint256)"}},"id":4380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4597:139:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4555:181:25"},{"expression":{"id":4394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4382,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"4751:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4386,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4383,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"4759:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4763:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4759:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4751:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":4388,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"4781:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4390,"indexExpression":{"id":4389,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"4789:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4781:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4391,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"4793:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4392,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"4804:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4387,"name":"getAmountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4255,"src":"4768:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4768:47:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4751:64:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4395,"nodeType":"ExpressionStatement","src":"4751:64:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4356,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"4514:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4357,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4322,"src":"4518:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4523:6:25","memberName":"length","nodeType":"MemberAccess","src":"4518:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4532:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4518:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4514:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4397,"initializationExpression":{"assignments":[4354],"declarations":[{"constant":false,"id":4354,"mutability":"mutable","name":"i","nameLocation":"4511:1:25","nodeType":"VariableDeclaration","scope":4397,"src":"4503:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4353,"name":"uint256","nodeType":"ElementaryTypeName","src":"4503:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4355,"nodeType":"VariableDeclarationStatement","src":"4503:9:25"},"loopExpression":{"expression":{"id":4363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4535:3:25","subExpression":{"id":4362,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"4535:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4364,"nodeType":"ExpressionStatement","src":"4535:3:25"},"nodeType":"ForStatement","src":"4498:329:25"}]},"id":4399,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountsOut","nameLocation":"4152:13:25","nodeType":"FunctionDefinition","parameters":{"id":4325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4317,"mutability":"mutable","name":"factory","nameLocation":"4184:7:25","nodeType":"VariableDeclaration","scope":4399,"src":"4176:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4316,"name":"address","nodeType":"ElementaryTypeName","src":"4176:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4319,"mutability":"mutable","name":"amountIn","nameLocation":"4210:8:25","nodeType":"VariableDeclaration","scope":4399,"src":"4202:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4318,"name":"uint256","nodeType":"ElementaryTypeName","src":"4202:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4322,"mutability":"mutable","name":"path","nameLocation":"4246:4:25","nodeType":"VariableDeclaration","scope":4399,"src":"4229:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4320,"name":"address","nodeType":"ElementaryTypeName","src":"4229:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4321,"nodeType":"ArrayTypeName","src":"4229:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4324,"mutability":"mutable","name":"pairCodeHash","nameLocation":"4269:12:25","nodeType":"VariableDeclaration","scope":4399,"src":"4261:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4323,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4261:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4165:123:25"},"returnParameters":{"id":4329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4328,"mutability":"mutable","name":"amounts","nameLocation":"4329:7:25","nodeType":"VariableDeclaration","scope":4399,"src":"4312:24:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4326,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4327,"nodeType":"ArrayTypeName","src":"4312:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4311:26:25"},"scope":4488,"src":"4143:691:25","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4486,"nodeType":"Block","src":"5110:517:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4415,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4406,"src":"5129:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5134:6:25","memberName":"length","nodeType":"MemberAccess","src":"5129:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"32","id":4417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5144:1:25","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5129:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e697377617056324c6962726172793a20494e56414c49445f50415448","id":4419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5147:32:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_75377551ce0fccd63c5f6648306f9f916607f3ae50cffb38430d29ad981b8222","typeString":"literal_string \"UniswapV2Library: INVALID_PATH\""},"value":"UniswapV2Library: INVALID_PATH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_75377551ce0fccd63c5f6648306f9f916607f3ae50cffb38430d29ad981b8222","typeString":"literal_string \"UniswapV2Library: INVALID_PATH\""}],"id":4414,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5121:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5121:59:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4421,"nodeType":"ExpressionStatement","src":"5121:59:25"},{"expression":{"id":4429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4422,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4412,"src":"5191:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":4426,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4406,"src":"5215:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5220:6:25","memberName":"length","nodeType":"MemberAccess","src":"5215:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4425,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5201:13:25","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":4423,"name":"uint256","nodeType":"ElementaryTypeName","src":"5205:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4424,"nodeType":"ArrayTypeName","src":"5205:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":4428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5201:26:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"src":"5191:36:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4430,"nodeType":"ExpressionStatement","src":"5191:36:25"},{"expression":{"id":4438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4431,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4412,"src":"5238:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4436,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4432,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4412,"src":"5246:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5254:6:25","memberName":"length","nodeType":"MemberAccess","src":"5246:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5263:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5246:18:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5238:27:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4437,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4403,"src":"5268:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5238:39:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4439,"nodeType":"ExpressionStatement","src":"5238:39:25"},{"body":{"id":4484,"nodeType":"Block","src":"5334:286:25","statements":[{"assignments":[4454,4456],"declarations":[{"constant":false,"id":4454,"mutability":"mutable","name":"reserveIn","nameLocation":"5358:9:25","nodeType":"VariableDeclaration","scope":4484,"src":"5350:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4453,"name":"uint256","nodeType":"ElementaryTypeName","src":"5350:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4456,"mutability":"mutable","name":"reserveOut","nameLocation":"5377:10:25","nodeType":"VariableDeclaration","scope":4484,"src":"5369:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4455,"name":"uint256","nodeType":"ElementaryTypeName","src":"5369:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4469,"initialValue":{"arguments":[{"id":4458,"name":"factory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4401,"src":"5421:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":4459,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4406,"src":"5447:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4463,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4460,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4441,"src":"5452:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5456:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5452:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5447:11:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":4464,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4406,"src":"5477:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4466,"indexExpression":{"id":4465,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4441,"src":"5482:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5477:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4467,"name":"pairCodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"5503:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4457,"name":"getReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4156,"src":"5391:11:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_bytes32_$returns$_t_uint256_$_t_uint256_$","typeString":"function (address,address,address,bytes32) view returns (uint256,uint256)"}},"id":4468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5391:139:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"5349:181:25"},{"expression":{"id":4482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4470,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4412,"src":"5545:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4474,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4471,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4441,"src":"5553:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5557:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5553:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5545:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":4476,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4412,"src":"5574:7:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4478,"indexExpression":{"id":4477,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4441,"src":"5582:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5574:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4479,"name":"reserveIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4454,"src":"5586:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4480,"name":"reserveOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4456,"src":"5597:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4475,"name":"getAmountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4315,"src":"5562:11:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5562:46:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5545:63:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4483,"nodeType":"ExpressionStatement","src":"5545:63:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4447,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4441,"src":"5322:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5326:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5322:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4485,"initializationExpression":{"assignments":[4441],"declarations":[{"constant":false,"id":4441,"mutability":"mutable","name":"i","nameLocation":"5301:1:25","nodeType":"VariableDeclaration","scope":4485,"src":"5293:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4440,"name":"uint256","nodeType":"ElementaryTypeName","src":"5293:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4446,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4442,"name":"path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4406,"src":"5305:4:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":4443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5310:6:25","memberName":"length","nodeType":"MemberAccess","src":"5305:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5319:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5305:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5293:27:25"},"loopExpression":{"expression":{"id":4451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"5329:3:25","subExpression":{"id":4450,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4441,"src":"5329:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4452,"nodeType":"ExpressionStatement","src":"5329:3:25"},"nodeType":"ForStatement","src":"5288:332:25"}]},"id":4487,"implemented":true,"kind":"function","modifiers":[],"name":"getAmountsIn","nameLocation":"4924:12:25","nodeType":"FunctionDefinition","parameters":{"id":4409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4401,"mutability":"mutable","name":"factory","nameLocation":"4955:7:25","nodeType":"VariableDeclaration","scope":4487,"src":"4947:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4400,"name":"address","nodeType":"ElementaryTypeName","src":"4947:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4403,"mutability":"mutable","name":"amountOut","nameLocation":"4981:9:25","nodeType":"VariableDeclaration","scope":4487,"src":"4973:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4402,"name":"uint256","nodeType":"ElementaryTypeName","src":"4973:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4406,"mutability":"mutable","name":"path","nameLocation":"5018:4:25","nodeType":"VariableDeclaration","scope":4487,"src":"5001:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4404,"name":"address","nodeType":"ElementaryTypeName","src":"5001:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4405,"nodeType":"ArrayTypeName","src":"5001:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4408,"mutability":"mutable","name":"pairCodeHash","nameLocation":"5041:12:25","nodeType":"VariableDeclaration","scope":4487,"src":"5033:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4407,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5033:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4936:124:25"},"returnParameters":{"id":4413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4412,"mutability":"mutable","name":"amounts","nameLocation":"5101:7:25","nodeType":"VariableDeclaration","scope":4487,"src":"5084:24:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4410,"name":"uint256","nodeType":"ElementaryTypeName","src":"5084:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4411,"nodeType":"ArrayTypeName","src":"5084:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5083:26:25"},"scope":4488,"src":"4915:712:25","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4489,"src":"177:5453:25","usedErrors":[]}],"src":"39:5593:25"},"id":25},"contracts/TapiocaDeployer/TapiocaDeployer.sol":{"ast":{"absolutePath":"contracts/TapiocaDeployer/TapiocaDeployer.sol","exportedSymbols":{"TapiocaDeployer":[4569]},"id":4570,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4490,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"40:24:26"},{"abstract":false,"baseContracts":[],"canonicalName":"TapiocaDeployer","contractDependencies":[],"contractKind":"contract","documentation":{"id":4491,"nodeType":"StructuredDocumentation","src":"146:108:26","text":"@author https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Create2.sol"},"fullyImplemented":true,"id":4569,"linearizedBaseContracts":[4569],"name":"TapiocaDeployer","nameLocation":"263:15:26","nodeType":"ContractDefinition","nodes":[{"body":{"id":4533,"nodeType":"Block","src":"1008:428:26","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4506,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1049:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_TapiocaDeployer_$4569","typeString":"contract TapiocaDeployer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TapiocaDeployer_$4569","typeString":"contract TapiocaDeployer"}],"id":4505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1041:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4504,"name":"address","nodeType":"ElementaryTypeName","src":"1041:7:26","typeDescriptions":{}}},"id":4507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1041:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1055:7:26","memberName":"balance","nodeType":"MemberAccess","src":"1041:21:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4509,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"1066:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1041:31:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"437265617465323a20696e73756666696369656e742062616c616e6365","id":4511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1087:31:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_f94f9c62541b73155a9def26a7988ac5579c2c6b698df8f608ced5572b7d72ca","typeString":"literal_string \"Create2: insufficient balance\""},"value":"Create2: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f94f9c62541b73155a9def26a7988ac5579c2c6b698df8f608ced5572b7d72ca","typeString":"literal_string \"Create2: insufficient balance\""}],"id":4503,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1019:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1019:110:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4513,"nodeType":"ExpressionStatement","src":"1019:110:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4515,"name":"bytecode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"1148:8:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1157:6:26","memberName":"length","nodeType":"MemberAccess","src":"1148:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1167:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1148:20:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"437265617465323a2062797465636f6465206c656e677468206973207a65726f","id":4519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1170:34:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_124767115c09b0dd37c31c42ddb030d84459c933a30879cc32c4c922ae5928f0","typeString":"literal_string \"Create2: bytecode length is zero\""},"value":"Create2: bytecode length is zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_124767115c09b0dd37c31c42ddb030d84459c933a30879cc32c4c922ae5928f0","typeString":"literal_string \"Create2: bytecode length is zero\""}],"id":4514,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1140:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1140:65:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4521,"nodeType":"ExpressionStatement","src":"1140:65:26"},{"AST":{"nodeType":"YulBlock","src":"1269:93:26","statements":[{"nodeType":"YulAssignment","src":"1284:67:26","value":{"arguments":[{"name":"amount","nodeType":"YulIdentifier","src":"1300:6:26"},{"arguments":[{"name":"bytecode","nodeType":"YulIdentifier","src":"1312:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"1322:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1308:3:26"},"nodeType":"YulFunctionCall","src":"1308:19:26"},{"arguments":[{"name":"bytecode","nodeType":"YulIdentifier","src":"1335:8:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1329:5:26"},"nodeType":"YulFunctionCall","src":"1329:15:26"},{"name":"salt","nodeType":"YulIdentifier","src":"1346:4:26"}],"functionName":{"name":"create2","nodeType":"YulIdentifier","src":"1292:7:26"},"nodeType":"YulFunctionCall","src":"1292:59:26"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"1284:4:26"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4501,"isOffset":false,"isSlot":false,"src":"1284:4:26","valueSize":1},{"declaration":4494,"isOffset":false,"isSlot":false,"src":"1300:6:26","valueSize":1},{"declaration":4498,"isOffset":false,"isSlot":false,"src":"1312:8:26","valueSize":1},{"declaration":4498,"isOffset":false,"isSlot":false,"src":"1335:8:26","valueSize":1},{"declaration":4496,"isOffset":false,"isSlot":false,"src":"1346:4:26","valueSize":1}],"id":4522,"nodeType":"InlineAssembly","src":"1260:102:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4524,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4501,"src":"1380:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1396:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1388:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4525,"name":"address","nodeType":"ElementaryTypeName","src":"1388:7:26","typeDescriptions":{}}},"id":4528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1388:10:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1380:18:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"437265617465323a204661696c6564206f6e206465706c6f79","id":4530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1400:27:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_87142438d464a3cd804331cca8480b31569380ef25d1f39b80404975699f0676","typeString":"literal_string \"Create2: Failed on deploy\""},"value":"Create2: Failed on deploy"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_87142438d464a3cd804331cca8480b31569380ef25d1f39b80404975699f0676","typeString":"literal_string \"Create2: Failed on deploy\""}],"id":4523,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1372:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1372:56:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4532,"nodeType":"ExpressionStatement","src":"1372:56:26"}]},"documentation":{"id":4492,"nodeType":"StructuredDocumentation","src":"286:573:26","text":" @dev Deploys a contract using `CREATE2`. The address where the contract\n will be deployed can be known in advance via {computeAddress}.\n The bytecode for a contract can be obtained from Solidity with\n `type(contractName).creationCode`.\n Requirements:\n - `bytecode` must not be empty.\n - `salt` must have not been used for `bytecode` already.\n - the factory must have a balance of at least `amount`.\n - if `amount` is non-zero, `bytecode` must have a `payable` constructor."},"functionSelector":"66cfa057","id":4534,"implemented":true,"kind":"function","modifiers":[],"name":"deploy","nameLocation":"874:6:26","nodeType":"FunctionDefinition","parameters":{"id":4499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4494,"mutability":"mutable","name":"amount","nameLocation":"899:6:26","nodeType":"VariableDeclaration","scope":4534,"src":"891:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4493,"name":"uint256","nodeType":"ElementaryTypeName","src":"891:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4496,"mutability":"mutable","name":"salt","nameLocation":"924:4:26","nodeType":"VariableDeclaration","scope":4534,"src":"916:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4495,"name":"bytes32","nodeType":"ElementaryTypeName","src":"916:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4498,"mutability":"mutable","name":"bytecode","nameLocation":"952:8:26","nodeType":"VariableDeclaration","scope":4534,"src":"939:21:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4497,"name":"bytes","nodeType":"ElementaryTypeName","src":"939:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"880:87:26"},"returnParameters":{"id":4502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4501,"mutability":"mutable","name":"addr","nameLocation":"1002:4:26","nodeType":"VariableDeclaration","scope":4534,"src":"994:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4500,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:14:26"},"scope":4569,"src":"865:571:26","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":4553,"nodeType":"Block","src":"1763:75:26","statements":[{"expression":{"arguments":[{"id":4545,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4537,"src":"1796:4:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4546,"name":"bytecodeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4539,"src":"1802:12:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":4549,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1824:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_TapiocaDeployer_$4569","typeString":"contract TapiocaDeployer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TapiocaDeployer_$4569","typeString":"contract TapiocaDeployer"}],"id":4548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1816:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4547,"name":"address","nodeType":"ElementaryTypeName","src":"1816:7:26","typeDescriptions":{}}},"id":4550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1816:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4544,"name":"computeAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4568,"src":"1781:14:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_address_$","typeString":"function (bytes32,bytes32,address) pure returns (address)"}},"id":4551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1781:49:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4543,"id":4552,"nodeType":"Return","src":"1774:56:26"}]},"documentation":{"id":4535,"nodeType":"StructuredDocumentation","src":"1444:196:26","text":" @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n `bytecodeHash` or `salt` will result in a new destination address."},"functionSelector":"481286e6","id":4554,"implemented":true,"kind":"function","modifiers":[],"name":"computeAddress","nameLocation":"1655:14:26","nodeType":"FunctionDefinition","parameters":{"id":4540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4537,"mutability":"mutable","name":"salt","nameLocation":"1688:4:26","nodeType":"VariableDeclaration","scope":4554,"src":"1680:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4536,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1680:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4539,"mutability":"mutable","name":"bytecodeHash","nameLocation":"1711:12:26","nodeType":"VariableDeclaration","scope":4554,"src":"1703:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4538,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1703:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1669:61:26"},"returnParameters":{"id":4543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4542,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4554,"src":"1754:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4541,"name":"address","nodeType":"ElementaryTypeName","src":"1754:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1753:9:26"},"scope":4569,"src":"1646:192:26","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4567,"nodeType":"Block","src":"2234:1679:26","statements":[{"AST":{"nodeType":"YulBlock","src":"2298:1608:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2313:22:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2330:4:26","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2324:5:26"},"nodeType":"YulFunctionCall","src":"2324:11:26"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"2317:3:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3549:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"3554:4:26","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3545:3:26"},"nodeType":"YulFunctionCall","src":"3545:14:26"},{"name":"bytecodeHash","nodeType":"YulIdentifier","src":"3561:12:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3538:6:26"},"nodeType":"YulFunctionCall","src":"3538:36:26"},"nodeType":"YulExpressionStatement","src":"3538:36:26"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3599:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"3604:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3595:3:26"},"nodeType":"YulFunctionCall","src":"3595:14:26"},{"name":"salt","nodeType":"YulIdentifier","src":"3611:4:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3588:6:26"},"nodeType":"YulFunctionCall","src":"3588:28:26"},"nodeType":"YulExpressionStatement","src":"3588:28:26"},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3637:3:26"},{"name":"deployer","nodeType":"YulIdentifier","src":"3642:8:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3630:6:26"},"nodeType":"YulFunctionCall","src":"3630:21:26"},"nodeType":"YulExpressionStatement","src":"3630:21:26"},{"nodeType":"YulVariableDeclaration","src":"3714:27:26","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3731:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"3736:4:26","type":"","value":"0x0b"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3727:3:26"},"nodeType":"YulFunctionCall","src":"3727:14:26"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"3718:5:26","type":""}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3841:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"3848:4:26","type":"","value":"0xff"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"3833:7:26"},"nodeType":"YulFunctionCall","src":"3833:20:26"},"nodeType":"YulExpressionStatement","src":"3833:20:26"},{"nodeType":"YulAssignment","src":"3867:28:26","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"3885:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"3892:2:26","type":"","value":"85"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3875:9:26"},"nodeType":"YulFunctionCall","src":"3875:20:26"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"3867:4:26"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":4564,"isOffset":false,"isSlot":false,"src":"3867:4:26","valueSize":1},{"declaration":4559,"isOffset":false,"isSlot":false,"src":"3561:12:26","valueSize":1},{"declaration":4561,"isOffset":false,"isSlot":false,"src":"3642:8:26","valueSize":1},{"declaration":4557,"isOffset":false,"isSlot":false,"src":"3611:4:26","valueSize":1}],"id":4566,"nodeType":"InlineAssembly","src":"2289:1617:26"}]},"documentation":{"id":4555,"nodeType":"StructuredDocumentation","src":"1846:235:26","text":" @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}."},"functionSelector":"78065306","id":4568,"implemented":true,"kind":"function","modifiers":[],"name":"computeAddress","nameLocation":"2096:14:26","nodeType":"FunctionDefinition","parameters":{"id":4562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4557,"mutability":"mutable","name":"salt","nameLocation":"2129:4:26","nodeType":"VariableDeclaration","scope":4568,"src":"2121:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4556,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2121:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4559,"mutability":"mutable","name":"bytecodeHash","nameLocation":"2152:12:26","nodeType":"VariableDeclaration","scope":4568,"src":"2144:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4558,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2144:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4561,"mutability":"mutable","name":"deployer","nameLocation":"2183:8:26","nodeType":"VariableDeclaration","scope":4568,"src":"2175:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4560,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2110:88:26"},"returnParameters":{"id":4565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4564,"mutability":"mutable","name":"addr","nameLocation":"2228:4:26","nodeType":"VariableDeclaration","scope":4568,"src":"2220:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4563,"name":"address","nodeType":"ElementaryTypeName","src":"2220:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2219:14:26"},"scope":4569,"src":"2087:1826:26","stateMutability":"pure","virtual":false,"visibility":"public"}],"scope":4570,"src":"254:3662:26","usedErrors":[]}],"src":"40:3878:26"},"id":26},"contracts/interfaces/ISwapper.sol":{"ast":{"absolutePath":"contracts/interfaces/ISwapper.sol","exportedSymbols":{"ISwapper":[4616]},"id":4617,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4571,"literals":["solidity","^","0.8",".18"],"nodeType":"PragmaDirective","src":"40:24:27"},{"abstract":false,"baseContracts":[],"canonicalName":"ISwapper","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4616,"linearizedBaseContracts":[4616],"name":"ISwapper","nameLocation":"78:8:27","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4572,"nodeType":"StructuredDocumentation","src":"94:381:27","text":"@notice returns the possible output amount for input share\n @param tokenInId YieldBox asset id\n @param shareIn Shares to get the amount for\n @param dexData Custom DEX data for query execution\n @dev dexData examples:\n     - for UniV2, it should contain address[] swapPath\n     - for Curve, it should contain uint256[] tokenIndexes"},"functionSelector":"532bb192","id":4583,"implemented":false,"kind":"function","modifiers":[],"name":"getOutputAmount","nameLocation":"490:15:27","nodeType":"FunctionDefinition","parameters":{"id":4579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4574,"mutability":"mutable","name":"tokenInId","nameLocation":"524:9:27","nodeType":"VariableDeclaration","scope":4583,"src":"516:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4573,"name":"uint256","nodeType":"ElementaryTypeName","src":"516:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4576,"mutability":"mutable","name":"shareIn","nameLocation":"552:7:27","nodeType":"VariableDeclaration","scope":4583,"src":"544:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4575,"name":"uint256","nodeType":"ElementaryTypeName","src":"544:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4578,"mutability":"mutable","name":"dexData","nameLocation":"585:7:27","nodeType":"VariableDeclaration","scope":4583,"src":"570:22:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4577,"name":"bytes","nodeType":"ElementaryTypeName","src":"570:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"505:94:27"},"returnParameters":{"id":4582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4581,"mutability":"mutable","name":"amountOut","nameLocation":"631:9:27","nodeType":"VariableDeclaration","scope":4583,"src":"623:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4580,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"622:19:27"},"scope":4616,"src":"481:161:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4584,"nodeType":"StructuredDocumentation","src":"650:330:27","text":"@notice returns necessary input amount for a fixed output amount\n @param tokenOutId YieldBox asset id\n @param shareOut Shares out to compute the amount for\n @param dexData Custom DEX data for query execution\n @dev dexData examples:\n     - for UniV2, it should contain address[] swapPath"},"functionSelector":"c6fe9549","id":4595,"implemented":false,"kind":"function","modifiers":[],"name":"getInputAmount","nameLocation":"995:14:27","nodeType":"FunctionDefinition","parameters":{"id":4591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4586,"mutability":"mutable","name":"tokenOutId","nameLocation":"1028:10:27","nodeType":"VariableDeclaration","scope":4595,"src":"1020:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4585,"name":"uint256","nodeType":"ElementaryTypeName","src":"1020:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4588,"mutability":"mutable","name":"shareOut","nameLocation":"1057:8:27","nodeType":"VariableDeclaration","scope":4595,"src":"1049:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4587,"name":"uint256","nodeType":"ElementaryTypeName","src":"1049:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4590,"mutability":"mutable","name":"dexData","nameLocation":"1091:7:27","nodeType":"VariableDeclaration","scope":4595,"src":"1076:22:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4589,"name":"bytes","nodeType":"ElementaryTypeName","src":"1076:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1009:96:27"},"returnParameters":{"id":4594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4593,"mutability":"mutable","name":"amountIn","nameLocation":"1137:8:27","nodeType":"VariableDeclaration","scope":4595,"src":"1129:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4592,"name":"uint256","nodeType":"ElementaryTypeName","src":"1129:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1128:18:27"},"scope":4616,"src":"986:161:27","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4596,"nodeType":"StructuredDocumentation","src":"1155:537:27","text":"@notice swaps token in with token out\n @dev returns both amount and shares\n @param tokenInId YieldBox asset id\n @param tokenOutId YieldBox asset id\n @param shareIn Shares to be swapped\n @param to Receiver address\n @param amountOutMin Minimum amount to be received\n @param dexData Custom DEX data for query execution\n @dev dexData examples:\n     - for UniV2, it should contain address[] swapPath\n     - for Curve, it should contain uint256[] tokenIndexes"},"functionSelector":"55a68e10","id":4615,"implemented":false,"kind":"function","modifiers":[],"name":"swap","nameLocation":"1707:4:27","nodeType":"FunctionDefinition","parameters":{"id":4609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4598,"mutability":"mutable","name":"tokenInId","nameLocation":"1730:9:27","nodeType":"VariableDeclaration","scope":4615,"src":"1722:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4597,"name":"uint256","nodeType":"ElementaryTypeName","src":"1722:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4600,"mutability":"mutable","name":"tokenOutId","nameLocation":"1758:10:27","nodeType":"VariableDeclaration","scope":4615,"src":"1750:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4599,"name":"uint256","nodeType":"ElementaryTypeName","src":"1750:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4602,"mutability":"mutable","name":"shareIn","nameLocation":"1787:7:27","nodeType":"VariableDeclaration","scope":4615,"src":"1779:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4601,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4604,"mutability":"mutable","name":"to","nameLocation":"1813:2:27","nodeType":"VariableDeclaration","scope":4615,"src":"1805:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4603,"name":"address","nodeType":"ElementaryTypeName","src":"1805:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4606,"mutability":"mutable","name":"amountOutMin","nameLocation":"1834:12:27","nodeType":"VariableDeclaration","scope":4615,"src":"1826:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4605,"name":"uint256","nodeType":"ElementaryTypeName","src":"1826:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4608,"mutability":"mutable","name":"dexData","nameLocation":"1872:7:27","nodeType":"VariableDeclaration","scope":4615,"src":"1857:22:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4607,"name":"bytes","nodeType":"ElementaryTypeName","src":"1857:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1711:175:27"},"returnParameters":{"id":4614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4611,"mutability":"mutable","name":"amountOut","nameLocation":"1913:9:27","nodeType":"VariableDeclaration","scope":4615,"src":"1905:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4610,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4613,"mutability":"mutable","name":"shareOut","nameLocation":"1932:8:27","nodeType":"VariableDeclaration","scope":4615,"src":"1924:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4612,"name":"uint256","nodeType":"ElementaryTypeName","src":"1924:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:37:27"},"scope":4616,"src":"1698:244:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4617,"src":"68:1877:27","usedErrors":[]}],"src":"40:1907:27"},"id":27},"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol":{"ast":{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol","exportedSymbols":{"Asset":[4632],"AssetRegister":[4927],"BoringAddress":[815],"ERC1155":[5557],"IERC1155":[428],"IERC1155TokenReceiver":[463],"IERC165":[473],"IStrategy":[8364],"IYieldBox":[8538],"NO_STRATEGY":[8373],"TokenType":[8288]},"id":4928,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4618,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:28"},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IStrategy.sol","file":"./interfaces/IStrategy.sol","id":4619,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4928,"sourceUnit":8374,"src":"56:36:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol","file":"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol","id":4620,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4928,"sourceUnit":816,"src":"93:77:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol","file":"./ERC1155.sol","id":4621,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4928,"sourceUnit":5558,"src":"171:23:28","symbolAliases":[],"unitAlias":""},{"canonicalName":"Asset","id":4632,"members":[{"constant":false,"id":4624,"mutability":"mutable","name":"tokenType","nameLocation":"261:9:28","nodeType":"VariableDeclaration","scope":4632,"src":"251:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"typeName":{"id":4623,"nodeType":"UserDefinedTypeName","pathNode":{"id":4622,"name":"TokenType","nameLocations":["251:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":8288,"src":"251:9:28"},"referencedDeclaration":8288,"src":"251:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"visibility":"internal"},{"constant":false,"id":4626,"mutability":"mutable","name":"contractAddress","nameLocation":"284:15:28","nodeType":"VariableDeclaration","scope":4632,"src":"276:23:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4625,"name":"address","nodeType":"ElementaryTypeName","src":"276:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4629,"mutability":"mutable","name":"strategy","nameLocation":"315:8:28","nodeType":"VariableDeclaration","scope":4632,"src":"305:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},"typeName":{"id":4628,"nodeType":"UserDefinedTypeName","pathNode":{"id":4627,"name":"IStrategy","nameLocations":["305:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":8364,"src":"305:9:28"},"referencedDeclaration":8364,"src":"305:9:28","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"visibility":"internal"},{"constant":false,"id":4631,"mutability":"mutable","name":"tokenId","nameLocation":"337:7:28","nodeType":"VariableDeclaration","scope":4632,"src":"329:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4630,"name":"uint256","nodeType":"ElementaryTypeName","src":"329:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Asset","nameLocation":"239:5:28","nodeType":"StructDefinition","scope":4928,"src":"232:115:28","visibility":"public"},{"abstract":false,"baseContracts":[{"baseName":{"id":4633,"name":"ERC1155","nameLocations":["375:7:28"],"nodeType":"IdentifierPath","referencedDeclaration":5557,"src":"375:7:28"},"id":4634,"nodeType":"InheritanceSpecifier","src":"375:7:28"}],"canonicalName":"AssetRegister","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4927,"linearizedBaseContracts":[4927,5557,428,473],"name":"AssetRegister","nameLocation":"358:13:28","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4637,"libraryName":{"id":4635,"name":"BoringAddress","nameLocations":["395:13:28"],"nodeType":"IdentifierPath","referencedDeclaration":815,"src":"395:13:28"},"nodeType":"UsingForDirective","src":"389:32:28","typeName":{"id":4636,"name":"address","nodeType":"ElementaryTypeName","src":"413:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"constant":false,"functionSelector":"a75fcb1e","id":4645,"mutability":"mutable","name":"isApprovedForAsset","nameLocation":"499:18:28","nodeType":"VariableDeclaration","scope":4927,"src":"427:90:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$_$","typeString":"mapping(address => mapping(address => mapping(uint256 => bool)))"},"typeName":{"id":4644,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4638,"name":"address","nodeType":"ElementaryTypeName","src":"435:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"427:64:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$_$","typeString":"mapping(address => mapping(address => mapping(uint256 => bool)))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4643,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4639,"name":"address","nodeType":"ElementaryTypeName","src":"454:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"446:44:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$","typeString":"mapping(address => mapping(uint256 => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4642,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4640,"name":"uint256","nodeType":"ElementaryTypeName","src":"473:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"465:24:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4641,"name":"bool","nodeType":"ElementaryTypeName","src":"484:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}}},"visibility":"public"},{"anonymous":false,"eventSelector":"30605d4cd099421ed12ca1ba642a1ea2659f679b5cdd0ccd032586640eeaff43","id":4659,"name":"AssetRegistered","nameLocation":"530:15:28","nodeType":"EventDefinition","parameters":{"id":4658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4648,"indexed":true,"mutability":"mutable","name":"tokenType","nameLocation":"573:9:28","nodeType":"VariableDeclaration","scope":4659,"src":"555:27:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"typeName":{"id":4647,"nodeType":"UserDefinedTypeName","pathNode":{"id":4646,"name":"TokenType","nameLocations":["555:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":8288,"src":"555:9:28"},"referencedDeclaration":8288,"src":"555:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"visibility":"internal"},{"constant":false,"id":4650,"indexed":true,"mutability":"mutable","name":"contractAddress","nameLocation":"608:15:28","nodeType":"VariableDeclaration","scope":4659,"src":"592:31:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4649,"name":"address","nodeType":"ElementaryTypeName","src":"592:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4653,"indexed":false,"mutability":"mutable","name":"strategy","nameLocation":"643:8:28","nodeType":"VariableDeclaration","scope":4659,"src":"633:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},"typeName":{"id":4652,"nodeType":"UserDefinedTypeName","pathNode":{"id":4651,"name":"IStrategy","nameLocations":["633:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":8364,"src":"633:9:28"},"referencedDeclaration":8364,"src":"633:9:28","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"visibility":"internal"},{"constant":false,"id":4655,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"677:7:28","nodeType":"VariableDeclaration","scope":4659,"src":"661:23:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4654,"name":"uint256","nodeType":"ElementaryTypeName","src":"661:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4657,"indexed":false,"mutability":"mutable","name":"assetId","nameLocation":"702:7:28","nodeType":"VariableDeclaration","scope":4659,"src":"694:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4656,"name":"uint256","nodeType":"ElementaryTypeName","src":"694:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"545:170:28"},"src":"524:192:28"},{"anonymous":false,"eventSelector":"6aceb1b079beeabdd8c2f30cd221ca27ec52e9d0aef6bb229cc175cf15dd778b","id":4669,"name":"ApprovalForAsset","nameLocation":"727:16:28","nodeType":"EventDefinition","parameters":{"id":4668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4661,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"760:6:28","nodeType":"VariableDeclaration","scope":4669,"src":"744:22:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4660,"name":"address","nodeType":"ElementaryTypeName","src":"744:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4663,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"784:8:28","nodeType":"VariableDeclaration","scope":4669,"src":"768:24:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4662,"name":"address","nodeType":"ElementaryTypeName","src":"768:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4665,"indexed":false,"mutability":"mutable","name":"assetId","nameLocation":"802:7:28","nodeType":"VariableDeclaration","scope":4669,"src":"794:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4664,"name":"uint256","nodeType":"ElementaryTypeName","src":"794:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4667,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"816:8:28","nodeType":"VariableDeclaration","scope":4669,"src":"811:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4666,"name":"bool","nodeType":"ElementaryTypeName","src":"811:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"743:82:28"},"src":"721:105:28"},{"constant":false,"functionSelector":"2d4e1d52","id":4681,"mutability":"mutable","name":"ids","nameLocation":"996:3:28","nodeType":"VariableDeclaration","scope":4927,"src":"897:102:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_enum$_TokenType_$8288_$_t_mapping$_t_address_$_t_mapping$_t_contract$_IStrategy_$8364_$_t_mapping$_t_uint256_$_t_uint256_$_$_$_$","typeString":"mapping(enum TokenType => mapping(address => mapping(contract IStrategy => mapping(uint256 => uint256))))"},"typeName":{"id":4680,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4671,"nodeType":"UserDefinedTypeName","pathNode":{"id":4670,"name":"TokenType","nameLocations":["905:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":8288,"src":"905:9:28"},"referencedDeclaration":8288,"src":"905:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"Mapping","src":"897:91:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_enum$_TokenType_$8288_$_t_mapping$_t_address_$_t_mapping$_t_contract$_IStrategy_$8364_$_t_mapping$_t_uint256_$_t_uint256_$_$_$_$","typeString":"mapping(enum TokenType => mapping(address => mapping(contract IStrategy => mapping(uint256 => uint256))))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4679,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4672,"name":"address","nodeType":"ElementaryTypeName","src":"926:7:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"918:69:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IStrategy_$8364_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(address => mapping(contract IStrategy => mapping(uint256 => uint256)))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4678,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4674,"nodeType":"UserDefinedTypeName","pathNode":{"id":4673,"name":"IStrategy","nameLocations":["945:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":8364,"src":"945:9:28"},"referencedDeclaration":8364,"src":"945:9:28","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"nodeType":"Mapping","src":"937:49:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IStrategy_$8364_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(contract IStrategy => mapping(uint256 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4677,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4675,"name":"uint256","nodeType":"ElementaryTypeName","src":"966:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"958:27:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4676,"name":"uint256","nodeType":"ElementaryTypeName","src":"977:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}}}},"visibility":"public"},{"constant":false,"functionSelector":"cf35bdd0","id":4685,"mutability":"mutable","name":"assets","nameLocation":"1020:6:28","nodeType":"VariableDeclaration","scope":4927,"src":"1005:21:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset[]"},"typeName":{"baseType":{"id":4683,"nodeType":"UserDefinedTypeName","pathNode":{"id":4682,"name":"Asset","nameLocations":["1005:5:28"],"nodeType":"IdentifierPath","referencedDeclaration":4632,"src":"1005:5:28"},"referencedDeclaration":4632,"src":"1005:5:28","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"}},"id":4684,"nodeType":"ArrayTypeName","src":"1005:7:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage_ptr","typeString":"struct Asset[]"}},"visibility":"public"},{"body":{"id":4703,"nodeType":"Block","src":"1047:79:28","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":4692,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"1075:9:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":4693,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1085:4:28","memberName":"None","nodeType":"MemberAccess","referencedDeclaration":8287,"src":"1075:14:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},{"arguments":[{"hexValue":"30","id":4696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1099:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1091:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4694,"name":"address","nodeType":"ElementaryTypeName","src":"1091:7:28","typeDescriptions":{}}},"id":4697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1091:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4698,"name":"NO_STRATEGY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8373,"src":"1103:11:28","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},{"hexValue":"30","id":4699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1116:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4691,"name":"Asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4632,"src":"1069:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Asset_$4632_storage_ptr_$","typeString":"type(struct Asset storage pointer)"}},"id":4700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1069:49:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_memory_ptr","typeString":"struct Asset memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Asset_$4632_memory_ptr","typeString":"struct Asset memory"}],"expression":{"id":4688,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"1057:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":4690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:4:28","memberName":"push","nodeType":"MemberAccess","src":"1057:11:28","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Asset_$4632_storage_$dyn_storage_ptr_$_t_struct$_Asset_$4632_storage_$returns$__$attached_to$_t_array$_t_struct$_Asset_$4632_storage_$dyn_storage_ptr_$","typeString":"function (struct Asset storage ref[] storage pointer,struct Asset storage ref)"}},"id":4701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1057:62:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4702,"nodeType":"ExpressionStatement","src":"1057:62:28"}]},"id":4704,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4686,"nodeType":"ParameterList","parameters":[],"src":"1044:2:28"},"returnParameters":{"id":4687,"nodeType":"ParameterList","parameters":[],"src":"1047:0:28"},"scope":4927,"src":"1033:93:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4712,"nodeType":"Block","src":"1184:37:28","statements":[{"expression":{"expression":{"id":4709,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"1201:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1208:6:28","memberName":"length","nodeType":"MemberAccess","src":"1201:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4708,"id":4711,"nodeType":"Return","src":"1194:20:28"}]},"functionSelector":"eafe7a74","id":4713,"implemented":true,"kind":"function","modifiers":[],"name":"assetCount","nameLocation":"1141:10:28","nodeType":"FunctionDefinition","parameters":{"id":4705,"nodeType":"ParameterList","parameters":[],"src":"1151:2:28"},"returnParameters":{"id":4708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4707,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4713,"src":"1175:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4706,"name":"uint256","nodeType":"ElementaryTypeName","src":"1175:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1174:9:28"},"scope":4927,"src":"1132:89:28","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4845,"nodeType":"Block","src":"1407:1598:28","statements":[{"expression":{"id":4738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4728,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4726,"src":"1435:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4729,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4681,"src":"1445:3:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_enum$_TokenType_$8288_$_t_mapping$_t_address_$_t_mapping$_t_contract$_IStrategy_$8364_$_t_mapping$_t_uint256_$_t_uint256_$_$_$_$","typeString":"mapping(enum TokenType => mapping(address => mapping(contract IStrategy => mapping(uint256 => uint256))))"}},"id":4731,"indexExpression":{"id":4730,"name":"tokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4716,"src":"1449:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1445:14:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IStrategy_$8364_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(address => mapping(contract IStrategy => mapping(uint256 => uint256)))"}},"id":4733,"indexExpression":{"id":4732,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"1460:15:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1445:31:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IStrategy_$8364_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(contract IStrategy => mapping(uint256 => uint256))"}},"id":4735,"indexExpression":{"id":4734,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"1477:8:28","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1445:41:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4737,"indexExpression":{"id":4736,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4723,"src":"1487:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1445:50:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1435:60:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4739,"nodeType":"ExpressionStatement","src":"1435:60:28"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4740,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4726,"src":"1586:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1597:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1586:12:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4844,"nodeType":"IfStatement","src":"1582:1417:28","trueBody":{"id":4843,"nodeType":"Block","src":"1600:1399:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4744,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4723,"src":"1693:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1704:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1693:12:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":4750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4747,"name":"tokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4716,"src":"1709:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4748,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"1722:9:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":4749,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1732:5:28","memberName":"ERC20","nodeType":"MemberAccess","referencedDeclaration":8284,"src":"1722:15:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"1709:28:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1693:44:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f783a204e6f20746f6b656e496420666f72204552433230","id":4752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1739:32:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_e87b6e822fb46fed3002f0f0634db9026d4688889dc05d9540272fa12f3ef463","typeString":"literal_string \"YieldBox: No tokenId for ERC20\""},"value":"YieldBox: No tokenId for ERC20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e87b6e822fb46fed3002f0f0634db9026d4688889dc05d9540272fa12f3ef463","typeString":"literal_string \"YieldBox: No tokenId for ERC20\""}],"id":4743,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1685:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1685:87:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4754,"nodeType":"ExpressionStatement","src":"1685:87:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":4759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4756,"name":"tokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4716,"src":"1811:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4757,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"1824:9:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":4758,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1834:6:28","memberName":"Native","nodeType":"MemberAccess","referencedDeclaration":8283,"src":"1824:16:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"1811:29:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":4764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4760,"name":"tokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4716,"src":"1865:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4761,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"1878:8:28","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"id":4762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1887:9:28","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":8319,"src":"1878:18:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_enum$_TokenType_$8288_$","typeString":"function () view external returns (enum TokenType)"}},"id":4763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1878:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"1865:33:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4765,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"1902:15:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4766,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"1921:8:28","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"id":4767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1930:15:28","memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":8325,"src":"1921:24:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1921:26:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1902:45:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1865:82:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4771,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4723,"src":"1951:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4772,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"1962:8:28","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"id":4773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1971:7:28","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":8331,"src":"1962:16:28","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":4774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1962:18:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1951:29:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1865:115:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4777,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1864:117:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1811:170:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f783a205374726174656779206d69736d61746368","id":4779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1999:29:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_5ed17ea65ebe316f354e207df627051d422eb73aa985a64e67434e267e69b023","typeString":"literal_string \"YieldBox: Strategy mismatch\""},"value":"YieldBox: Strategy mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5ed17ea65ebe316f354e207df627051d422eb73aa985a64e67434e267e69b023","typeString":"literal_string \"YieldBox: Strategy mismatch\""}],"id":4755,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1786:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1786:256:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4781,"nodeType":"ExpressionStatement","src":"1786:256:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":4786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4783,"name":"tokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4716,"src":"2411:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4784,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"2424:9:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":4785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2434:6:28","memberName":"Native","nodeType":"MemberAccess","referencedDeclaration":8283,"src":"2424:16:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"2411:29:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4787,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"2444:15:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2471:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2463:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4788,"name":"address","nodeType":"ElementaryTypeName","src":"2463:7:28","typeDescriptions":{}}},"id":4791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2463:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2444:29:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2411:62:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4794,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2410:64:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4795,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"2478:15:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2494:10:28","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":792,"src":"2478:26:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":4797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2478:28:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2410:96:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f783a204e6f74206120746f6b656e","id":4799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2508:23:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_ecf49f9fd0089e0cdcf0f52e0a99c8db03883fc0cbf8ee19027b65da606df36a","typeString":"literal_string \"YieldBox: Not a token\""},"value":"YieldBox: Not a token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ecf49f9fd0089e0cdcf0f52e0a99c8db03883fc0cbf8ee19027b65da606df36a","typeString":"literal_string \"YieldBox: Not a token\""}],"id":4782,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2402:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4800,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2402:130:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4801,"nodeType":"ExpressionStatement","src":"2402:130:28"},{"expression":{"id":4805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4802,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4726,"src":"2570:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4803,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"2580:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":4804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2587:6:28","memberName":"length","nodeType":"MemberAccess","src":"2580:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2570:23:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4806,"nodeType":"ExpressionStatement","src":"2570:23:28"},{"expression":{"arguments":[{"arguments":[{"id":4811,"name":"tokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4716,"src":"2625:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},{"id":4812,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"2636:15:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4813,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"2653:8:28","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},{"id":4814,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4723,"src":"2663:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4810,"name":"Asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4632,"src":"2619:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Asset_$4632_storage_ptr_$","typeString":"type(struct Asset storage pointer)"}},"id":4815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2619:52:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_memory_ptr","typeString":"struct Asset memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Asset_$4632_memory_ptr","typeString":"struct Asset memory"}],"expression":{"id":4807,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"2607:6:28","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":4809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2614:4:28","memberName":"push","nodeType":"MemberAccess","src":"2607:11:28","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Asset_$4632_storage_$dyn_storage_ptr_$_t_struct$_Asset_$4632_storage_$returns$__$attached_to$_t_array$_t_struct$_Asset_$4632_storage_$dyn_storage_ptr_$","typeString":"function (struct Asset storage ref[] storage pointer,struct Asset storage ref)"}},"id":4816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2607:65:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4817,"nodeType":"ExpressionStatement","src":"2607:65:28"},{"expression":{"id":4828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4818,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4681,"src":"2686:3:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_enum$_TokenType_$8288_$_t_mapping$_t_address_$_t_mapping$_t_contract$_IStrategy_$8364_$_t_mapping$_t_uint256_$_t_uint256_$_$_$_$","typeString":"mapping(enum TokenType => mapping(address => mapping(contract IStrategy => mapping(uint256 => uint256))))"}},"id":4823,"indexExpression":{"id":4819,"name":"tokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4716,"src":"2690:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2686:14:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_contract$_IStrategy_$8364_$_t_mapping$_t_uint256_$_t_uint256_$_$_$","typeString":"mapping(address => mapping(contract IStrategy => mapping(uint256 => uint256)))"}},"id":4824,"indexExpression":{"id":4820,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"2701:15:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2686:31:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_contract$_IStrategy_$8364_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(contract IStrategy => mapping(uint256 => uint256))"}},"id":4825,"indexExpression":{"id":4821,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"2718:8:28","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2686:41:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4826,"indexExpression":{"id":4822,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4723,"src":"2728:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2686:50:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4827,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4726,"src":"2739:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2686:60:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4829,"nodeType":"ExpressionStatement","src":"2686:60:28"},{"eventCall":{"arguments":[{"hexValue":"","id":4831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2886:2:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"id":4832,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4726,"src":"2890:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4830,"name":"URI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"2882:3:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (string memory,uint256)"}},"id":4833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2882:16:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4834,"nodeType":"EmitStatement","src":"2877:21:28"},{"eventCall":{"arguments":[{"id":4836,"name":"tokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4716,"src":"2933:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},{"id":4837,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"2944:15:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4838,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4721,"src":"2961:8:28","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},{"id":4839,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4723,"src":"2971:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4840,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4726,"src":"2980:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4835,"name":"AssetRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"2917:15:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_enum$_TokenType_$8288_$_t_address_$_t_contract$_IStrategy_$8364_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (enum TokenType,address,contract IStrategy,uint256,uint256)"}},"id":4841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2917:71:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4842,"nodeType":"EmitStatement","src":"2912:76:28"}]}}]},"id":4846,"implemented":true,"kind":"function","modifiers":[],"name":"_registerAsset","nameLocation":"1236:14:28","nodeType":"FunctionDefinition","parameters":{"id":4724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4716,"mutability":"mutable","name":"tokenType","nameLocation":"1270:9:28","nodeType":"VariableDeclaration","scope":4846,"src":"1260:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"typeName":{"id":4715,"nodeType":"UserDefinedTypeName","pathNode":{"id":4714,"name":"TokenType","nameLocations":["1260:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":8288,"src":"1260:9:28"},"referencedDeclaration":8288,"src":"1260:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"visibility":"internal"},{"constant":false,"id":4718,"mutability":"mutable","name":"contractAddress","nameLocation":"1297:15:28","nodeType":"VariableDeclaration","scope":4846,"src":"1289:23:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4717,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4721,"mutability":"mutable","name":"strategy","nameLocation":"1332:8:28","nodeType":"VariableDeclaration","scope":4846,"src":"1322:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},"typeName":{"id":4720,"nodeType":"UserDefinedTypeName","pathNode":{"id":4719,"name":"IStrategy","nameLocations":["1322:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":8364,"src":"1322:9:28"},"referencedDeclaration":8364,"src":"1322:9:28","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"visibility":"internal"},{"constant":false,"id":4723,"mutability":"mutable","name":"tokenId","nameLocation":"1358:7:28","nodeType":"VariableDeclaration","scope":4846,"src":"1350:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4722,"name":"uint256","nodeType":"ElementaryTypeName","src":"1350:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1250:121:28"},"returnParameters":{"id":4727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4726,"mutability":"mutable","name":"assetId","nameLocation":"1398:7:28","nodeType":"VariableDeclaration","scope":4846,"src":"1390:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4725,"name":"uint256","nodeType":"ElementaryTypeName","src":"1390:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1389:17:28"},"scope":4927,"src":"1227:1778:28","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4888,"nodeType":"Block","src":"3150:351:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":4865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4862,"name":"tokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"3261:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4863,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"3274:9:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":4864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3284:5:28","memberName":"ERC20","nodeType":"MemberAccess","referencedDeclaration":8284,"src":"3274:15:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"3261:28:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":4869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4866,"name":"tokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"3293:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4867,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"3306:9:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":4868,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3316:6:28","memberName":"ERC721","nodeType":"MemberAccess","referencedDeclaration":8285,"src":"3306:16:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"3293:29:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3261:61:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":4874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4871,"name":"tokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"3326:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4872,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"3339:9:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":4873,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3349:7:28","memberName":"ERC1155","nodeType":"MemberAccess","referencedDeclaration":8286,"src":"3339:17:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"3326:30:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3261:95:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"41737365744d616e616765723a2063616e6e6f7420616464204e6174697665","id":4876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3370:33:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_23d892a2953cae56ec9669b25790769d68b56a9a39dc393407f3ed83bedbc572","typeString":"literal_string \"AssetManager: cannot add Native\""},"value":"AssetManager: cannot add Native"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_23d892a2953cae56ec9669b25790769d68b56a9a39dc393407f3ed83bedbc572","typeString":"literal_string \"AssetManager: cannot add Native\""}],"id":4861,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3240:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3240:173:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4878,"nodeType":"ExpressionStatement","src":"3240:173:28"},{"expression":{"id":4886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4879,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4859,"src":"3423:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4881,"name":"tokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"3448:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},{"id":4882,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4851,"src":"3459:15:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4883,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4854,"src":"3476:8:28","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},{"id":4884,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4856,"src":"3486:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4880,"name":"_registerAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4846,"src":"3433:14:28","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_TokenType_$8288_$_t_address_$_t_contract$_IStrategy_$8364_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenType,address,contract IStrategy,uint256) returns (uint256)"}},"id":4885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3433:61:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3423:71:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4887,"nodeType":"ExpressionStatement","src":"3423:71:28"}]},"functionSelector":"b061db94","id":4889,"implemented":true,"kind":"function","modifiers":[],"name":"registerAsset","nameLocation":"3020:13:28","nodeType":"FunctionDefinition","parameters":{"id":4857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4849,"mutability":"mutable","name":"tokenType","nameLocation":"3044:9:28","nodeType":"VariableDeclaration","scope":4889,"src":"3034:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"typeName":{"id":4848,"nodeType":"UserDefinedTypeName","pathNode":{"id":4847,"name":"TokenType","nameLocations":["3034:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":8288,"src":"3034:9:28"},"referencedDeclaration":8288,"src":"3034:9:28","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"visibility":"internal"},{"constant":false,"id":4851,"mutability":"mutable","name":"contractAddress","nameLocation":"3063:15:28","nodeType":"VariableDeclaration","scope":4889,"src":"3055:23:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4850,"name":"address","nodeType":"ElementaryTypeName","src":"3055:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4854,"mutability":"mutable","name":"strategy","nameLocation":"3090:8:28","nodeType":"VariableDeclaration","scope":4889,"src":"3080:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},"typeName":{"id":4853,"nodeType":"UserDefinedTypeName","pathNode":{"id":4852,"name":"IStrategy","nameLocations":["3080:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":8364,"src":"3080:9:28"},"referencedDeclaration":8364,"src":"3080:9:28","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"visibility":"internal"},{"constant":false,"id":4856,"mutability":"mutable","name":"tokenId","nameLocation":"3108:7:28","nodeType":"VariableDeclaration","scope":4889,"src":"3100:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4855,"name":"uint256","nodeType":"ElementaryTypeName","src":"3100:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3033:83:28"},"returnParameters":{"id":4860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4859,"mutability":"mutable","name":"assetId","nameLocation":"3141:7:28","nodeType":"VariableDeclaration","scope":4889,"src":"3133:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4858,"name":"uint256","nodeType":"ElementaryTypeName","src":"3133:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3132:17:28"},"scope":4927,"src":"3011:490:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4925,"nodeType":"Block","src":"3603:224:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4899,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"3621:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4900,"name":"assetCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4713,"src":"3631:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":4901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3631:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3621:22:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"41737365744d616e616765723a206173736574206e6f742076616c6964","id":4903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3645:31:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_8985771e4d197e523d3ecc1c171f6b4321393ba3719acabb362d7fe978c640f3","typeString":"literal_string \"AssetManager: asset not valid\""},"value":"AssetManager: asset not valid"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8985771e4d197e523d3ecc1c171f6b4321393ba3719acabb362d7fe978c640f3","typeString":"literal_string \"AssetManager: asset not valid\""}],"id":4898,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3613:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3613:64:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4905,"nodeType":"ExpressionStatement","src":"3613:64:28"},{"expression":{"id":4915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":4906,"name":"isApprovedForAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4645,"src":"3687:18:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$_$","typeString":"mapping(address => mapping(address => mapping(uint256 => bool)))"}},"id":4911,"indexExpression":{"expression":{"id":4907,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3706:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3710:6:28","memberName":"sender","nodeType":"MemberAccess","src":"3706:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3687:30:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$","typeString":"mapping(address => mapping(uint256 => bool))"}},"id":4912,"indexExpression":{"id":4909,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4891,"src":"3718:8:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3687:40:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":4913,"indexExpression":{"id":4910,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"3728:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3687:49:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4914,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4895,"src":"3739:8:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3687:60:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4916,"nodeType":"ExpressionStatement","src":"3687:60:28"},{"eventCall":{"arguments":[{"expression":{"id":4918,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3780:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3784:6:28","memberName":"sender","nodeType":"MemberAccess","src":"3780:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4920,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4891,"src":"3792:8:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4921,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4893,"src":"3802:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4922,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4895,"src":"3811:8:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4917,"name":"ApprovalForAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"3763:16:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,uint256,bool)"}},"id":4923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3763:57:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4924,"nodeType":"EmitStatement","src":"3758:62:28"}]},"functionSelector":"b8489fb5","id":4926,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAsset","nameLocation":"3516:19:28","nodeType":"FunctionDefinition","parameters":{"id":4896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4891,"mutability":"mutable","name":"operator","nameLocation":"3544:8:28","nodeType":"VariableDeclaration","scope":4926,"src":"3536:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4890,"name":"address","nodeType":"ElementaryTypeName","src":"3536:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4893,"mutability":"mutable","name":"assetId","nameLocation":"3562:7:28","nodeType":"VariableDeclaration","scope":4926,"src":"3554:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4892,"name":"uint256","nodeType":"ElementaryTypeName","src":"3554:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4895,"mutability":"mutable","name":"approved","nameLocation":"3576:8:28","nodeType":"VariableDeclaration","scope":4926,"src":"3571:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4894,"name":"bool","nodeType":"ElementaryTypeName","src":"3571:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3535:50:28"},"returnParameters":{"id":4897,"nodeType":"ParameterList","parameters":[],"src":"3603:0:28"},"scope":4927,"src":"3507:320:28","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":4928,"src":"349:3480:28","usedErrors":[]}],"src":"32:3798:28"},"id":28},"tapioca-sdk/dist/contracts/YieldBox/contracts/BoringMath.sol":{"ast":{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/BoringMath.sol","exportedSymbols":{"BoringMath":[5046]},"id":5047,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4929,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:29"},{"abstract":false,"baseContracts":[],"canonicalName":"BoringMath","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":5046,"linearizedBaseContracts":[5046],"name":"BoringMath","nameLocation":"65:10:29","nodeType":"ContractDefinition","nodes":[{"body":{"id":4954,"nodeType":"Block","src":"142:104:29","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4937,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"160:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"170:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":4939,"name":"uint128","nodeType":"ElementaryTypeName","src":"170:7:29","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":4938,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"165:4:29","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"165:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":4942,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"179:3:29","memberName":"max","nodeType":"MemberAccess","src":"165:17:29","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"160:22:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"426f72696e674d6174683a2075696e74313238204f766572666c6f77","id":4944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"184:30:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_64196137e15a5be4f7488ecfa918cfa26a6c2051ae3fb739c5de9bf8431fe9a5","typeString":"literal_string \"BoringMath: uint128 Overflow\""},"value":"BoringMath: uint128 Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_64196137e15a5be4f7488ecfa918cfa26a6c2051ae3fb739c5de9bf8431fe9a5","typeString":"literal_string \"BoringMath: uint128 Overflow\""}],"id":4936,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"152:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"152:63:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4946,"nodeType":"ExpressionStatement","src":"152:63:29"},{"expression":{"id":4952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4947,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4934,"src":"225:1:29","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4950,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4931,"src":"237:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4949,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"229:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":4948,"name":"uint128","nodeType":"ElementaryTypeName","src":"229:7:29","typeDescriptions":{}}},"id":4951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"229:10:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"225:14:29","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":4953,"nodeType":"ExpressionStatement","src":"225:14:29"}]},"id":4955,"implemented":true,"kind":"function","modifiers":[],"name":"to128","nameLocation":"91:5:29","nodeType":"FunctionDefinition","parameters":{"id":4932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4931,"mutability":"mutable","name":"a","nameLocation":"105:1:29","nodeType":"VariableDeclaration","scope":4955,"src":"97:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4930,"name":"uint256","nodeType":"ElementaryTypeName","src":"97:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"96:11:29"},"returnParameters":{"id":4935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4934,"mutability":"mutable","name":"c","nameLocation":"139:1:29","nodeType":"VariableDeclaration","scope":4955,"src":"131:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4933,"name":"uint128","nodeType":"ElementaryTypeName","src":"131:7:29","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"130:11:29"},"scope":5046,"src":"82:164:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4980,"nodeType":"Block","src":"310:101:29","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4963,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4957,"src":"328:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4966,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"338:6:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":4965,"name":"uint64","nodeType":"ElementaryTypeName","src":"338:6:29","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":4964,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"333:4:29","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"333:12:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":4968,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"346:3:29","memberName":"max","nodeType":"MemberAccess","src":"333:16:29","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"328:21:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"426f72696e674d6174683a2075696e743634204f766572666c6f77","id":4970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"351:29:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_b3c33265b589f76cafa7df00c0a28addc9a2c2003a13a1e0e4b875f58eb08764","typeString":"literal_string \"BoringMath: uint64 Overflow\""},"value":"BoringMath: uint64 Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b3c33265b589f76cafa7df00c0a28addc9a2c2003a13a1e0e4b875f58eb08764","typeString":"literal_string \"BoringMath: uint64 Overflow\""}],"id":4962,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"320:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"320:61:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4972,"nodeType":"ExpressionStatement","src":"320:61:29"},{"expression":{"id":4978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4973,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4960,"src":"391:1:29","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4976,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4957,"src":"402:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4975,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"395:6:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":4974,"name":"uint64","nodeType":"ElementaryTypeName","src":"395:6:29","typeDescriptions":{}}},"id":4977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"395:9:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"391:13:29","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":4979,"nodeType":"ExpressionStatement","src":"391:13:29"}]},"id":4981,"implemented":true,"kind":"function","modifiers":[],"name":"to64","nameLocation":"261:4:29","nodeType":"FunctionDefinition","parameters":{"id":4958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4957,"mutability":"mutable","name":"a","nameLocation":"274:1:29","nodeType":"VariableDeclaration","scope":4981,"src":"266:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4956,"name":"uint256","nodeType":"ElementaryTypeName","src":"266:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"265:11:29"},"returnParameters":{"id":4961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4960,"mutability":"mutable","name":"c","nameLocation":"307:1:29","nodeType":"VariableDeclaration","scope":4981,"src":"300:8:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4959,"name":"uint64","nodeType":"ElementaryTypeName","src":"300:6:29","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"299:10:29"},"scope":5046,"src":"252:159:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5006,"nodeType":"Block","src":"475:101:29","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4989,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"493:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":4992,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"503:6:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":4991,"name":"uint32","nodeType":"ElementaryTypeName","src":"503:6:29","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"}],"id":4990,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"498:4:29","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"498:12:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint32","typeString":"type(uint32)"}},"id":4994,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"511:3:29","memberName":"max","nodeType":"MemberAccess","src":"498:16:29","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"493:21:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"426f72696e674d6174683a2075696e743332204f766572666c6f77","id":4996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"516:29:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_d8918cd18a3e78dc3bd01c63d310640381efda31e2d3ce751014519bc65013fc","typeString":"literal_string \"BoringMath: uint32 Overflow\""},"value":"BoringMath: uint32 Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d8918cd18a3e78dc3bd01c63d310640381efda31e2d3ce751014519bc65013fc","typeString":"literal_string \"BoringMath: uint32 Overflow\""}],"id":4988,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"485:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"485:61:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4998,"nodeType":"ExpressionStatement","src":"485:61:29"},{"expression":{"id":5004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4999,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4986,"src":"556:1:29","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5002,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4983,"src":"567:1:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5001,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"560:6:29","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":5000,"name":"uint32","nodeType":"ElementaryTypeName","src":"560:6:29","typeDescriptions":{}}},"id":5003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"560:9:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"556:13:29","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":5005,"nodeType":"ExpressionStatement","src":"556:13:29"}]},"id":5007,"implemented":true,"kind":"function","modifiers":[],"name":"to32","nameLocation":"426:4:29","nodeType":"FunctionDefinition","parameters":{"id":4984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4983,"mutability":"mutable","name":"a","nameLocation":"439:1:29","nodeType":"VariableDeclaration","scope":5007,"src":"431:9:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4982,"name":"uint256","nodeType":"ElementaryTypeName","src":"431:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"430:11:29"},"returnParameters":{"id":4987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4986,"mutability":"mutable","name":"c","nameLocation":"472:1:29","nodeType":"VariableDeclaration","scope":5007,"src":"465:8:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4985,"name":"uint32","nodeType":"ElementaryTypeName","src":"465:6:29","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"464:10:29"},"scope":5046,"src":"417:159:29","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5044,"nodeType":"Block","src":"730:132:29","statements":[{"expression":{"id":5027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5020,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5018,"src":"740:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5021,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5009,"src":"750:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5022,"name":"mul","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5011,"src":"758:3:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"750:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5024,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"749:13:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5025,"name":"div","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5013,"src":"765:3:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"749:19:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"740:28:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5028,"nodeType":"ExpressionStatement","src":"740:28:29"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5029,"name":"roundUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5015,"src":"782:7:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5030,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5018,"src":"794:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5031,"name":"div","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5013,"src":"803:3:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"794:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5033,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"793:14:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5034,"name":"mul","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5011,"src":"810:3:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"793:20:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5036,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5009,"src":"816:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"793:28:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"782:39:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5043,"nodeType":"IfStatement","src":"778:78:29","trueBody":{"id":5042,"nodeType":"Block","src":"823:33:29","statements":[{"expression":{"id":5040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"837:8:29","subExpression":{"id":5039,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5018,"src":"837:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5041,"nodeType":"ExpressionStatement","src":"837:8:29"}]}}]},"id":5045,"implemented":true,"kind":"function","modifiers":[],"name":"muldiv","nameLocation":"591:6:29","nodeType":"FunctionDefinition","parameters":{"id":5016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5009,"mutability":"mutable","name":"value","nameLocation":"615:5:29","nodeType":"VariableDeclaration","scope":5045,"src":"607:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5008,"name":"uint256","nodeType":"ElementaryTypeName","src":"607:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5011,"mutability":"mutable","name":"mul","nameLocation":"638:3:29","nodeType":"VariableDeclaration","scope":5045,"src":"630:11:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5010,"name":"uint256","nodeType":"ElementaryTypeName","src":"630:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5013,"mutability":"mutable","name":"div","nameLocation":"659:3:29","nodeType":"VariableDeclaration","scope":5045,"src":"651:11:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5012,"name":"uint256","nodeType":"ElementaryTypeName","src":"651:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5015,"mutability":"mutable","name":"roundUp","nameLocation":"677:7:29","nodeType":"VariableDeclaration","scope":5045,"src":"672:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5014,"name":"bool","nodeType":"ElementaryTypeName","src":"672:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"597:93:29"},"returnParameters":{"id":5019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5018,"mutability":"mutable","name":"result","nameLocation":"722:6:29","nodeType":"VariableDeclaration","scope":5045,"src":"714:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5017,"name":"uint256","nodeType":"ElementaryTypeName","src":"714:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"713:16:29"},"scope":5046,"src":"582:280:29","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5047,"src":"57:807:29","usedErrors":[]}],"src":"32:833:29"},"id":29},"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol":{"ast":{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol","exportedSymbols":{"BoringAddress":[815],"ERC1155":[5557],"IERC1155":[428],"IERC1155TokenReceiver":[463],"IERC165":[473]},"id":5558,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5048,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:30"},{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol","file":"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol","id":5049,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5558,"sourceUnit":429,"src":"57:73:30","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol","file":"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol","id":5050,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5558,"sourceUnit":464,"src":"131:86:30","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol","file":"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol","id":5051,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5558,"sourceUnit":816,"src":"218:77:30","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5052,"name":"IERC1155","nameLocations":["390:8:30"],"nodeType":"IdentifierPath","referencedDeclaration":428,"src":"390:8:30"},"id":5053,"nodeType":"InheritanceSpecifier","src":"390:8:30"}],"canonicalName":"ERC1155","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5557,"linearizedBaseContracts":[5557,428,473],"name":"ERC1155","nameLocation":"379:7:30","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5056,"libraryName":{"id":5054,"name":"BoringAddress","nameLocations":["411:13:30"],"nodeType":"IdentifierPath","referencedDeclaration":815,"src":"411:13:30"},"nodeType":"UsingForDirective","src":"405:32:30","typeName":{"id":5055,"name":"address","nodeType":"ElementaryTypeName","src":"429:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"baseFunctions":[427],"constant":false,"functionSelector":"e985e9c5","id":5063,"mutability":"mutable","name":"isApprovedForAll","nameLocation":"521:16:30","nodeType":"VariableDeclaration","overrides":{"id":5062,"nodeType":"OverrideSpecifier","overrides":[],"src":"512:8:30"},"scope":5557,"src":"460:77:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":5061,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5057,"name":"address","nodeType":"ElementaryTypeName","src":"468:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"460:44:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5060,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5058,"name":"address","nodeType":"ElementaryTypeName","src":"487:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"479:24:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5059,"name":"bool","nodeType":"ElementaryTypeName","src":"498:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"public"},{"baseFunctions":[399],"constant":false,"functionSelector":"00fdd58e","id":5070,"mutability":"mutable","name":"balanceOf","nameLocation":"635:9:30","nodeType":"VariableDeclaration","overrides":{"id":5069,"nodeType":"OverrideSpecifier","overrides":[],"src":"626:8:30"},"scope":5557,"src":"571:73:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"typeName":{"id":5068,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5064,"name":"address","nodeType":"ElementaryTypeName","src":"579:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"571:47:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5067,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5065,"name":"uint256","nodeType":"ElementaryTypeName","src":"598:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"590:27:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5066,"name":"uint256","nodeType":"ElementaryTypeName","src":"609:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"constant":false,"functionSelector":"bd85b039","id":5074,"mutability":"mutable","name":"totalSupply","nameLocation":"711:11:30","nodeType":"VariableDeclaration","scope":5557,"src":"676:46:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":5073,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5071,"name":"uint256","nodeType":"ElementaryTypeName","src":"684:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"676:27:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5072,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"baseFunctions":[472],"body":{"id":5096,"nodeType":"Block","src":"837:208:30","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":5086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5082,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5076,"src":"866:11:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5083,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"881:4:30","typeDescriptions":{"typeIdentifier":"t_contract$_ERC1155_$5557","typeString":"contract ERC1155"}},"id":5084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"886:17:30","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":5097,"src":"881:22:30","typeDescriptions":{"typeIdentifier":"t_function_external_pure$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) pure external returns (bool)"}},"id":5085,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"904:8:30","memberName":"selector","nodeType":"MemberAccess","src":"881:31:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"866:46:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":5089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5087,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5076,"src":"939:11:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30786439623637613236","id":5088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"954:10:30","typeDescriptions":{"typeIdentifier":"t_rational_3652614694_by_1","typeString":"int_const 3652614694"},"value":"0xd9b67a26"},"src":"939:25:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"866:98:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":5093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5091,"name":"interfaceID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5076,"src":"992:11:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30783065383933343163","id":5092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1007:10:30","typeDescriptions":{"typeIdentifier":"t_rational_243872796_by_1","typeString":"int_const 243872796"},"value":"0x0e89341c"},"src":"992:25:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"866:151:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5081,"id":5095,"nodeType":"Return","src":"847:170:30"}]},"functionSelector":"01ffc9a7","id":5097,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"763:17:30","nodeType":"FunctionDefinition","overrides":{"id":5078,"nodeType":"OverrideSpecifier","overrides":[],"src":"813:8:30"},"parameters":{"id":5077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5076,"mutability":"mutable","name":"interfaceID","nameLocation":"788:11:30","nodeType":"VariableDeclaration","scope":5097,"src":"781:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5075,"name":"bytes4","nodeType":"ElementaryTypeName","src":"781:6:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"780:20:30"},"returnParameters":{"id":5081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5080,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5097,"src":"831:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5079,"name":"bool","nodeType":"ElementaryTypeName","src":"831:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"830:6:30"},"scope":5557,"src":"754:291:30","stateMutability":"pure","virtual":false,"visibility":"public"},{"baseFunctions":[411],"body":{"id":5157,"nodeType":"Block","src":"1185:259:30","statements":[{"assignments":[5111],"declarations":[{"constant":false,"id":5111,"mutability":"mutable","name":"len","nameLocation":"1203:3:30","nodeType":"VariableDeclaration","scope":5157,"src":"1195:11:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5110,"name":"uint256","nodeType":"ElementaryTypeName","src":"1195:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5114,"initialValue":{"expression":{"id":5112,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"1209:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":5113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1216:6:30","memberName":"length","nodeType":"MemberAccess","src":"1209:13:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1195:27:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5116,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5111,"src":"1240:3:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5117,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5103,"src":"1247:3:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1251:6:30","memberName":"length","nodeType":"MemberAccess","src":"1247:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1240:17:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a204c656e677468206d69736d61746368","id":5120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1259:26:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_63300937074a69d4b900bf9e5a4ae75fd1b83e0b8409cb45984013a5c93beda3","typeString":"literal_string \"ERC1155: Length mismatch\""},"value":"ERC1155: Length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_63300937074a69d4b900bf9e5a4ae75fd1b83e0b8409cb45984013a5c93beda3","typeString":"literal_string \"ERC1155: Length mismatch\""}],"id":5115,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1232:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1232:54:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5122,"nodeType":"ExpressionStatement","src":"1232:54:30"},{"expression":{"id":5129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5123,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5108,"src":"1297:8:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5127,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5111,"src":"1322:3:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1308:13:30","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":5124,"name":"uint256","nodeType":"ElementaryTypeName","src":"1312:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5125,"nodeType":"ArrayTypeName","src":"1312:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":5128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1308:18:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"src":"1297:29:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5130,"nodeType":"ExpressionStatement","src":"1297:29:30"},{"body":{"id":5155,"nodeType":"Block","src":"1371:67:30","statements":[{"expression":{"id":5153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5141,"name":"balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5108,"src":"1385:8:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5143,"indexExpression":{"id":5142,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5132,"src":"1394:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1385:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"baseExpression":{"id":5144,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"1399:9:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":5148,"indexExpression":{"baseExpression":{"id":5145,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"1409:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":5147,"indexExpression":{"id":5146,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5132,"src":"1416:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1409:9:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1399:20:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5152,"indexExpression":{"baseExpression":{"id":5149,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5103,"src":"1420:3:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5151,"indexExpression":{"id":5150,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5132,"src":"1424:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1420:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1399:28:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1385:42:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5154,"nodeType":"ExpressionStatement","src":"1385:42:30"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5135,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5132,"src":"1357:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5136,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5111,"src":"1361:3:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1357:7:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5156,"initializationExpression":{"assignments":[5132],"declarations":[{"constant":false,"id":5132,"mutability":"mutable","name":"i","nameLocation":"1350:1:30","nodeType":"VariableDeclaration","scope":5156,"src":"1342:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5131,"name":"uint256","nodeType":"ElementaryTypeName","src":"1342:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5134,"initialValue":{"hexValue":"30","id":5133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1342:13:30"},"loopExpression":{"expression":{"id":5139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1366:3:30","subExpression":{"id":5138,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5132,"src":"1366:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5140,"nodeType":"ExpressionStatement","src":"1366:3:30"},"nodeType":"ForStatement","src":"1337:101:30"}]},"functionSelector":"4e1273f4","id":5158,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"1060:14:30","nodeType":"FunctionDefinition","overrides":{"id":5105,"nodeType":"OverrideSpecifier","overrides":[],"src":"1140:8:30"},"parameters":{"id":5104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5100,"mutability":"mutable","name":"owners","nameLocation":"1094:6:30","nodeType":"VariableDeclaration","scope":5158,"src":"1075:25:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5098,"name":"address","nodeType":"ElementaryTypeName","src":"1075:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5099,"nodeType":"ArrayTypeName","src":"1075:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":5103,"mutability":"mutable","name":"ids","nameLocation":"1121:3:30","nodeType":"VariableDeclaration","scope":5158,"src":"1102:22:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5101,"name":"uint256","nodeType":"ElementaryTypeName","src":"1102:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5102,"nodeType":"ArrayTypeName","src":"1102:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1074:51:30"},"returnParameters":{"id":5109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5108,"mutability":"mutable","name":"balances","nameLocation":"1175:8:30","nodeType":"VariableDeclaration","scope":5158,"src":"1158:25:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5106,"name":"uint256","nodeType":"ElementaryTypeName","src":"1158:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5107,"nodeType":"ArrayTypeName","src":"1158:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1157:27:30"},"scope":5557,"src":"1051:393:30","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5203,"nodeType":"Block","src":"1513:198:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5168,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5160,"src":"1531:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1545:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1537:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5169,"name":"address","nodeType":"ElementaryTypeName","src":"1537:7:30","typeDescriptions":{}}},"id":5172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1537:10:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1531:16:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f20302061646472657373","id":5174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1549:14:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_06e7d39024ef2c9fc07dd7c37aef49764e84d33fb411ca8d6a89608f59fd8044","typeString":"literal_string \"No 0 address\""},"value":"No 0 address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_06e7d39024ef2c9fc07dd7c37aef49764e84d33fb411ca8d6a89608f59fd8044","typeString":"literal_string \"No 0 address\""}],"id":5167,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1523:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1523:41:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5176,"nodeType":"ExpressionStatement","src":"1523:41:30"},{"expression":{"id":5183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":5177,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"1575:9:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":5180,"indexExpression":{"id":5178,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5160,"src":"1585:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1575:13:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5181,"indexExpression":{"id":5179,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5162,"src":"1589:2:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1575:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5182,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5164,"src":"1596:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1575:26:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5184,"nodeType":"ExpressionStatement","src":"1575:26:30"},{"expression":{"id":5189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5185,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"1611:11:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5187,"indexExpression":{"id":5186,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5162,"src":"1623:2:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1611:15:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5188,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5164,"src":"1630:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1611:24:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5190,"nodeType":"ExpressionStatement","src":"1611:24:30"},{"eventCall":{"arguments":[{"expression":{"id":5192,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1666:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1670:6:30","memberName":"sender","nodeType":"MemberAccess","src":"1666:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":5196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1686:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5195,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1678:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5194,"name":"address","nodeType":"ElementaryTypeName","src":"1678:7:30","typeDescriptions":{}}},"id":5197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1678:10:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5198,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5160,"src":"1690:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5199,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5162,"src":"1694:2:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5200,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5164,"src":"1698:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5191,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"1651:14:30","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":5201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1651:53:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5202,"nodeType":"EmitStatement","src":"1646:58:30"}]},"id":5204,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"1459:5:30","nodeType":"FunctionDefinition","parameters":{"id":5165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5160,"mutability":"mutable","name":"to","nameLocation":"1473:2:30","nodeType":"VariableDeclaration","scope":5204,"src":"1465:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5159,"name":"address","nodeType":"ElementaryTypeName","src":"1465:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5162,"mutability":"mutable","name":"id","nameLocation":"1485:2:30","nodeType":"VariableDeclaration","scope":5204,"src":"1477:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5161,"name":"uint256","nodeType":"ElementaryTypeName","src":"1477:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5164,"mutability":"mutable","name":"value","nameLocation":"1497:5:30","nodeType":"VariableDeclaration","scope":5204,"src":"1489:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5163,"name":"uint256","nodeType":"ElementaryTypeName","src":"1489:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1464:39:30"},"returnParameters":{"id":5166,"nodeType":"ParameterList","parameters":[],"src":"1513:0:30"},"scope":5557,"src":"1450:261:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5249,"nodeType":"Block","src":"1782:204:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5214,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5206,"src":"1800:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1816:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1808:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5215,"name":"address","nodeType":"ElementaryTypeName","src":"1808:7:30","typeDescriptions":{}}},"id":5218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1808:10:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1800:18:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f20302061646472657373","id":5220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1820:14:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_06e7d39024ef2c9fc07dd7c37aef49764e84d33fb411ca8d6a89608f59fd8044","typeString":"literal_string \"No 0 address\""},"value":"No 0 address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_06e7d39024ef2c9fc07dd7c37aef49764e84d33fb411ca8d6a89608f59fd8044","typeString":"literal_string \"No 0 address\""}],"id":5213,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1792:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1792:43:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5222,"nodeType":"ExpressionStatement","src":"1792:43:30"},{"expression":{"id":5229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":5223,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"1846:9:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":5226,"indexExpression":{"id":5224,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5206,"src":"1856:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1846:15:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5227,"indexExpression":{"id":5225,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5208,"src":"1862:2:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1846:19:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5228,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5210,"src":"1869:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1846:28:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5230,"nodeType":"ExpressionStatement","src":"1846:28:30"},{"expression":{"id":5235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5231,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"1884:11:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5233,"indexExpression":{"id":5232,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5208,"src":"1896:2:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1884:15:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5234,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5210,"src":"1903:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1884:24:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5236,"nodeType":"ExpressionStatement","src":"1884:24:30"},{"eventCall":{"arguments":[{"expression":{"id":5238,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1939:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1943:6:30","memberName":"sender","nodeType":"MemberAccess","src":"1939:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5240,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5206,"src":"1951:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":5243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1965:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1957:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5241,"name":"address","nodeType":"ElementaryTypeName","src":"1957:7:30","typeDescriptions":{}}},"id":5244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1957:10:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5245,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5208,"src":"1969:2:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5246,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5210,"src":"1973:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5237,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"1924:14:30","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":5247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1924:55:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5248,"nodeType":"EmitStatement","src":"1919:60:30"}]},"id":5250,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"1726:5:30","nodeType":"FunctionDefinition","parameters":{"id":5211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5206,"mutability":"mutable","name":"from","nameLocation":"1740:4:30","nodeType":"VariableDeclaration","scope":5250,"src":"1732:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5205,"name":"address","nodeType":"ElementaryTypeName","src":"1732:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5208,"mutability":"mutable","name":"id","nameLocation":"1754:2:30","nodeType":"VariableDeclaration","scope":5250,"src":"1746:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5207,"name":"uint256","nodeType":"ElementaryTypeName","src":"1746:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5210,"mutability":"mutable","name":"value","nameLocation":"1766:5:30","nodeType":"VariableDeclaration","scope":5250,"src":"1758:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5209,"name":"uint256","nodeType":"ElementaryTypeName","src":"1758:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1731:41:30"},"returnParameters":{"id":5212,"nodeType":"ParameterList","parameters":[],"src":"1782:0:30"},"scope":5557,"src":"1717:269:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5296,"nodeType":"Block","src":"2079:196:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5262,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5254,"src":"2097:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2111:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2103:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5263,"name":"address","nodeType":"ElementaryTypeName","src":"2103:7:30","typeDescriptions":{}}},"id":5266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2103:10:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2097:16:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f20302061646472657373","id":5268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2115:14:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_06e7d39024ef2c9fc07dd7c37aef49764e84d33fb411ca8d6a89608f59fd8044","typeString":"literal_string \"No 0 address\""},"value":"No 0 address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_06e7d39024ef2c9fc07dd7c37aef49764e84d33fb411ca8d6a89608f59fd8044","typeString":"literal_string \"No 0 address\""}],"id":5261,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2089:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2089:41:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5270,"nodeType":"ExpressionStatement","src":"2089:41:30"},{"expression":{"id":5277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":5271,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"2141:9:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":5274,"indexExpression":{"id":5272,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"2151:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2141:15:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5275,"indexExpression":{"id":5273,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5256,"src":"2157:2:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2141:19:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5276,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5258,"src":"2164:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2141:28:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5278,"nodeType":"ExpressionStatement","src":"2141:28:30"},{"expression":{"id":5285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":5279,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"2179:9:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":5282,"indexExpression":{"id":5280,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5254,"src":"2189:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2179:13:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5283,"indexExpression":{"id":5281,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5256,"src":"2193:2:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2179:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5284,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5258,"src":"2200:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2179:26:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5286,"nodeType":"ExpressionStatement","src":"2179:26:30"},{"eventCall":{"arguments":[{"expression":{"id":5288,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2236:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2240:6:30","memberName":"sender","nodeType":"MemberAccess","src":"2236:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5290,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5252,"src":"2248:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5291,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5254,"src":"2254:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5292,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5256,"src":"2258:2:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5293,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5258,"src":"2262:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5287,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"2221:14:30","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":5294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2221:47:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5295,"nodeType":"EmitStatement","src":"2216:52:30"}]},"id":5297,"implemented":true,"kind":"function","modifiers":[],"name":"_transferSingle","nameLocation":"2001:15:30","nodeType":"FunctionDefinition","parameters":{"id":5259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5252,"mutability":"mutable","name":"from","nameLocation":"2025:4:30","nodeType":"VariableDeclaration","scope":5297,"src":"2017:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5251,"name":"address","nodeType":"ElementaryTypeName","src":"2017:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5254,"mutability":"mutable","name":"to","nameLocation":"2039:2:30","nodeType":"VariableDeclaration","scope":5297,"src":"2031:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5253,"name":"address","nodeType":"ElementaryTypeName","src":"2031:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5256,"mutability":"mutable","name":"id","nameLocation":"2051:2:30","nodeType":"VariableDeclaration","scope":5297,"src":"2043:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5255,"name":"uint256","nodeType":"ElementaryTypeName","src":"2043:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5258,"mutability":"mutable","name":"value","nameLocation":"2063:5:30","nodeType":"VariableDeclaration","scope":5297,"src":"2055:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5257,"name":"uint256","nodeType":"ElementaryTypeName","src":"2055:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2016:53:30"},"returnParameters":{"id":5260,"nodeType":"ParameterList","parameters":[],"src":"2079:0:30"},"scope":5557,"src":"1992:283:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5374,"nodeType":"Block","src":"2391:365:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5311,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5301,"src":"2409:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2423:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2415:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5312,"name":"address","nodeType":"ElementaryTypeName","src":"2415:7:30","typeDescriptions":{}}},"id":5315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2415:10:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2409:16:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f20302061646472657373","id":5317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2427:14:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_06e7d39024ef2c9fc07dd7c37aef49764e84d33fb411ca8d6a89608f59fd8044","typeString":"literal_string \"No 0 address\""},"value":"No 0 address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_06e7d39024ef2c9fc07dd7c37aef49764e84d33fb411ca8d6a89608f59fd8044","typeString":"literal_string \"No 0 address\""}],"id":5310,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2401:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2401:41:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5319,"nodeType":"ExpressionStatement","src":"2401:41:30"},{"assignments":[5321],"declarations":[{"constant":false,"id":5321,"mutability":"mutable","name":"len","nameLocation":"2461:3:30","nodeType":"VariableDeclaration","scope":5374,"src":"2453:11:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5320,"name":"uint256","nodeType":"ElementaryTypeName","src":"2453:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5324,"initialValue":{"expression":{"id":5322,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5304,"src":"2467:3:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2471:6:30","memberName":"length","nodeType":"MemberAccess","src":"2467:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2453:24:30"},{"body":{"id":5363,"nodeType":"Block","src":"2521:165:30","statements":[{"assignments":[5336],"declarations":[{"constant":false,"id":5336,"mutability":"mutable","name":"id","nameLocation":"2543:2:30","nodeType":"VariableDeclaration","scope":5363,"src":"2535:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5335,"name":"uint256","nodeType":"ElementaryTypeName","src":"2535:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5340,"initialValue":{"baseExpression":{"id":5337,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5304,"src":"2548:3:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5339,"indexExpression":{"id":5338,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5326,"src":"2552:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2548:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2535:19:30"},{"assignments":[5342],"declarations":[{"constant":false,"id":5342,"mutability":"mutable","name":"value","nameLocation":"2576:5:30","nodeType":"VariableDeclaration","scope":5363,"src":"2568:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5341,"name":"uint256","nodeType":"ElementaryTypeName","src":"2568:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5346,"initialValue":{"baseExpression":{"id":5343,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5307,"src":"2584:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5345,"indexExpression":{"id":5344,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5326,"src":"2591:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2584:9:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2568:25:30"},{"expression":{"id":5353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":5347,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"2607:9:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":5350,"indexExpression":{"id":5348,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5299,"src":"2617:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2607:15:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5351,"indexExpression":{"id":5349,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5336,"src":"2623:2:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2607:19:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5352,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5342,"src":"2630:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2607:28:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5354,"nodeType":"ExpressionStatement","src":"2607:28:30"},{"expression":{"id":5361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":5355,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"2649:9:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":5358,"indexExpression":{"id":5356,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5301,"src":"2659:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2649:13:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5359,"indexExpression":{"id":5357,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5336,"src":"2663:2:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2649:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5360,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5342,"src":"2670:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2649:26:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5362,"nodeType":"ExpressionStatement","src":"2649:26:30"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5329,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5326,"src":"2507:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5330,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5321,"src":"2511:3:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2507:7:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5364,"initializationExpression":{"assignments":[5326],"declarations":[{"constant":false,"id":5326,"mutability":"mutable","name":"i","nameLocation":"2500:1:30","nodeType":"VariableDeclaration","scope":5364,"src":"2492:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5325,"name":"uint256","nodeType":"ElementaryTypeName","src":"2492:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5328,"initialValue":{"hexValue":"30","id":5327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2504:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2492:13:30"},"loopExpression":{"expression":{"id":5333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2516:3:30","subExpression":{"id":5332,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5326,"src":"2516:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5334,"nodeType":"ExpressionStatement","src":"2516:3:30"},"nodeType":"ForStatement","src":"2487:199:30"},{"eventCall":{"arguments":[{"expression":{"id":5366,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2715:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2719:6:30","memberName":"sender","nodeType":"MemberAccess","src":"2715:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5368,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5299,"src":"2727:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5369,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5301,"src":"2733:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5370,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5304,"src":"2737:3:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":5371,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5307,"src":"2742:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"id":5365,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"2701:13:30","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":5372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2701:48:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5373,"nodeType":"EmitStatement","src":"2696:53:30"}]},"id":5375,"implemented":true,"kind":"function","modifiers":[],"name":"_transferBatch","nameLocation":"2290:14:30","nodeType":"FunctionDefinition","parameters":{"id":5308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5299,"mutability":"mutable","name":"from","nameLocation":"2313:4:30","nodeType":"VariableDeclaration","scope":5375,"src":"2305:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5298,"name":"address","nodeType":"ElementaryTypeName","src":"2305:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5301,"mutability":"mutable","name":"to","nameLocation":"2327:2:30","nodeType":"VariableDeclaration","scope":5375,"src":"2319:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5300,"name":"address","nodeType":"ElementaryTypeName","src":"2319:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5304,"mutability":"mutable","name":"ids","nameLocation":"2350:3:30","nodeType":"VariableDeclaration","scope":5375,"src":"2331:22:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5302,"name":"uint256","nodeType":"ElementaryTypeName","src":"2331:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5303,"nodeType":"ArrayTypeName","src":"2331:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5307,"mutability":"mutable","name":"values","nameLocation":"2374:6:30","nodeType":"VariableDeclaration","scope":5375,"src":"2355:25:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5305,"name":"uint256","nodeType":"ElementaryTypeName","src":"2355:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5306,"nodeType":"ArrayTypeName","src":"2355:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2304:77:30"},"returnParameters":{"id":5309,"nodeType":"ParameterList","parameters":[],"src":"2391:0:30"},"scope":5557,"src":"2281:475:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5401,"nodeType":"Block","src":"2848:129:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5383,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5377,"src":"2866:5:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5384,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2875:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2879:6:30","memberName":"sender","nodeType":"MemberAccess","src":"2875:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2866:19:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":5387,"name":"_approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5379,"src":"2889:9:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2866:32:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":5389,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5063,"src":"2902:16:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":5391,"indexExpression":{"id":5390,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5377,"src":"2919:5:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2902:23:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5394,"indexExpression":{"expression":{"id":5392,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2926:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2930:6:30","memberName":"sender","nodeType":"MemberAccess","src":"2926:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2902:35:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":5395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2941:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2902:43:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2866:79:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73666572206e6f7420616c6c6f776564","id":5398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2947:22:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_783643401de0e8e7f0730d31a292834de04949f570394ff814aa952c1426c9b7","typeString":"literal_string \"Transfer not allowed\""},"value":"Transfer not allowed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_783643401de0e8e7f0730d31a292834de04949f570394ff814aa952c1426c9b7","typeString":"literal_string \"Transfer not allowed\""}],"id":5382,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2858:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2858:112:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5400,"nodeType":"ExpressionStatement","src":"2858:112:30"}]},"id":5402,"implemented":true,"kind":"function","modifiers":[],"name":"_requireTransferAllowed","nameLocation":"2771:23:30","nodeType":"FunctionDefinition","parameters":{"id":5380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5377,"mutability":"mutable","name":"_from","nameLocation":"2803:5:30","nodeType":"VariableDeclaration","scope":5402,"src":"2795:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5376,"name":"address","nodeType":"ElementaryTypeName","src":"2795:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5379,"mutability":"mutable","name":"_approved","nameLocation":"2815:9:30","nodeType":"VariableDeclaration","scope":5402,"src":"2810:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5378,"name":"bool","nodeType":"ElementaryTypeName","src":"2810:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2794:31:30"},"returnParameters":{"id":5381,"nodeType":"ParameterList","parameters":[],"src":"2848:0:30"},"scope":5557,"src":"2762:215:30","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[375],"body":{"id":5455,"nodeType":"Block","src":"3101:412:30","statements":[{"expression":{"arguments":[{"id":5417,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5404,"src":"3135:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"66616c7365","id":5418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3141:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5416,"name":"_requireTransferAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5402,"src":"3111:23:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool) view"}},"id":5419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3111:36:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5420,"nodeType":"ExpressionStatement","src":"3111:36:30"},{"expression":{"arguments":[{"id":5422,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5404,"src":"3174:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5423,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5406,"src":"3180:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5424,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5408,"src":"3184:2:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5425,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5410,"src":"3188:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5421,"name":"_transferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5297,"src":"3158:15:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":5426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3158:36:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5427,"nodeType":"ExpressionStatement","src":"3158:36:30"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5428,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5406,"src":"3209:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3212:10:30","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":792,"src":"3209:13:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":5430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3209:15:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5454,"nodeType":"IfStatement","src":"3205:302:30","trueBody":{"id":5453,"nodeType":"Block","src":"3226:281:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":5449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":5436,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3309:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3313:6:30","memberName":"sender","nodeType":"MemberAccess","src":"3309:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5438,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5404,"src":"3321:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5439,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5408,"src":"3327:2:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5440,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5410,"src":"3331:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5441,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5412,"src":"3338:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[{"id":5433,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5406,"src":"3287:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5432,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"3265:21:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$463_$","typeString":"type(contract IERC1155TokenReceiver)"}},"id":5434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3265:25:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155TokenReceiver_$463","typeString":"contract IERC1155TokenReceiver"}},"id":5435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3291:17:30","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":445,"src":"3265:43:30","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":5442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3265:78:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"hexValue":"6f6e45524331313535526563656976656428616464726573732c616464726573732c75696e743235362c75696e743235362c627974657329","id":5446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3384:58:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_f23a6e612e1ff4830e658fe43f4e3cb4a5f8170bd5d9e69fb5d7a7fa9e4fdf97","typeString":"literal_string \"onERC1155Received(address,address,uint256,uint256,bytes)\""},"value":"onERC1155Received(address,address,uint256,uint256,bytes)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f23a6e612e1ff4830e658fe43f4e3cb4a5f8170bd5d9e69fb5d7a7fa9e4fdf97","typeString":"literal_string \"onERC1155Received(address,address,uint256,uint256,bytes)\""}],"id":5445,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3374:9:30","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3374:69:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5444,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3367:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":5443,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3367:6:30","typeDescriptions":{}}},"id":5448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3367:77:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3265:179:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57726f6e672072657475726e2076616c7565","id":5450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3462:20:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_ada4aeb7ea242809802532d8c6413fac84141de01193a0a39d2bb9201d3fe9d2","typeString":"literal_string \"Wrong return value\""},"value":"Wrong return value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ada4aeb7ea242809802532d8c6413fac84141de01193a0a39d2bb9201d3fe9d2","typeString":"literal_string \"Wrong return value\""}],"id":5431,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3240:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3240:256:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5452,"nodeType":"ExpressionStatement","src":"3240:256:30"}]}}]},"functionSelector":"f242432a","id":5456,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2992:16:30","nodeType":"FunctionDefinition","overrides":{"id":5414,"nodeType":"OverrideSpecifier","overrides":[],"src":"3092:8:30"},"parameters":{"id":5413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5404,"mutability":"mutable","name":"from","nameLocation":"3017:4:30","nodeType":"VariableDeclaration","scope":5456,"src":"3009:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5403,"name":"address","nodeType":"ElementaryTypeName","src":"3009:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5406,"mutability":"mutable","name":"to","nameLocation":"3031:2:30","nodeType":"VariableDeclaration","scope":5456,"src":"3023:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5405,"name":"address","nodeType":"ElementaryTypeName","src":"3023:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5408,"mutability":"mutable","name":"id","nameLocation":"3043:2:30","nodeType":"VariableDeclaration","scope":5456,"src":"3035:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5407,"name":"uint256","nodeType":"ElementaryTypeName","src":"3035:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5410,"mutability":"mutable","name":"value","nameLocation":"3055:5:30","nodeType":"VariableDeclaration","scope":5456,"src":"3047:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5409,"name":"uint256","nodeType":"ElementaryTypeName","src":"3047:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5412,"mutability":"mutable","name":"data","nameLocation":"3077:4:30","nodeType":"VariableDeclaration","scope":5456,"src":"3062:19:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5411,"name":"bytes","nodeType":"ElementaryTypeName","src":"3062:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3008:74:30"},"returnParameters":{"id":5415,"nodeType":"ParameterList","parameters":[],"src":"3101:0:30"},"scope":5557,"src":"2983:530:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[390],"body":{"id":5520,"nodeType":"Block","src":"3712:503:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5473,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5463,"src":"3730:3:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3734:6:30","memberName":"length","nodeType":"MemberAccess","src":"3730:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5475,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5466,"src":"3744:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3751:6:30","memberName":"length","nodeType":"MemberAccess","src":"3744:13:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3730:27:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313135353a204c656e677468206d69736d61746368","id":5478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3759:26:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_63300937074a69d4b900bf9e5a4ae75fd1b83e0b8409cb45984013a5c93beda3","typeString":"literal_string \"ERC1155: Length mismatch\""},"value":"ERC1155: Length mismatch"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_63300937074a69d4b900bf9e5a4ae75fd1b83e0b8409cb45984013a5c93beda3","typeString":"literal_string \"ERC1155: Length mismatch\""}],"id":5472,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3722:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3722:64:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5480,"nodeType":"ExpressionStatement","src":"3722:64:30"},{"expression":{"arguments":[{"id":5482,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5458,"src":"3820:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"66616c7365","id":5483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3826:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5481,"name":"_requireTransferAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5402,"src":"3796:23:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool) view"}},"id":5484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3796:36:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5485,"nodeType":"ExpressionStatement","src":"3796:36:30"},{"expression":{"arguments":[{"id":5487,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5458,"src":"3858:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5488,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5460,"src":"3864:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5489,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5463,"src":"3868:3:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":5490,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5466,"src":"3873:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"id":5486,"name":"_transferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5375,"src":"3843:14:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$","typeString":"function (address,address,uint256[] calldata,uint256[] calldata)"}},"id":5491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3843:37:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5492,"nodeType":"ExpressionStatement","src":"3843:37:30"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5493,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5460,"src":"3895:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3898:10:30","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":792,"src":"3895:13:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":5495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3895:15:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5519,"nodeType":"IfStatement","src":"3891:318:30","trueBody":{"id":5518,"nodeType":"Block","src":"3912:297:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":5514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":5501,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4000:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4004:6:30","memberName":"sender","nodeType":"MemberAccess","src":"4000:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5503,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5458,"src":"4012:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5504,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5463,"src":"4018:3:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":5505,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5466,"src":"4023:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":5506,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5468,"src":"4031:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[{"id":5498,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5460,"src":"3973:2:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5497,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"3951:21:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$463_$","typeString":"type(contract IERC1155TokenReceiver)"}},"id":5499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3951:25:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155TokenReceiver_$463","typeString":"contract IERC1155TokenReceiver"}},"id":5500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3977:22:30","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":462,"src":"3951:48:30","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":5507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3951:85:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"hexValue":"6f6e455243313135354261746368526563656976656428616464726573732c616464726573732c75696e743235365b5d2c75696e743235365b5d2c627974657329","id":5511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4077:67:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_bc197c819b3e337a6f9652dd10becd7eef83032af3b9d958d3d42f6694146621","typeString":"literal_string \"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\""},"value":"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_bc197c819b3e337a6f9652dd10becd7eef83032af3b9d958d3d42f6694146621","typeString":"literal_string \"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\""}],"id":5510,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4067:9:30","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":5512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4067:78:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4060:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":5508,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4060:6:30","typeDescriptions":{}}},"id":5513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4060:86:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"3951:195:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57726f6e672072657475726e2076616c7565","id":5515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4164:20:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_ada4aeb7ea242809802532d8c6413fac84141de01193a0a39d2bb9201d3fe9d2","typeString":"literal_string \"Wrong return value\""},"value":"Wrong return value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ada4aeb7ea242809802532d8c6413fac84141de01193a0a39d2bb9201d3fe9d2","typeString":"literal_string \"Wrong return value\""}],"id":5496,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3926:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3926:272:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5517,"nodeType":"ExpressionStatement","src":"3926:272:30"}]}}]},"functionSelector":"2eb2c2d6","id":5521,"implemented":true,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"3528:21:30","nodeType":"FunctionDefinition","overrides":{"id":5470,"nodeType":"OverrideSpecifier","overrides":[],"src":"3703:8:30"},"parameters":{"id":5469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5458,"mutability":"mutable","name":"from","nameLocation":"3567:4:30","nodeType":"VariableDeclaration","scope":5521,"src":"3559:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5457,"name":"address","nodeType":"ElementaryTypeName","src":"3559:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5460,"mutability":"mutable","name":"to","nameLocation":"3589:2:30","nodeType":"VariableDeclaration","scope":5521,"src":"3581:10:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5459,"name":"address","nodeType":"ElementaryTypeName","src":"3581:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5463,"mutability":"mutable","name":"ids","nameLocation":"3620:3:30","nodeType":"VariableDeclaration","scope":5521,"src":"3601:22:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5461,"name":"uint256","nodeType":"ElementaryTypeName","src":"3601:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5462,"nodeType":"ArrayTypeName","src":"3601:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5466,"mutability":"mutable","name":"values","nameLocation":"3652:6:30","nodeType":"VariableDeclaration","scope":5521,"src":"3633:25:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5464,"name":"uint256","nodeType":"ElementaryTypeName","src":"3633:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5465,"nodeType":"ArrayTypeName","src":"3633:9:30","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5468,"mutability":"mutable","name":"data","nameLocation":"3683:4:30","nodeType":"VariableDeclaration","scope":5521,"src":"3668:19:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5467,"name":"bytes","nodeType":"ElementaryTypeName","src":"3668:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3549:144:30"},"returnParameters":{"id":5471,"nodeType":"ParameterList","parameters":[],"src":"3712:0:30"},"scope":5557,"src":"3519:696:30","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[418],"body":{"id":5545,"nodeType":"Block","src":"4307:128:30","statements":[{"expression":{"id":5536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":5529,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5063,"src":"4317:16:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":5533,"indexExpression":{"expression":{"id":5530,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4334:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4338:6:30","memberName":"sender","nodeType":"MemberAccess","src":"4334:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4317:28:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5534,"indexExpression":{"id":5532,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5523,"src":"4346:8:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4317:38:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5535,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5525,"src":"4358:8:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4317:49:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5537,"nodeType":"ExpressionStatement","src":"4317:49:30"},{"eventCall":{"arguments":[{"expression":{"id":5539,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4397:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4401:6:30","memberName":"sender","nodeType":"MemberAccess","src":"4397:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5541,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5523,"src":"4409:8:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5542,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5525,"src":"4419:8:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5538,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"4382:14:30","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":5543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4382:46:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5544,"nodeType":"EmitStatement","src":"4377:51:30"}]},"functionSelector":"a22cb465","id":5546,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4230:17:30","nodeType":"FunctionDefinition","overrides":{"id":5527,"nodeType":"OverrideSpecifier","overrides":[],"src":"4298:8:30"},"parameters":{"id":5526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5523,"mutability":"mutable","name":"operator","nameLocation":"4256:8:30","nodeType":"VariableDeclaration","scope":5546,"src":"4248:16:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5522,"name":"address","nodeType":"ElementaryTypeName","src":"4248:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5525,"mutability":"mutable","name":"approved","nameLocation":"4271:8:30","nodeType":"VariableDeclaration","scope":5546,"src":"4266:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5524,"name":"bool","nodeType":"ElementaryTypeName","src":"4266:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4247:33:30"},"returnParameters":{"id":5528,"nodeType":"ParameterList","parameters":[],"src":"4307:0:30"},"scope":5557,"src":"4221:214:30","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":5555,"nodeType":"Block","src":"4521:26:30","statements":[{"expression":{"hexValue":"","id":5553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4538:2:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":5552,"id":5554,"nodeType":"Return","src":"4531:9:30"}]},"functionSelector":"0e89341c","id":5556,"implemented":true,"kind":"function","modifiers":[],"name":"uri","nameLocation":"4450:3:30","nodeType":"FunctionDefinition","parameters":{"id":5549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5548,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5556,"src":"4454:7:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5547,"name":"uint256","nodeType":"ElementaryTypeName","src":"4454:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4453:21:30"},"returnParameters":{"id":5552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5551,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5556,"src":"4506:13:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5550,"name":"string","nodeType":"ElementaryTypeName","src":"4506:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4505:15:30"},"scope":5557,"src":"4441:106:30","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":5558,"src":"370:4179:30","usedErrors":[]}],"src":"32:4518:30"},"id":30},"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155TokenReceiver.sol":{"ast":{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155TokenReceiver.sol","exportedSymbols":{"ERC1155TokenReceiver":[5603],"IERC1155TokenReceiver":[463]},"id":5604,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5559,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:31"},{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol","file":"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol","id":5560,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5604,"sourceUnit":464,"src":"57:86:31","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5561,"name":"IERC1155TokenReceiver","nameLocations":["178:21:31"],"nodeType":"IdentifierPath","referencedDeclaration":463,"src":"178:21:31"},"id":5562,"nodeType":"InheritanceSpecifier","src":"178:21:31"}],"canonicalName":"ERC1155TokenReceiver","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5603,"linearizedBaseContracts":[5603,463],"name":"ERC1155TokenReceiver","nameLocation":"154:20:31","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[445],"body":{"id":5580,"nodeType":"Block","src":"428:114:31","statements":[{"expression":{"hexValue":"30786632336136653631","id":5578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"445:10:31","typeDescriptions":{"typeIdentifier":"t_rational_4063915617_by_1","typeString":"int_const 4063915617"},"value":"0xf23a6e61"},"functionReturnParameters":5577,"id":5579,"nodeType":"Return","src":"438:17:31"}]},"functionSelector":"f23a6e61","id":5581,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"272:17:31","nodeType":"FunctionDefinition","overrides":{"id":5574,"nodeType":"OverrideSpecifier","overrides":[],"src":"402:8:31"},"parameters":{"id":5573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5564,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5581,"src":"299:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5563,"name":"address","nodeType":"ElementaryTypeName","src":"299:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5581,"src":"316:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5565,"name":"address","nodeType":"ElementaryTypeName","src":"316:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5568,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5581,"src":"333:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5567,"name":"uint256","nodeType":"ElementaryTypeName","src":"333:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5581,"src":"350:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5569,"name":"uint256","nodeType":"ElementaryTypeName","src":"350:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5572,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5581,"src":"367:14:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5571,"name":"bytes","nodeType":"ElementaryTypeName","src":"367:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"289:98:31"},"returnParameters":{"id":5577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5576,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5581,"src":"420:6:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5575,"name":"bytes4","nodeType":"ElementaryTypeName","src":"420:6:31","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"419:8:31"},"scope":5603,"src":"263:279:31","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[462],"body":{"id":5601,"nodeType":"Block","src":"740:123:31","statements":[{"expression":{"hexValue":"30786263313937633831","id":5599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"757:10:31","typeDescriptions":{"typeIdentifier":"t_rational_3155786881_by_1","typeString":"int_const 3155786881"},"value":"0xbc197c81"},"functionReturnParameters":5598,"id":5600,"nodeType":"Return","src":"750:17:31"}]},"functionSelector":"bc197c81","id":5602,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"557:22:31","nodeType":"FunctionDefinition","overrides":{"id":5595,"nodeType":"OverrideSpecifier","overrides":[],"src":"714:8:31"},"parameters":{"id":5594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5583,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5602,"src":"589:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5582,"name":"address","nodeType":"ElementaryTypeName","src":"589:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5585,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5602,"src":"606:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5584,"name":"address","nodeType":"ElementaryTypeName","src":"606:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5588,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5602,"src":"623:18:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5586,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5587,"nodeType":"ArrayTypeName","src":"623:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5591,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5602,"src":"651:18:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5589,"name":"uint256","nodeType":"ElementaryTypeName","src":"651:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5590,"nodeType":"ArrayTypeName","src":"651:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5593,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5602,"src":"679:14:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5592,"name":"bytes","nodeType":"ElementaryTypeName","src":"679:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"579:120:31"},"returnParameters":{"id":5598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5602,"src":"732:6:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5596,"name":"bytes4","nodeType":"ElementaryTypeName","src":"732:6:31","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"731:8:31"},"scope":5603,"src":"548:315:31","stateMutability":"pure","virtual":false,"visibility":"external"}],"scope":5604,"src":"145:720:31","usedErrors":[]}],"src":"32:834:31"},"id":31},"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC721TokenReceiver.sol":{"ast":{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC721TokenReceiver.sol","exportedSymbols":{"ERC721TokenReceiver":[5626],"IERC721TokenReceiver":[717]},"id":5627,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5605,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:32"},{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol","file":"@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol","id":5606,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5627,"sourceUnit":718,"src":"57:85:32","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5607,"name":"IERC721TokenReceiver","nameLocations":["176:20:32"],"nodeType":"IdentifierPath","referencedDeclaration":717,"src":"176:20:32"},"id":5608,"nodeType":"InheritanceSpecifier","src":"176:20:32"}],"canonicalName":"ERC721TokenReceiver","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5626,"linearizedBaseContracts":[5626,717],"name":"ERC721TokenReceiver","nameLocation":"153:19:32","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[716],"body":{"id":5624,"nodeType":"Block","src":"312:105:32","statements":[{"expression":{"hexValue":"30783135306237613032","id":5622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"329:10:32","typeDescriptions":{"typeIdentifier":"t_rational_353073666_by_1","typeString":"int_const 353073666"},"value":"0x150b7a02"},"functionReturnParameters":5621,"id":5623,"nodeType":"Return","src":"322:17:32"}]},"functionSelector":"150b7a02","id":5625,"implemented":true,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"212:16:32","nodeType":"FunctionDefinition","overrides":{"id":5618,"nodeType":"OverrideSpecifier","overrides":[],"src":"286:8:32"},"parameters":{"id":5617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5625,"src":"229:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5609,"name":"address","nodeType":"ElementaryTypeName","src":"229:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5612,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5625,"src":"238:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5611,"name":"address","nodeType":"ElementaryTypeName","src":"238:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5614,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5625,"src":"247:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5613,"name":"uint256","nodeType":"ElementaryTypeName","src":"247:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5616,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5625,"src":"256:14:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5615,"name":"bytes","nodeType":"ElementaryTypeName","src":"256:5:32","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"228:43:32"},"returnParameters":{"id":5621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5620,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5625,"src":"304:6:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5619,"name":"bytes4","nodeType":"ElementaryTypeName","src":"304:6:32","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"303:8:32"},"scope":5626,"src":"203:214:32","stateMutability":"pure","virtual":false,"visibility":"external"}],"scope":5627,"src":"144:275:32","usedErrors":[]}],"src":"32:388:32"},"id":32},"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol":{"ast":{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol","exportedSymbols":{"Asset":[4632],"AssetRegister":[4927],"BoringAddress":[815],"BoringMath":[5046],"ERC1155":[5557],"IERC1155":[428],"IERC1155TokenReceiver":[463],"IERC165":[473],"IStrategy":[8364],"IYieldBox":[8538],"NO_STRATEGY":[8373],"NativeToken":[5639],"NativeTokenFactory":[6069],"TokenType":[8288]},"id":6070,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5628,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:33"},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol","file":"./AssetRegister.sol","id":5629,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6070,"sourceUnit":4928,"src":"56:29:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/BoringMath.sol","file":"./BoringMath.sol","id":5630,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6070,"sourceUnit":5047,"src":"86:26:33","symbolAliases":[],"unitAlias":""},{"canonicalName":"NativeToken","id":5639,"members":[{"constant":false,"id":5632,"mutability":"mutable","name":"name","nameLocation":"146:4:33","nodeType":"VariableDeclaration","scope":5639,"src":"139:11:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5631,"name":"string","nodeType":"ElementaryTypeName","src":"139:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5634,"mutability":"mutable","name":"symbol","nameLocation":"163:6:33","nodeType":"VariableDeclaration","scope":5639,"src":"156:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5633,"name":"string","nodeType":"ElementaryTypeName","src":"156:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5636,"mutability":"mutable","name":"decimals","nameLocation":"181:8:33","nodeType":"VariableDeclaration","scope":5639,"src":"175:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5635,"name":"uint8","nodeType":"ElementaryTypeName","src":"175:5:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":5638,"mutability":"mutable","name":"uri","nameLocation":"202:3:33","nodeType":"VariableDeclaration","scope":5639,"src":"195:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":5637,"name":"string","nodeType":"ElementaryTypeName","src":"195:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"NativeToken","nameLocation":"121:11:33","nodeType":"StructDefinition","scope":6070,"src":"114:94:33","visibility":"public"},{"abstract":false,"baseContracts":[{"baseName":{"id":5641,"name":"AssetRegister","nameLocations":["607:13:33"],"nodeType":"IdentifierPath","referencedDeclaration":4927,"src":"607:13:33"},"id":5642,"nodeType":"InheritanceSpecifier","src":"607:13:33"}],"canonicalName":"NativeTokenFactory","contractDependencies":[],"contractKind":"contract","documentation":{"id":5640,"nodeType":"StructuredDocumentation","src":"210:365:33","text":"@title NativeTokenFactory\n @author BoringCrypto (@Boring_Crypto)\n @notice The NativeTokenFactory is a token factory to create ERC1155 tokens. This is used by YieldBox to create\n native tokens in YieldBox. These have many benefits:\n - low and predictable gas usage\n - simplified approval\n - no hidden features, all these tokens behave the same"},"fullyImplemented":true,"id":6069,"linearizedBaseContracts":[6069,4927,5557,428,473],"name":"NativeTokenFactory","nameLocation":"585:18:33","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5645,"libraryName":{"id":5643,"name":"BoringMath","nameLocations":["633:10:33"],"nodeType":"IdentifierPath","referencedDeclaration":5046,"src":"633:10:33"},"nodeType":"UsingForDirective","src":"627:29:33","typeName":{"id":5644,"name":"uint256","nodeType":"ElementaryTypeName","src":"648:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"functionSelector":"1f0ee4c3","id":5650,"mutability":"mutable","name":"nativeTokens","nameLocation":"701:12:33","nodeType":"VariableDeclaration","scope":6069,"src":"662:51:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NativeToken_$5639_storage_$","typeString":"mapping(uint256 => struct NativeToken)"},"typeName":{"id":5649,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5646,"name":"uint256","nodeType":"ElementaryTypeName","src":"670:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"662:31:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NativeToken_$5639_storage_$","typeString":"mapping(uint256 => struct NativeToken)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5648,"nodeType":"UserDefinedTypeName","pathNode":{"id":5647,"name":"NativeToken","nameLocations":["681:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":5639,"src":"681:11:33"},"referencedDeclaration":5639,"src":"681:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_NativeToken_$5639_storage_ptr","typeString":"struct NativeToken"}}},"visibility":"public"},{"constant":false,"functionSelector":"a123c33e","id":5654,"mutability":"mutable","name":"owner","nameLocation":"754:5:33","nodeType":"VariableDeclaration","scope":6069,"src":"719:40:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":5653,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5651,"name":"uint256","nodeType":"ElementaryTypeName","src":"727:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"719:27:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5652,"name":"address","nodeType":"ElementaryTypeName","src":"738:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"constant":false,"functionSelector":"2b800e3b","id":5658,"mutability":"mutable","name":"pendingOwner","nameLocation":"800:12:33","nodeType":"VariableDeclaration","scope":6069,"src":"765:47:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":5657,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5655,"name":"uint256","nodeType":"ElementaryTypeName","src":"773:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"765:27:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5656,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"0b0bcdebd2813328a89a9ed5971e5863201ed78fc4e0e2b271cceddb9ce90510","id":5670,"name":"TokenCreated","nameLocation":"825:12:33","nodeType":"EventDefinition","parameters":{"id":5669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5660,"indexed":true,"mutability":"mutable","name":"creator","nameLocation":"854:7:33","nodeType":"VariableDeclaration","scope":5670,"src":"838:23:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5659,"name":"address","nodeType":"ElementaryTypeName","src":"838:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5662,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"870:4:33","nodeType":"VariableDeclaration","scope":5670,"src":"863:11:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5661,"name":"string","nodeType":"ElementaryTypeName","src":"863:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5664,"indexed":false,"mutability":"mutable","name":"symbol","nameLocation":"883:6:33","nodeType":"VariableDeclaration","scope":5670,"src":"876:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5663,"name":"string","nodeType":"ElementaryTypeName","src":"876:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5666,"indexed":false,"mutability":"mutable","name":"decimals","nameLocation":"897:8:33","nodeType":"VariableDeclaration","scope":5670,"src":"891:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5665,"name":"uint8","nodeType":"ElementaryTypeName","src":"891:5:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":5668,"indexed":false,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:33","nodeType":"VariableDeclaration","scope":5670,"src":"907:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5667,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"837:86:33"},"src":"819:105:33"},{"anonymous":false,"eventSelector":"16b85f49bf01212961345d3016c9a531894accf62eb7680f2045d79185cc0ec0","id":5678,"name":"OwnershipTransferred","nameLocation":"935:20:33","nodeType":"EventDefinition","parameters":{"id":5677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5672,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"972:7:33","nodeType":"VariableDeclaration","scope":5678,"src":"956:23:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5671,"name":"uint256","nodeType":"ElementaryTypeName","src":"956:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5674,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"997:13:33","nodeType":"VariableDeclaration","scope":5678,"src":"981:29:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5673,"name":"address","nodeType":"ElementaryTypeName","src":"981:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5676,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1028:8:33","nodeType":"VariableDeclaration","scope":5678,"src":"1012:24:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5675,"name":"address","nodeType":"ElementaryTypeName","src":"1012:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"955:82:33"},"src":"929:109:33"},{"body":{"id":5698,"nodeType":"Block","src":"1416:102:33","statements":[{"expression":{"arguments":[{"id":5686,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5681,"src":"1450:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"baseExpression":{"baseExpression":{"id":5687,"name":"isApprovedForAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4645,"src":"1457:18:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$_$","typeString":"mapping(address => mapping(address => mapping(uint256 => bool)))"}},"id":5689,"indexExpression":{"id":5688,"name":"_from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5681,"src":"1476:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1457:25:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$","typeString":"mapping(address => mapping(uint256 => bool))"}},"id":5692,"indexExpression":{"expression":{"id":5690,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1483:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1487:6:33","memberName":"sender","nodeType":"MemberAccess","src":"1483:10:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1457:37:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":5694,"indexExpression":{"id":5693,"name":"_id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5683,"src":"1495:3:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1457:42:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5685,"name":"_requireTransferAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5402,"src":"1426:23:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool) view"}},"id":5695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1426:74:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5696,"nodeType":"ExpressionStatement","src":"1426:74:33"},{"id":5697,"nodeType":"PlaceholderStatement","src":"1510:1:33"}]},"documentation":{"id":5679,"nodeType":"StructuredDocumentation","src":"1129:237:33","text":"Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\n If 'from' is msg.sender, it's allowed.\n If 'msg.sender' is an address (an operator) that is approved by 'from', it's allowed."},"id":5699,"name":"allowed","nameLocation":"1380:7:33","nodeType":"ModifierDefinition","parameters":{"id":5684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5681,"mutability":"mutable","name":"_from","nameLocation":"1396:5:33","nodeType":"VariableDeclaration","scope":5699,"src":"1388:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5680,"name":"address","nodeType":"ElementaryTypeName","src":"1388:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5683,"mutability":"mutable","name":"_id","nameLocation":"1411:3:33","nodeType":"VariableDeclaration","scope":5699,"src":"1403:11:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5682,"name":"uint256","nodeType":"ElementaryTypeName","src":"1403:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1387:28:33"},"src":"1371:147:33","virtual":false,"visibility":"internal"},{"body":{"id":5715,"nodeType":"Block","src":"1698:97:33","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5705,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1716:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1720:6:33","memberName":"sender","nodeType":"MemberAccess","src":"1716:10:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"id":5707,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5654,"src":"1730:5:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5709,"indexExpression":{"id":5708,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5702,"src":"1736:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1730:14:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1716:28:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e54463a2063616c6c6572206973206e6f7420746865206f776e6572","id":5711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1746:30:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_dda496a942b85f262f4914929a15ba37a7ca7d612a6bfba61f5e76ab5eaf7013","typeString":"literal_string \"NTF: caller is not the owner\""},"value":"NTF: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dda496a942b85f262f4914929a15ba37a7ca7d612a6bfba61f5e76ab5eaf7013","typeString":"literal_string \"NTF: caller is not the owner\""}],"id":5704,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1708:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1708:69:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5713,"nodeType":"ExpressionStatement","src":"1708:69:33"},{"id":5714,"nodeType":"PlaceholderStatement","src":"1787:1:33"}]},"documentation":{"id":5700,"nodeType":"StructuredDocumentation","src":"1524:133:33","text":"@notice Only allows the `owner` to execute the function.\n @param tokenId The `tokenId` that the sender has to be owner of."},"id":5716,"name":"onlyOwner","nameLocation":"1671:9:33","nodeType":"ModifierDefinition","parameters":{"id":5703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5702,"mutability":"mutable","name":"tokenId","nameLocation":"1689:7:33","nodeType":"VariableDeclaration","scope":5716,"src":"1681:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5701,"name":"uint256","nodeType":"ElementaryTypeName","src":"1681:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1680:17:33"},"src":"1662:133:33","virtual":false,"visibility":"internal"},{"body":{"id":5776,"nodeType":"Block","src":"2482:410:33","statements":[{"condition":{"id":5731,"name":"direct","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5723,"src":"2496:6:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5774,"nodeType":"Block","src":"2806:80:33","statements":[{"expression":{"id":5772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5768,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5658,"src":"2843:12:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5770,"indexExpression":{"id":5769,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"2856:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2843:21:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5771,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5721,"src":"2867:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2843:32:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5773,"nodeType":"ExpressionStatement","src":"2843:32:33"}]},"id":5775,"nodeType":"IfStatement","src":"2492:394:33","trueBody":{"id":5767,"nodeType":"Block","src":"2504:296:33","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5733,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5721,"src":"2548:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2568:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5735,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2560:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5734,"name":"address","nodeType":"ElementaryTypeName","src":"2560:7:33","typeDescriptions":{}}},"id":5737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2560:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2548:22:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":5739,"name":"renounce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5725,"src":"2574:8:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2548:34:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e54463a207a65726f2061646472657373","id":5741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2584:19:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_5246ca03210cb985f61bf17cf0668024d4db08343fafa78baca4c03170968554","typeString":"literal_string \"NTF: zero address\""},"value":"NTF: zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5246ca03210cb985f61bf17cf0668024d4db08343fafa78baca4c03170968554","typeString":"literal_string \"NTF: zero address\""}],"id":5732,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2540:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2540:64:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5743,"nodeType":"ExpressionStatement","src":"2540:64:33"},{"eventCall":{"arguments":[{"id":5745,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"2668:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":5746,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5654,"src":"2677:5:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5748,"indexExpression":{"id":5747,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"2683:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2677:14:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5749,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5721,"src":"2693:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5744,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5678,"src":"2647:20:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$returns$__$","typeString":"function (uint256,address,address)"}},"id":5750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2647:55:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5751,"nodeType":"EmitStatement","src":"2642:60:33"},{"expression":{"id":5756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5752,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5654,"src":"2716:5:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5754,"indexExpression":{"id":5753,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"2722:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2716:14:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5755,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5721,"src":"2733:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2716:25:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5757,"nodeType":"ExpressionStatement","src":"2716:25:33"},{"expression":{"id":5765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5758,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5658,"src":"2755:12:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5760,"indexExpression":{"id":5759,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"2768:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2755:21:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":5763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2787:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5762,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2779:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5761,"name":"address","nodeType":"ElementaryTypeName","src":"2779:7:33","typeDescriptions":{}}},"id":5764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2779:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2755:34:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5766,"nodeType":"ExpressionStatement","src":"2755:34:33"}]}}]},"documentation":{"id":5717,"nodeType":"StructuredDocumentation","src":"1801:560:33","text":"@notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\n Can only be invoked by the current `owner`.\n @param tokenId The `tokenId` of the token that ownership whose ownership will be transferred/renounced.\n @param newOwner Address of the new owner.\n @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\n @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."},"functionSelector":"5ba4d64e","id":5777,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5728,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"2473:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5729,"kind":"modifierInvocation","modifierName":{"id":5727,"name":"onlyOwner","nameLocations":["2463:9:33"],"nodeType":"IdentifierPath","referencedDeclaration":5716,"src":"2463:9:33"},"nodeType":"ModifierInvocation","src":"2463:18:33"}],"name":"transferOwnership","nameLocation":"2375:17:33","nodeType":"FunctionDefinition","parameters":{"id":5726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5719,"mutability":"mutable","name":"tokenId","nameLocation":"2401:7:33","nodeType":"VariableDeclaration","scope":5777,"src":"2393:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5718,"name":"uint256","nodeType":"ElementaryTypeName","src":"2393:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5721,"mutability":"mutable","name":"newOwner","nameLocation":"2418:8:33","nodeType":"VariableDeclaration","scope":5777,"src":"2410:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5720,"name":"address","nodeType":"ElementaryTypeName","src":"2410:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5723,"mutability":"mutable","name":"direct","nameLocation":"2433:6:33","nodeType":"VariableDeclaration","scope":5777,"src":"2428:11:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5722,"name":"bool","nodeType":"ElementaryTypeName","src":"2428:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5725,"mutability":"mutable","name":"renounce","nameLocation":"2446:8:33","nodeType":"VariableDeclaration","scope":5777,"src":"2441:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5724,"name":"bool","nodeType":"ElementaryTypeName","src":"2441:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2392:63:33"},"returnParameters":{"id":5730,"nodeType":"ParameterList","parameters":[],"src":"2482:0:33"},"scope":6069,"src":"2366:526:33","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5820,"nodeType":"Block","src":"3100:338:33","statements":[{"assignments":[5784],"declarations":[{"constant":false,"id":5784,"mutability":"mutable","name":"_pendingOwner","nameLocation":"3118:13:33","nodeType":"VariableDeclaration","scope":5820,"src":"3110:21:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5783,"name":"address","nodeType":"ElementaryTypeName","src":"3110:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5788,"initialValue":{"baseExpression":{"id":5785,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5658,"src":"3134:12:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5787,"indexExpression":{"id":5786,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"3147:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3134:21:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3110:45:33"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5790,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3192:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3196:6:33","memberName":"sender","nodeType":"MemberAccess","src":"3192:10:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5792,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5784,"src":"3206:13:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3192:27:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e54463a2063616c6c657220213d2070656e64696e67206f776e6572","id":5794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3221:30:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_551003c9bf429afafe88b7d9bb1ab03f76740a46a6751312ac558d393b12ce9e","typeString":"literal_string \"NTF: caller != pending owner\""},"value":"NTF: caller != pending owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_551003c9bf429afafe88b7d9bb1ab03f76740a46a6751312ac558d393b12ce9e","typeString":"literal_string \"NTF: caller != pending owner\""}],"id":5789,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3184:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3184:68:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5796,"nodeType":"ExpressionStatement","src":"3184:68:33"},{"eventCall":{"arguments":[{"id":5798,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"3308:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":5799,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5654,"src":"3317:5:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5801,"indexExpression":{"id":5800,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"3323:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3317:14:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5802,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5784,"src":"3333:13:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5797,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5678,"src":"3287:20:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$returns$__$","typeString":"function (uint256,address,address)"}},"id":5803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3287:60:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5804,"nodeType":"EmitStatement","src":"3282:65:33"},{"expression":{"id":5809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5805,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5654,"src":"3357:5:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5807,"indexExpression":{"id":5806,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"3363:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3357:14:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5808,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5784,"src":"3374:13:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3357:30:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5810,"nodeType":"ExpressionStatement","src":"3357:30:33"},{"expression":{"id":5818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5811,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5658,"src":"3397:12:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5813,"indexExpression":{"id":5812,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"3410:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3397:21:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":5816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3429:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5815,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3421:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5814,"name":"address","nodeType":"ElementaryTypeName","src":"3421:7:33","typeDescriptions":{}}},"id":5817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3421:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3397:34:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5819,"nodeType":"ExpressionStatement","src":"3397:34:33"}]},"documentation":{"id":5778,"nodeType":"StructuredDocumentation","src":"2898:149:33","text":"@notice Needs to be called by `pendingOwner` to claim ownership.\n @param tokenId The `tokenId` of the token that ownership is claimed for."},"functionSelector":"ce7f2714","id":5821,"implemented":true,"kind":"function","modifiers":[],"name":"claimOwnership","nameLocation":"3061:14:33","nodeType":"FunctionDefinition","parameters":{"id":5781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5780,"mutability":"mutable","name":"tokenId","nameLocation":"3084:7:33","nodeType":"VariableDeclaration","scope":5821,"src":"3076:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5779,"name":"uint256","nodeType":"ElementaryTypeName","src":"3076:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3075:17:33"},"returnParameters":{"id":5782,"nodeType":"ParameterList","parameters":[],"src":"3100:0:33"},"scope":6069,"src":"3052:386:33","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5905,"nodeType":"Block","src":"4017:794:33","statements":[{"expression":{"id":5840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5835,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5833,"src":"4187:7:33","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":5836,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"4197:6:33","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":5837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4204:6:33","memberName":"length","nodeType":"MemberAccess","src":"4197:13:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4211:4:33","memberName":"to32","nodeType":"MemberAccess","referencedDeclaration":5007,"src":"4197:18:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint32_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (uint32)"}},"id":5839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4197:20:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4187:30:33","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":5841,"nodeType":"ExpressionStatement","src":"4187:30:33"},{"expression":{"arguments":[{"expression":{"id":5843,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"4242:9:33","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":5844,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4252:6:33","memberName":"Native","nodeType":"MemberAccess","referencedDeclaration":8283,"src":"4242:16:33","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},{"arguments":[{"hexValue":"30","id":5847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4268:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5846,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4260:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5845,"name":"address","nodeType":"ElementaryTypeName","src":"4260:7:33","typeDescriptions":{}}},"id":5848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4260:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5849,"name":"NO_STRATEGY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8373,"src":"4272:11:33","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},{"id":5850,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5833,"src":"4285:7:33","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":5842,"name":"_registerAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4846,"src":"4227:14:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_TokenType_$8288_$_t_address_$_t_contract$_IStrategy_$8364_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenType,address,contract IStrategy,uint256) returns (uint256)"}},"id":5851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4227:66:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5852,"nodeType":"ExpressionStatement","src":"4227:66:33"},{"expression":{"id":5862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5853,"name":"nativeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5650,"src":"4485:12:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NativeToken_$5639_storage_$","typeString":"mapping(uint256 => struct NativeToken storage ref)"}},"id":5855,"indexExpression":{"id":5854,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5833,"src":"4498:7:33","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4485:21:33","typeDescriptions":{"typeIdentifier":"t_struct$_NativeToken_$5639_storage","typeString":"struct NativeToken storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5857,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5824,"src":"4521:4:33","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":5858,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5826,"src":"4527:6:33","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":5859,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5828,"src":"4535:8:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":5860,"name":"uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5830,"src":"4545:3:33","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":5856,"name":"NativeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5639,"src":"4509:11:33","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_NativeToken_$5639_storage_ptr_$","typeString":"type(struct NativeToken storage pointer)"}},"id":5861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4509:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_NativeToken_$5639_memory_ptr","typeString":"struct NativeToken memory"}},"src":"4485:64:33","typeDescriptions":{"typeIdentifier":"t_struct$_NativeToken_$5639_storage","typeString":"struct NativeToken storage ref"}},"id":5863,"nodeType":"ExpressionStatement","src":"4485:64:33"},{"expression":{"id":5869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5864,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5654,"src":"4559:5:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5866,"indexExpression":{"id":5865,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5833,"src":"4565:7:33","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4559:14:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5867,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4576:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4580:6:33","memberName":"sender","nodeType":"MemberAccess","src":"4576:10:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4559:27:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5870,"nodeType":"ExpressionStatement","src":"4559:27:33"},{"eventCall":{"arguments":[{"expression":{"id":5872,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4615:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4619:6:33","memberName":"sender","nodeType":"MemberAccess","src":"4615:10:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5874,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5824,"src":"4627:4:33","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":5875,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5826,"src":"4633:6:33","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":5876,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5828,"src":"4641:8:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":5877,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5833,"src":"4651:7:33","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":5871,"name":"TokenCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5670,"src":"4602:12:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint8_$_t_uint256_$returns$__$","typeString":"function (address,string memory,string memory,uint8,uint256)"}},"id":5878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4602:57:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5879,"nodeType":"EmitStatement","src":"4597:62:33"},{"eventCall":{"arguments":[{"expression":{"id":5881,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4689:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4693:6:33","memberName":"sender","nodeType":"MemberAccess","src":"4689:10:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":5885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4709:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5884,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4701:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5883,"name":"address","nodeType":"ElementaryTypeName","src":"4701:7:33","typeDescriptions":{}}},"id":5886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4701:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":5889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4721:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4713:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5887,"name":"address","nodeType":"ElementaryTypeName","src":"4713:7:33","typeDescriptions":{}}},"id":5890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4713:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5891,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5833,"src":"4725:7:33","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"hexValue":"30","id":5892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4734:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5880,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"4674:14:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":5893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4674:62:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5894,"nodeType":"EmitStatement","src":"4669:67:33"},{"eventCall":{"arguments":[{"id":5896,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5833,"src":"4772:7:33","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"arguments":[{"hexValue":"30","id":5899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4789:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5898,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4781:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5897,"name":"address","nodeType":"ElementaryTypeName","src":"4781:7:33","typeDescriptions":{}}},"id":5900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4781:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5901,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4793:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4797:6:33","memberName":"sender","nodeType":"MemberAccess","src":"4793:10:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5895,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5678,"src":"4751:20:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$returns$__$","typeString":"function (uint256,address,address)"}},"id":5903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4751:53:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5904,"nodeType":"EmitStatement","src":"4746:58:33"}]},"documentation":{"id":5822,"nodeType":"StructuredDocumentation","src":"3444:432:33","text":"@notice Create a new native token. This will be an ERC1155 token. If later it's needed as an ERC20 token it can\n be wrapped into an ERC20 token. Native support for ERC1155 tokens is growing though.\n @param name The name of the token.\n @param symbol The symbol of the token.\n @param decimals The number of decimals of the token (this is just for display purposes). Should be set to 18 in normal cases."},"functionSelector":"2482ee27","id":5906,"implemented":true,"kind":"function","modifiers":[],"name":"createToken","nameLocation":"3890:11:33","nodeType":"FunctionDefinition","parameters":{"id":5831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5824,"mutability":"mutable","name":"name","nameLocation":"3918:4:33","nodeType":"VariableDeclaration","scope":5906,"src":"3902:20:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5823,"name":"string","nodeType":"ElementaryTypeName","src":"3902:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5826,"mutability":"mutable","name":"symbol","nameLocation":"3940:6:33","nodeType":"VariableDeclaration","scope":5906,"src":"3924:22:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5825,"name":"string","nodeType":"ElementaryTypeName","src":"3924:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":5828,"mutability":"mutable","name":"decimals","nameLocation":"3954:8:33","nodeType":"VariableDeclaration","scope":5906,"src":"3948:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":5827,"name":"uint8","nodeType":"ElementaryTypeName","src":"3948:5:33","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":5830,"mutability":"mutable","name":"uri","nameLocation":"3980:3:33","nodeType":"VariableDeclaration","scope":5906,"src":"3964:19:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5829,"name":"string","nodeType":"ElementaryTypeName","src":"3964:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3901:83:33"},"returnParameters":{"id":5834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5833,"mutability":"mutable","name":"tokenId","nameLocation":"4008:7:33","nodeType":"VariableDeclaration","scope":5906,"src":"4001:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5832,"name":"uint32","nodeType":"ElementaryTypeName","src":"4001:6:33","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"4000:16:33"},"scope":6069,"src":"3881:930:33","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5925,"nodeType":"Block","src":"5347:43:33","statements":[{"expression":{"arguments":[{"id":5920,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5911,"src":"5363:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5921,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5909,"src":"5367:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5922,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5913,"src":"5376:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5919,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5204,"src":"5357:5:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":5923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5357:26:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5924,"nodeType":"ExpressionStatement","src":"5357:26:33"}]},"documentation":{"id":5907,"nodeType":"StructuredDocumentation","src":"4817:440:33","text":"@notice The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\n @param tokenId The token to be minted.\n @param to The account to transfer the minted tokens to.\n @param amount The amount of tokens to mint.\n @dev For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract."},"functionSelector":"836a1040","id":5926,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5916,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5909,"src":"5338:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5917,"kind":"modifierInvocation","modifierName":{"id":5915,"name":"onlyOwner","nameLocations":["5328:9:33"],"nodeType":"IdentifierPath","referencedDeclaration":5716,"src":"5328:9:33"},"nodeType":"ModifierInvocation","src":"5328:18:33"}],"name":"mint","nameLocation":"5271:4:33","nodeType":"FunctionDefinition","parameters":{"id":5914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5909,"mutability":"mutable","name":"tokenId","nameLocation":"5284:7:33","nodeType":"VariableDeclaration","scope":5926,"src":"5276:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5908,"name":"uint256","nodeType":"ElementaryTypeName","src":"5276:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5911,"mutability":"mutable","name":"to","nameLocation":"5301:2:33","nodeType":"VariableDeclaration","scope":5926,"src":"5293:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5910,"name":"address","nodeType":"ElementaryTypeName","src":"5293:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5913,"mutability":"mutable","name":"amount","nameLocation":"5313:6:33","nodeType":"VariableDeclaration","scope":5926,"src":"5305:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5912,"name":"uint256","nodeType":"ElementaryTypeName","src":"5305:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5275:45:33"},"returnParameters":{"id":5918,"nodeType":"ParameterList","parameters":[],"src":"5347:0:33"},"scope":6069,"src":"5262:128:33","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5957,"nodeType":"Block","src":"5681:128:33","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":5947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5941,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"5699:6:33","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":5943,"indexExpression":{"id":5942,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5929,"src":"5706:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5699:15:33","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}},"id":5944,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5715:9:33","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"5699:25:33","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5945,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"5728:9:33","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":5946,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5738:6:33","memberName":"Native","nodeType":"MemberAccess","referencedDeclaration":8283,"src":"5728:16:33","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"5699:45:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e54463a204e6f74206e6174697665","id":5948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5746:17:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_7342bdb981889450834a41df0dc975cd81c6b5ecfe62dfdef498be09d92cb27e","typeString":"literal_string \"NTF: Not native\""},"value":"NTF: Not native"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7342bdb981889450834a41df0dc975cd81c6b5ecfe62dfdef498be09d92cb27e","typeString":"literal_string \"NTF: Not native\""}],"id":5940,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5691:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5691:73:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5950,"nodeType":"ExpressionStatement","src":"5691:73:33"},{"expression":{"arguments":[{"id":5952,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5931,"src":"5780:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5953,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5929,"src":"5786:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5954,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5933,"src":"5795:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5951,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"5774:5:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":5955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5774:28:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5956,"nodeType":"ExpressionStatement","src":"5774:28:33"}]},"documentation":{"id":5927,"nodeType":"StructuredDocumentation","src":"5396:189:33","text":"@notice Burns tokens. Only the holder of tokens can burn them or an approved operator.\n @param tokenId The token to be burned.\n @param amount The amount of tokens to burn."},"functionSelector":"9eea5f66","id":5958,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5936,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5931,"src":"5666:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5937,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5929,"src":"5672:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5938,"kind":"modifierInvocation","modifierName":{"id":5935,"name":"allowed","nameLocations":["5658:7:33"],"nodeType":"IdentifierPath","referencedDeclaration":5699,"src":"5658:7:33"},"nodeType":"ModifierInvocation","src":"5658:22:33"}],"name":"burn","nameLocation":"5599:4:33","nodeType":"FunctionDefinition","parameters":{"id":5934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5929,"mutability":"mutable","name":"tokenId","nameLocation":"5612:7:33","nodeType":"VariableDeclaration","scope":5958,"src":"5604:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5928,"name":"uint256","nodeType":"ElementaryTypeName","src":"5604:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5931,"mutability":"mutable","name":"from","nameLocation":"5629:4:33","nodeType":"VariableDeclaration","scope":5958,"src":"5621:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5930,"name":"address","nodeType":"ElementaryTypeName","src":"5621:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5933,"mutability":"mutable","name":"amount","nameLocation":"5643:6:33","nodeType":"VariableDeclaration","scope":5958,"src":"5635:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5932,"name":"uint256","nodeType":"ElementaryTypeName","src":"5635:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5603:47:33"},"returnParameters":{"id":5939,"nodeType":"ParameterList","parameters":[],"src":"5681:0:33"},"scope":6069,"src":"5590:219:33","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6000,"nodeType":"Block","src":"6549:143:33","statements":[{"assignments":[5974],"declarations":[{"constant":false,"id":5974,"mutability":"mutable","name":"len","nameLocation":"6567:3:33","nodeType":"VariableDeclaration","scope":6000,"src":"6559:11:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5973,"name":"uint256","nodeType":"ElementaryTypeName","src":"6559:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5977,"initialValue":{"expression":{"id":5975,"name":"tos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5964,"src":"6573:3:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":5976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6577:6:33","memberName":"length","nodeType":"MemberAccess","src":"6573:10:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6559:24:33"},{"body":{"id":5998,"nodeType":"Block","src":"6627:59:33","statements":[{"expression":{"arguments":[{"baseExpression":{"id":5989,"name":"tos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5964,"src":"6647:3:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":5991,"indexExpression":{"id":5990,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"6651:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6647:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5992,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5961,"src":"6655:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":5993,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5967,"src":"6664:7:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5995,"indexExpression":{"id":5994,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"6672:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6664:10:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5988,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5204,"src":"6641:5:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":5996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6641:34:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5997,"nodeType":"ExpressionStatement","src":"6641:34:33"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5982,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"6613:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5983,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5974,"src":"6617:3:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6613:7:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5999,"initializationExpression":{"assignments":[5979],"declarations":[{"constant":false,"id":5979,"mutability":"mutable","name":"i","nameLocation":"6606:1:33","nodeType":"VariableDeclaration","scope":5999,"src":"6598:9:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5978,"name":"uint256","nodeType":"ElementaryTypeName","src":"6598:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5981,"initialValue":{"hexValue":"30","id":5980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6610:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6598:13:33"},"loopExpression":{"expression":{"id":5986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6622:3:33","subExpression":{"id":5985,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"6622:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5987,"nodeType":"ExpressionStatement","src":"6622:3:33"},"nodeType":"ForStatement","src":"6593:93:33"}]},"documentation":{"id":5959,"nodeType":"StructuredDocumentation","src":"5815:615:33","text":"@notice The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\n @param tokenId The token to be minted.\n @param tos The accounts to transfer the minted tokens to.\n @param amounts The amounts of tokens to mint.\n @dev If the tos array is longer than the amounts array there will be an out of bounds error. If the amounts array is longer, the extra amounts are simply ignored.\n @dev For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract."},"functionSelector":"1dbeeb4e","id":6001,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5970,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5961,"src":"6540:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5971,"kind":"modifierInvocation","modifierName":{"id":5969,"name":"onlyOwner","nameLocations":["6530:9:33"],"nodeType":"IdentifierPath","referencedDeclaration":5716,"src":"6530:9:33"},"nodeType":"ModifierInvocation","src":"6530:18:33"}],"name":"batchMint","nameLocation":"6444:9:33","nodeType":"FunctionDefinition","parameters":{"id":5968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5961,"mutability":"mutable","name":"tokenId","nameLocation":"6462:7:33","nodeType":"VariableDeclaration","scope":6001,"src":"6454:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5960,"name":"uint256","nodeType":"ElementaryTypeName","src":"6454:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5964,"mutability":"mutable","name":"tos","nameLocation":"6490:3:33","nodeType":"VariableDeclaration","scope":6001,"src":"6471:22:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5962,"name":"address","nodeType":"ElementaryTypeName","src":"6471:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5963,"nodeType":"ArrayTypeName","src":"6471:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":5967,"mutability":"mutable","name":"amounts","nameLocation":"6514:7:33","nodeType":"VariableDeclaration","scope":6001,"src":"6495:26:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5965,"name":"uint256","nodeType":"ElementaryTypeName","src":"6495:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5966,"nodeType":"ArrayTypeName","src":"6495:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6453:69:33"},"returnParameters":{"id":5972,"nodeType":"ParameterList","parameters":[],"src":"6549:0:33"},"scope":6069,"src":"6435:257:33","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6067,"nodeType":"Block","src":"7028:328:33","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":6020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":6014,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"7046:6:33","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":6016,"indexExpression":{"id":6015,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6004,"src":"7053:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7046:15:33","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}},"id":6017,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7062:9:33","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"7046:25:33","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":6018,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"7075:9:33","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":6019,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7085:6:33","memberName":"Native","nodeType":"MemberAccess","referencedDeclaration":8283,"src":"7075:16:33","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"7046:45:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e54463a204e6f74206e6174697665","id":6021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7093:17:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_7342bdb981889450834a41df0dc975cd81c6b5ecfe62dfdef498be09d92cb27e","typeString":"literal_string \"NTF: Not native\""},"value":"NTF: Not native"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7342bdb981889450834a41df0dc975cd81c6b5ecfe62dfdef498be09d92cb27e","typeString":"literal_string \"NTF: Not native\""}],"id":6013,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7038:7:33","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7038:73:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6023,"nodeType":"ExpressionStatement","src":"7038:73:33"},{"assignments":[6025],"declarations":[{"constant":false,"id":6025,"mutability":"mutable","name":"len","nameLocation":"7129:3:33","nodeType":"VariableDeclaration","scope":6067,"src":"7121:11:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6024,"name":"uint256","nodeType":"ElementaryTypeName","src":"7121:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6028,"initialValue":{"expression":{"id":6026,"name":"froms","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6007,"src":"7135:5:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":6027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7141:6:33","memberName":"length","nodeType":"MemberAccess","src":"7135:12:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7121:26:33"},{"body":{"id":6065,"nodeType":"Block","src":"7191:159:33","statements":[{"expression":{"arguments":[{"baseExpression":{"id":6040,"name":"froms","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6007,"src":"7229:5:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":6042,"indexExpression":{"id":6041,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6030,"src":"7235:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7229:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"baseExpression":{"baseExpression":{"id":6043,"name":"isApprovedForAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4645,"src":"7239:18:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$_$","typeString":"mapping(address => mapping(address => mapping(uint256 => bool)))"}},"id":6047,"indexExpression":{"baseExpression":{"id":6044,"name":"froms","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6007,"src":"7258:5:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":6046,"indexExpression":{"id":6045,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6030,"src":"7264:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7258:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7239:28:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$","typeString":"mapping(address => mapping(uint256 => bool))"}},"id":6050,"indexExpression":{"expression":{"id":6048,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7268:3:33","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:6:33","memberName":"sender","nodeType":"MemberAccess","src":"7268:10:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7239:40:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":6052,"indexExpression":{"id":6051,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6004,"src":"7280:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7239:49:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6039,"name":"_requireTransferAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5402,"src":"7205:23:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool) view"}},"id":6053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7205:84:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6054,"nodeType":"ExpressionStatement","src":"7205:84:33"},{"expression":{"arguments":[{"baseExpression":{"id":6056,"name":"froms","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6007,"src":"7309:5:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":6058,"indexExpression":{"id":6057,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6030,"src":"7315:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7309:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6059,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6004,"src":"7319:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":6060,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6010,"src":"7328:7:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":6062,"indexExpression":{"id":6061,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6030,"src":"7336:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7328:10:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6055,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"7303:5:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":6063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7303:36:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6064,"nodeType":"ExpressionStatement","src":"7303:36:33"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6033,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6030,"src":"7177:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6034,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6025,"src":"7181:3:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7177:7:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6066,"initializationExpression":{"assignments":[6030],"declarations":[{"constant":false,"id":6030,"mutability":"mutable","name":"i","nameLocation":"7170:1:33","nodeType":"VariableDeclaration","scope":6066,"src":"7162:9:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6029,"name":"uint256","nodeType":"ElementaryTypeName","src":"7162:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6032,"initialValue":{"hexValue":"30","id":6031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7174:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7162:13:33"},"loopExpression":{"expression":{"id":6037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7186:3:33","subExpression":{"id":6036,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6030,"src":"7186:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6038,"nodeType":"ExpressionStatement","src":"7186:3:33"},"nodeType":"ForStatement","src":"7157:193:33"}]},"documentation":{"id":6002,"nodeType":"StructuredDocumentation","src":"6698:228:33","text":"@notice Burns tokens. This is only useful to be used by an operator.\n @param tokenId The token to be burned.\n @param froms The accounts to burn tokens from.\n @param amounts The amounts of tokens to burn."},"functionSelector":"01e1e3b1","id":6068,"implemented":true,"kind":"function","modifiers":[],"name":"batchBurn","nameLocation":"6940:9:33","nodeType":"FunctionDefinition","parameters":{"id":6011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6004,"mutability":"mutable","name":"tokenId","nameLocation":"6958:7:33","nodeType":"VariableDeclaration","scope":6068,"src":"6950:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6003,"name":"uint256","nodeType":"ElementaryTypeName","src":"6950:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6007,"mutability":"mutable","name":"froms","nameLocation":"6986:5:33","nodeType":"VariableDeclaration","scope":6068,"src":"6967:24:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":6005,"name":"address","nodeType":"ElementaryTypeName","src":"6967:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6006,"nodeType":"ArrayTypeName","src":"6967:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":6010,"mutability":"mutable","name":"amounts","nameLocation":"7012:7:33","nodeType":"VariableDeclaration","scope":6068,"src":"6993:26:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6008,"name":"uint256","nodeType":"ElementaryTypeName","src":"6993:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6009,"nodeType":"ArrayTypeName","src":"6993:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6949:71:33"},"returnParameters":{"id":6012,"nodeType":"ParameterList","parameters":[],"src":"7028:0:33"},"scope":6069,"src":"6931:425:33","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":6070,"src":"576:6782:33","usedErrors":[]}],"src":"32:7327:33"},"id":33},"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol":{"ast":{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol","exportedSymbols":{"Asset":[4632],"AssetRegister":[4927],"Base64":[774],"BaseBoringBatchable":[78],"BoringAddress":[815],"BoringBatchable":[115],"BoringERC20":[1176],"BoringFactory":[225],"BoringMath":[5046],"Counters":[1385],"Domain":[317],"ECDSA":[1921],"EIP712":[2075],"ERC1155":[5557],"ERC1155TokenReceiver":[5603],"ERC721TokenReceiver":[5626],"IERC1155":[428],"IERC1155TokenReceiver":[463],"IERC165":[473],"IERC20":[540],"IERC721":[653],"IERC721Enumerable":[701],"IERC721Metadata":[675],"IERC721TokenReceiver":[717],"IMasterContract":[726],"IStrategy":[8364],"IWrappedNative":[8387],"IYieldBox":[8538],"Math":[2940],"NO_STRATEGY":[8373],"NativeToken":[5639],"NativeTokenFactory":[6069],"Strings":[1560],"TokenType":[8288],"YieldBox":[7407],"YieldBoxPermit":[7661],"YieldBoxRebase":[7767],"YieldBoxURIBuilder":[8280]},"id":7408,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":6071,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"1090:23:34"},{"id":6072,"literals":["experimental","ABIEncoderV2"],"nodeType":"PragmaDirective","src":"1114:33:34"},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IWrappedNative.sol","file":"./interfaces/IWrappedNative.sol","id":6073,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7408,"sourceUnit":8388,"src":"1148:41:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IStrategy.sol","file":"./interfaces/IStrategy.sol","id":6074,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7408,"sourceUnit":8374,"src":"1190:36:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol","file":"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol","id":6075,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7408,"sourceUnit":702,"src":"1227:72:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol","file":"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol","id":6076,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7408,"sourceUnit":429,"src":"1300:73:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol","file":"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol","id":6077,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7408,"sourceUnit":775,"src":"1374:70:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/Domain.sol","file":"@boringcrypto/boring-solidity/contracts/Domain.sol","id":6078,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7408,"sourceUnit":318,"src":"1445:60:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC721TokenReceiver.sol","file":"./ERC721TokenReceiver.sol","id":6079,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7408,"sourceUnit":5627,"src":"1506:35:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155TokenReceiver.sol","file":"./ERC1155TokenReceiver.sol","id":6080,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7408,"sourceUnit":5604,"src":"1542:36:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol","file":"./ERC1155.sol","id":6081,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7408,"sourceUnit":5558,"src":"1579:23:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol","file":"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol","id":6082,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7408,"sourceUnit":116,"src":"1603:69:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":6083,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7408,"sourceUnit":1561,"src":"1673:51:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol","file":"./AssetRegister.sol","id":6084,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7408,"sourceUnit":4928,"src":"1725:29:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol","file":"./NativeTokenFactory.sol","id":6085,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7408,"sourceUnit":6070,"src":"1755:34:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxRebase.sol","file":"./YieldBoxRebase.sol","id":6086,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7408,"sourceUnit":7768,"src":"1790:30:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxURIBuilder.sol","file":"./YieldBoxURIBuilder.sol","id":6087,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7408,"sourceUnit":8281,"src":"1821:34:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxPermit.sol","file":"./YieldBoxPermit.sol","id":6088,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7408,"sourceUnit":7662,"src":"1856:30:34","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6090,"name":"YieldBoxPermit","nameLocations":["2243:14:34"],"nodeType":"IdentifierPath","referencedDeclaration":7661,"src":"2243:14:34"},"id":6091,"nodeType":"InheritanceSpecifier","src":"2243:14:34"},{"baseName":{"id":6092,"name":"BoringBatchable","nameLocations":["2259:15:34"],"nodeType":"IdentifierPath","referencedDeclaration":115,"src":"2259:15:34"},"id":6093,"nodeType":"InheritanceSpecifier","src":"2259:15:34"},{"baseName":{"id":6094,"name":"NativeTokenFactory","nameLocations":["2276:18:34"],"nodeType":"IdentifierPath","referencedDeclaration":6069,"src":"2276:18:34"},"id":6095,"nodeType":"InheritanceSpecifier","src":"2276:18:34"},{"baseName":{"id":6096,"name":"ERC721TokenReceiver","nameLocations":["2296:19:34"],"nodeType":"IdentifierPath","referencedDeclaration":5626,"src":"2296:19:34"},"id":6097,"nodeType":"InheritanceSpecifier","src":"2296:19:34"},{"baseName":{"id":6098,"name":"ERC1155TokenReceiver","nameLocations":["2317:20:34"],"nodeType":"IdentifierPath","referencedDeclaration":5603,"src":"2317:20:34"},"id":6099,"nodeType":"InheritanceSpecifier","src":"2317:20:34"}],"canonicalName":"YieldBox","contractDependencies":[],"contractKind":"contract","documentation":{"id":6089,"nodeType":"StructuredDocumentation","src":"1924:298:34","text":"@title YieldBox\n @author BoringCrypto, Keno\n @notice The YieldBox is a vault for tokens. The stored tokens can assigned to strategies.\n Yield from this will go to the token depositors.\n Any funds transfered directly onto the YieldBox will be lost, use the deposit function instead."},"fullyImplemented":true,"id":7407,"linearizedBaseContracts":[7407,5603,463,5626,717,6069,4927,5557,428,473,115,78,7661,2075],"name":"YieldBox","nameLocation":"2231:8:34","nodeType":"ContractDefinition","nodes":[{"global":false,"id":6102,"libraryName":{"id":6100,"name":"BoringAddress","nameLocations":["2440:13:34"],"nodeType":"IdentifierPath","referencedDeclaration":815,"src":"2440:13:34"},"nodeType":"UsingForDirective","src":"2434:32:34","typeName":{"id":6101,"name":"address","nodeType":"ElementaryTypeName","src":"2458:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":6106,"libraryName":{"id":6103,"name":"BoringERC20","nameLocations":["2477:11:34"],"nodeType":"IdentifierPath","referencedDeclaration":1176,"src":"2477:11:34"},"nodeType":"UsingForDirective","src":"2471:29:34","typeName":{"id":6105,"nodeType":"UserDefinedTypeName","pathNode":{"id":6104,"name":"IERC20","nameLocations":["2493:6:34"],"nodeType":"IdentifierPath","referencedDeclaration":540,"src":"2493:6:34"},"referencedDeclaration":540,"src":"2493:6:34","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}}},{"global":false,"id":6110,"libraryName":{"id":6107,"name":"BoringERC20","nameLocations":["2511:11:34"],"nodeType":"IdentifierPath","referencedDeclaration":1176,"src":"2511:11:34"},"nodeType":"UsingForDirective","src":"2505:37:34","typeName":{"id":6109,"nodeType":"UserDefinedTypeName","pathNode":{"id":6108,"name":"IWrappedNative","nameLocations":["2527:14:34"],"nodeType":"IdentifierPath","referencedDeclaration":8387,"src":"2527:14:34"},"referencedDeclaration":8387,"src":"2527:14:34","typeDescriptions":{"typeIdentifier":"t_contract$_IWrappedNative_$8387","typeString":"contract IWrappedNative"}}},{"global":false,"id":6113,"libraryName":{"id":6111,"name":"YieldBoxRebase","nameLocations":["2553:14:34"],"nodeType":"IdentifierPath","referencedDeclaration":7767,"src":"2553:14:34"},"nodeType":"UsingForDirective","src":"2547:33:34","typeName":{"id":6112,"name":"uint256","nodeType":"ElementaryTypeName","src":"2572:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"anonymous":false,"eventSelector":"1ad178ff1b5d2c6dc0f3e4e2578b3d445e601c5beae2f63a73f237e480df2fd0","id":6133,"name":"Deposited","nameLocation":"2667:9:34","nodeType":"EventDefinition","parameters":{"id":6132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6115,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"2702:6:34","nodeType":"VariableDeclaration","scope":6133,"src":"2686:22:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6114,"name":"address","nodeType":"ElementaryTypeName","src":"2686:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6117,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"2734:4:34","nodeType":"VariableDeclaration","scope":6133,"src":"2718:20:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6116,"name":"address","nodeType":"ElementaryTypeName","src":"2718:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6119,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"2764:2:34","nodeType":"VariableDeclaration","scope":6133,"src":"2748:18:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6118,"name":"address","nodeType":"ElementaryTypeName","src":"2748:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6121,"indexed":false,"mutability":"mutable","name":"assetId","nameLocation":"2784:7:34","nodeType":"VariableDeclaration","scope":6133,"src":"2776:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6120,"name":"uint256","nodeType":"ElementaryTypeName","src":"2776:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6123,"indexed":false,"mutability":"mutable","name":"amountIn","nameLocation":"2809:8:34","nodeType":"VariableDeclaration","scope":6133,"src":"2801:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6122,"name":"uint256","nodeType":"ElementaryTypeName","src":"2801:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6125,"indexed":false,"mutability":"mutable","name":"shareIn","nameLocation":"2835:7:34","nodeType":"VariableDeclaration","scope":6133,"src":"2827:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6124,"name":"uint256","nodeType":"ElementaryTypeName","src":"2827:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6127,"indexed":false,"mutability":"mutable","name":"amountOut","nameLocation":"2860:9:34","nodeType":"VariableDeclaration","scope":6133,"src":"2852:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6126,"name":"uint256","nodeType":"ElementaryTypeName","src":"2852:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6129,"indexed":false,"mutability":"mutable","name":"shareOut","nameLocation":"2887:8:34","nodeType":"VariableDeclaration","scope":6133,"src":"2879:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6128,"name":"uint256","nodeType":"ElementaryTypeName","src":"2879:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6131,"indexed":false,"mutability":"mutable","name":"isNFT","nameLocation":"2910:5:34","nodeType":"VariableDeclaration","scope":6133,"src":"2905:10:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6130,"name":"bool","nodeType":"ElementaryTypeName","src":"2905:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2676:245:34"},"src":"2661:261:34"},{"anonymous":false,"eventSelector":"d4594021cdd03e2c0abc8108cba8d75a347eaf64acaddede25df63f6ef9e2420","id":6151,"name":"Withdraw","nameLocation":"2934:8:34","nodeType":"EventDefinition","parameters":{"id":6150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6135,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"2968:6:34","nodeType":"VariableDeclaration","scope":6151,"src":"2952:22:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6134,"name":"address","nodeType":"ElementaryTypeName","src":"2952:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6137,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"3000:4:34","nodeType":"VariableDeclaration","scope":6151,"src":"2984:20:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6136,"name":"address","nodeType":"ElementaryTypeName","src":"2984:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6139,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"3030:2:34","nodeType":"VariableDeclaration","scope":6151,"src":"3014:18:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6138,"name":"address","nodeType":"ElementaryTypeName","src":"3014:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6141,"indexed":false,"mutability":"mutable","name":"assetId","nameLocation":"3050:7:34","nodeType":"VariableDeclaration","scope":6151,"src":"3042:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6140,"name":"uint256","nodeType":"ElementaryTypeName","src":"3042:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6143,"indexed":false,"mutability":"mutable","name":"amountIn","nameLocation":"3075:8:34","nodeType":"VariableDeclaration","scope":6151,"src":"3067:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6142,"name":"uint256","nodeType":"ElementaryTypeName","src":"3067:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6145,"indexed":false,"mutability":"mutable","name":"shareIn","nameLocation":"3101:7:34","nodeType":"VariableDeclaration","scope":6151,"src":"3093:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6144,"name":"uint256","nodeType":"ElementaryTypeName","src":"3093:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6147,"indexed":false,"mutability":"mutable","name":"amountOut","nameLocation":"3126:9:34","nodeType":"VariableDeclaration","scope":6151,"src":"3118:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6146,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6149,"indexed":false,"mutability":"mutable","name":"shareOut","nameLocation":"3153:8:34","nodeType":"VariableDeclaration","scope":6151,"src":"3145:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6148,"name":"uint256","nodeType":"ElementaryTypeName","src":"3145:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2942:225:34"},"src":"2928:240:34"},{"constant":false,"functionSelector":"eb6d3a11","id":6154,"mutability":"immutable","name":"wrappedNative","nameLocation":"3296:13:34","nodeType":"VariableDeclaration","scope":7407,"src":"3264:45:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IWrappedNative_$8387","typeString":"contract IWrappedNative"},"typeName":{"id":6153,"nodeType":"UserDefinedTypeName","pathNode":{"id":6152,"name":"IWrappedNative","nameLocations":["3264:14:34"],"nodeType":"IdentifierPath","referencedDeclaration":8387,"src":"3264:14:34"},"referencedDeclaration":8387,"src":"3264:14:34","typeDescriptions":{"typeIdentifier":"t_contract$_IWrappedNative_$8387","typeString":"contract IWrappedNative"}},"visibility":"public"},{"constant":false,"functionSelector":"fd330d43","id":6157,"mutability":"immutable","name":"uriBuilder","nameLocation":"3351:10:34","nodeType":"VariableDeclaration","scope":7407,"src":"3315:46:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBoxURIBuilder_$8280","typeString":"contract YieldBoxURIBuilder"},"typeName":{"id":6156,"nodeType":"UserDefinedTypeName","pathNode":{"id":6155,"name":"YieldBoxURIBuilder","nameLocations":["3315:18:34"],"nodeType":"IdentifierPath","referencedDeclaration":8280,"src":"3315:18:34"},"referencedDeclaration":8280,"src":"3315:18:34","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBoxURIBuilder_$8280","typeString":"contract YieldBoxURIBuilder"}},"visibility":"public"},{"body":{"id":6177,"nodeType":"Block","src":"3470:81:34","statements":[{"expression":{"id":6171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6169,"name":"wrappedNative","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6154,"src":"3480:13:34","typeDescriptions":{"typeIdentifier":"t_contract$_IWrappedNative_$8387","typeString":"contract IWrappedNative"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6170,"name":"wrappedNative_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6160,"src":"3496:14:34","typeDescriptions":{"typeIdentifier":"t_contract$_IWrappedNative_$8387","typeString":"contract IWrappedNative"}},"src":"3480:30:34","typeDescriptions":{"typeIdentifier":"t_contract$_IWrappedNative_$8387","typeString":"contract IWrappedNative"}},"id":6172,"nodeType":"ExpressionStatement","src":"3480:30:34"},{"expression":{"id":6175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6173,"name":"uriBuilder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6157,"src":"3520:10:34","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBoxURIBuilder_$8280","typeString":"contract YieldBoxURIBuilder"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6174,"name":"uriBuilder_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6163,"src":"3533:11:34","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBoxURIBuilder_$8280","typeString":"contract YieldBoxURIBuilder"}},"src":"3520:24:34","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBoxURIBuilder_$8280","typeString":"contract YieldBoxURIBuilder"}},"id":6176,"nodeType":"ExpressionStatement","src":"3520:24:34"}]},"id":6178,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"5969656c64426f78","id":6166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3458:10:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_1fa00ff07e66bee35cc1185e93d45cba8f67ce8ff8cc38cd523316b8bf5ecb32","typeString":"literal_string \"YieldBox\""},"value":"YieldBox"}],"id":6167,"kind":"baseConstructorSpecifier","modifierName":{"id":6165,"name":"YieldBoxPermit","nameLocations":["3443:14:34"],"nodeType":"IdentifierPath","referencedDeclaration":7661,"src":"3443:14:34"},"nodeType":"ModifierInvocation","src":"3443:26:34"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6160,"mutability":"mutable","name":"wrappedNative_","nameLocation":"3395:14:34","nodeType":"VariableDeclaration","scope":6178,"src":"3380:29:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IWrappedNative_$8387","typeString":"contract IWrappedNative"},"typeName":{"id":6159,"nodeType":"UserDefinedTypeName","pathNode":{"id":6158,"name":"IWrappedNative","nameLocations":["3380:14:34"],"nodeType":"IdentifierPath","referencedDeclaration":8387,"src":"3380:14:34"},"referencedDeclaration":8387,"src":"3380:14:34","typeDescriptions":{"typeIdentifier":"t_contract$_IWrappedNative_$8387","typeString":"contract IWrappedNative"}},"visibility":"internal"},{"constant":false,"id":6163,"mutability":"mutable","name":"uriBuilder_","nameLocation":"3430:11:34","nodeType":"VariableDeclaration","scope":6178,"src":"3411:30:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBoxURIBuilder_$8280","typeString":"contract YieldBoxURIBuilder"},"typeName":{"id":6162,"nodeType":"UserDefinedTypeName","pathNode":{"id":6161,"name":"YieldBoxURIBuilder","nameLocations":["3411:18:34"],"nodeType":"IdentifierPath","referencedDeclaration":8280,"src":"3411:18:34"},"referencedDeclaration":8280,"src":"3411:18:34","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBoxURIBuilder_$8280","typeString":"contract YieldBoxURIBuilder"}},"visibility":"internal"}],"src":"3379:63:34"},"returnParameters":{"id":6168,"nodeType":"ParameterList","parameters":[],"src":"3470:0:34"},"scope":7407,"src":"3368:183:34","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6192,"nodeType":"Block","src":"3904:55:34","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":6187,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6182,"src":"3921:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6188,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3927:8:34","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"3921:14:34","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"id":6189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3936:14:34","memberName":"currentBalance","nodeType":"MemberAccess","referencedDeclaration":8337,"src":"3921:29:34","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":6190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3921:31:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6186,"id":6191,"nodeType":"Return","src":"3914:38:34"}]},"documentation":{"id":6179,"nodeType":"StructuredDocumentation","src":"3669:145:34","text":"@dev Returns the total balance of `token` the strategy contract holds,\n plus the total amount this contract thinks the strategy holds."},"id":6193,"implemented":true,"kind":"function","modifiers":[],"name":"_tokenBalanceOf","nameLocation":"3828:15:34","nodeType":"FunctionDefinition","parameters":{"id":6183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6182,"mutability":"mutable","name":"asset","nameLocation":"3858:5:34","nodeType":"VariableDeclaration","scope":6193,"src":"3844:19:34","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"},"typeName":{"id":6181,"nodeType":"UserDefinedTypeName","pathNode":{"id":6180,"name":"Asset","nameLocations":["3844:5:34"],"nodeType":"IdentifierPath","referencedDeclaration":4632,"src":"3844:5:34"},"referencedDeclaration":4632,"src":"3844:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"}},"visibility":"internal"}],"src":"3843:21:34"},"returnParameters":{"id":6186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6185,"mutability":"mutable","name":"amount","nameLocation":"3896:6:34","nodeType":"VariableDeclaration","scope":6193,"src":"3888:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6184,"name":"uint256","nodeType":"ElementaryTypeName","src":"3888:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3887:16:34"},"scope":7407,"src":"3819:140:34","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6363,"nodeType":"Block","src":"4815:1688:34","statements":[{"assignments":[6217],"declarations":[{"constant":false,"id":6217,"mutability":"mutable","name":"asset","nameLocation":"4857:5:34","nodeType":"VariableDeclaration","scope":6363,"src":"4843:19:34","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"},"typeName":{"id":6216,"nodeType":"UserDefinedTypeName","pathNode":{"id":6215,"name":"Asset","nameLocations":["4843:5:34"],"nodeType":"IdentifierPath","referencedDeclaration":4632,"src":"4843:5:34"},"referencedDeclaration":4632,"src":"4843:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"}},"visibility":"internal"}],"id":6221,"initialValue":{"baseExpression":{"id":6218,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"4865:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":6220,"indexExpression":{"id":6219,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6196,"src":"4872:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4865:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}},"nodeType":"VariableDeclarationStatement","src":"4843:37:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":6227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6223,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"4898:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6224,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4904:9:34","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"4898:15:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":6225,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"4917:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":6226,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4927:6:34","memberName":"Native","nodeType":"MemberAccess","referencedDeclaration":8283,"src":"4917:16:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"4898:35:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":6232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6228,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"4937:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6229,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4943:9:34","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"4937:15:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":6230,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"4956:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":6231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4966:6:34","memberName":"ERC721","nodeType":"MemberAccess","referencedDeclaration":8285,"src":"4956:16:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"4937:35:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4898:74:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f783a2063616e2774206465706f7369742074797065","id":6234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4974:30:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_2156625d6b2871edfd0d39bf53421cd3b580f8b28d91f6231903181f804b3e29","typeString":"literal_string \"YieldBox: can't deposit type\""},"value":"YieldBox: can't deposit type"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2156625d6b2871edfd0d39bf53421cd3b580f8b28d91f6231903181f804b3e29","typeString":"literal_string \"YieldBox: can't deposit type\""}],"id":6222,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4890:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4890:115:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6236,"nodeType":"ExpressionStatement","src":"4890:115:34"},{"assignments":[6238],"declarations":[{"constant":false,"id":6238,"mutability":"mutable","name":"totalAmount","nameLocation":"5043:11:34","nodeType":"VariableDeclaration","scope":6363,"src":"5035:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6237,"name":"uint256","nodeType":"ElementaryTypeName","src":"5035:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6242,"initialValue":{"arguments":[{"id":6240,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"5073:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}],"id":6239,"name":"_tokenBalanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6193,"src":"5057:15:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Asset_$4632_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct Asset storage pointer) view returns (uint256)"}},"id":6241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5057:22:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5035:44:34"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6243,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"5093:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5102:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5093:10:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6269,"nodeType":"Block","src":"5292:214:34","statements":[{"expression":{"id":6267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6258,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"5430:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":6261,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"5455:11:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":6263,"indexExpression":{"id":6262,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6196,"src":"5467:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5455:20:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6264,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6238,"src":"5477:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":6265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5490:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":6259,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"5439:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5445:9:34","memberName":"_toAmount","nodeType":"MemberAccess","referencedDeclaration":7766,"src":"5439:15:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256,uint256,bool) pure returns (uint256)"}},"id":6266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5439:56:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5430:65:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6268,"nodeType":"ExpressionStatement","src":"5430:65:34"}]},"id":6270,"nodeType":"IfStatement","src":"5089:417:34","trueBody":{"id":6257,"nodeType":"Block","src":"5105:181:34","statements":[{"expression":{"id":6255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6246,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"5209:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":6249,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"5234:11:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":6251,"indexExpression":{"id":6250,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6196,"src":"5246:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5234:20:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6252,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6238,"src":"5256:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":6253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5269:5:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":6247,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"5217:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5224:9:34","memberName":"_toShares","nodeType":"MemberAccess","referencedDeclaration":7720,"src":"5217:16:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256,uint256,bool) pure returns (uint256)"}},"id":6254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5217:58:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5209:66:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6256,"nodeType":"ExpressionStatement","src":"5209:66:34"}]}},{"expression":{"arguments":[{"id":6272,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6200,"src":"5522:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6273,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6196,"src":"5526:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6274,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"5535:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6271,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5204,"src":"5516:5:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":6275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5516:25:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6276,"nodeType":"ExpressionStatement","src":"5516:25:34"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":6281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6277,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"5580:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6278,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5586:9:34","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"5580:15:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":6279,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"5599:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":6280,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5609:5:34","memberName":"ERC20","nodeType":"MemberAccess","referencedDeclaration":8284,"src":"5599:15:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"5580:34:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6336,"nodeType":"Block","src":"5893:429:34","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6297,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"6025:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6298,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6031:15:34","memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":4626,"src":"6025:21:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":6301,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"6058:4:34","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}],"id":6300,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6050:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6299,"name":"address","nodeType":"ElementaryTypeName","src":"6050:7:34","typeDescriptions":{}}},"id":6302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6050:13:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6025:38:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6334,"nodeType":"Block","src":"6173:139:34","statements":[{"expression":{"arguments":[{"id":6322,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6198,"src":"6240:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"id":6325,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"6254:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6326,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6260:8:34","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"6254:14:34","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}],"id":6324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6246:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6323,"name":"address","nodeType":"ElementaryTypeName","src":"6246:7:34","typeDescriptions":{}}},"id":6327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6246:23:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6328,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"6271:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6329,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6277:7:34","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":4631,"src":"6271:13:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6330,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"6286:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":6331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6294:2:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"expression":{"id":6318,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"6200:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6319,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6206:15:34","memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":4626,"src":"6200:21:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6317,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"6191:8:34","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155_$428_$","typeString":"type(contract IERC1155)"}},"id":6320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6191:31:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$428","typeString":"contract IERC1155"}},"id":6321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6223:16:34","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":375,"src":"6191:48:34","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint256,bytes memory) external"}},"id":6332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6191:106:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6333,"nodeType":"ExpressionStatement","src":"6191:106:34"}]},"id":6335,"nodeType":"IfStatement","src":"6021:291:34","trueBody":{"id":6316,"nodeType":"Block","src":"6065:102:34","statements":[{"expression":{"arguments":[{"id":6305,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6198,"src":"6099:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"id":6308,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"6113:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6309,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6119:8:34","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"6113:14:34","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}],"id":6307,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6105:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6306,"name":"address","nodeType":"ElementaryTypeName","src":"6105:7:34","typeDescriptions":{}}},"id":6310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6105:23:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6311,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"6130:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6312,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6136:7:34","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":4631,"src":"6130:13:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6313,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"6145:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6304,"name":"_transferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5297,"src":"6083:15:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":6314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6083:69:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6315,"nodeType":"ExpressionStatement","src":"6083:69:34"}]}}]},"id":6337,"nodeType":"IfStatement","src":"5576:746:34","trueBody":{"id":6296,"nodeType":"Block","src":"5616:271:34","statements":[{"expression":{"arguments":[{"id":6287,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6198,"src":"5838:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"id":6290,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"5852:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6291,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5858:8:34","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"5852:14:34","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}],"id":6289,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5844:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6288,"name":"address","nodeType":"ElementaryTypeName","src":"5844:7:34","typeDescriptions":{}}},"id":6292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5844:23:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6293,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"5869:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":6283,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"5798:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6284,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5804:15:34","memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":4626,"src":"5798:21:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6282,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"5791:6:34","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$540_$","typeString":"type(contract IERC20)"}},"id":6285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5791:29:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"id":6286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5821:16:34","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1175,"src":"5791:46:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$540_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$540_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":6294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5791:85:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6295,"nodeType":"ExpressionStatement","src":"5791:85:34"}]}},{"expression":{"arguments":[{"id":6343,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"6357:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":6338,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6217,"src":"6332:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6341,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6338:8:34","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"6332:14:34","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"id":6342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6347:9:34","memberName":"deposited","nodeType":"MemberAccess","referencedDeclaration":8355,"src":"6332:24:34","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":6344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6332:32:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6345,"nodeType":"ExpressionStatement","src":"6332:32:34"},{"eventCall":{"arguments":[{"expression":{"id":6347,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6390:3:34","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6394:6:34","memberName":"sender","nodeType":"MemberAccess","src":"6390:10:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6349,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6198,"src":"6402:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6350,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6200,"src":"6408:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6351,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6196,"src":"6412:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6352,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"6421:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6353,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"6429:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6354,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6211,"src":"6436:9:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6355,"name":"shareOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6213,"src":"6447:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":6356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6457:5:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6346,"name":"Deposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6133,"src":"6380:9:34","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,address,uint256,uint256,uint256,uint256,uint256,bool)"}},"id":6357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6380:83:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6358,"nodeType":"EmitStatement","src":"6375:88:34"},{"expression":{"components":[{"id":6359,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"6482:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6360,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"6490:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6361,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6481:15:34","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":6214,"id":6362,"nodeType":"Return","src":"6474:22:34"}]},"documentation":{"id":6194,"nodeType":"StructuredDocumentation","src":"4071:521:34","text":"@notice Deposit an amount of `token` represented in either `amount` or `share`.\n @param assetId The id of the asset.\n @param from which account to pull the tokens.\n @param to which account to push the tokens.\n @param amount Token amount in native representation to deposit.\n @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\n @return amountOut The amount deposited.\n @return shareOut The deposited amount repesented in shares."},"functionSelector":"9a9af97a","id":6364,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6207,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6198,"src":"4754:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6208,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6196,"src":"4760:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6209,"kind":"modifierInvocation","modifierName":{"id":6206,"name":"allowed","nameLocations":["4746:7:34"],"nodeType":"IdentifierPath","referencedDeclaration":5699,"src":"4746:7:34"},"nodeType":"ModifierInvocation","src":"4746:22:34"}],"name":"depositAsset","nameLocation":"4606:12:34","nodeType":"FunctionDefinition","parameters":{"id":6205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6196,"mutability":"mutable","name":"assetId","nameLocation":"4636:7:34","nodeType":"VariableDeclaration","scope":6364,"src":"4628:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6195,"name":"uint256","nodeType":"ElementaryTypeName","src":"4628:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6198,"mutability":"mutable","name":"from","nameLocation":"4661:4:34","nodeType":"VariableDeclaration","scope":6364,"src":"4653:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6197,"name":"address","nodeType":"ElementaryTypeName","src":"4653:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6200,"mutability":"mutable","name":"to","nameLocation":"4683:2:34","nodeType":"VariableDeclaration","scope":6364,"src":"4675:10:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6199,"name":"address","nodeType":"ElementaryTypeName","src":"4675:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6202,"mutability":"mutable","name":"amount","nameLocation":"4703:6:34","nodeType":"VariableDeclaration","scope":6364,"src":"4695:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6201,"name":"uint256","nodeType":"ElementaryTypeName","src":"4695:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6204,"mutability":"mutable","name":"share","nameLocation":"4727:5:34","nodeType":"VariableDeclaration","scope":6364,"src":"4719:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6203,"name":"uint256","nodeType":"ElementaryTypeName","src":"4719:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4618:120:34"},"returnParameters":{"id":6214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6211,"mutability":"mutable","name":"amountOut","nameLocation":"4786:9:34","nodeType":"VariableDeclaration","scope":6364,"src":"4778:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6210,"name":"uint256","nodeType":"ElementaryTypeName","src":"4778:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6213,"mutability":"mutable","name":"shareOut","nameLocation":"4805:8:34","nodeType":"VariableDeclaration","scope":6364,"src":"4797:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6212,"name":"uint256","nodeType":"ElementaryTypeName","src":"4797:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4777:37:34"},"scope":7407,"src":"4597:1906:34","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6444,"nodeType":"Block","src":"6986:465:34","statements":[{"assignments":[6384],"declarations":[{"constant":false,"id":6384,"mutability":"mutable","name":"asset","nameLocation":"7028:5:34","nodeType":"VariableDeclaration","scope":6444,"src":"7014:19:34","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"},"typeName":{"id":6383,"nodeType":"UserDefinedTypeName","pathNode":{"id":6382,"name":"Asset","nameLocations":["7014:5:34"],"nodeType":"IdentifierPath","referencedDeclaration":4632,"src":"7014:5:34"},"referencedDeclaration":4632,"src":"7014:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"}},"visibility":"internal"}],"id":6388,"initialValue":{"baseExpression":{"id":6385,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"7036:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":6387,"indexExpression":{"id":6386,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"7043:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7036:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7014:37:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":6394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6390,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6384,"src":"7069:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6391,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7075:9:34","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"7069:15:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":6392,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"7088:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":6393,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7098:6:34","memberName":"ERC721","nodeType":"MemberAccess","referencedDeclaration":8285,"src":"7088:16:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"7069:35:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f783a206e6f7420455243373231","id":6395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7106:22:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_d1ab373a3ef78f3dbc5be4e7855c33b53cfbc7a27371ce615cc219417e81fb75","typeString":"literal_string \"YieldBox: not ERC721\""},"value":"YieldBox: not ERC721"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d1ab373a3ef78f3dbc5be4e7855c33b53cfbc7a27371ce615cc219417e81fb75","typeString":"literal_string \"YieldBox: not ERC721\""}],"id":6389,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7061:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7061:68:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6397,"nodeType":"ExpressionStatement","src":"7061:68:34"},{"expression":{"arguments":[{"id":6399,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6371,"src":"7165:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6400,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"7169:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":6401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7178:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":6398,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5204,"src":"7159:5:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":6402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7159:21:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6403,"nodeType":"ExpressionStatement","src":"7159:21:34"},{"expression":{"arguments":[{"id":6409,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6369,"src":"7263:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"id":6412,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6384,"src":"7277:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6413,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7283:8:34","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"7277:14:34","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}],"id":6411,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7269:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6410,"name":"address","nodeType":"ElementaryTypeName","src":"7269:7:34","typeDescriptions":{}}},"id":6414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7269:23:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6415,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6384,"src":"7294:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6416,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7300:7:34","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":4631,"src":"7294:13:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":6405,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6384,"src":"7223:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6406,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7229:15:34","memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":4626,"src":"7223:21:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6404,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"7215:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$653_$","typeString":"type(contract IERC721)"}},"id":6407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7215:30:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$653","typeString":"contract IERC721"}},"id":6408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7246:16:34","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":608,"src":"7215:47:34","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) payable external"}},"id":6417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7215:93:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6418,"nodeType":"ExpressionStatement","src":"7215:93:34"},{"expression":{"arguments":[{"hexValue":"31","id":6424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7344:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"expression":{"id":6419,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6384,"src":"7319:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6422,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7325:8:34","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"7319:14:34","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"id":6423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7334:9:34","memberName":"deposited","nodeType":"MemberAccess","referencedDeclaration":8355,"src":"7319:24:34","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":6425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7319:27:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6426,"nodeType":"ExpressionStatement","src":"7319:27:34"},{"eventCall":{"arguments":[{"expression":{"id":6428,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7372:3:34","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7376:6:34","memberName":"sender","nodeType":"MemberAccess","src":"7372:10:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6430,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6369,"src":"7384:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6431,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6371,"src":"7390:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6432,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"7394:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":6433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7403:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"31","id":6434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7406:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"31","id":6435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7409:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"31","id":6436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7412:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"74727565","id":6437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7415:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6427,"name":"Deposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6133,"src":"7362:9:34","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,address,uint256,uint256,uint256,uint256,uint256,bool)"}},"id":6438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7362:58:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6439,"nodeType":"EmitStatement","src":"7357:63:34"},{"expression":{"components":[{"hexValue":"31","id":6440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7439:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"31","id":6441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7442:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"id":6442,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7438:6:34","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_1_by_1_$_t_rational_1_by_1_$","typeString":"tuple(int_const 1,int_const 1)"}},"functionReturnParameters":6381,"id":6443,"nodeType":"Return","src":"7431:13:34"}]},"documentation":{"id":6365,"nodeType":"StructuredDocumentation","src":"6509:298:34","text":"@notice Deposit an NFT asset\n @param assetId The id of the asset.\n @param from which account to pull the tokens.\n @param to which account to push the tokens.\n @return amountOut The amount deposited.\n @return shareOut The deposited amount repesented in shares."},"functionSelector":"75338079","id":6445,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6374,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6369,"src":"6925:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6375,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6367,"src":"6931:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6376,"kind":"modifierInvocation","modifierName":{"id":6373,"name":"allowed","nameLocations":["6917:7:34"],"nodeType":"IdentifierPath","referencedDeclaration":5699,"src":"6917:7:34"},"nodeType":"ModifierInvocation","src":"6917:22:34"}],"name":"depositNFTAsset","nameLocation":"6821:15:34","nodeType":"FunctionDefinition","parameters":{"id":6372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6367,"mutability":"mutable","name":"assetId","nameLocation":"6854:7:34","nodeType":"VariableDeclaration","scope":6445,"src":"6846:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6366,"name":"uint256","nodeType":"ElementaryTypeName","src":"6846:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6369,"mutability":"mutable","name":"from","nameLocation":"6879:4:34","nodeType":"VariableDeclaration","scope":6445,"src":"6871:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6368,"name":"address","nodeType":"ElementaryTypeName","src":"6871:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6371,"mutability":"mutable","name":"to","nameLocation":"6901:2:34","nodeType":"VariableDeclaration","scope":6445,"src":"6893:10:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6370,"name":"address","nodeType":"ElementaryTypeName","src":"6893:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6836:73:34"},"returnParameters":{"id":6381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6378,"mutability":"mutable","name":"amountOut","nameLocation":"6957:9:34","nodeType":"VariableDeclaration","scope":6445,"src":"6949:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6377,"name":"uint256","nodeType":"ElementaryTypeName","src":"6949:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6380,"mutability":"mutable","name":"shareOut","nameLocation":"6976:8:34","nodeType":"VariableDeclaration","scope":6445,"src":"6968:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6379,"name":"uint256","nodeType":"ElementaryTypeName","src":"6968:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6948:37:34"},"scope":7407,"src":"6812:639:34","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6546,"nodeType":"Block","src":"7909:806:34","statements":[{"assignments":[6461],"declarations":[{"constant":false,"id":6461,"mutability":"mutable","name":"asset","nameLocation":"7951:5:34","nodeType":"VariableDeclaration","scope":6546,"src":"7937:19:34","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"},"typeName":{"id":6460,"nodeType":"UserDefinedTypeName","pathNode":{"id":6459,"name":"Asset","nameLocations":["7937:5:34"],"nodeType":"IdentifierPath","referencedDeclaration":4632,"src":"7937:5:34"},"referencedDeclaration":4632,"src":"7937:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"}},"visibility":"internal"}],"id":6465,"initialValue":{"baseExpression":{"id":6462,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"7959:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":6464,"indexExpression":{"id":6463,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6448,"src":"7966:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7959:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7937:37:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":6471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6467,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6461,"src":"7992:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6468,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7998:9:34","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"7992:15:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":6469,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"8011:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":6470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8021:5:34","memberName":"ERC20","nodeType":"MemberAccess","referencedDeclaration":8284,"src":"8011:15:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"7992:34:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6472,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6461,"src":"8030:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6473,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8036:15:34","memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":4626,"src":"8030:21:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":6476,"name":"wrappedNative","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6154,"src":"8063:13:34","typeDescriptions":{"typeIdentifier":"t_contract$_IWrappedNative_$8387","typeString":"contract IWrappedNative"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IWrappedNative_$8387","typeString":"contract IWrappedNative"}],"id":6475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8055:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6474,"name":"address","nodeType":"ElementaryTypeName","src":"8055:7:34","typeDescriptions":{}}},"id":6477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8055:22:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8030:47:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7992:85:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f783a206e6f7420777261707065644e6174697665","id":6480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8079:29:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_c4414cd0f603bf473aa65689af7fb4de3a6be688a4a3ecfe558e5bbf6017de3b","typeString":"literal_string \"YieldBox: not wrappedNative\""},"value":"YieldBox: not wrappedNative"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c4414cd0f603bf473aa65689af7fb4de3a6be688a4a3ecfe558e5bbf6017de3b","typeString":"literal_string \"YieldBox: not wrappedNative\""}],"id":6466,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7984:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7984:125:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6482,"nodeType":"ExpressionStatement","src":"7984:125:34"},{"assignments":[6484],"declarations":[{"constant":false,"id":6484,"mutability":"mutable","name":"share","nameLocation":"8147:5:34","nodeType":"VariableDeclaration","scope":6546,"src":"8139:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6483,"name":"uint256","nodeType":"ElementaryTypeName","src":"8139:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6495,"initialValue":{"arguments":[{"baseExpression":{"id":6487,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"8172:11:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":6489,"indexExpression":{"id":6488,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6448,"src":"8184:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8172:20:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":6491,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6461,"src":"8210:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}],"id":6490,"name":"_tokenBalanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6193,"src":"8194:15:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Asset_$4632_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct Asset storage pointer) view returns (uint256)"}},"id":6492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8194:22:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":6493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8218:5:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":6485,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"8155:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8162:9:34","memberName":"_toShares","nodeType":"MemberAccess","referencedDeclaration":7720,"src":"8155:16:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256,uint256,bool) pure returns (uint256)"}},"id":6494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8155:69:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8139:85:34"},{"expression":{"arguments":[{"id":6497,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6450,"src":"8241:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6498,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6448,"src":"8245:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6499,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6484,"src":"8254:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6496,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5204,"src":"8235:5:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":6500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8235:25:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6501,"nodeType":"ExpressionStatement","src":"8235:25:34"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":[],"expression":{"id":6502,"name":"wrappedNative","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6154,"src":"8295:13:34","typeDescriptions":{"typeIdentifier":"t_contract$_IWrappedNative_$8387","typeString":"contract IWrappedNative"}},"id":6504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8309:7:34","memberName":"deposit","nodeType":"MemberAccess","referencedDeclaration":8381,"src":"8295:21:34","typeDescriptions":{"typeIdentifier":"t_function_external_payable$__$returns$__$","typeString":"function () payable external"}},"id":6506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":6505,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"8325:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"8295:38:34","typeDescriptions":{"typeIdentifier":"t_function_external_payable$__$returns$__$value","typeString":"function () payable external"}},"id":6507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8295:40:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6508,"nodeType":"ExpressionStatement","src":"8295:40:34"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":6514,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6461,"src":"8504:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6515,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8510:8:34","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"8504:14:34","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}],"id":6513,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8496:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6512,"name":"address","nodeType":"ElementaryTypeName","src":"8496:7:34","typeDescriptions":{}}},"id":6516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8496:23:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6517,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"8521:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6509,"name":"wrappedNative","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6154,"src":"8469:13:34","typeDescriptions":{"typeIdentifier":"t_contract$_IWrappedNative_$8387","typeString":"contract IWrappedNative"}},"id":6511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8483:12:34","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1124,"src":"8469:26:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$540_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$540_$","typeString":"function (contract IERC20,address,uint256)"}},"id":6518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8469:59:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6519,"nodeType":"ExpressionStatement","src":"8469:59:34"},{"expression":{"arguments":[{"id":6525,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"8563:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":6520,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6461,"src":"8538:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6523,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8544:8:34","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"8538:14:34","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"id":6524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8553:9:34","memberName":"deposited","nodeType":"MemberAccess","referencedDeclaration":8355,"src":"8538:24:34","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":6526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8538:32:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6527,"nodeType":"ExpressionStatement","src":"8538:32:34"},{"eventCall":{"arguments":[{"expression":{"id":6529,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8596:3:34","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8600:6:34","memberName":"sender","nodeType":"MemberAccess","src":"8596:10:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":6531,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8608:3:34","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8612:6:34","memberName":"sender","nodeType":"MemberAccess","src":"8608:10:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6533,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6450,"src":"8620:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6534,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6448,"src":"8624:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6535,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"8633:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6536,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6484,"src":"8641:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6537,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6455,"src":"8648:9:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6538,"name":"shareOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6457,"src":"8659:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":6539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8669:5:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6528,"name":"Deposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6133,"src":"8586:9:34","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,address,uint256,uint256,uint256,uint256,uint256,bool)"}},"id":6540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8586:89:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6541,"nodeType":"EmitStatement","src":"8581:94:34"},{"expression":{"components":[{"id":6542,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"8694:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6543,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6484,"src":"8702:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6544,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8693:15:34","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":6458,"id":6545,"nodeType":"Return","src":"8686:22:34"}]},"documentation":{"id":6446,"nodeType":"StructuredDocumentation","src":"7457:286:34","text":"@notice Deposit ETH asset\n @param assetId The id of the asset.\n @param to which account to push the tokens.\n @param amount ETH amount to deposit.\n @return amountOut The amount deposited.\n @return shareOut The deposited amount repesented in shares."},"functionSelector":"70400fbe","id":6547,"implemented":true,"kind":"function","modifiers":[],"name":"depositETHAsset","nameLocation":"7757:15:34","nodeType":"FunctionDefinition","parameters":{"id":6453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6448,"mutability":"mutable","name":"assetId","nameLocation":"7790:7:34","nodeType":"VariableDeclaration","scope":6547,"src":"7782:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6447,"name":"uint256","nodeType":"ElementaryTypeName","src":"7782:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6450,"mutability":"mutable","name":"to","nameLocation":"7815:2:34","nodeType":"VariableDeclaration","scope":6547,"src":"7807:10:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6449,"name":"address","nodeType":"ElementaryTypeName","src":"7807:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6452,"mutability":"mutable","name":"amount","nameLocation":"7835:6:34","nodeType":"VariableDeclaration","scope":6547,"src":"7827:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6451,"name":"uint256","nodeType":"ElementaryTypeName","src":"7827:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7772:75:34"},"returnParameters":{"id":6458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6455,"mutability":"mutable","name":"amountOut","nameLocation":"7880:9:34","nodeType":"VariableDeclaration","scope":6547,"src":"7872:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6454,"name":"uint256","nodeType":"ElementaryTypeName","src":"7872:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6457,"mutability":"mutable","name":"shareOut","nameLocation":"7899:8:34","nodeType":"VariableDeclaration","scope":6547,"src":"7891:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6456,"name":"uint256","nodeType":"ElementaryTypeName","src":"7891:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7871:37:34"},"scope":7407,"src":"7748:967:34","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":6608,"nodeType":"Block","src":"9313:394:34","statements":[{"assignments":[6571],"declarations":[{"constant":false,"id":6571,"mutability":"mutable","name":"asset","nameLocation":"9355:5:34","nodeType":"VariableDeclaration","scope":6608,"src":"9341:19:34","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"},"typeName":{"id":6570,"nodeType":"UserDefinedTypeName","pathNode":{"id":6569,"name":"Asset","nameLocations":["9341:5:34"],"nodeType":"IdentifierPath","referencedDeclaration":4632,"src":"9341:5:34"},"referencedDeclaration":4632,"src":"9341:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"}},"visibility":"internal"}],"id":6575,"initialValue":{"baseExpression":{"id":6572,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"9363:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":6574,"indexExpression":{"id":6573,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6550,"src":"9370:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9363:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}},"nodeType":"VariableDeclarationStatement","src":"9341:37:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":6581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6577,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6571,"src":"9396:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6578,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9402:9:34","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"9396:15:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":6579,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"9415:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":6580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9425:6:34","memberName":"Native","nodeType":"MemberAccess","referencedDeclaration":8283,"src":"9415:16:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"9396:35:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f783a2063616e2774207769746864726177204e6174697665","id":6582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9433:33:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_0536f1a0340e895fd1ecf293f9cf27bf8401a8f1608f03fa96c3cb2577fb6e62","typeString":"literal_string \"YieldBox: can't withdraw Native\""},"value":"YieldBox: can't withdraw Native"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0536f1a0340e895fd1ecf293f9cf27bf8401a8f1608f03fa96c3cb2577fb6e62","typeString":"literal_string \"YieldBox: can't withdraw Native\""}],"id":6576,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9388:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9388:79:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6584,"nodeType":"ExpressionStatement","src":"9388:79:34"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":6589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6585,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6571,"src":"9518:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6586,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9524:9:34","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"9518:15:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":6587,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"9537:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":6588,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9547:6:34","memberName":"ERC721","nodeType":"MemberAccess","referencedDeclaration":8285,"src":"9537:16:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"9518:35:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6598,"nodeType":"IfStatement","src":"9514:111:34","trueBody":{"id":6597,"nodeType":"Block","src":"9555:70:34","statements":[{"expression":{"arguments":[{"id":6591,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6571,"src":"9589:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},{"id":6592,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6550,"src":"9596:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6593,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6552,"src":"9605:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6594,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6554,"src":"9611:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6590,"name":"_withdrawNFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6658,"src":"9576:12:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Asset_$4632_storage_ptr_$_t_uint256_$_t_address_$_t_address_$returns$_t_uint256_$_t_uint256_$","typeString":"function (struct Asset storage pointer,uint256,address,address) returns (uint256,uint256)"}},"id":6595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9576:38:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":6568,"id":6596,"nodeType":"Return","src":"9569:45:34"}]}},{"expression":{"arguments":[{"id":6600,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6571,"src":"9660:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},{"id":6601,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6550,"src":"9667:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6602,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6552,"src":"9676:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6603,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6554,"src":"9682:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6604,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6556,"src":"9686:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6605,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6558,"src":"9694:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6599,"name":"_withdrawFungible","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6745,"src":"9642:17:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Asset_$4632_storage_ptr_$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (struct Asset storage pointer,uint256,address,address,uint256,uint256) returns (uint256,uint256)"}},"id":6606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9642:58:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":6568,"id":6607,"nodeType":"Return","src":"9635:65:34"}]},"documentation":{"id":6548,"nodeType":"StructuredDocumentation","src":"8721:373:34","text":"@notice Withdraws an amount of `token` from a user account.\n @param assetId The id of the asset.\n @param from which user to pull the tokens.\n @param to which user to push the tokens.\n @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\n @param share Like above, but `share` takes precedence over `amount`."},"functionSelector":"8d2e63b8","id":6609,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6561,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6552,"src":"9252:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6562,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6550,"src":"9258:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6563,"kind":"modifierInvocation","modifierName":{"id":6560,"name":"allowed","nameLocations":["9244:7:34"],"nodeType":"IdentifierPath","referencedDeclaration":5699,"src":"9244:7:34"},"nodeType":"ModifierInvocation","src":"9244:22:34"}],"name":"withdraw","nameLocation":"9108:8:34","nodeType":"FunctionDefinition","parameters":{"id":6559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6550,"mutability":"mutable","name":"assetId","nameLocation":"9134:7:34","nodeType":"VariableDeclaration","scope":6609,"src":"9126:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6549,"name":"uint256","nodeType":"ElementaryTypeName","src":"9126:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6552,"mutability":"mutable","name":"from","nameLocation":"9159:4:34","nodeType":"VariableDeclaration","scope":6609,"src":"9151:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6551,"name":"address","nodeType":"ElementaryTypeName","src":"9151:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6554,"mutability":"mutable","name":"to","nameLocation":"9181:2:34","nodeType":"VariableDeclaration","scope":6609,"src":"9173:10:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6553,"name":"address","nodeType":"ElementaryTypeName","src":"9173:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6556,"mutability":"mutable","name":"amount","nameLocation":"9201:6:34","nodeType":"VariableDeclaration","scope":6609,"src":"9193:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6555,"name":"uint256","nodeType":"ElementaryTypeName","src":"9193:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6558,"mutability":"mutable","name":"share","nameLocation":"9225:5:34","nodeType":"VariableDeclaration","scope":6609,"src":"9217:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6557,"name":"uint256","nodeType":"ElementaryTypeName","src":"9217:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9116:120:34"},"returnParameters":{"id":6568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6565,"mutability":"mutable","name":"amountOut","nameLocation":"9284:9:34","nodeType":"VariableDeclaration","scope":6609,"src":"9276:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6564,"name":"uint256","nodeType":"ElementaryTypeName","src":"9276:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6567,"mutability":"mutable","name":"shareOut","nameLocation":"9303:8:34","nodeType":"VariableDeclaration","scope":6609,"src":"9295:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6566,"name":"uint256","nodeType":"ElementaryTypeName","src":"9295:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9275:37:34"},"scope":7407,"src":"9099:608:34","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6657,"nodeType":"Block","src":"10153:196:34","statements":[{"expression":{"arguments":[{"id":6627,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6617,"src":"10169:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6628,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6615,"src":"10175:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":6629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10184:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":6626,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"10163:5:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":6630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10163:23:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6631,"nodeType":"ExpressionStatement","src":"10163:23:34"},{"expression":{"arguments":[{"id":6637,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6619,"src":"10245:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"31","id":6638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10249:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"expression":{"id":6632,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6613,"src":"10221:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6635,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10227:8:34","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"10221:14:34","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"id":6636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10236:8:34","memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":8363,"src":"10221:23:34","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":6639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10221:30:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6640,"nodeType":"ExpressionStatement","src":"10221:30:34"},{"eventCall":{"arguments":[{"expression":{"id":6642,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"10276:3:34","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10280:6:34","memberName":"sender","nodeType":"MemberAccess","src":"10276:10:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6644,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6617,"src":"10288:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6645,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6619,"src":"10294:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6646,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6615,"src":"10298:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":6647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10307:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"31","id":6648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10310:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"31","id":6649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"31","id":6650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10316:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":6641,"name":"Withdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6151,"src":"10267:8:34","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256,uint256,uint256,uint256)"}},"id":6651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10267:51:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6652,"nodeType":"EmitStatement","src":"10262:56:34"},{"expression":{"components":[{"hexValue":"31","id":6653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10337:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"31","id":6654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10340:1:34","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"id":6655,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"10336:6:34","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_1_by_1_$_t_rational_1_by_1_$","typeString":"tuple(int_const 1,int_const 1)"}},"functionReturnParameters":6625,"id":6656,"nodeType":"Return","src":"10329:13:34"}]},"documentation":{"id":6610,"nodeType":"StructuredDocumentation","src":"9713:256:34","text":"@notice Handles burning and withdrawal of ERC20 and 1155 tokens.\n @param asset The asset to withdraw.\n @param assetId The id of the asset.\n @param from which user to pull the tokens.\n @param to which user to push the tokens."},"id":6658,"implemented":true,"kind":"function","modifiers":[],"name":"_withdrawNFT","nameLocation":"9983:12:34","nodeType":"FunctionDefinition","parameters":{"id":6620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6613,"mutability":"mutable","name":"asset","nameLocation":"10019:5:34","nodeType":"VariableDeclaration","scope":6658,"src":"10005:19:34","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"},"typeName":{"id":6612,"nodeType":"UserDefinedTypeName","pathNode":{"id":6611,"name":"Asset","nameLocations":["10005:5:34"],"nodeType":"IdentifierPath","referencedDeclaration":4632,"src":"10005:5:34"},"referencedDeclaration":4632,"src":"10005:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"}},"visibility":"internal"},{"constant":false,"id":6615,"mutability":"mutable","name":"assetId","nameLocation":"10042:7:34","nodeType":"VariableDeclaration","scope":6658,"src":"10034:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6614,"name":"uint256","nodeType":"ElementaryTypeName","src":"10034:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6617,"mutability":"mutable","name":"from","nameLocation":"10067:4:34","nodeType":"VariableDeclaration","scope":6658,"src":"10059:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6616,"name":"address","nodeType":"ElementaryTypeName","src":"10059:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6619,"mutability":"mutable","name":"to","nameLocation":"10089:2:34","nodeType":"VariableDeclaration","scope":6658,"src":"10081:10:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6618,"name":"address","nodeType":"ElementaryTypeName","src":"10081:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9995:102:34"},"returnParameters":{"id":6625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6622,"mutability":"mutable","name":"amountOut","nameLocation":"10124:9:34","nodeType":"VariableDeclaration","scope":6658,"src":"10116:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6621,"name":"uint256","nodeType":"ElementaryTypeName","src":"10116:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6624,"mutability":"mutable","name":"shareOut","nameLocation":"10143:8:34","nodeType":"VariableDeclaration","scope":6658,"src":"10135:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6623,"name":"uint256","nodeType":"ElementaryTypeName","src":"10135:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10115:37:34"},"scope":7407,"src":"9974:375:34","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6744,"nodeType":"Block","src":"11013:746:34","statements":[{"assignments":[6680],"declarations":[{"constant":false,"id":6680,"mutability":"mutable","name":"totalAmount","nameLocation":"11050:11:34","nodeType":"VariableDeclaration","scope":6744,"src":"11042:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6679,"name":"uint256","nodeType":"ElementaryTypeName","src":"11042:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6684,"initialValue":{"arguments":[{"id":6682,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6662,"src":"11080:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}],"id":6681,"name":"_tokenBalanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6193,"src":"11064:15:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Asset_$4632_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct Asset storage pointer) view returns (uint256)"}},"id":6683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11064:22:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11042:44:34"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6685,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6672,"src":"11100:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11109:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11100:10:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":6711,"nodeType":"Block","src":"11344:177:34","statements":[{"expression":{"id":6709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6700,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6670,"src":"11444:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":6703,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"11469:11:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":6705,"indexExpression":{"id":6704,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6664,"src":"11481:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11469:20:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6706,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6680,"src":"11491:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":6707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11504:5:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":6701,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6672,"src":"11453:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11459:9:34","memberName":"_toAmount","nodeType":"MemberAccess","referencedDeclaration":7766,"src":"11453:15:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256,uint256,bool) pure returns (uint256)"}},"id":6708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11453:57:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11444:66:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6710,"nodeType":"ExpressionStatement","src":"11444:66:34"}]},"id":6712,"nodeType":"IfStatement","src":"11096:425:34","trueBody":{"id":6699,"nodeType":"Block","src":"11112:226:34","statements":[{"expression":{"id":6697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6688,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6672,"src":"11262:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":6691,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"11287:11:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":6693,"indexExpression":{"id":6692,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6664,"src":"11299:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11287:20:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6694,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6680,"src":"11309:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":6695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11322:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":6689,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6670,"src":"11270:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11277:9:34","memberName":"_toShares","nodeType":"MemberAccess","referencedDeclaration":7720,"src":"11270:16:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256,uint256,bool) pure returns (uint256)"}},"id":6696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11270:57:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11262:65:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6698,"nodeType":"ExpressionStatement","src":"11262:65:34"}]}},{"expression":{"arguments":[{"id":6714,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6666,"src":"11537:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6715,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6664,"src":"11543:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6716,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6672,"src":"11552:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6713,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5250,"src":"11531:5:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":6717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11531:27:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6718,"nodeType":"ExpressionStatement","src":"11531:27:34"},{"expression":{"arguments":[{"id":6724,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6668,"src":"11617:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6725,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6670,"src":"11621:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":6719,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6662,"src":"11593:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset storage pointer"}},"id":6722,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11599:8:34","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"11593:14:34","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"id":6723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11608:8:34","memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":8363,"src":"11593:23:34","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":6726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11593:35:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6727,"nodeType":"ExpressionStatement","src":"11593:35:34"},{"eventCall":{"arguments":[{"expression":{"id":6729,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"11653:3:34","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11657:6:34","memberName":"sender","nodeType":"MemberAccess","src":"11653:10:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6731,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6666,"src":"11665:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6732,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6668,"src":"11671:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6733,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6664,"src":"11675:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6734,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6670,"src":"11684:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6735,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6672,"src":"11692:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6736,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6675,"src":"11699:9:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6737,"name":"shareOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6677,"src":"11710:8:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6728,"name":"Withdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6151,"src":"11644:8:34","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256,uint256,uint256,uint256)"}},"id":6738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11644:75:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6739,"nodeType":"EmitStatement","src":"11639:80:34"},{"expression":{"components":[{"id":6740,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6670,"src":"11738:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6741,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6672,"src":"11746:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6742,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11737:15:34","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":6678,"id":6743,"nodeType":"Return","src":"11730:22:34"}]},"documentation":{"id":6659,"nodeType":"StructuredDocumentation","src":"10355:422:34","text":"@notice Handles burning and withdrawal of ERC20 and 1155 tokens.\n @param asset The asset to withdraw.\n @param assetId The id of the asset.\n @param from which user to pull the tokens.\n @param to which user to push the tokens.\n @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\n @param share Like above, but `share` takes precedence over `amount`."},"id":6745,"implemented":true,"kind":"function","modifiers":[],"name":"_withdrawFungible","nameLocation":"10791:17:34","nodeType":"FunctionDefinition","parameters":{"id":6673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6662,"mutability":"mutable","name":"asset","nameLocation":"10832:5:34","nodeType":"VariableDeclaration","scope":6745,"src":"10818:19:34","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"},"typeName":{"id":6661,"nodeType":"UserDefinedTypeName","pathNode":{"id":6660,"name":"Asset","nameLocations":["10818:5:34"],"nodeType":"IdentifierPath","referencedDeclaration":4632,"src":"10818:5:34"},"referencedDeclaration":4632,"src":"10818:5:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"}},"visibility":"internal"},{"constant":false,"id":6664,"mutability":"mutable","name":"assetId","nameLocation":"10855:7:34","nodeType":"VariableDeclaration","scope":6745,"src":"10847:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6663,"name":"uint256","nodeType":"ElementaryTypeName","src":"10847:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6666,"mutability":"mutable","name":"from","nameLocation":"10880:4:34","nodeType":"VariableDeclaration","scope":6745,"src":"10872:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6665,"name":"address","nodeType":"ElementaryTypeName","src":"10872:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6668,"mutability":"mutable","name":"to","nameLocation":"10902:2:34","nodeType":"VariableDeclaration","scope":6745,"src":"10894:10:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6667,"name":"address","nodeType":"ElementaryTypeName","src":"10894:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6670,"mutability":"mutable","name":"amount","nameLocation":"10922:6:34","nodeType":"VariableDeclaration","scope":6745,"src":"10914:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6669,"name":"uint256","nodeType":"ElementaryTypeName","src":"10914:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6672,"mutability":"mutable","name":"share","nameLocation":"10946:5:34","nodeType":"VariableDeclaration","scope":6745,"src":"10938:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6671,"name":"uint256","nodeType":"ElementaryTypeName","src":"10938:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10808:149:34"},"returnParameters":{"id":6678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6675,"mutability":"mutable","name":"amountOut","nameLocation":"10984:9:34","nodeType":"VariableDeclaration","scope":6745,"src":"10976:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6674,"name":"uint256","nodeType":"ElementaryTypeName","src":"10976:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6677,"mutability":"mutable","name":"shareOut","nameLocation":"11003:8:34","nodeType":"VariableDeclaration","scope":6745,"src":"10995:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6676,"name":"uint256","nodeType":"ElementaryTypeName","src":"10995:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10975:37:34"},"scope":7407,"src":"10782:977:34","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6768,"nodeType":"Block","src":"12175:58:34","statements":[{"expression":{"arguments":[{"id":6762,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6748,"src":"12201:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6763,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6750,"src":"12207:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6764,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6752,"src":"12211:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6765,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6754,"src":"12220:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6761,"name":"_transferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5297,"src":"12185:15:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":6766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12185:41:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6767,"nodeType":"ExpressionStatement","src":"12185:41:34"}]},"documentation":{"id":6746,"nodeType":"StructuredDocumentation","src":"11765:261:34","text":"@notice Transfer shares from a user account to another one.\n @param from which user to pull the tokens.\n @param to which user to push the tokens.\n @param assetId The id of the asset.\n @param share The amount of `token` in shares."},"functionSelector":"0411b252","id":6769,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6757,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6748,"src":"12160:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6758,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6752,"src":"12166:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6759,"kind":"modifierInvocation","modifierName":{"id":6756,"name":"allowed","nameLocations":["12152:7:34"],"nodeType":"IdentifierPath","referencedDeclaration":5699,"src":"12152:7:34"},"nodeType":"ModifierInvocation","src":"12152:22:34"}],"name":"transfer","nameLocation":"12040:8:34","nodeType":"FunctionDefinition","parameters":{"id":6755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6748,"mutability":"mutable","name":"from","nameLocation":"12066:4:34","nodeType":"VariableDeclaration","scope":6769,"src":"12058:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6747,"name":"address","nodeType":"ElementaryTypeName","src":"12058:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6750,"mutability":"mutable","name":"to","nameLocation":"12088:2:34","nodeType":"VariableDeclaration","scope":6769,"src":"12080:10:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6749,"name":"address","nodeType":"ElementaryTypeName","src":"12080:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6752,"mutability":"mutable","name":"assetId","nameLocation":"12108:7:34","nodeType":"VariableDeclaration","scope":6769,"src":"12100:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6751,"name":"uint256","nodeType":"ElementaryTypeName","src":"12100:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6754,"mutability":"mutable","name":"share","nameLocation":"12133:5:34","nodeType":"VariableDeclaration","scope":6769,"src":"12125:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6753,"name":"uint256","nodeType":"ElementaryTypeName","src":"12125:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12048:96:34"},"returnParameters":{"id":6760,"nodeType":"ParameterList","parameters":[],"src":"12175:0:34"},"scope":7407,"src":"12031:202:34","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6797,"nodeType":"Block","src":"12424:61:34","statements":[{"expression":{"arguments":[{"id":6791,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6771,"src":"12449:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6792,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6773,"src":"12455:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6793,"name":"assetIds_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6776,"src":"12459:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":6794,"name":"shares_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6779,"src":"12470:7:34","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"id":6790,"name":"_transferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5375,"src":"12434:14:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$","typeString":"function (address,address,uint256[] calldata,uint256[] calldata)"}},"id":6795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12434:44:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6796,"nodeType":"ExpressionStatement","src":"12434:44:34"}]},"functionSelector":"daf210b1","id":6798,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6782,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6771,"src":"12399:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":6785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12410:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6784,"name":"uint256","nodeType":"ElementaryTypeName","src":"12410:7:34","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":6783,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12405:4:34","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12405:13:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":6787,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12419:3:34","memberName":"max","nodeType":"MemberAccess","src":"12405:17:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6788,"kind":"modifierInvocation","modifierName":{"id":6781,"name":"allowed","nameLocations":["12391:7:34"],"nodeType":"IdentifierPath","referencedDeclaration":5699,"src":"12391:7:34"},"nodeType":"ModifierInvocation","src":"12391:32:34"}],"name":"batchTransfer","nameLocation":"12248:13:34","nodeType":"FunctionDefinition","parameters":{"id":6780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6771,"mutability":"mutable","name":"from","nameLocation":"12279:4:34","nodeType":"VariableDeclaration","scope":6798,"src":"12271:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6770,"name":"address","nodeType":"ElementaryTypeName","src":"12271:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6773,"mutability":"mutable","name":"to","nameLocation":"12301:2:34","nodeType":"VariableDeclaration","scope":6798,"src":"12293:10:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6772,"name":"address","nodeType":"ElementaryTypeName","src":"12293:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6776,"mutability":"mutable","name":"assetIds_","nameLocation":"12332:9:34","nodeType":"VariableDeclaration","scope":6798,"src":"12313:28:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6774,"name":"uint256","nodeType":"ElementaryTypeName","src":"12313:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6775,"nodeType":"ArrayTypeName","src":"12313:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":6779,"mutability":"mutable","name":"shares_","nameLocation":"12370:7:34","nodeType":"VariableDeclaration","scope":6798,"src":"12351:26:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6777,"name":"uint256","nodeType":"ElementaryTypeName","src":"12351:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6778,"nodeType":"ArrayTypeName","src":"12351:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12261:122:34"},"returnParameters":{"id":6789,"nodeType":"ParameterList","parameters":[],"src":"12424:0:34"},"scope":7407,"src":"12239:246:34","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6905,"nodeType":"Block","src":"12978:598:34","statements":[{"assignments":[6821],"declarations":[{"constant":false,"id":6821,"mutability":"mutable","name":"len","nameLocation":"13014:3:34","nodeType":"VariableDeclaration","scope":6905,"src":"13006:11:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6820,"name":"uint256","nodeType":"ElementaryTypeName","src":"13006:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6824,"initialValue":{"expression":{"id":6822,"name":"tos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6804,"src":"13020:3:34","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":6823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13024:6:34","memberName":"length","nodeType":"MemberAccess","src":"13020:10:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13006:24:34"},{"body":{"id":6847,"nodeType":"Block","src":"13074:118:34","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":6836,"name":"tos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6804,"src":"13096:3:34","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":6838,"indexExpression":{"id":6837,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6826,"src":"13100:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13096:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":6841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13114:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13106:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6839,"name":"address","nodeType":"ElementaryTypeName","src":"13106:7:34","typeDescriptions":{}}},"id":6842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13106:10:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13096:20:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f783a20746f206e6f7420736574","id":6844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13118:22:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_aae4d42dc2cae0ed0a66c189178bb8be26277e52c07831c8adcde992099338f8","typeString":"literal_string \"YieldBox: to not set\""},"value":"YieldBox: to not set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_aae4d42dc2cae0ed0a66c189178bb8be26277e52c07831c8adcde992099338f8","typeString":"literal_string \"YieldBox: to not set\""}],"id":6835,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13088:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13088:53:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6846,"nodeType":"ExpressionStatement","src":"13088:53:34"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6829,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6826,"src":"13060:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6830,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6821,"src":"13064:3:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13060:7:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6848,"initializationExpression":{"assignments":[6826],"declarations":[{"constant":false,"id":6826,"mutability":"mutable","name":"i","nameLocation":"13053:1:34","nodeType":"VariableDeclaration","scope":6848,"src":"13045:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6825,"name":"uint256","nodeType":"ElementaryTypeName","src":"13045:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6828,"initialValue":{"hexValue":"30","id":6827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13057:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13045:13:34"},"loopExpression":{"expression":{"id":6833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"13069:3:34","subExpression":{"id":6832,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6826,"src":"13069:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6834,"nodeType":"ExpressionStatement","src":"13069:3:34"},"nodeType":"ForStatement","src":"13040:152:34"},{"assignments":[6850],"declarations":[{"constant":false,"id":6850,"mutability":"mutable","name":"totalAmount","nameLocation":"13229:11:34","nodeType":"VariableDeclaration","scope":6905,"src":"13221:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6849,"name":"uint256","nodeType":"ElementaryTypeName","src":"13221:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6851,"nodeType":"VariableDeclarationStatement","src":"13221:19:34"},{"body":{"id":6895,"nodeType":"Block","src":"13284:237:34","statements":[{"assignments":[6863],"declarations":[{"constant":false,"id":6863,"mutability":"mutable","name":"to","nameLocation":"13306:2:34","nodeType":"VariableDeclaration","scope":6895,"src":"13298:10:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6862,"name":"address","nodeType":"ElementaryTypeName","src":"13298:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":6867,"initialValue":{"baseExpression":{"id":6864,"name":"tos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6804,"src":"13311:3:34","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":6866,"indexExpression":{"id":6865,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6853,"src":"13315:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13311:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"13298:19:34"},{"assignments":[6869],"declarations":[{"constant":false,"id":6869,"mutability":"mutable","name":"share_","nameLocation":"13339:6:34","nodeType":"VariableDeclaration","scope":6895,"src":"13331:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6868,"name":"uint256","nodeType":"ElementaryTypeName","src":"13331:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6873,"initialValue":{"baseExpression":{"id":6870,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6809,"src":"13348:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":6872,"indexExpression":{"id":6871,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6853,"src":"13355:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13348:9:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13331:26:34"},{"expression":{"id":6880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":6874,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"13371:9:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":6877,"indexExpression":{"id":6875,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6863,"src":"13381:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13371:13:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":6878,"indexExpression":{"id":6876,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6806,"src":"13385:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13371:22:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":6879,"name":"share_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6869,"src":"13397:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13371:32:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6881,"nodeType":"ExpressionStatement","src":"13371:32:34"},{"expression":{"id":6884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6882,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6850,"src":"13417:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":6883,"name":"share_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6869,"src":"13432:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13417:21:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6885,"nodeType":"ExpressionStatement","src":"13417:21:34"},{"eventCall":{"arguments":[{"expression":{"id":6887,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13472:3:34","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13476:6:34","memberName":"sender","nodeType":"MemberAccess","src":"13472:10:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6889,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6801,"src":"13484:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6890,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6863,"src":"13490:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6891,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6806,"src":"13494:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6892,"name":"share_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6869,"src":"13503:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6886,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"13457:14:34","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":6893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13457:53:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6894,"nodeType":"EmitStatement","src":"13452:58:34"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6856,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6853,"src":"13270:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6857,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6821,"src":"13274:3:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13270:7:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6896,"initializationExpression":{"assignments":[6853],"declarations":[{"constant":false,"id":6853,"mutability":"mutable","name":"i","nameLocation":"13263:1:34","nodeType":"VariableDeclaration","scope":6896,"src":"13255:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6852,"name":"uint256","nodeType":"ElementaryTypeName","src":"13255:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6855,"initialValue":{"hexValue":"30","id":6854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13267:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13255:13:34"},"loopExpression":{"expression":{"id":6860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"13279:3:34","subExpression":{"id":6859,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6853,"src":"13279:1:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6861,"nodeType":"ExpressionStatement","src":"13279:3:34"},"nodeType":"ForStatement","src":"13250:271:34"},{"expression":{"id":6903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":6897,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"13530:9:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":6900,"indexExpression":{"id":6898,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6801,"src":"13540:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13530:15:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":6901,"indexExpression":{"id":6899,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6806,"src":"13546:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13530:24:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":6902,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6850,"src":"13558:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13530:39:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6904,"nodeType":"ExpressionStatement","src":"13530:39:34"}]},"documentation":{"id":6799,"nodeType":"StructuredDocumentation","src":"12491:296:34","text":"@notice Transfer shares from a user account to multiple other ones.\n @param assetId The id of the asset.\n @param from which user to pull the tokens.\n @param tos The receivers of the tokens.\n @param shares The amount of `token` in shares for each receiver in `tos`."},"functionSelector":"215b595a","id":6906,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6812,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6801,"src":"12953:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":6815,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12964:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":6814,"name":"uint256","nodeType":"ElementaryTypeName","src":"12964:7:34","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":6813,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12959:4:34","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":6816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12959:13:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":6817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12973:3:34","memberName":"max","nodeType":"MemberAccess","src":"12959:17:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":6818,"kind":"modifierInvocation","modifierName":{"id":6811,"name":"allowed","nameLocations":["12945:7:34"],"nodeType":"IdentifierPath","referencedDeclaration":5699,"src":"12945:7:34"},"nodeType":"ModifierInvocation","src":"12945:32:34"}],"name":"transferMultiple","nameLocation":"12801:16:34","nodeType":"FunctionDefinition","parameters":{"id":6810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6801,"mutability":"mutable","name":"from","nameLocation":"12835:4:34","nodeType":"VariableDeclaration","scope":6906,"src":"12827:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6800,"name":"address","nodeType":"ElementaryTypeName","src":"12827:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6804,"mutability":"mutable","name":"tos","nameLocation":"12868:3:34","nodeType":"VariableDeclaration","scope":6906,"src":"12849:22:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":6802,"name":"address","nodeType":"ElementaryTypeName","src":"12849:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6803,"nodeType":"ArrayTypeName","src":"12849:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":6806,"mutability":"mutable","name":"assetId","nameLocation":"12889:7:34","nodeType":"VariableDeclaration","scope":6906,"src":"12881:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6805,"name":"uint256","nodeType":"ElementaryTypeName","src":"12881:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6809,"mutability":"mutable","name":"shares","nameLocation":"12925:6:34","nodeType":"VariableDeclaration","scope":6906,"src":"12906:25:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6807,"name":"uint256","nodeType":"ElementaryTypeName","src":"12906:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6808,"nodeType":"ArrayTypeName","src":"12906:9:34","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12817:120:34"},"returnParameters":{"id":6819,"nodeType":"ParameterList","parameters":[],"src":"12978:0:34"},"scope":7407,"src":"12792:784:34","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[5546],"body":{"id":6942,"nodeType":"Block","src":"13829:282:34","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6916,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6909,"src":"13865:8:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":6919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13885:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6918,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13877:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6917,"name":"address","nodeType":"ElementaryTypeName","src":"13877:7:34","typeDescriptions":{}}},"id":6920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13877:10:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13865:22:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f783a206f70657261746f72206e6f7420736574","id":6922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13889:28:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_75e246cd26eb305700c6f3ee41975914721bdf7957a08028aa136515d8f36145","typeString":"literal_string \"YieldBox: operator not set\""},"value":"YieldBox: operator not set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_75e246cd26eb305700c6f3ee41975914721bdf7957a08028aa136515d8f36145","typeString":"literal_string \"YieldBox: operator not set\""}],"id":6915,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13857:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13857:61:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6924,"nodeType":"ExpressionStatement","src":"13857:61:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6926,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6909,"src":"13962:8:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":6929,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"13982:4:34","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}],"id":6928,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13974:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6927,"name":"address","nodeType":"ElementaryTypeName","src":"13974:7:34","typeDescriptions":{}}},"id":6930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13974:13:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13962:25:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f783a2063616e277420617070726f7665207969656c64426f78","id":6932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13989:34:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_df6c9fd0143df7504e374cd5af2a29a5b916d79a9bcce32ca56a40b46b2859d1","typeString":"literal_string \"YieldBox: can't approve yieldBox\""},"value":"YieldBox: can't approve yieldBox"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df6c9fd0143df7504e374cd5af2a29a5b916d79a9bcce32ca56a40b46b2859d1","typeString":"literal_string \"YieldBox: can't approve yieldBox\""}],"id":6925,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13954:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13954:70:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6934,"nodeType":"ExpressionStatement","src":"13954:70:34"},{"expression":{"arguments":[{"expression":{"id":6936,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"14073:3:34","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14077:6:34","memberName":"sender","nodeType":"MemberAccess","src":"14073:10:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6938,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6909,"src":"14085:8:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6939,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6911,"src":"14095:8:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6935,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[6969],"referencedDeclaration":6969,"src":"14054:18:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":6940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14054:50:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6941,"nodeType":"ExpressionStatement","src":"14054:50:34"}]},"documentation":{"id":6907,"nodeType":"StructuredDocumentation","src":"13582:164:34","text":"@notice Update approval status for an operator\n @param operator The address approved to perform actions on your behalf\n @param approved True/False"},"functionSelector":"a22cb465","id":6943,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"13760:17:34","nodeType":"FunctionDefinition","overrides":{"id":6913,"nodeType":"OverrideSpecifier","overrides":[],"src":"13820:8:34"},"parameters":{"id":6912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6909,"mutability":"mutable","name":"operator","nameLocation":"13786:8:34","nodeType":"VariableDeclaration","scope":6943,"src":"13778:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6908,"name":"address","nodeType":"ElementaryTypeName","src":"13778:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6911,"mutability":"mutable","name":"approved","nameLocation":"13801:8:34","nodeType":"VariableDeclaration","scope":6943,"src":"13796:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6910,"name":"bool","nodeType":"ElementaryTypeName","src":"13796:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13777:33:34"},"returnParameters":{"id":6914,"nodeType":"ParameterList","parameters":[],"src":"13829:0:34"},"scope":7407,"src":"13751:360:34","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[7606],"body":{"id":6968,"nodeType":"Block","src":"14459:119:34","statements":[{"expression":{"id":6960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":6954,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5063,"src":"14469:16:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":6957,"indexExpression":{"id":6955,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6946,"src":"14486:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14469:24:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":6958,"indexExpression":{"id":6956,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6948,"src":"14494:8:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14469:34:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6959,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6950,"src":"14506:8:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14469:45:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6961,"nodeType":"ExpressionStatement","src":"14469:45:34"},{"eventCall":{"arguments":[{"id":6963,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6946,"src":"14544:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6964,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6948,"src":"14552:8:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6965,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6950,"src":"14562:8:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":6962,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"14529:14:34","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":6966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14529:42:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6967,"nodeType":"EmitStatement","src":"14524:47:34"}]},"documentation":{"id":6944,"nodeType":"StructuredDocumentation","src":"14117:213:34","text":"@notice Update approval status for an operator\n @param _owner The YieldBox account owner\n @param operator The address approved to perform actions on your behalf\n @param approved True/False"},"id":6969,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"14344:18:34","nodeType":"FunctionDefinition","overrides":{"id":6952,"nodeType":"OverrideSpecifier","overrides":[],"src":"14451:8:34"},"parameters":{"id":6951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6946,"mutability":"mutable","name":"_owner","nameLocation":"14380:6:34","nodeType":"VariableDeclaration","scope":6969,"src":"14372:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6945,"name":"address","nodeType":"ElementaryTypeName","src":"14372:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6948,"mutability":"mutable","name":"operator","nameLocation":"14404:8:34","nodeType":"VariableDeclaration","scope":6969,"src":"14396:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6947,"name":"address","nodeType":"ElementaryTypeName","src":"14396:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6950,"mutability":"mutable","name":"approved","nameLocation":"14427:8:34","nodeType":"VariableDeclaration","scope":6969,"src":"14422:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6949,"name":"bool","nodeType":"ElementaryTypeName","src":"14422:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14362:79:34"},"returnParameters":{"id":6953,"nodeType":"ParameterList","parameters":[],"src":"14459:0:34"},"scope":7407,"src":"14335:243:34","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[4926],"body":{"id":7016,"nodeType":"Block","src":"14972:363:34","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6981,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6972,"src":"15008:8:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":6984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15028:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6983,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15020:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6982,"name":"address","nodeType":"ElementaryTypeName","src":"15020:7:34","typeDescriptions":{}}},"id":6985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15020:10:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15008:22:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f783a206f70657261746f72206e6f7420736574","id":6987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15032:28:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_75e246cd26eb305700c6f3ee41975914721bdf7957a08028aa136515d8f36145","typeString":"literal_string \"YieldBox: operator not set\""},"value":"YieldBox: operator not set"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_75e246cd26eb305700c6f3ee41975914721bdf7957a08028aa136515d8f36145","typeString":"literal_string \"YieldBox: operator not set\""}],"id":6980,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15000:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15000:61:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6989,"nodeType":"ExpressionStatement","src":"15000:61:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6991,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6972,"src":"15105:8:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":6994,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"15125:4:34","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}],"id":6993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15117:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6992,"name":"address","nodeType":"ElementaryTypeName","src":"15117:7:34","typeDescriptions":{}}},"id":6995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15117:13:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15105:25:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f783a2063616e277420617070726f7665207969656c64426f78","id":6997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15132:34:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_df6c9fd0143df7504e374cd5af2a29a5b916d79a9bcce32ca56a40b46b2859d1","typeString":"literal_string \"YieldBox: can't approve yieldBox\""},"value":"YieldBox: can't approve yieldBox"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df6c9fd0143df7504e374cd5af2a29a5b916d79a9bcce32ca56a40b46b2859d1","typeString":"literal_string \"YieldBox: can't approve yieldBox\""}],"id":6990,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15097:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15097:70:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6999,"nodeType":"ExpressionStatement","src":"15097:70:34"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7001,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6974,"src":"15185:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":7002,"name":"assetCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4713,"src":"15195:10:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":7003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15195:12:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15185:22:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f783a206173736574206e6f742076616c6964","id":7005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15209:27:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_128d53a20f4ce3d29a6a38edfff4b595e7d3b7960019845827c659fcfe4edf62","typeString":"literal_string \"YieldBox: asset not valid\""},"value":"YieldBox: asset not valid"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_128d53a20f4ce3d29a6a38edfff4b595e7d3b7960019845827c659fcfe4edf62","typeString":"literal_string \"YieldBox: asset not valid\""}],"id":7000,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15177:7:34","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15177:60:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7007,"nodeType":"ExpressionStatement","src":"15177:60:34"},{"expression":{"arguments":[{"expression":{"id":7009,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"15288:3:34","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15292:6:34","memberName":"sender","nodeType":"MemberAccess","src":"15288:10:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7011,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6972,"src":"15300:8:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7012,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6974,"src":"15310:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7013,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6976,"src":"15319:8:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":7008,"name":"_setApprovalForAsset","nodeType":"Identifier","overloadedDeclarations":[7048],"referencedDeclaration":7048,"src":"15267:20:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,uint256,bool)"}},"id":7014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15267:61:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7015,"nodeType":"ExpressionStatement","src":"15267:61:34"}]},"documentation":{"id":6970,"nodeType":"StructuredDocumentation","src":"14584:256:34","text":"@notice Update approval status for an operator and for a specific asset\n @param operator The address approved to perform actions on your behalf\n @param assetId The asset id  to update approval status for\n @param approved True/False"},"functionSelector":"b8489fb5","id":7017,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAsset","nameLocation":"14854:19:34","nodeType":"FunctionDefinition","overrides":{"id":6978,"nodeType":"OverrideSpecifier","overrides":[],"src":"14963:8:34"},"parameters":{"id":6977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6972,"mutability":"mutable","name":"operator","nameLocation":"14891:8:34","nodeType":"VariableDeclaration","scope":7017,"src":"14883:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6971,"name":"address","nodeType":"ElementaryTypeName","src":"14883:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6974,"mutability":"mutable","name":"assetId","nameLocation":"14917:7:34","nodeType":"VariableDeclaration","scope":7017,"src":"14909:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6973,"name":"uint256","nodeType":"ElementaryTypeName","src":"14909:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6976,"mutability":"mutable","name":"approved","nameLocation":"14939:8:34","nodeType":"VariableDeclaration","scope":7017,"src":"14934:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6975,"name":"bool","nodeType":"ElementaryTypeName","src":"14934:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14873:80:34"},"returnParameters":{"id":6979,"nodeType":"ParameterList","parameters":[],"src":"14972:0:34"},"scope":7407,"src":"14845:490:34","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[7529],"body":{"id":7047,"nodeType":"Block","src":"15799:141:34","statements":[{"expression":{"id":7038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"baseExpression":{"id":7030,"name":"isApprovedForAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4645,"src":"15809:18:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$_$","typeString":"mapping(address => mapping(address => mapping(uint256 => bool)))"}},"id":7034,"indexExpression":{"id":7031,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"15828:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15809:26:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$","typeString":"mapping(address => mapping(uint256 => bool))"}},"id":7035,"indexExpression":{"id":7032,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7022,"src":"15836:8:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15809:36:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":7036,"indexExpression":{"id":7033,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7024,"src":"15846:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15809:45:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7037,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7026,"src":"15857:8:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15809:56:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7039,"nodeType":"ExpressionStatement","src":"15809:56:34"},{"eventCall":{"arguments":[{"id":7041,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7020,"src":"15897:6:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7042,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7022,"src":"15905:8:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7043,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7024,"src":"15915:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7044,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7026,"src":"15924:8:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":7040,"name":"ApprovalForAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4669,"src":"15880:16:34","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,uint256,bool)"}},"id":7045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15880:53:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7046,"nodeType":"EmitStatement","src":"15875:58:34"}]},"documentation":{"id":7018,"nodeType":"StructuredDocumentation","src":"15341:301:34","text":"@notice Update approval status for an operator and for a specific asset\n @param _owner The owner of the asset\n @param operator The address approved to perform actions on your behalf\n @param assetId The asset id  to update approval status for\n @param approved True/False"},"id":7048,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAsset","nameLocation":"15656:20:34","nodeType":"FunctionDefinition","overrides":{"id":7028,"nodeType":"OverrideSpecifier","overrides":[],"src":"15790:8:34"},"parameters":{"id":7027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7020,"mutability":"mutable","name":"_owner","nameLocation":"15694:6:34","nodeType":"VariableDeclaration","scope":7048,"src":"15686:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7019,"name":"address","nodeType":"ElementaryTypeName","src":"15686:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7022,"mutability":"mutable","name":"operator","nameLocation":"15718:8:34","nodeType":"VariableDeclaration","scope":7048,"src":"15710:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7021,"name":"address","nodeType":"ElementaryTypeName","src":"15710:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7024,"mutability":"mutable","name":"assetId","nameLocation":"15744:7:34","nodeType":"VariableDeclaration","scope":7048,"src":"15736:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7023,"name":"uint256","nodeType":"ElementaryTypeName","src":"15736:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7026,"mutability":"mutable","name":"approved","nameLocation":"15766:8:34","nodeType":"VariableDeclaration","scope":7048,"src":"15761:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7025,"name":"bool","nodeType":"ElementaryTypeName","src":"15761:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15676:104:34"},"returnParameters":{"id":7029,"nodeType":"ParameterList","parameters":[],"src":"15799:0:34"},"scope":7407,"src":"15647:293:34","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[5556],"body":{"id":7072,"nodeType":"Block","src":"16235:116:34","statements":[{"expression":{"arguments":[{"baseExpression":{"id":7058,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"16267:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":7060,"indexExpression":{"id":7059,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7050,"src":"16274:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16267:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}},{"baseExpression":{"id":7061,"name":"nativeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5650,"src":"16284:12:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NativeToken_$5639_storage_$","typeString":"mapping(uint256 => struct NativeToken storage ref)"}},"id":7063,"indexExpression":{"id":7062,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7050,"src":"16297:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16284:21:34","typeDescriptions":{"typeIdentifier":"t_struct$_NativeToken_$5639_storage","typeString":"struct NativeToken storage ref"}},{"baseExpression":{"id":7064,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"16307:11:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":7066,"indexExpression":{"id":7065,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7050,"src":"16319:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16307:20:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":7067,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5654,"src":"16329:5:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":7069,"indexExpression":{"id":7068,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7050,"src":"16335:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16329:14:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"},{"typeIdentifier":"t_struct$_NativeToken_$5639_storage","typeString":"struct NativeToken storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":7056,"name":"uriBuilder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6157,"src":"16252:10:34","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBoxURIBuilder_$8280","typeString":"contract YieldBoxURIBuilder"}},"id":7057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16263:3:34","memberName":"uri","nodeType":"MemberAccess","referencedDeclaration":8279,"src":"16252:14:34","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_struct$_Asset_$4632_memory_ptr_$_t_struct$_NativeToken_$5639_memory_ptr_$_t_uint256_$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (struct Asset memory,struct NativeToken memory,uint256,address) view external returns (string memory)"}},"id":7070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16252:92:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7055,"id":7071,"nodeType":"Return","src":"16245:99:34"}]},"functionSelector":"0e89341c","id":7073,"implemented":true,"kind":"function","modifiers":[],"name":"uri","nameLocation":"16167:3:34","nodeType":"FunctionDefinition","overrides":{"id":7052,"nodeType":"OverrideSpecifier","overrides":[],"src":"16202:8:34"},"parameters":{"id":7051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7050,"mutability":"mutable","name":"assetId","nameLocation":"16179:7:34","nodeType":"VariableDeclaration","scope":7073,"src":"16171:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7049,"name":"uint256","nodeType":"ElementaryTypeName","src":"16171:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16170:17:34"},"returnParameters":{"id":7055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7054,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7073,"src":"16220:13:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7053,"name":"string","nodeType":"ElementaryTypeName","src":"16220:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"16219:15:34"},"scope":7407,"src":"16158:193:34","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":7091,"nodeType":"Block","src":"16426:84:34","statements":[{"expression":{"arguments":[{"baseExpression":{"id":7082,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"16459:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":7084,"indexExpression":{"id":7083,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7075,"src":"16466:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16459:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}},{"expression":{"baseExpression":{"id":7085,"name":"nativeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5650,"src":"16476:12:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NativeToken_$5639_storage_$","typeString":"mapping(uint256 => struct NativeToken storage ref)"}},"id":7087,"indexExpression":{"id":7086,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7075,"src":"16489:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16476:21:34","typeDescriptions":{"typeIdentifier":"t_struct$_NativeToken_$5639_storage","typeString":"struct NativeToken storage ref"}},"id":7088,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16498:4:34","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":5632,"src":"16476:26:34","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":7080,"name":"uriBuilder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6157,"src":"16443:10:34","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBoxURIBuilder_$8280","typeString":"contract YieldBoxURIBuilder"}},"id":7081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16454:4:34","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":7902,"src":"16443:15:34","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_struct$_Asset_$4632_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (struct Asset memory,string memory) view external returns (string memory)"}},"id":7089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16443:60:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7079,"id":7090,"nodeType":"Return","src":"16436:67:34"}]},"functionSelector":"00ad800c","id":7092,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"16366:4:34","nodeType":"FunctionDefinition","parameters":{"id":7076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7075,"mutability":"mutable","name":"assetId","nameLocation":"16379:7:34","nodeType":"VariableDeclaration","scope":7092,"src":"16371:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7074,"name":"uint256","nodeType":"ElementaryTypeName","src":"16371:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16370:17:34"},"returnParameters":{"id":7079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7078,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7092,"src":"16411:13:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7077,"name":"string","nodeType":"ElementaryTypeName","src":"16411:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"16410:15:34"},"scope":7407,"src":"16357:153:34","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":7110,"nodeType":"Block","src":"16587:88:34","statements":[{"expression":{"arguments":[{"baseExpression":{"id":7101,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"16622:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":7103,"indexExpression":{"id":7102,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7094,"src":"16629:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16622:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}},{"expression":{"baseExpression":{"id":7104,"name":"nativeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5650,"src":"16639:12:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NativeToken_$5639_storage_$","typeString":"mapping(uint256 => struct NativeToken storage ref)"}},"id":7106,"indexExpression":{"id":7105,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7094,"src":"16652:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16639:21:34","typeDescriptions":{"typeIdentifier":"t_struct$_NativeToken_$5639_storage","typeString":"struct NativeToken storage ref"}},"id":7107,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16661:6:34","memberName":"symbol","nodeType":"MemberAccess","referencedDeclaration":5634,"src":"16639:28:34","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":7099,"name":"uriBuilder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6157,"src":"16604:10:34","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBoxURIBuilder_$8280","typeString":"contract YieldBoxURIBuilder"}},"id":7100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16615:6:34","memberName":"symbol","nodeType":"MemberAccess","referencedDeclaration":7989,"src":"16604:17:34","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_struct$_Asset_$4632_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (struct Asset memory,string memory) view external returns (string memory)"}},"id":7108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16604:64:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7098,"id":7109,"nodeType":"Return","src":"16597:71:34"}]},"functionSelector":"4e41a1fb","id":7111,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"16525:6:34","nodeType":"FunctionDefinition","parameters":{"id":7095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7094,"mutability":"mutable","name":"assetId","nameLocation":"16540:7:34","nodeType":"VariableDeclaration","scope":7111,"src":"16532:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7093,"name":"uint256","nodeType":"ElementaryTypeName","src":"16532:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16531:17:34"},"returnParameters":{"id":7098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7097,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7111,"src":"16572:13:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7096,"name":"string","nodeType":"ElementaryTypeName","src":"16572:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"16571:15:34"},"scope":7407,"src":"16516:159:34","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":7129,"nodeType":"Block","src":"16746:92:34","statements":[{"expression":{"arguments":[{"baseExpression":{"id":7120,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"16783:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":7122,"indexExpression":{"id":7121,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7113,"src":"16790:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16783:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}},{"expression":{"baseExpression":{"id":7123,"name":"nativeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5650,"src":"16800:12:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_NativeToken_$5639_storage_$","typeString":"mapping(uint256 => struct NativeToken storage ref)"}},"id":7125,"indexExpression":{"id":7124,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7113,"src":"16813:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16800:21:34","typeDescriptions":{"typeIdentifier":"t_struct$_NativeToken_$5639_storage","typeString":"struct NativeToken storage ref"}},"id":7126,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16822:8:34","memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":5636,"src":"16800:30:34","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":7118,"name":"uriBuilder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6157,"src":"16763:10:34","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBoxURIBuilder_$8280","typeString":"contract YieldBoxURIBuilder"}},"id":7119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16774:8:34","memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":8031,"src":"16763:19:34","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_struct$_Asset_$4632_memory_ptr_$_t_uint8_$returns$_t_uint8_$","typeString":"function (struct Asset memory,uint8) view external returns (uint8)"}},"id":7127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16763:68:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":7117,"id":7128,"nodeType":"Return","src":"16756:75:34"}]},"functionSelector":"3f47e662","id":7130,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"16690:8:34","nodeType":"FunctionDefinition","parameters":{"id":7114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7113,"mutability":"mutable","name":"assetId","nameLocation":"16707:7:34","nodeType":"VariableDeclaration","scope":7130,"src":"16699:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7112,"name":"uint256","nodeType":"ElementaryTypeName","src":"16699:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16698:17:34"},"returnParameters":{"id":7117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7130,"src":"16739:5:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7115,"name":"uint8","nodeType":"ElementaryTypeName","src":"16739:5:34","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"16738:7:34"},"scope":7407,"src":"16681:157:34","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":7154,"nodeType":"Block","src":"17214:106:34","statements":[{"expression":{"id":7144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7140,"name":"totalShare","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7136,"src":"17224:10:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":7141,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"17237:11:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":7143,"indexExpression":{"id":7142,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7133,"src":"17249:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17237:20:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17224:33:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7145,"nodeType":"ExpressionStatement","src":"17224:33:34"},{"expression":{"id":7152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7146,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7138,"src":"17267:11:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":7148,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"17297:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":7150,"indexExpression":{"id":7149,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7133,"src":"17304:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17297:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}],"id":7147,"name":"_tokenBalanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6193,"src":"17281:15:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Asset_$4632_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct Asset storage pointer) view returns (uint256)"}},"id":7151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17281:32:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17267:46:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7153,"nodeType":"ExpressionStatement","src":"17267:46:34"}]},"documentation":{"id":7131,"nodeType":"StructuredDocumentation","src":"16869:238:34","text":"@notice Helper function to return totals for an asset\n @param assetId The regierestered asset id\n @return totalShare The total amount for asset represented in shares\n @return totalAmount The total amount for asset"},"functionSelector":"4956d158","id":7155,"implemented":true,"kind":"function","modifiers":[],"name":"assetTotals","nameLocation":"17121:11:34","nodeType":"FunctionDefinition","parameters":{"id":7134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7133,"mutability":"mutable","name":"assetId","nameLocation":"17141:7:34","nodeType":"VariableDeclaration","scope":7155,"src":"17133:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7132,"name":"uint256","nodeType":"ElementaryTypeName","src":"17133:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17132:17:34"},"returnParameters":{"id":7139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7136,"mutability":"mutable","name":"totalShare","nameLocation":"17181:10:34","nodeType":"VariableDeclaration","scope":7155,"src":"17173:18:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7135,"name":"uint256","nodeType":"ElementaryTypeName","src":"17173:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7138,"mutability":"mutable","name":"totalAmount","nameLocation":"17201:11:34","nodeType":"VariableDeclaration","scope":7155,"src":"17193:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7137,"name":"uint256","nodeType":"ElementaryTypeName","src":"17193:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17172:41:34"},"scope":7407,"src":"17112:208:34","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":7204,"nodeType":"Block","src":"17749:275:34","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":7181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":7173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":7167,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"17763:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":7169,"indexExpression":{"id":7168,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7158,"src":"17770:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17763:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}},"id":7170,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17779:9:34","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"17763:25:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":7171,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"17792:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":7172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17802:6:34","memberName":"Native","nodeType":"MemberAccess","referencedDeclaration":8283,"src":"17792:16:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"17763:45:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":7180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":7174,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"17812:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":7176,"indexExpression":{"id":7175,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7158,"src":"17819:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17812:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}},"id":7177,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17828:9:34","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"17812:25:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":7178,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"17841:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":7179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17851:6:34","memberName":"ERC721","nodeType":"MemberAccess","referencedDeclaration":8285,"src":"17841:16:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"17812:45:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"17763:94:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7202,"nodeType":"Block","src":"17904:114:34","statements":[{"expression":{"id":7200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7187,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7165,"src":"17918:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":7190,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"17943:11:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":7192,"indexExpression":{"id":7191,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7158,"src":"17955:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17943:20:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"baseExpression":{"id":7194,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"17981:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":7196,"indexExpression":{"id":7195,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7158,"src":"17988:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17981:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}],"id":7193,"name":"_tokenBalanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6193,"src":"17965:15:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Asset_$4632_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct Asset storage pointer) view returns (uint256)"}},"id":7197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17965:32:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7198,"name":"roundUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7162,"src":"17999:7:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":7188,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7160,"src":"17926:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17933:9:34","memberName":"_toShares","nodeType":"MemberAccess","referencedDeclaration":7720,"src":"17926:16:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256,uint256,bool) pure returns (uint256)"}},"id":7199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17926:81:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17918:89:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7201,"nodeType":"ExpressionStatement","src":"17918:89:34"}]},"id":7203,"nodeType":"IfStatement","src":"17759:259:34","trueBody":{"id":7186,"nodeType":"Block","src":"17859:39:34","statements":[{"expression":{"id":7184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7182,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7165,"src":"17873:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7183,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7160,"src":"17881:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17873:14:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7185,"nodeType":"ExpressionStatement","src":"17873:14:34"}]}}]},"documentation":{"id":7156,"nodeType":"StructuredDocumentation","src":"17326:286:34","text":"@dev Helper function to represent an `amount` of `token` in shares.\n @param assetId The id of the asset.\n @param amount The `token` amount.\n @param roundUp If the result `share` should be rounded up.\n @return share The token amount represented in shares."},"functionSelector":"8eb22cdd","id":7205,"implemented":true,"kind":"function","modifiers":[],"name":"toShare","nameLocation":"17626:7:34","nodeType":"FunctionDefinition","parameters":{"id":7163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7158,"mutability":"mutable","name":"assetId","nameLocation":"17651:7:34","nodeType":"VariableDeclaration","scope":7205,"src":"17643:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7157,"name":"uint256","nodeType":"ElementaryTypeName","src":"17643:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7160,"mutability":"mutable","name":"amount","nameLocation":"17676:6:34","nodeType":"VariableDeclaration","scope":7205,"src":"17668:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7159,"name":"uint256","nodeType":"ElementaryTypeName","src":"17668:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7162,"mutability":"mutable","name":"roundUp","nameLocation":"17697:7:34","nodeType":"VariableDeclaration","scope":7205,"src":"17692:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7161,"name":"bool","nodeType":"ElementaryTypeName","src":"17692:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"17633:77:34"},"returnParameters":{"id":7166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7165,"mutability":"mutable","name":"share","nameLocation":"17742:5:34","nodeType":"VariableDeclaration","scope":7205,"src":"17734:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7164,"name":"uint256","nodeType":"ElementaryTypeName","src":"17734:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17733:15:34"},"scope":7407,"src":"17617:407:34","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":7254,"nodeType":"Block","src":"18458:275:34","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":7231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":7223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":7217,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"18472:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":7219,"indexExpression":{"id":7218,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7208,"src":"18479:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18472:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}},"id":7220,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18488:9:34","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"18472:25:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":7221,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"18501:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":7222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"18511:6:34","memberName":"Native","nodeType":"MemberAccess","referencedDeclaration":8283,"src":"18501:16:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"18472:45:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":7230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":7224,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"18521:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":7226,"indexExpression":{"id":7225,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7208,"src":"18528:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18521:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}},"id":7227,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18537:9:34","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"18521:25:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":7228,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"18550:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":7229,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"18560:6:34","memberName":"ERC721","nodeType":"MemberAccess","referencedDeclaration":8285,"src":"18550:16:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"18521:45:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"18472:94:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7252,"nodeType":"Block","src":"18613:114:34","statements":[{"expression":{"id":7250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7237,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7215,"src":"18627:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":7240,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"18652:11:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":7242,"indexExpression":{"id":7241,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7208,"src":"18664:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18652:20:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"baseExpression":{"id":7244,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"18690:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":7246,"indexExpression":{"id":7245,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7208,"src":"18697:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18690:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}],"id":7243,"name":"_tokenBalanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6193,"src":"18674:15:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Asset_$4632_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct Asset storage pointer) view returns (uint256)"}},"id":7247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18674:32:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7248,"name":"roundUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7212,"src":"18708:7:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":7238,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7210,"src":"18636:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18642:9:34","memberName":"_toAmount","nodeType":"MemberAccess","referencedDeclaration":7766,"src":"18636:15:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256,uint256,bool) pure returns (uint256)"}},"id":7249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18636:80:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18627:89:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7251,"nodeType":"ExpressionStatement","src":"18627:89:34"}]},"id":7253,"nodeType":"IfStatement","src":"18468:259:34","trueBody":{"id":7236,"nodeType":"Block","src":"18568:39:34","statements":[{"expression":{"id":7234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7232,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7215,"src":"18582:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7233,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7210,"src":"18591:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18582:14:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7235,"nodeType":"ExpressionStatement","src":"18582:14:34"}]}}]},"documentation":{"id":7206,"nodeType":"StructuredDocumentation","src":"18030:290:34","text":"@dev Helper function represent shares back into the `token` amount.\n @param assetId The id of the asset.\n @param share The amount of shares.\n @param roundUp If the result should be rounded up.\n @return amount The share amount back into native representation."},"functionSelector":"442c1599","id":7255,"implemented":true,"kind":"function","modifiers":[],"name":"toAmount","nameLocation":"18334:8:34","nodeType":"FunctionDefinition","parameters":{"id":7213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7208,"mutability":"mutable","name":"assetId","nameLocation":"18360:7:34","nodeType":"VariableDeclaration","scope":7255,"src":"18352:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7207,"name":"uint256","nodeType":"ElementaryTypeName","src":"18352:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7210,"mutability":"mutable","name":"share","nameLocation":"18385:5:34","nodeType":"VariableDeclaration","scope":7255,"src":"18377:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7209,"name":"uint256","nodeType":"ElementaryTypeName","src":"18377:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7212,"mutability":"mutable","name":"roundUp","nameLocation":"18405:7:34","nodeType":"VariableDeclaration","scope":7255,"src":"18400:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7211,"name":"bool","nodeType":"ElementaryTypeName","src":"18400:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"18342:76:34"},"returnParameters":{"id":7216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7215,"mutability":"mutable","name":"amount","nameLocation":"18450:6:34","nodeType":"VariableDeclaration","scope":7255,"src":"18442:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7214,"name":"uint256","nodeType":"ElementaryTypeName","src":"18442:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18441:16:34"},"scope":7407,"src":"18325:408:34","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":7310,"nodeType":"Block","src":"19023:311:34","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":7279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":7271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":7265,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"19037:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":7267,"indexExpression":{"id":7266,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7260,"src":"19044:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19037:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}},"id":7268,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19053:9:34","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"19037:25:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":7269,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"19066:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":7270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"19076:6:34","memberName":"Native","nodeType":"MemberAccess","referencedDeclaration":8283,"src":"19066:16:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"19037:45:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":7278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":7272,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"19086:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":7274,"indexExpression":{"id":7273,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7260,"src":"19093:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19086:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}},"id":7275,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19102:9:34","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"19086:25:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":7276,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"19115:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":7277,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"19125:6:34","memberName":"ERC721","nodeType":"MemberAccess","referencedDeclaration":8285,"src":"19115:16:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"19086:45:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"19037:94:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7308,"nodeType":"Block","src":"19197:131:34","statements":[{"expression":{"id":7306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7289,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7263,"src":"19211:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":7296,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5074,"src":"19255:11:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":7298,"indexExpression":{"id":7297,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7260,"src":"19267:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19255:20:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"baseExpression":{"id":7300,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4685,"src":"19293:6:34","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Asset_$4632_storage_$dyn_storage","typeString":"struct Asset storage ref[] storage ref"}},"id":7302,"indexExpression":{"id":7301,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7260,"src":"19300:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19293:15:34","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Asset_$4632_storage","typeString":"struct Asset storage ref"}],"id":7299,"name":"_tokenBalanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6193,"src":"19277:15:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Asset_$4632_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct Asset storage pointer) view returns (uint256)"}},"id":7303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19277:32:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":7304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"19311:5:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"baseExpression":{"baseExpression":{"id":7290,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"19220:9:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":7292,"indexExpression":{"id":7291,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7258,"src":"19230:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19220:15:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":7294,"indexExpression":{"id":7293,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7260,"src":"19236:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19220:24:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19245:9:34","memberName":"_toAmount","nodeType":"MemberAccess","referencedDeclaration":7766,"src":"19220:34:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_bool_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256,uint256,bool) pure returns (uint256)"}},"id":7305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19220:97:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19211:106:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7307,"nodeType":"ExpressionStatement","src":"19211:106:34"}]},"id":7309,"nodeType":"IfStatement","src":"19033:295:34","trueBody":{"id":7288,"nodeType":"Block","src":"19133:58:34","statements":[{"expression":{"id":7286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7280,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7263,"src":"19147:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"baseExpression":{"id":7281,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5070,"src":"19156:9:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":7283,"indexExpression":{"id":7282,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7258,"src":"19166:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19156:15:34","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":7285,"indexExpression":{"id":7284,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7260,"src":"19172:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19156:24:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19147:33:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7287,"nodeType":"ExpressionStatement","src":"19147:33:34"}]}}]},"documentation":{"id":7256,"nodeType":"StructuredDocumentation","src":"18739:191:34","text":"@dev Helper function represent the balance in `token` amount for a `user` for an `asset`.\n @param user The `user` to get the amount for.\n @param assetId The id of the asset."},"functionSelector":"54317d16","id":7311,"implemented":true,"kind":"function","modifiers":[],"name":"amountOf","nameLocation":"18944:8:34","nodeType":"FunctionDefinition","parameters":{"id":7261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7258,"mutability":"mutable","name":"user","nameLocation":"18961:4:34","nodeType":"VariableDeclaration","scope":7311,"src":"18953:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7257,"name":"address","nodeType":"ElementaryTypeName","src":"18953:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7260,"mutability":"mutable","name":"assetId","nameLocation":"18975:7:34","nodeType":"VariableDeclaration","scope":7311,"src":"18967:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7259,"name":"uint256","nodeType":"ElementaryTypeName","src":"18967:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18952:31:34"},"returnParameters":{"id":7264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7263,"mutability":"mutable","name":"amount","nameLocation":"19015:6:34","nodeType":"VariableDeclaration","scope":7311,"src":"19007:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7262,"name":"uint256","nodeType":"ElementaryTypeName","src":"19007:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19006:16:34"},"scope":7407,"src":"18935:399:34","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":7374,"nodeType":"Block","src":"20197:412:34","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":7340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7337,"name":"tokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7315,"src":"20211:9:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":7338,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"20224:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":7339,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"20234:6:34","memberName":"Native","nodeType":"MemberAccess","referencedDeclaration":8283,"src":"20224:16:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"20211:29:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7372,"nodeType":"Block","src":"20472:131:34","statements":[{"expression":{"arguments":[{"arguments":[{"id":7361,"name":"tokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7315,"src":"20520:9:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},{"id":7362,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7317,"src":"20531:15:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7363,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7320,"src":"20548:8:34","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},{"id":7364,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7322,"src":"20558:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7360,"name":"registerAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"20506:13:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_TokenType_$8288_$_t_address_$_t_contract$_IStrategy_$8364_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenType,address,contract IStrategy,uint256) returns (uint256)"}},"id":7365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20506:60:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7366,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7324,"src":"20568:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7367,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7326,"src":"20574:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7368,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7328,"src":"20578:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7369,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7330,"src":"20586:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7359,"name":"depositAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6364,"src":"20493:12:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,address,address,uint256,uint256) returns (uint256,uint256)"}},"id":7370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20493:99:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":7336,"id":7371,"nodeType":"Return","src":"20486:106:34"}]},"id":7373,"nodeType":"IfStatement","src":"20207:396:34","trueBody":{"id":7358,"nodeType":"Block","src":"20242:224:34","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":7343,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"20377:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":7344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"20387:7:34","memberName":"ERC1155","nodeType":"MemberAccess","referencedDeclaration":8286,"src":"20377:17:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},{"arguments":[{"id":7347,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"20404:4:34","typeDescriptions":{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_YieldBox_$7407","typeString":"contract YieldBox"}],"id":7346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20396:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7345,"name":"address","nodeType":"ElementaryTypeName","src":"20396:7:34","typeDescriptions":{}}},"id":7348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20396:13:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7349,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7320,"src":"20411:8:34","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},{"id":7350,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7322,"src":"20421:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7342,"name":"registerAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"20363:13:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_TokenType_$8288_$_t_address_$_t_contract$_IStrategy_$8364_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenType,address,contract IStrategy,uint256) returns (uint256)"}},"id":7351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20363:66:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7352,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7324,"src":"20431:4:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7353,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7326,"src":"20437:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7354,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7328,"src":"20441:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7355,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7330,"src":"20449:5:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7341,"name":"depositAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6364,"src":"20350:12:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,address,address,uint256,uint256) returns (uint256,uint256)"}},"id":7356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20350:105:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":7336,"id":7357,"nodeType":"Return","src":"20343:112:34"}]}}]},"documentation":{"id":7312,"nodeType":"StructuredDocumentation","src":"19340:572:34","text":"@notice Helper function to register & deposit an asset\n @param tokenType Registration token type.\n @param contractAddress Token address.\n @param strategy Asset's strategy address.\n @param tokenId Registration token id.\n @param from which user to pull the tokens.\n @param to which account to push the tokens.\n @param amount amount to deposit.\n @param share amount to deposit represented in shares.\n @return amountOut The amount deposited.\n @return shareOut The deposited amount repesented in shares."},"functionSelector":"6cd57031","id":7375,"implemented":true,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"19926:7:34","nodeType":"FunctionDefinition","parameters":{"id":7331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7315,"mutability":"mutable","name":"tokenType","nameLocation":"19953:9:34","nodeType":"VariableDeclaration","scope":7375,"src":"19943:19:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"typeName":{"id":7314,"nodeType":"UserDefinedTypeName","pathNode":{"id":7313,"name":"TokenType","nameLocations":["19943:9:34"],"nodeType":"IdentifierPath","referencedDeclaration":8288,"src":"19943:9:34"},"referencedDeclaration":8288,"src":"19943:9:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"visibility":"internal"},{"constant":false,"id":7317,"mutability":"mutable","name":"contractAddress","nameLocation":"19980:15:34","nodeType":"VariableDeclaration","scope":7375,"src":"19972:23:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7316,"name":"address","nodeType":"ElementaryTypeName","src":"19972:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7320,"mutability":"mutable","name":"strategy","nameLocation":"20015:8:34","nodeType":"VariableDeclaration","scope":7375,"src":"20005:18:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},"typeName":{"id":7319,"nodeType":"UserDefinedTypeName","pathNode":{"id":7318,"name":"IStrategy","nameLocations":["20005:9:34"],"nodeType":"IdentifierPath","referencedDeclaration":8364,"src":"20005:9:34"},"referencedDeclaration":8364,"src":"20005:9:34","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"visibility":"internal"},{"constant":false,"id":7322,"mutability":"mutable","name":"tokenId","nameLocation":"20041:7:34","nodeType":"VariableDeclaration","scope":7375,"src":"20033:15:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7321,"name":"uint256","nodeType":"ElementaryTypeName","src":"20033:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7324,"mutability":"mutable","name":"from","nameLocation":"20066:4:34","nodeType":"VariableDeclaration","scope":7375,"src":"20058:12:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7323,"name":"address","nodeType":"ElementaryTypeName","src":"20058:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7326,"mutability":"mutable","name":"to","nameLocation":"20088:2:34","nodeType":"VariableDeclaration","scope":7375,"src":"20080:10:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7325,"name":"address","nodeType":"ElementaryTypeName","src":"20080:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7328,"mutability":"mutable","name":"amount","nameLocation":"20108:6:34","nodeType":"VariableDeclaration","scope":7375,"src":"20100:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7327,"name":"uint256","nodeType":"ElementaryTypeName","src":"20100:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7330,"mutability":"mutable","name":"share","nameLocation":"20132:5:34","nodeType":"VariableDeclaration","scope":7375,"src":"20124:13:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7329,"name":"uint256","nodeType":"ElementaryTypeName","src":"20124:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19933:210:34"},"returnParameters":{"id":7336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7333,"mutability":"mutable","name":"amountOut","nameLocation":"20168:9:34","nodeType":"VariableDeclaration","scope":7375,"src":"20160:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7332,"name":"uint256","nodeType":"ElementaryTypeName","src":"20160:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7335,"mutability":"mutable","name":"shareOut","nameLocation":"20187:8:34","nodeType":"VariableDeclaration","scope":7375,"src":"20179:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7334,"name":"uint256","nodeType":"ElementaryTypeName","src":"20179:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20159:37:34"},"scope":7407,"src":"19917:692:34","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":7405,"nodeType":"Block","src":"21039:120:34","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":7392,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"21086:9:34","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":7393,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"21096:5:34","memberName":"ERC20","nodeType":"MemberAccess","referencedDeclaration":8284,"src":"21086:15:34","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},{"arguments":[{"id":7396,"name":"wrappedNative","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6154,"src":"21111:13:34","typeDescriptions":{"typeIdentifier":"t_contract$_IWrappedNative_$8387","typeString":"contract IWrappedNative"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IWrappedNative_$8387","typeString":"contract IWrappedNative"}],"id":7395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21103:7:34","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7394,"name":"address","nodeType":"ElementaryTypeName","src":"21103:7:34","typeDescriptions":{}}},"id":7397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21103:22:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7398,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7379,"src":"21127:8:34","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},{"hexValue":"30","id":7399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21137:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":7391,"name":"registerAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4889,"src":"21072:13:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_TokenType_$8288_$_t_address_$_t_contract$_IStrategy_$8364_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenType,address,contract IStrategy,uint256) returns (uint256)"}},"id":7400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21072:67:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7401,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7381,"src":"21141:2:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7402,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7383,"src":"21145:6:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7390,"name":"depositETHAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6547,"src":"21056:15:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,address,uint256) returns (uint256,uint256)"}},"id":7403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21056:96:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":7389,"id":7404,"nodeType":"Return","src":"21049:103:34"}]},"documentation":{"id":7376,"nodeType":"StructuredDocumentation","src":"20615:260:34","text":"@notice Helper function to register & deposit ETH\n @param strategy Asset's strategy address.\n @param amount amount to deposit.\n @return amountOut The amount deposited.\n @return shareOut The deposited amount repesented in shares."},"functionSelector":"a3823ac0","id":7406,"implemented":true,"kind":"function","modifiers":[],"name":"depositETH","nameLocation":"20889:10:34","nodeType":"FunctionDefinition","parameters":{"id":7384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7379,"mutability":"mutable","name":"strategy","nameLocation":"20919:8:34","nodeType":"VariableDeclaration","scope":7406,"src":"20909:18:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},"typeName":{"id":7378,"nodeType":"UserDefinedTypeName","pathNode":{"id":7377,"name":"IStrategy","nameLocations":["20909:9:34"],"nodeType":"IdentifierPath","referencedDeclaration":8364,"src":"20909:9:34"},"referencedDeclaration":8364,"src":"20909:9:34","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"visibility":"internal"},{"constant":false,"id":7381,"mutability":"mutable","name":"to","nameLocation":"20945:2:34","nodeType":"VariableDeclaration","scope":7406,"src":"20937:10:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7380,"name":"address","nodeType":"ElementaryTypeName","src":"20937:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7383,"mutability":"mutable","name":"amount","nameLocation":"20965:6:34","nodeType":"VariableDeclaration","scope":7406,"src":"20957:14:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7382,"name":"uint256","nodeType":"ElementaryTypeName","src":"20957:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20899:78:34"},"returnParameters":{"id":7389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7386,"mutability":"mutable","name":"amountOut","nameLocation":"21010:9:34","nodeType":"VariableDeclaration","scope":7406,"src":"21002:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7385,"name":"uint256","nodeType":"ElementaryTypeName","src":"21002:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7388,"mutability":"mutable","name":"shareOut","nameLocation":"21029:8:34","nodeType":"VariableDeclaration","scope":7406,"src":"21021:16:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7387,"name":"uint256","nodeType":"ElementaryTypeName","src":"21021:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21001:37:34"},"scope":7407,"src":"20880:279:34","stateMutability":"payable","virtual":false,"visibility":"public"}],"scope":7408,"src":"2222:18939:34","usedErrors":[]}],"src":"1090:20072:34"},"id":34},"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxPermit.sol":{"ast":{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxPermit.sol","exportedSymbols":{"Counters":[1385],"ECDSA":[1921],"EIP712":[2075],"IYieldBox":[8538],"Math":[2940],"Strings":[1560],"TokenType":[8288],"YieldBoxPermit":[7661]},"id":7662,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":7409,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"40:23:35"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","file":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","id":7410,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7662,"sourceUnit":2076,"src":"65:63:35","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":7411,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7662,"sourceUnit":1922,"src":"129:62:35","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","file":"@openzeppelin/contracts/utils/Counters.sol","id":7412,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7662,"sourceUnit":1386,"src":"192:52:35","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol","file":"./interfaces/IYieldBox.sol","id":7413,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7662,"sourceUnit":8539,"src":"245:36:35","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":7415,"name":"EIP712","nameLocations":["995:6:35"],"nodeType":"IdentifierPath","referencedDeclaration":2075,"src":"995:6:35"},"id":7416,"nodeType":"InheritanceSpecifier","src":"995:6:35"}],"canonicalName":"YieldBoxPermit","contractDependencies":[],"contractKind":"contract","documentation":{"id":7414,"nodeType":"StructuredDocumentation","src":"283:675:35","text":" Modification of the OpenZeppelin ERC20Permit contract to support ERC721 tokens.\n OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol).\n @dev Implementation of the ERC-4494 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-4494[EIP-4494].\n Adds the {permit} method, which can be used to change an account's ERC721 allowance (see {IERC721-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC721-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":7661,"linearizedBaseContracts":[7661,2075],"name":"YieldBoxPermit","nameLocation":"977:14:35","nodeType":"ContractDefinition","nodes":[{"global":false,"id":7420,"libraryName":{"id":7417,"name":"Counters","nameLocations":["1014:8:35"],"nodeType":"IdentifierPath","referencedDeclaration":1385,"src":"1014:8:35"},"nodeType":"UsingForDirective","src":"1008:36:35","typeName":{"id":7419,"nodeType":"UserDefinedTypeName","pathNode":{"id":7418,"name":"Counters.Counter","nameLocations":["1027:8:35","1036:7:35"],"nodeType":"IdentifierPath","referencedDeclaration":1317,"src":"1027:16:35"},"referencedDeclaration":1317,"src":"1027:16:35","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter"}}},{"constant":false,"id":7425,"mutability":"mutable","name":"_nonces","nameLocation":"1095:7:35","nodeType":"VariableDeclaration","scope":7661,"src":"1050:52:35","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$1317_storage_$","typeString":"mapping(address => struct Counters.Counter)"},"typeName":{"id":7424,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":7421,"name":"address","nodeType":"ElementaryTypeName","src":"1058:7:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1050:36:35","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$1317_storage_$","typeString":"mapping(address => struct Counters.Counter)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":7423,"nodeType":"UserDefinedTypeName","pathNode":{"id":7422,"name":"Counters.Counter","nameLocations":["1069:8:35","1078:7:35"],"nodeType":"IdentifierPath","referencedDeclaration":1317,"src":"1069:16:35"},"referencedDeclaration":1317,"src":"1069:16:35","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter"}}},"visibility":"private"},{"constant":true,"id":7430,"mutability":"constant","name":"_PERMIT_TYPEHASH","nameLocation":"1135:16:35","nodeType":"VariableDeclaration","scope":7661,"src":"1110:149:35","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7426,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1110:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e7432353620617373657449642c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529","id":7428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1172:86:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_54a3a030f29b87fffaacb4fafc4220ef9c3eba67ec74140bd9e716826be356b1","typeString":"literal_string \"Permit(address owner,address spender,uint256 assetId,uint256 nonce,uint256 deadline)\""},"value":"Permit(address owner,address spender,uint256 assetId,uint256 nonce,uint256 deadline)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_54a3a030f29b87fffaacb4fafc4220ef9c3eba67ec74140bd9e716826be356b1","typeString":"literal_string \"Permit(address owner,address spender,uint256 assetId,uint256 nonce,uint256 deadline)\""}],"id":7427,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1162:9:35","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":7429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1162:97:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":true,"id":7435,"mutability":"constant","name":"_PERMIT_ALL_TYPEHASH","nameLocation":"1296:20:35","nodeType":"VariableDeclaration","scope":7661,"src":"1271:140:35","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7431,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1271:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5065726d6974416c6c2861646472657373206f776e65722c61646472657373207370656e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529","id":7433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1337:73:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b2a9c07938b6d62909dc00103ea4e71485caf5019e7fa95b0a87e13825663b0","typeString":"literal_string \"PermitAll(address owner,address spender,uint256 nonce,uint256 deadline)\""},"value":"PermitAll(address owner,address spender,uint256 nonce,uint256 deadline)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b2a9c07938b6d62909dc00103ea4e71485caf5019e7fa95b0a87e13825663b0","typeString":"literal_string \"PermitAll(address owner,address spender,uint256 nonce,uint256 deadline)\""}],"id":7432,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1327:9:35","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":7434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1327:84:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":7445,"nodeType":"Block","src":"1699:2:35","statements":[]},"documentation":{"id":7436,"nodeType":"StructuredDocumentation","src":"1423:221:35","text":" @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC721 token name."},"id":7446,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":7441,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7438,"src":"1688:4:35","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"31","id":7442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1694:3:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""},"value":"1"}],"id":7443,"kind":"baseConstructorSpecifier","modifierName":{"id":7440,"name":"EIP712","nameLocations":["1681:6:35"],"nodeType":"IdentifierPath","referencedDeclaration":2075,"src":"1681:6:35"},"nodeType":"ModifierInvocation","src":"1681:17:35"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":7439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7438,"mutability":"mutable","name":"name","nameLocation":"1675:4:35","nodeType":"VariableDeclaration","scope":7446,"src":"1661:18:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7437,"name":"string","nodeType":"ElementaryTypeName","src":"1661:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1660:20:35"},"returnParameters":{"id":7444,"nodeType":"ParameterList","parameters":[],"src":"1699:0:35"},"scope":7661,"src":"1649:52:35","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7517,"nodeType":"Block","src":"1898:456:35","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7464,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1916:5:35","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":7465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1922:9:35","memberName":"timestamp","nodeType":"MemberAccess","src":"1916:15:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":7466,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7454,"src":"1935:8:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1916:27:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f785065726d69743a206578706972656420646561646c696e65","id":7468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1945:34:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_e229d4b79f9064024696415254be636d158d901f77caa9c48c6298243974a8c2","typeString":"literal_string \"YieldBoxPermit: expired deadline\""},"value":"YieldBoxPermit: expired deadline"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e229d4b79f9064024696415254be636d158d901f77caa9c48c6298243974a8c2","typeString":"literal_string \"YieldBoxPermit: expired deadline\""}],"id":7463,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1908:7:35","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1908:72:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7470,"nodeType":"ExpressionStatement","src":"1908:72:35"},{"assignments":[7472],"declarations":[{"constant":false,"id":7472,"mutability":"mutable","name":"structHash","nameLocation":"1999:10:35","nodeType":"VariableDeclaration","scope":7517,"src":"1991:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7471,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1991:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":7486,"initialValue":{"arguments":[{"arguments":[{"id":7476,"name":"_PERMIT_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7430,"src":"2033:16:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":7477,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7448,"src":"2051:5:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7478,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7450,"src":"2058:7:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7479,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7452,"src":"2067:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":7481,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7448,"src":"2086:5:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7480,"name":"_useNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7660,"src":"2076:9:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$","typeString":"function (address) returns (uint256)"}},"id":7482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2076:16:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7483,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7454,"src":"2094:8:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7474,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2022:3:35","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2026:6:35","memberName":"encode","nodeType":"MemberAccess","src":"2022:10:35","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2022:81:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7473,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2012:9:35","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":7485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2012:92:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1991:113:35"},{"assignments":[7488],"declarations":[{"constant":false,"id":7488,"mutability":"mutable","name":"hash","nameLocation":"2123:4:35","nodeType":"VariableDeclaration","scope":7517,"src":"2115:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7487,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2115:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":7492,"initialValue":{"arguments":[{"id":7490,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7472,"src":"2147:10:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7489,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"2130:16:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":7491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2130:28:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2115:43:35"},{"assignments":[7494],"declarations":[{"constant":false,"id":7494,"mutability":"mutable","name":"signer","nameLocation":"2177:6:35","nodeType":"VariableDeclaration","scope":7517,"src":"2169:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7493,"name":"address","nodeType":"ElementaryTypeName","src":"2169:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":7502,"initialValue":{"arguments":[{"id":7497,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7488,"src":"2200:4:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":7498,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7456,"src":"2206:1:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":7499,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7458,"src":"2209:1:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":7500,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7460,"src":"2212:1:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":7495,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"2186:5:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$1921_$","typeString":"type(library ECDSA)"}},"id":7496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2192:7:35","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":1861,"src":"2186:13:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":7501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2186:28:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2169:45:35"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":7506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7504,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7494,"src":"2232:6:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":7505,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7448,"src":"2242:5:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2232:15:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f785065726d69743a20696e76616c6964207369676e6174757265","id":7507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2249:35:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_b7fed8f0ffb6a3f42980c837425258cf61ae1855d7b042d10be09a4a74c4ecfa","typeString":"literal_string \"YieldBoxPermit: invalid signature\""},"value":"YieldBoxPermit: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b7fed8f0ffb6a3f42980c837425258cf61ae1855d7b042d10be09a4a74c4ecfa","typeString":"literal_string \"YieldBoxPermit: invalid signature\""}],"id":7503,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2224:7:35","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2224:61:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7509,"nodeType":"ExpressionStatement","src":"2224:61:35"},{"expression":{"arguments":[{"id":7511,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7448,"src":"2317:5:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7512,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7450,"src":"2324:7:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7513,"name":"assetId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7452,"src":"2333:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":7514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2342:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":7510,"name":"_setApprovalForAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7529,"src":"2296:20:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,uint256,bool)"}},"id":7515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2296:51:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7516,"nodeType":"ExpressionStatement","src":"2296:51:35"}]},"functionSelector":"d505accf","id":7518,"implemented":true,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1716:6:35","nodeType":"FunctionDefinition","parameters":{"id":7461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7448,"mutability":"mutable","name":"owner","nameLocation":"1740:5:35","nodeType":"VariableDeclaration","scope":7518,"src":"1732:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7447,"name":"address","nodeType":"ElementaryTypeName","src":"1732:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7450,"mutability":"mutable","name":"spender","nameLocation":"1763:7:35","nodeType":"VariableDeclaration","scope":7518,"src":"1755:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7449,"name":"address","nodeType":"ElementaryTypeName","src":"1755:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7452,"mutability":"mutable","name":"assetId","nameLocation":"1788:7:35","nodeType":"VariableDeclaration","scope":7518,"src":"1780:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7451,"name":"uint256","nodeType":"ElementaryTypeName","src":"1780:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7454,"mutability":"mutable","name":"deadline","nameLocation":"1813:8:35","nodeType":"VariableDeclaration","scope":7518,"src":"1805:16:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7453,"name":"uint256","nodeType":"ElementaryTypeName","src":"1805:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7456,"mutability":"mutable","name":"v","nameLocation":"1837:1:35","nodeType":"VariableDeclaration","scope":7518,"src":"1831:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7455,"name":"uint8","nodeType":"ElementaryTypeName","src":"1831:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7458,"mutability":"mutable","name":"r","nameLocation":"1856:1:35","nodeType":"VariableDeclaration","scope":7518,"src":"1848:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7457,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1848:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7460,"mutability":"mutable","name":"s","nameLocation":"1875:1:35","nodeType":"VariableDeclaration","scope":7518,"src":"1867:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7459,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1867:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1722:160:35"},"returnParameters":{"id":7462,"nodeType":"ParameterList","parameters":[],"src":"1898:0:35"},"scope":7661,"src":"1707:647:35","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":7529,"implemented":false,"kind":"function","modifiers":[],"name":"_setApprovalForAsset","nameLocation":"2370:20:35","nodeType":"FunctionDefinition","parameters":{"id":7527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7520,"mutability":"mutable","name":"owner","nameLocation":"2408:5:35","nodeType":"VariableDeclaration","scope":7529,"src":"2400:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7519,"name":"address","nodeType":"ElementaryTypeName","src":"2400:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7522,"mutability":"mutable","name":"spender","nameLocation":"2431:7:35","nodeType":"VariableDeclaration","scope":7529,"src":"2423:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7521,"name":"address","nodeType":"ElementaryTypeName","src":"2423:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7524,"mutability":"mutable","name":"assetId","nameLocation":"2456:7:35","nodeType":"VariableDeclaration","scope":7529,"src":"2448:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7523,"name":"uint256","nodeType":"ElementaryTypeName","src":"2448:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7526,"mutability":"mutable","name":"approved","nameLocation":"2478:8:35","nodeType":"VariableDeclaration","scope":7529,"src":"2473:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7525,"name":"bool","nodeType":"ElementaryTypeName","src":"2473:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2390:102:35"},"returnParameters":{"id":7528,"nodeType":"ParameterList","parameters":[],"src":"2509:0:35"},"scope":7661,"src":"2361:149:35","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":7596,"nodeType":"Block","src":"2686:440:35","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7545,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2704:5:35","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":7546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2710:9:35","memberName":"timestamp","nodeType":"MemberAccess","src":"2704:15:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":7547,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7535,"src":"2723:8:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2704:27:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f785065726d69743a206578706972656420646561646c696e65","id":7549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2733:34:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_e229d4b79f9064024696415254be636d158d901f77caa9c48c6298243974a8c2","typeString":"literal_string \"YieldBoxPermit: expired deadline\""},"value":"YieldBoxPermit: expired deadline"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e229d4b79f9064024696415254be636d158d901f77caa9c48c6298243974a8c2","typeString":"literal_string \"YieldBoxPermit: expired deadline\""}],"id":7544,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2696:7:35","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2696:72:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7551,"nodeType":"ExpressionStatement","src":"2696:72:35"},{"assignments":[7553],"declarations":[{"constant":false,"id":7553,"mutability":"mutable","name":"structHash","nameLocation":"2787:10:35","nodeType":"VariableDeclaration","scope":7596,"src":"2779:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7552,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2779:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":7566,"initialValue":{"arguments":[{"arguments":[{"id":7557,"name":"_PERMIT_ALL_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7435,"src":"2821:20:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":7558,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7531,"src":"2843:5:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7559,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7533,"src":"2850:7:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":7561,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7531,"src":"2869:5:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7560,"name":"_useNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7660,"src":"2859:9:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$","typeString":"function (address) returns (uint256)"}},"id":7562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2859:16:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7563,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7535,"src":"2877:8:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7555,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2810:3:35","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7556,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2814:6:35","memberName":"encode","nodeType":"MemberAccess","src":"2810:10:35","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2810:76:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7554,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2800:9:35","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":7565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2800:87:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2779:108:35"},{"assignments":[7568],"declarations":[{"constant":false,"id":7568,"mutability":"mutable","name":"hash","nameLocation":"2906:4:35","nodeType":"VariableDeclaration","scope":7596,"src":"2898:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7567,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2898:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":7572,"initialValue":{"arguments":[{"id":7570,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7553,"src":"2930:10:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":7569,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"2913:16:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":7571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2913:28:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2898:43:35"},{"assignments":[7574],"declarations":[{"constant":false,"id":7574,"mutability":"mutable","name":"signer","nameLocation":"2960:6:35","nodeType":"VariableDeclaration","scope":7596,"src":"2952:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7573,"name":"address","nodeType":"ElementaryTypeName","src":"2952:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":7582,"initialValue":{"arguments":[{"id":7577,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7568,"src":"2983:4:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":7578,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7537,"src":"2989:1:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":7579,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7539,"src":"2992:1:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":7580,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7541,"src":"2995:1:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":7575,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"2969:5:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$1921_$","typeString":"type(library ECDSA)"}},"id":7576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2975:7:35","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":1861,"src":"2969:13:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":7581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2969:28:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2952:45:35"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":7586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7584,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7574,"src":"3015:6:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":7585,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7531,"src":"3025:5:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3015:15:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5969656c64426f785065726d69743a20696e76616c6964207369676e6174757265","id":7587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3032:35:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_b7fed8f0ffb6a3f42980c837425258cf61ae1855d7b042d10be09a4a74c4ecfa","typeString":"literal_string \"YieldBoxPermit: invalid signature\""},"value":"YieldBoxPermit: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b7fed8f0ffb6a3f42980c837425258cf61ae1855d7b042d10be09a4a74c4ecfa","typeString":"literal_string \"YieldBoxPermit: invalid signature\""}],"id":7583,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3007:7:35","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":7588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3007:61:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7589,"nodeType":"ExpressionStatement","src":"3007:61:35"},{"expression":{"arguments":[{"id":7591,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7531,"src":"3098:5:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7592,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7533,"src":"3105:7:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":7593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3114:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":7590,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7606,"src":"3079:18:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":7594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3079:40:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7595,"nodeType":"ExpressionStatement","src":"3079:40:35"}]},"functionSelector":"aba07847","id":7597,"implemented":true,"kind":"function","modifiers":[],"name":"permitAll","nameLocation":"2526:9:35","nodeType":"FunctionDefinition","parameters":{"id":7542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7531,"mutability":"mutable","name":"owner","nameLocation":"2553:5:35","nodeType":"VariableDeclaration","scope":7597,"src":"2545:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7530,"name":"address","nodeType":"ElementaryTypeName","src":"2545:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7533,"mutability":"mutable","name":"spender","nameLocation":"2576:7:35","nodeType":"VariableDeclaration","scope":7597,"src":"2568:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7532,"name":"address","nodeType":"ElementaryTypeName","src":"2568:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7535,"mutability":"mutable","name":"deadline","nameLocation":"2601:8:35","nodeType":"VariableDeclaration","scope":7597,"src":"2593:16:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7534,"name":"uint256","nodeType":"ElementaryTypeName","src":"2593:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7537,"mutability":"mutable","name":"v","nameLocation":"2625:1:35","nodeType":"VariableDeclaration","scope":7597,"src":"2619:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7536,"name":"uint8","nodeType":"ElementaryTypeName","src":"2619:5:35","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":7539,"mutability":"mutable","name":"r","nameLocation":"2644:1:35","nodeType":"VariableDeclaration","scope":7597,"src":"2636:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7538,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2636:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7541,"mutability":"mutable","name":"s","nameLocation":"2663:1:35","nodeType":"VariableDeclaration","scope":7597,"src":"2655:9:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7540,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2655:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2535:135:35"},"returnParameters":{"id":7543,"nodeType":"ParameterList","parameters":[],"src":"2686:0:35"},"scope":7661,"src":"2517:609:35","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":7606,"implemented":false,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"3141:18:35","nodeType":"FunctionDefinition","parameters":{"id":7604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7599,"mutability":"mutable","name":"_owner","nameLocation":"3177:6:35","nodeType":"VariableDeclaration","scope":7606,"src":"3169:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7598,"name":"address","nodeType":"ElementaryTypeName","src":"3169:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7601,"mutability":"mutable","name":"operator","nameLocation":"3201:8:35","nodeType":"VariableDeclaration","scope":7606,"src":"3193:16:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7600,"name":"address","nodeType":"ElementaryTypeName","src":"3193:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7603,"mutability":"mutable","name":"approved","nameLocation":"3224:8:35","nodeType":"VariableDeclaration","scope":7606,"src":"3219:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7602,"name":"bool","nodeType":"ElementaryTypeName","src":"3219:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3159:79:35"},"returnParameters":{"id":7605,"nodeType":"ParameterList","parameters":[],"src":"3255:0:35"},"scope":7661,"src":"3132:124:35","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":7620,"nodeType":"Block","src":"3390:48:35","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":7614,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7425,"src":"3407:7:35","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$1317_storage_$","typeString":"mapping(address => struct Counters.Counter storage ref)"}},"id":7616,"indexExpression":{"id":7615,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7609,"src":"3415:5:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3407:14:35","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage","typeString":"struct Counters.Counter storage ref"}},"id":7617,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3422:7:35","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":1329,"src":"3407:22:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$1317_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Counter_$1317_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":7618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3407:24:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7613,"id":7619,"nodeType":"Return","src":"3400:31:35"}]},"documentation":{"id":7607,"nodeType":"StructuredDocumentation","src":"3266:50:35","text":" @dev See {IERC20Permit-nonces}."},"functionSelector":"7ecebe00","id":7621,"implemented":true,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3330:6:35","nodeType":"FunctionDefinition","parameters":{"id":7610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7609,"mutability":"mutable","name":"owner","nameLocation":"3345:5:35","nodeType":"VariableDeclaration","scope":7621,"src":"3337:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7608,"name":"address","nodeType":"ElementaryTypeName","src":"3337:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3336:15:35"},"returnParameters":{"id":7613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7612,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7621,"src":"3381:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7611,"name":"uint256","nodeType":"ElementaryTypeName","src":"3381:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3380:9:35"},"scope":7661,"src":"3321:117:35","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":7630,"nodeType":"Block","src":"3622:44:35","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":7627,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"3639:18:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":7628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3639:20:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":7626,"id":7629,"nodeType":"Return","src":"3632:27:35"}]},"documentation":{"id":7622,"nodeType":"StructuredDocumentation","src":"3444:60:35","text":" @dev See {IERC20Permit-DOMAIN_SEPARATOR}."},"functionSelector":"3644e515","id":7631,"implemented":true,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"3571:16:35","nodeType":"FunctionDefinition","parameters":{"id":7623,"nodeType":"ParameterList","parameters":[],"src":"3587:2:35"},"returnParameters":{"id":7626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7625,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7631,"src":"3613:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7624,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3613:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3612:9:35"},"scope":7661,"src":"3562:104:35","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":7659,"nodeType":"Block","src":"3843:126:35","statements":[{"assignments":[7643],"declarations":[{"constant":false,"id":7643,"mutability":"mutable","name":"nonce","nameLocation":"3878:5:35","nodeType":"VariableDeclaration","scope":7659,"src":"3853:30:35","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":7642,"nodeType":"UserDefinedTypeName","pathNode":{"id":7641,"name":"Counters.Counter","nameLocations":["3853:8:35","3862:7:35"],"nodeType":"IdentifierPath","referencedDeclaration":1317,"src":"3853:16:35"},"referencedDeclaration":1317,"src":"3853:16:35","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"id":7647,"initialValue":{"baseExpression":{"id":7644,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7425,"src":"3886:7:35","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$1317_storage_$","typeString":"mapping(address => struct Counters.Counter storage ref)"}},"id":7646,"indexExpression":{"id":7645,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7634,"src":"3894:5:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3886:14:35","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage","typeString":"struct Counters.Counter storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3853:47:35"},{"expression":{"id":7652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7648,"name":"current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7637,"src":"3910:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":7649,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7643,"src":"3920:5:35","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":7650,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3926:7:35","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":1329,"src":"3920:13:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$1317_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Counter_$1317_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":7651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3920:15:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3910:25:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7653,"nodeType":"ExpressionStatement","src":"3910:25:35"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":7654,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7643,"src":"3945:5:35","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1317_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":7656,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3951:9:35","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":1343,"src":"3945:15:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$1317_storage_ptr_$returns$__$attached_to$_t_struct$_Counter_$1317_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":7657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3945:17:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7658,"nodeType":"ExpressionStatement","src":"3945:17:35"}]},"documentation":{"id":7632,"nodeType":"StructuredDocumentation","src":"3672:89:35","text":" @dev \"Consume a nonce\": return the current value and increment."},"id":7660,"implemented":true,"kind":"function","modifiers":[],"name":"_useNonce","nameLocation":"3775:9:35","nodeType":"FunctionDefinition","parameters":{"id":7635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7634,"mutability":"mutable","name":"owner","nameLocation":"3793:5:35","nodeType":"VariableDeclaration","scope":7660,"src":"3785:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7633,"name":"address","nodeType":"ElementaryTypeName","src":"3785:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3784:15:35"},"returnParameters":{"id":7638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7637,"mutability":"mutable","name":"current","nameLocation":"3834:7:35","nodeType":"VariableDeclaration","scope":7660,"src":"3826:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7636,"name":"uint256","nodeType":"ElementaryTypeName","src":"3826:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3825:17:35"},"scope":7661,"src":"3766:203:35","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":7662,"src":"959:3012:35","usedErrors":[]}],"src":"40:3932:35"},"id":35},"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxRebase.sol":{"ast":{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxRebase.sol","exportedSymbols":{"Base64":[774],"BaseBoringBatchable":[78],"BoringAddress":[815],"BoringBatchable":[115],"BoringERC20":[1176],"BoringFactory":[225],"Domain":[317],"ERC1155":[5557],"ERC1155TokenReceiver":[5603],"IERC1155":[428],"IERC1155TokenReceiver":[463],"IERC165":[473],"IERC20":[540],"IMasterContract":[726],"IStrategy":[8364],"IYieldBox":[8538],"NO_STRATEGY":[8373],"TokenType":[8288],"YieldBoxRebase":[7767]},"id":7768,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":7663,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"33:23:36"},{"id":7664,"literals":["experimental","ABIEncoderV2"],"nodeType":"PragmaDirective","src":"57:33:36"},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IStrategy.sol","file":"./interfaces/IStrategy.sol","id":7665,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7768,"sourceUnit":8374,"src":"91:36:36","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol","file":"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol","id":7666,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7768,"sourceUnit":429,"src":"128:73:36","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol","file":"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol","id":7667,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7768,"sourceUnit":775,"src":"202:70:36","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol","file":"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol","id":7668,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7768,"sourceUnit":816,"src":"273:77:36","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol","file":"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol","id":7669,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7768,"sourceUnit":1177,"src":"351:75:36","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/Domain.sol","file":"@boringcrypto/boring-solidity/contracts/Domain.sol","id":7670,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7768,"sourceUnit":318,"src":"427:60:36","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155TokenReceiver.sol","file":"./ERC1155TokenReceiver.sol","id":7671,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7768,"sourceUnit":5604,"src":"488:36:36","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol","file":"./ERC1155.sol","id":7672,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7768,"sourceUnit":5558,"src":"525:23:36","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol","file":"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol","id":7673,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7768,"sourceUnit":116,"src":"549:69:36","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/BoringFactory.sol","file":"@boringcrypto/boring-solidity/contracts/BoringFactory.sol","id":7674,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7768,"sourceUnit":226,"src":"619:67:36","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"YieldBoxRebase","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":7767,"linearizedBaseContracts":[7767],"name":"YieldBoxRebase","nameLocation":"696:14:36","nodeType":"ContractDefinition","nodes":[{"body":{"id":7719,"nodeType":"Block","src":"969:706:36","statements":[{"expression":{"id":7689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1327:13:36","subExpression":{"id":7688,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7681,"src":"1327:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7690,"nodeType":"ExpressionStatement","src":"1327:13:36"},{"expression":{"id":7693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7691,"name":"totalShares_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7679,"src":"1350:12:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"316538","id":7692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1366:3:36","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"value":"1e8"},"src":"1350:19:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7694,"nodeType":"ExpressionStatement","src":"1350:19:36"},{"expression":{"id":7702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7695,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7686,"src":"1450:5:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7696,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7677,"src":"1459:6:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":7697,"name":"totalShares_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7679,"src":"1468:12:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1459:21:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":7699,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1458:23:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":7700,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7681,"src":"1484:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1458:37:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1450:45:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7703,"nodeType":"ExpressionStatement","src":"1450:45:36"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":7713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7704,"name":"roundUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7683,"src":"1579:7:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7705,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7686,"src":"1591:5:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":7706,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7681,"src":"1599:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1591:19:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":7708,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1590:21:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":7709,"name":"totalShares_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7679,"src":"1614:12:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1590:36:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":7711,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7677,"src":"1629:6:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1590:45:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1579:56:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7718,"nodeType":"IfStatement","src":"1575:94:36","trueBody":{"id":7717,"nodeType":"Block","src":"1637:32:36","statements":[{"expression":{"id":7715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1651:7:36","subExpression":{"id":7714,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7686,"src":"1651:5:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7716,"nodeType":"ExpressionStatement","src":"1651:7:36"}]}}]},"documentation":{"id":7675,"nodeType":"StructuredDocumentation","src":"717:79:36","text":"@notice Calculates the base value in relationship to `elastic` and `total`."},"id":7720,"implemented":true,"kind":"function","modifiers":[],"name":"_toShares","nameLocation":"810:9:36","nodeType":"FunctionDefinition","parameters":{"id":7684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7677,"mutability":"mutable","name":"amount","nameLocation":"837:6:36","nodeType":"VariableDeclaration","scope":7720,"src":"829:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7676,"name":"uint256","nodeType":"ElementaryTypeName","src":"829:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7679,"mutability":"mutable","name":"totalShares_","nameLocation":"861:12:36","nodeType":"VariableDeclaration","scope":7720,"src":"853:20:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7678,"name":"uint256","nodeType":"ElementaryTypeName","src":"853:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7681,"mutability":"mutable","name":"totalAmount","nameLocation":"891:11:36","nodeType":"VariableDeclaration","scope":7720,"src":"883:19:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7680,"name":"uint256","nodeType":"ElementaryTypeName","src":"883:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7683,"mutability":"mutable","name":"roundUp","nameLocation":"917:7:36","nodeType":"VariableDeclaration","scope":7720,"src":"912:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7682,"name":"bool","nodeType":"ElementaryTypeName","src":"912:4:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"819:111:36"},"returnParameters":{"id":7687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7686,"mutability":"mutable","name":"share","nameLocation":"962:5:36","nodeType":"VariableDeclaration","scope":7720,"src":"954:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7685,"name":"uint256","nodeType":"ElementaryTypeName","src":"954:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"953:15:36"},"scope":7767,"src":"801:874:36","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":7765,"nodeType":"Block","src":"1933:707:36","statements":[{"expression":{"id":7735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2291:13:36","subExpression":{"id":7734,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7727,"src":"2291:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7736,"nodeType":"ExpressionStatement","src":"2291:13:36"},{"expression":{"id":7739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7737,"name":"totalShares_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7725,"src":"2314:12:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"316538","id":7738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2330:3:36","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"value":"1e8"},"src":"2314:19:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7740,"nodeType":"ExpressionStatement","src":"2314:19:36"},{"expression":{"id":7748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7741,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7732,"src":"2414:6:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7742,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7723,"src":"2424:5:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":7743,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7727,"src":"2432:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2424:19:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":7745,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2423:21:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":7746,"name":"totalShares_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7725,"src":"2447:12:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2423:36:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2414:45:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7749,"nodeType":"ExpressionStatement","src":"2414:45:36"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":7759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7750,"name":"roundUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7729,"src":"2543:7:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7751,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7732,"src":"2555:6:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":7752,"name":"totalShares_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7725,"src":"2564:12:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2555:21:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":7754,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2554:23:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":7755,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7727,"src":"2580:11:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2554:37:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":7757,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7723,"src":"2594:5:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2554:45:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2543:56:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7764,"nodeType":"IfStatement","src":"2539:95:36","trueBody":{"id":7763,"nodeType":"Block","src":"2601:33:36","statements":[{"expression":{"id":7761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2615:8:36","subExpression":{"id":7760,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7732,"src":"2615:6:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7762,"nodeType":"ExpressionStatement","src":"2615:8:36"}]}}]},"documentation":{"id":7721,"nodeType":"StructuredDocumentation","src":"1681:79:36","text":"@notice Calculates the elastic value in relationship to `base` and `total`."},"id":7766,"implemented":true,"kind":"function","modifiers":[],"name":"_toAmount","nameLocation":"1774:9:36","nodeType":"FunctionDefinition","parameters":{"id":7730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7723,"mutability":"mutable","name":"share","nameLocation":"1801:5:36","nodeType":"VariableDeclaration","scope":7766,"src":"1793:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7722,"name":"uint256","nodeType":"ElementaryTypeName","src":"1793:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7725,"mutability":"mutable","name":"totalShares_","nameLocation":"1824:12:36","nodeType":"VariableDeclaration","scope":7766,"src":"1816:20:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7724,"name":"uint256","nodeType":"ElementaryTypeName","src":"1816:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7727,"mutability":"mutable","name":"totalAmount","nameLocation":"1854:11:36","nodeType":"VariableDeclaration","scope":7766,"src":"1846:19:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7726,"name":"uint256","nodeType":"ElementaryTypeName","src":"1846:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7729,"mutability":"mutable","name":"roundUp","nameLocation":"1880:7:36","nodeType":"VariableDeclaration","scope":7766,"src":"1875:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7728,"name":"bool","nodeType":"ElementaryTypeName","src":"1875:4:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1783:110:36"},"returnParameters":{"id":7733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7732,"mutability":"mutable","name":"amount","nameLocation":"1925:6:36","nodeType":"VariableDeclaration","scope":7766,"src":"1917:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7731,"name":"uint256","nodeType":"ElementaryTypeName","src":"1917:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1916:16:36"},"scope":7767,"src":"1765:875:36","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":7768,"src":"688:1954:36","usedErrors":[]}],"src":"33:2610:36"},"id":36},"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxURIBuilder.sol":{"ast":{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxURIBuilder.sol","exportedSymbols":{"Asset":[4632],"AssetRegister":[4927],"Base64":[774],"BoringAddress":[815],"BoringERC20":[1176],"BoringMath":[5046],"ERC1155":[5557],"IERC1155":[428],"IERC1155TokenReceiver":[463],"IERC165":[473],"IERC20":[540],"IStrategy":[8364],"IYieldBox":[8538],"Math":[2940],"NO_STRATEGY":[8373],"NativeToken":[5639],"NativeTokenFactory":[6069],"Strings":[1560],"TokenType":[8288],"YieldBoxURIBuilder":[8280]},"id":8281,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":7769,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:37"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":7770,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8281,"sourceUnit":1561,"src":"56:51:37","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol","file":"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol","id":7771,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8281,"sourceUnit":775,"src":"108:70:37","symbolAliases":[],"unitAlias":""},{"absolutePath":"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol","file":"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol","id":7772,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8281,"sourceUnit":1177,"src":"179:75:37","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol","file":"./interfaces/IYieldBox.sol","id":7773,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8281,"sourceUnit":8539,"src":"255:36:37","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol","file":"./NativeTokenFactory.sol","id":7774,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8281,"sourceUnit":6070,"src":"292:34:37","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"YieldBoxURIBuilder","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":8280,"linearizedBaseContracts":[8280],"name":"YieldBoxURIBuilder","nameLocation":"364:18:37","nodeType":"ContractDefinition","nodes":[{"global":false,"id":7778,"libraryName":{"id":7775,"name":"BoringERC20","nameLocations":["395:11:37"],"nodeType":"IdentifierPath","referencedDeclaration":1176,"src":"395:11:37"},"nodeType":"UsingForDirective","src":"389:29:37","typeName":{"id":7777,"nodeType":"UserDefinedTypeName","pathNode":{"id":7776,"name":"IERC20","nameLocations":["411:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":540,"src":"411:6:37"},"referencedDeclaration":540,"src":"411:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}}},{"global":false,"id":7781,"libraryName":{"id":7779,"name":"Strings","nameLocations":["429:7:37"],"nodeType":"IdentifierPath","referencedDeclaration":1560,"src":"429:7:37"},"nodeType":"UsingForDirective","src":"423:26:37","typeName":{"id":7780,"name":"uint256","nodeType":"ElementaryTypeName","src":"441:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"global":false,"id":7784,"libraryName":{"id":7782,"name":"Base64","nameLocations":["460:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":774,"src":"460:6:37"},"nodeType":"UsingForDirective","src":"454:23:37","typeName":{"id":7783,"name":"bytes","nodeType":"ElementaryTypeName","src":"471:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},{"canonicalName":"YieldBoxURIBuilder.AssetDetails","id":7793,"members":[{"constant":false,"id":7786,"mutability":"mutable","name":"tokenType","nameLocation":"520:9:37","nodeType":"VariableDeclaration","scope":7793,"src":"513:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":7785,"name":"string","nodeType":"ElementaryTypeName","src":"513:6:37","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":7788,"mutability":"mutable","name":"name","nameLocation":"546:4:37","nodeType":"VariableDeclaration","scope":7793,"src":"539:11:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":7787,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:37","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":7790,"mutability":"mutable","name":"symbol","nameLocation":"567:6:37","nodeType":"VariableDeclaration","scope":7793,"src":"560:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":7789,"name":"string","nodeType":"ElementaryTypeName","src":"560:6:37","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":7792,"mutability":"mutable","name":"decimals","nameLocation":"591:8:37","nodeType":"VariableDeclaration","scope":7793,"src":"583:16:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7791,"name":"uint256","nodeType":"ElementaryTypeName","src":"583:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"AssetDetails","nameLocation":"490:12:37","nodeType":"StructDefinition","scope":8280,"src":"483:123:37","visibility":"public"},{"body":{"id":7901,"nodeType":"Block","src":"714:1173:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},"id":7806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7803,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7796,"src":"728:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":7804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"734:8:37","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"728:14:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":7805,"name":"NO_STRATEGY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8373,"src":"746:11:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"src":"728:29:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7899,"nodeType":"Block","src":"807:1074:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":7814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7810,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7796,"src":"825:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":7811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"831:9:37","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"825:15:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":7812,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"844:9:37","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":7813,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"854:5:37","memberName":"ERC20","nodeType":"MemberAccess","referencedDeclaration":8284,"src":"844:15:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"825:34:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":7844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7840,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7796,"src":"1049:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":7841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1055:9:37","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"1049:15:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":7842,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"1068:9:37","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":7843,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1078:7:37","memberName":"ERC1155","nodeType":"MemberAccess","referencedDeclaration":8286,"src":"1068:17:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"1049:36:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7896,"nodeType":"Block","src":"1761:110:37","statements":[{"expression":{"arguments":[{"arguments":[{"id":7886,"name":"nativeName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7798,"src":"1810:10:37","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"hexValue":"2028","id":7887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1822:4:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_c128201f9c8a3f86d1708e60c71fc62d6fe8dd57c8053c22057ce79fa6a900f2","typeString":"literal_string \" (\""},"value":" ("},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":7888,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7796,"src":"1828:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":7889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1834:8:37","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"1828:14:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"id":7890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1843:4:37","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":8306,"src":"1828:19:37","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view external returns (string memory)"}},"id":7891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"29","id":7892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1851:3:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_59d76dc3b33357eda30db1508968fbb18f21b9cd2442f1559b20154ddaa4d7ed","typeString":"literal_string \")\""},"value":")"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_stringliteral_c128201f9c8a3f86d1708e60c71fc62d6fe8dd57c8053c22057ce79fa6a900f2","typeString":"literal_string \" (\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_59d76dc3b33357eda30db1508968fbb18f21b9cd2442f1559b20154ddaa4d7ed","typeString":"literal_string \")\""}],"expression":{"id":7884,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1793:3:37","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7885,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1797:12:37","memberName":"encodePacked","nodeType":"MemberAccess","src":"1793:16:37","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1793:62:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7883,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1786:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":7882,"name":"string","nodeType":"ElementaryTypeName","src":"1786:6:37","typeDescriptions":{}}},"id":7894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1786:70:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7802,"id":7895,"nodeType":"Return","src":"1779:77:37"}]},"id":7897,"nodeType":"IfStatement","src":"1045:826:37","trueBody":{"id":7881,"nodeType":"Block","src":"1087:668:37","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"hexValue":"455243313135353a","id":7853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1304:10:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_3034ce69285a03f7d17d7da265ffc33c60d25c1fb254c661962ec730f5190a4b","typeString":"literal_string \"ERC1155:\""},"value":"ERC1155:"},{"arguments":[{"hexValue":"3230","id":7863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1404:2:37","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"expression":{"arguments":[{"arguments":[{"expression":{"id":7858,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7796,"src":"1368:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":7859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1374:15:37","memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":4626,"src":"1368:21:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1360:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":7856,"name":"uint160","nodeType":"ElementaryTypeName","src":"1360:7:37","typeDescriptions":{}}},"id":7860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1360:30:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":7855,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1352:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":7854,"name":"uint256","nodeType":"ElementaryTypeName","src":"1352:7:37","typeDescriptions":{}}},"id":7861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1352:39:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1392:11:37","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1539,"src":"1352:51:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":7864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1352:55:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2f","id":7865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1445:3:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527","typeString":"literal_string \"/\""},"value":"/"},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":7866,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7796,"src":"1486:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":7867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1492:7:37","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":4631,"src":"1486:13:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1500:8:37","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1443,"src":"1486:22:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":7869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1486:24:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3034ce69285a03f7d17d7da265ffc33c60d25c1fb254c661962ec730f5190a4b","typeString":"literal_string \"ERC1155:\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527","typeString":"literal_string \"/\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":7851,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1250:3:37","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7852,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1254:12:37","memberName":"encodePacked","nodeType":"MemberAccess","src":"1250:16:37","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1250:294:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7850,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1210:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":7849,"name":"string","nodeType":"ElementaryTypeName","src":"1210:6:37","typeDescriptions":{}}},"id":7871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1210:364:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2028","id":7872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1604:4:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_c128201f9c8a3f86d1708e60c71fc62d6fe8dd57c8053c22057ce79fa6a900f2","typeString":"literal_string \" (\""},"value":" ("},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":7873,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7796,"src":"1638:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":7874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1644:8:37","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"1638:14:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"id":7875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1653:4:37","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":8306,"src":"1638:19:37","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view external returns (string memory)"}},"id":7876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1638:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"29","id":7877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1689:3:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_59d76dc3b33357eda30db1508968fbb18f21b9cd2442f1559b20154ddaa4d7ed","typeString":"literal_string \")\""},"value":")"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_c128201f9c8a3f86d1708e60c71fc62d6fe8dd57c8053c22057ce79fa6a900f2","typeString":"literal_string \" (\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_59d76dc3b33357eda30db1508968fbb18f21b9cd2442f1559b20154ddaa4d7ed","typeString":"literal_string \")\""}],"expression":{"id":7847,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1164:3:37","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7848,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1168:12:37","memberName":"encodePacked","nodeType":"MemberAccess","src":"1164:16:37","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1164:554:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7846,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1132:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":7845,"name":"string","nodeType":"ElementaryTypeName","src":"1132:6:37","typeDescriptions":{}}},"id":7879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1132:608:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7802,"id":7880,"nodeType":"Return","src":"1105:635:37"}]}},"id":7898,"nodeType":"IfStatement","src":"821:1050:37","trueBody":{"id":7839,"nodeType":"Block","src":"861:178:37","statements":[{"assignments":[7817],"declarations":[{"constant":false,"id":7817,"mutability":"mutable","name":"token","nameLocation":"886:5:37","nodeType":"VariableDeclaration","scope":7839,"src":"879:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"},"typeName":{"id":7816,"nodeType":"UserDefinedTypeName","pathNode":{"id":7815,"name":"IERC20","nameLocations":["879:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":540,"src":"879:6:37"},"referencedDeclaration":540,"src":"879:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"visibility":"internal"}],"id":7822,"initialValue":{"arguments":[{"expression":{"id":7819,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7796,"src":"901:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":7820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"907:15:37","memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":4626,"src":"901:21:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7818,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"894:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$540_$","typeString":"type(contract IERC20)"}},"id":7821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"894:29:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"879:44:37"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":7827,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7817,"src":"972:5:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"id":7828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"978:8:37","memberName":"safeName","nodeType":"MemberAccess","referencedDeclaration":987,"src":"972:14:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_IERC20_$540_$returns$_t_string_memory_ptr_$attached_to$_t_contract$_IERC20_$540_$","typeString":"function (contract IERC20) view returns (string memory)"}},"id":7829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"972:16:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2028","id":7830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"990:4:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_c128201f9c8a3f86d1708e60c71fc62d6fe8dd57c8053c22057ce79fa6a900f2","typeString":"literal_string \" (\""},"value":" ("},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":7831,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7796,"src":"996:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":7832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1002:8:37","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"996:14:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"id":7833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1011:4:37","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":8306,"src":"996:19:37","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view external returns (string memory)"}},"id":7834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"996:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"29","id":7835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1019:3:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_59d76dc3b33357eda30db1508968fbb18f21b9cd2442f1559b20154ddaa4d7ed","typeString":"literal_string \")\""},"value":")"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_c128201f9c8a3f86d1708e60c71fc62d6fe8dd57c8053c22057ce79fa6a900f2","typeString":"literal_string \" (\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_59d76dc3b33357eda30db1508968fbb18f21b9cd2442f1559b20154ddaa4d7ed","typeString":"literal_string \")\""}],"expression":{"id":7825,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"955:3:37","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7826,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"959:12:37","memberName":"encodePacked","nodeType":"MemberAccess","src":"955:16:37","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:68:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7824,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"948:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":7823,"name":"string","nodeType":"ElementaryTypeName","src":"948:6:37","typeDescriptions":{}}},"id":7837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"948:76:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7802,"id":7838,"nodeType":"Return","src":"941:83:37"}]}}]},"id":7900,"nodeType":"IfStatement","src":"724:1157:37","trueBody":{"id":7809,"nodeType":"Block","src":"759:42:37","statements":[{"expression":{"id":7807,"name":"nativeName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7798,"src":"780:10:37","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"functionReturnParameters":7802,"id":7808,"nodeType":"Return","src":"773:17:37"}]}}]},"functionSelector":"aa1163b9","id":7902,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"621:4:37","nodeType":"FunctionDefinition","parameters":{"id":7799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7796,"mutability":"mutable","name":"asset","nameLocation":"641:5:37","nodeType":"VariableDeclaration","scope":7902,"src":"626:20:37","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset"},"typeName":{"id":7795,"nodeType":"UserDefinedTypeName","pathNode":{"id":7794,"name":"Asset","nameLocations":["626:5:37"],"nodeType":"IdentifierPath","referencedDeclaration":4632,"src":"626:5:37"},"referencedDeclaration":4632,"src":"626:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"}},"visibility":"internal"},{"constant":false,"id":7798,"mutability":"mutable","name":"nativeName","nameLocation":"664:10:37","nodeType":"VariableDeclaration","scope":7902,"src":"648:26:37","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":7797,"name":"string","nodeType":"ElementaryTypeName","src":"648:6:37","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"625:50:37"},"returnParameters":{"id":7802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7801,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7902,"src":"699:13:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7800,"name":"string","nodeType":"ElementaryTypeName","src":"699:6:37","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"698:15:37"},"scope":8280,"src":"612:1275:37","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":7988,"nodeType":"Block","src":"1999:620:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},"id":7915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7912,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7905,"src":"2013:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":7913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2019:8:37","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"2013:14:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":7914,"name":"NO_STRATEGY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8373,"src":"2031:11:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"src":"2013:29:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7986,"nodeType":"Block","src":"2094:519:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":7923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7919,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7905,"src":"2112:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":7920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2118:9:37","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"2112:15:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":7921,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"2131:9:37","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":7922,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2141:5:37","memberName":"ERC20","nodeType":"MemberAccess","referencedDeclaration":8284,"src":"2131:15:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"2112:34:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":7953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7949,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7905,"src":"2338:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":7950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2344:9:37","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"2338:15:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":7951,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"2357:9:37","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":7952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2367:7:37","memberName":"ERC1155","nodeType":"MemberAccess","referencedDeclaration":8286,"src":"2357:17:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"2338:36:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":7983,"nodeType":"Block","src":"2491:112:37","statements":[{"expression":{"arguments":[{"arguments":[{"id":7973,"name":"nativeSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7907,"src":"2540:12:37","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"hexValue":"2028","id":7974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2554:4:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_c128201f9c8a3f86d1708e60c71fc62d6fe8dd57c8053c22057ce79fa6a900f2","typeString":"literal_string \" (\""},"value":" ("},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":7975,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7905,"src":"2560:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":7976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2566:8:37","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"2560:14:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"id":7977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2575:4:37","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":8306,"src":"2560:19:37","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view external returns (string memory)"}},"id":7978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2560:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"29","id":7979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2583:3:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_59d76dc3b33357eda30db1508968fbb18f21b9cd2442f1559b20154ddaa4d7ed","typeString":"literal_string \")\""},"value":")"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_stringliteral_c128201f9c8a3f86d1708e60c71fc62d6fe8dd57c8053c22057ce79fa6a900f2","typeString":"literal_string \" (\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_59d76dc3b33357eda30db1508968fbb18f21b9cd2442f1559b20154ddaa4d7ed","typeString":"literal_string \")\""}],"expression":{"id":7971,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2523:3:37","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2527:12:37","memberName":"encodePacked","nodeType":"MemberAccess","src":"2523:16:37","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2523:64:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2516:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":7969,"name":"string","nodeType":"ElementaryTypeName","src":"2516:6:37","typeDescriptions":{}}},"id":7981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2516:72:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7911,"id":7982,"nodeType":"Return","src":"2509:79:37"}]},"id":7984,"nodeType":"IfStatement","src":"2334:269:37","trueBody":{"id":7968,"nodeType":"Block","src":"2376:109:37","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"45524331313535","id":7958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2425:9:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_973bb64086f173ec8099b7ed3d43da984f4a332e4417a08bc6a286e6402b0586","typeString":"literal_string \"ERC1155\""},"value":"ERC1155"},{"hexValue":"2028","id":7959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2436:4:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_c128201f9c8a3f86d1708e60c71fc62d6fe8dd57c8053c22057ce79fa6a900f2","typeString":"literal_string \" (\""},"value":" ("},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":7960,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7905,"src":"2442:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":7961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2448:8:37","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"2442:14:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"id":7962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2457:4:37","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":8306,"src":"2442:19:37","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view external returns (string memory)"}},"id":7963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2442:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"29","id":7964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2465:3:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_59d76dc3b33357eda30db1508968fbb18f21b9cd2442f1559b20154ddaa4d7ed","typeString":"literal_string \")\""},"value":")"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_973bb64086f173ec8099b7ed3d43da984f4a332e4417a08bc6a286e6402b0586","typeString":"literal_string \"ERC1155\""},{"typeIdentifier":"t_stringliteral_c128201f9c8a3f86d1708e60c71fc62d6fe8dd57c8053c22057ce79fa6a900f2","typeString":"literal_string \" (\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_59d76dc3b33357eda30db1508968fbb18f21b9cd2442f1559b20154ddaa4d7ed","typeString":"literal_string \")\""}],"expression":{"id":7956,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2408:3:37","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2412:12:37","memberName":"encodePacked","nodeType":"MemberAccess","src":"2408:16:37","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2408:61:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2401:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":7954,"name":"string","nodeType":"ElementaryTypeName","src":"2401:6:37","typeDescriptions":{}}},"id":7966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2401:69:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7911,"id":7967,"nodeType":"Return","src":"2394:76:37"}]}},"id":7985,"nodeType":"IfStatement","src":"2108:495:37","trueBody":{"id":7948,"nodeType":"Block","src":"2148:180:37","statements":[{"assignments":[7926],"declarations":[{"constant":false,"id":7926,"mutability":"mutable","name":"token","nameLocation":"2173:5:37","nodeType":"VariableDeclaration","scope":7948,"src":"2166:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"},"typeName":{"id":7925,"nodeType":"UserDefinedTypeName","pathNode":{"id":7924,"name":"IERC20","nameLocations":["2166:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":540,"src":"2166:6:37"},"referencedDeclaration":540,"src":"2166:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"visibility":"internal"}],"id":7931,"initialValue":{"arguments":[{"expression":{"id":7928,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7905,"src":"2188:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":7929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2194:15:37","memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":4626,"src":"2188:21:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":7927,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"2181:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$540_$","typeString":"type(contract IERC20)"}},"id":7930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2181:29:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"2166:44:37"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":7936,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7926,"src":"2259:5:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"id":7937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2265:10:37","memberName":"safeSymbol","nodeType":"MemberAccess","referencedDeclaration":955,"src":"2259:16:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_IERC20_$540_$returns$_t_string_memory_ptr_$attached_to$_t_contract$_IERC20_$540_$","typeString":"function (contract IERC20) view returns (string memory)"}},"id":7938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2259:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2028","id":7939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2279:4:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_c128201f9c8a3f86d1708e60c71fc62d6fe8dd57c8053c22057ce79fa6a900f2","typeString":"literal_string \" (\""},"value":" ("},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":7940,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7905,"src":"2285:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":7941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2291:8:37","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"2285:14:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"id":7942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2300:4:37","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":8306,"src":"2285:19:37","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view external returns (string memory)"}},"id":7943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2285:21:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"29","id":7944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2308:3:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_59d76dc3b33357eda30db1508968fbb18f21b9cd2442f1559b20154ddaa4d7ed","typeString":"literal_string \")\""},"value":")"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_c128201f9c8a3f86d1708e60c71fc62d6fe8dd57c8053c22057ce79fa6a900f2","typeString":"literal_string \" (\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_59d76dc3b33357eda30db1508968fbb18f21b9cd2442f1559b20154ddaa4d7ed","typeString":"literal_string \")\""}],"expression":{"id":7934,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2242:3:37","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":7935,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2246:12:37","memberName":"encodePacked","nodeType":"MemberAccess","src":"2242:16:37","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":7945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2242:70:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":7933,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2235:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":7932,"name":"string","nodeType":"ElementaryTypeName","src":"2235:6:37","typeDescriptions":{}}},"id":7946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2235:78:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":7911,"id":7947,"nodeType":"Return","src":"2228:85:37"}]}}]},"id":7987,"nodeType":"IfStatement","src":"2009:604:37","trueBody":{"id":7918,"nodeType":"Block","src":"2044:44:37","statements":[{"expression":{"id":7916,"name":"nativeSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7907,"src":"2065:12:37","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"functionReturnParameters":7911,"id":7917,"nodeType":"Return","src":"2058:19:37"}]}}]},"functionSelector":"84b1017d","id":7989,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"1902:6:37","nodeType":"FunctionDefinition","parameters":{"id":7908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7905,"mutability":"mutable","name":"asset","nameLocation":"1924:5:37","nodeType":"VariableDeclaration","scope":7989,"src":"1909:20:37","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset"},"typeName":{"id":7904,"nodeType":"UserDefinedTypeName","pathNode":{"id":7903,"name":"Asset","nameLocations":["1909:5:37"],"nodeType":"IdentifierPath","referencedDeclaration":4632,"src":"1909:5:37"},"referencedDeclaration":4632,"src":"1909:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"}},"visibility":"internal"},{"constant":false,"id":7907,"mutability":"mutable","name":"nativeSymbol","nameLocation":"1947:12:37","nodeType":"VariableDeclaration","scope":7989,"src":"1931:28:37","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":7906,"name":"string","nodeType":"ElementaryTypeName","src":"1931:6:37","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1908:52:37"},"returnParameters":{"id":7911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7910,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7989,"src":"1984:13:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":7909,"name":"string","nodeType":"ElementaryTypeName","src":"1984:6:37","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1983:15:37"},"scope":8280,"src":"1893:726:37","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":8030,"nodeType":"Block","src":"2717:299:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":8003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7999,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7992,"src":"2731:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":8000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2737:9:37","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"2731:15:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":8001,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"2750:9:37","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":8002,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2760:7:37","memberName":"ERC1155","nodeType":"MemberAccess","referencedDeclaration":8286,"src":"2750:17:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"2731:36:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":8011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":8007,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7992,"src":"2812:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":8008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2818:9:37","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"2812:15:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":8009,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"2831:9:37","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":8010,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2841:5:37","memberName":"ERC20","nodeType":"MemberAccess","referencedDeclaration":8284,"src":"2831:15:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"2812:34:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":8027,"nodeType":"Block","src":"2964:46:37","statements":[{"expression":{"id":8025,"name":"nativeDecimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7994,"src":"2985:14:37","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":7998,"id":8026,"nodeType":"Return","src":"2978:21:37"}]},"id":8028,"nodeType":"IfStatement","src":"2808:202:37","trueBody":{"id":8024,"nodeType":"Block","src":"2848:110:37","statements":[{"assignments":[8014],"declarations":[{"constant":false,"id":8014,"mutability":"mutable","name":"token","nameLocation":"2869:5:37","nodeType":"VariableDeclaration","scope":8024,"src":"2862:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"},"typeName":{"id":8013,"nodeType":"UserDefinedTypeName","pathNode":{"id":8012,"name":"IERC20","nameLocations":["2862:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":540,"src":"2862:6:37"},"referencedDeclaration":540,"src":"2862:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"visibility":"internal"}],"id":8019,"initialValue":{"arguments":[{"expression":{"id":8016,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7992,"src":"2884:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":8017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2890:15:37","memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":4626,"src":"2884:21:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8015,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"2877:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$540_$","typeString":"type(contract IERC20)"}},"id":8018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2877:29:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"2862:44:37"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":8020,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8014,"src":"2927:5:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"id":8021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2933:12:37","memberName":"safeDecimals","nodeType":"MemberAccess","referencedDeclaration":1028,"src":"2927:18:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_IERC20_$540_$returns$_t_uint8_$attached_to$_t_contract$_IERC20_$540_$","typeString":"function (contract IERC20) view returns (uint8)"}},"id":8022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2927:20:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":7998,"id":8023,"nodeType":"Return","src":"2920:27:37"}]}},"id":8029,"nodeType":"IfStatement","src":"2727:283:37","trueBody":{"id":8006,"nodeType":"Block","src":"2769:33:37","statements":[{"expression":{"hexValue":"30","id":8004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2790:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":7998,"id":8005,"nodeType":"Return","src":"2783:8:37"}]}}]},"functionSelector":"6d7cd037","id":8031,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"2634:8:37","nodeType":"FunctionDefinition","parameters":{"id":7995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7992,"mutability":"mutable","name":"asset","nameLocation":"2658:5:37","nodeType":"VariableDeclaration","scope":8031,"src":"2643:20:37","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset"},"typeName":{"id":7991,"nodeType":"UserDefinedTypeName","pathNode":{"id":7990,"name":"Asset","nameLocations":["2643:5:37"],"nodeType":"IdentifierPath","referencedDeclaration":4632,"src":"2643:5:37"},"referencedDeclaration":4632,"src":"2643:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"}},"visibility":"internal"},{"constant":false,"id":7994,"mutability":"mutable","name":"nativeDecimals","nameLocation":"2671:14:37","nodeType":"VariableDeclaration","scope":8031,"src":"2665:20:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7993,"name":"uint8","nodeType":"ElementaryTypeName","src":"2665:5:37","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2642:44:37"},"returnParameters":{"id":7998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7997,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8031,"src":"2710:5:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7996,"name":"uint8","nodeType":"ElementaryTypeName","src":"2710:5:37","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2709:7:37"},"scope":8280,"src":"2625:391:37","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":8278,"nodeType":"Block","src":"3203:2413:37","statements":[{"assignments":[8048],"declarations":[{"constant":false,"id":8048,"mutability":"mutable","name":"details","nameLocation":"3233:7:37","nodeType":"VariableDeclaration","scope":8278,"src":"3213:27:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_AssetDetails_$7793_memory_ptr","typeString":"struct YieldBoxURIBuilder.AssetDetails"},"typeName":{"id":8047,"nodeType":"UserDefinedTypeName","pathNode":{"id":8046,"name":"AssetDetails","nameLocations":["3213:12:37"],"nodeType":"IdentifierPath","referencedDeclaration":7793,"src":"3213:12:37"},"referencedDeclaration":7793,"src":"3213:12:37","typeDescriptions":{"typeIdentifier":"t_struct$_AssetDetails_$7793_storage_ptr","typeString":"struct YieldBoxURIBuilder.AssetDetails"}},"visibility":"internal"}],"id":8049,"nodeType":"VariableDeclarationStatement","src":"3213:27:37"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":8054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":8050,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8034,"src":"3254:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":8051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3260:9:37","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"3254:15:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":8052,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"3273:9:37","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":8053,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3283:7:37","memberName":"ERC1155","nodeType":"MemberAccess","referencedDeclaration":8286,"src":"3273:17:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"3254:36:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":8100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":8096,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8034,"src":"3657:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":8097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3663:9:37","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"3657:15:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":8098,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"3676:9:37","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":8099,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3686:5:37","memberName":"ERC20","nodeType":"MemberAccess","referencedDeclaration":8284,"src":"3676:15:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"3657:34:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":8152,"nodeType":"Block","src":"3873:222:37","statements":[{"expression":{"id":8129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":8125,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8048,"src":"3909:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_AssetDetails_$7793_memory_ptr","typeString":"struct YieldBoxURIBuilder.AssetDetails memory"}},"id":8127,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3917:9:37","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":7786,"src":"3909:17:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"4e6174697665","id":8128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3929:8:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3a129fa95d8e1dff73193c0e0092bfae8c1a1d8cb953ed67bd42a4861e423f9","typeString":"literal_string \"Native\""},"value":"Native"},"src":"3909:28:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":8130,"nodeType":"ExpressionStatement","src":"3909:28:37"},{"expression":{"id":8136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":8131,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8048,"src":"3951:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_AssetDetails_$7793_memory_ptr","typeString":"struct YieldBoxURIBuilder.AssetDetails memory"}},"id":8133,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3959:4:37","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":7788,"src":"3951:12:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":8134,"name":"nativeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8037,"src":"3966:11:37","typeDescriptions":{"typeIdentifier":"t_struct$_NativeToken_$5639_calldata_ptr","typeString":"struct NativeToken calldata"}},"id":8135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3978:4:37","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":5632,"src":"3966:16:37","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"3951:31:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":8137,"nodeType":"ExpressionStatement","src":"3951:31:37"},{"expression":{"id":8143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":8138,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8048,"src":"3996:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_AssetDetails_$7793_memory_ptr","typeString":"struct YieldBoxURIBuilder.AssetDetails memory"}},"id":8140,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4004:6:37","memberName":"symbol","nodeType":"MemberAccess","referencedDeclaration":7790,"src":"3996:14:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":8141,"name":"nativeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8037,"src":"4013:11:37","typeDescriptions":{"typeIdentifier":"t_struct$_NativeToken_$5639_calldata_ptr","typeString":"struct NativeToken calldata"}},"id":8142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4025:6:37","memberName":"symbol","nodeType":"MemberAccess","referencedDeclaration":5634,"src":"4013:18:37","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"3996:35:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":8144,"nodeType":"ExpressionStatement","src":"3996:35:37"},{"expression":{"id":8150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":8145,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8048,"src":"4045:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_AssetDetails_$7793_memory_ptr","typeString":"struct YieldBoxURIBuilder.AssetDetails memory"}},"id":8147,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4053:8:37","memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":7792,"src":"4045:16:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":8148,"name":"nativeToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8037,"src":"4064:11:37","typeDescriptions":{"typeIdentifier":"t_struct$_NativeToken_$5639_calldata_ptr","typeString":"struct NativeToken calldata"}},"id":8149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4076:8:37","memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":5636,"src":"4064:20:37","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4045:39:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8151,"nodeType":"ExpressionStatement","src":"4045:39:37"}]},"id":8153,"nodeType":"IfStatement","src":"3653:442:37","trueBody":{"id":8124,"nodeType":"Block","src":"3693:174:37","statements":[{"assignments":[8103],"declarations":[{"constant":false,"id":8103,"mutability":"mutable","name":"token","nameLocation":"3714:5:37","nodeType":"VariableDeclaration","scope":8124,"src":"3707:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"},"typeName":{"id":8102,"nodeType":"UserDefinedTypeName","pathNode":{"id":8101,"name":"IERC20","nameLocations":["3707:6:37"],"nodeType":"IdentifierPath","referencedDeclaration":540,"src":"3707:6:37"},"referencedDeclaration":540,"src":"3707:6:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"visibility":"internal"}],"id":8108,"initialValue":{"arguments":[{"expression":{"id":8105,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8034,"src":"3729:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":8106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3735:15:37","memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":4626,"src":"3729:21:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8104,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"3722:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$540_$","typeString":"type(contract IERC20)"}},"id":8107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3722:29:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"3707:44:37"},{"expression":{"id":8122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8109,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8048,"src":"3765:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_AssetDetails_$7793_memory_ptr","typeString":"struct YieldBoxURIBuilder.AssetDetails memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"4552433230","id":8111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3788:7:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_8ae85d849167ff996c04040c44924fd364217285e4cad818292c7ac37c0a345b","typeString":"literal_string \"ERC20\""},"value":"ERC20"},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":8112,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8103,"src":"3797:5:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"id":8113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3803:8:37","memberName":"safeName","nodeType":"MemberAccess","referencedDeclaration":987,"src":"3797:14:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_IERC20_$540_$returns$_t_string_memory_ptr_$attached_to$_t_contract$_IERC20_$540_$","typeString":"function (contract IERC20) view returns (string memory)"}},"id":8114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3797:16:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":8115,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8103,"src":"3815:5:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"id":8116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3821:10:37","memberName":"safeSymbol","nodeType":"MemberAccess","referencedDeclaration":955,"src":"3815:16:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_IERC20_$540_$returns$_t_string_memory_ptr_$attached_to$_t_contract$_IERC20_$540_$","typeString":"function (contract IERC20) view returns (string memory)"}},"id":8117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3815:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":8118,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8103,"src":"3835:5:37","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$540","typeString":"contract IERC20"}},"id":8119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3841:12:37","memberName":"safeDecimals","nodeType":"MemberAccess","referencedDeclaration":1028,"src":"3835:18:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_IERC20_$540_$returns$_t_uint8_$attached_to$_t_contract$_IERC20_$540_$","typeString":"function (contract IERC20) view returns (uint8)"}},"id":8120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3835:20:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8ae85d849167ff996c04040c44924fd364217285e4cad818292c7ac37c0a345b","typeString":"literal_string \"ERC20\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":8110,"name":"AssetDetails","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7793,"src":"3775:12:37","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_AssetDetails_$7793_storage_ptr_$","typeString":"type(struct YieldBoxURIBuilder.AssetDetails storage pointer)"}},"id":8121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3775:81:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AssetDetails_$7793_memory_ptr","typeString":"struct YieldBoxURIBuilder.AssetDetails memory"}},"src":"3765:91:37","typeDescriptions":{"typeIdentifier":"t_struct$_AssetDetails_$7793_memory_ptr","typeString":"struct YieldBoxURIBuilder.AssetDetails memory"}},"id":8123,"nodeType":"ExpressionStatement","src":"3765:91:37"}]}},"id":8154,"nodeType":"IfStatement","src":"3250:845:37","trueBody":{"id":8095,"nodeType":"Block","src":"3292:355:37","statements":[{"expression":{"id":8059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":8055,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8048,"src":"3384:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_AssetDetails_$7793_memory_ptr","typeString":"struct YieldBoxURIBuilder.AssetDetails memory"}},"id":8057,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3392:9:37","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":7786,"src":"3384:17:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"45524331313535","id":8058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3404:9:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_973bb64086f173ec8099b7ed3d43da984f4a332e4417a08bc6a286e6402b0586","typeString":"literal_string \"ERC1155\""},"value":"ERC1155"},"src":"3384:29:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":8060,"nodeType":"ExpressionStatement","src":"3384:29:37"},{"expression":{"id":8087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":8061,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8048,"src":"3427:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_AssetDetails_$7793_memory_ptr","typeString":"struct YieldBoxURIBuilder.AssetDetails memory"}},"id":8063,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3435:4:37","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":7788,"src":"3427:12:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"hexValue":"455243313135353a","id":8068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3483:10:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_3034ce69285a03f7d17d7da265ffc33c60d25c1fb254c661962ec730f5190a4b","typeString":"literal_string \"ERC1155:\""},"value":"ERC1155:"},{"arguments":[{"hexValue":"3230","id":8078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3547:2:37","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"expression":{"arguments":[{"arguments":[{"expression":{"id":8073,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8034,"src":"3511:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":8074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3517:15:37","memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":4626,"src":"3511:21:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8072,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3503:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":8071,"name":"uint160","nodeType":"ElementaryTypeName","src":"3503:7:37","typeDescriptions":{}}},"id":8075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3503:30:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":8070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3495:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":8069,"name":"uint256","nodeType":"ElementaryTypeName","src":"3495:7:37","typeDescriptions":{}}},"id":8076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3495:39:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3535:11:37","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1539,"src":"3495:51:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":8079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3495:55:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2f","id":8080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3552:3:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527","typeString":"literal_string \"/\""},"value":"/"},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":8081,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8034,"src":"3557:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":8082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3563:7:37","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":4631,"src":"3557:13:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3571:8:37","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1443,"src":"3557:22:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":8084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3557:24:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3034ce69285a03f7d17d7da265ffc33c60d25c1fb254c661962ec730f5190a4b","typeString":"literal_string \"ERC1155:\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527","typeString":"literal_string \"/\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":8066,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3466:3:37","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":8067,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3470:12:37","memberName":"encodePacked","nodeType":"MemberAccess","src":"3466:16:37","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":8085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3466:116:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":8065,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3442:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":8064,"name":"string","nodeType":"ElementaryTypeName","src":"3442:6:37","typeDescriptions":{}}},"id":8086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3442:154:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"3427:169:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":8088,"nodeType":"ExpressionStatement","src":"3427:169:37"},{"expression":{"id":8093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":8089,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8048,"src":"3610:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_AssetDetails_$7793_memory_ptr","typeString":"struct YieldBoxURIBuilder.AssetDetails memory"}},"id":8091,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3618:6:37","memberName":"symbol","nodeType":"MemberAccess","referencedDeclaration":7790,"src":"3610:14:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"45524331313535","id":8092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3627:9:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_973bb64086f173ec8099b7ed3d43da984f4a332e4417a08bc6a286e6402b0586","typeString":"literal_string \"ERC1155\""},"value":"ERC1155"},"src":"3610:26:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":8094,"nodeType":"ExpressionStatement","src":"3610:26:37"}]}},{"assignments":[8156],"declarations":[{"constant":false,"id":8156,"mutability":"mutable","name":"properties","nameLocation":"4119:10:37","nodeType":"VariableDeclaration","scope":8278,"src":"4105:24:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8155,"name":"string","nodeType":"ElementaryTypeName","src":"4105:6:37","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":8199,"initialValue":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":8163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":8159,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8034,"src":"4152:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":8160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4158:9:37","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"4152:15:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":8161,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"4171:9:37","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":8162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4181:6:37","memberName":"Native","nodeType":"MemberAccess","referencedDeclaration":8283,"src":"4171:16:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"4152:35:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"hexValue":"2c22746f74616c537570706c79223a","id":8182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4341:17:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_4469722d7d4ac2cbdf3fc886d9139057a3c344426625eaf30418d802265ae8c0","typeString":"literal_string \",\"totalSupply\":\""},"value":",\"totalSupply\":"},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":8183,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8039,"src":"4360:11:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4372:8:37","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1443,"src":"4360:20:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":8185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4360:22:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2c226669786564537570706c79223a","id":8186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4384:17:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_ccb5f3e987cb328edd9f76ba2daa43ca61a2ef39edd95992637c448e8fd43f7c","typeString":"literal_string \",\"fixedSupply\":\""},"value":",\"fixedSupply\":"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":8192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8187,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8041,"src":"4403:5:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":8190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4420:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4412:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8188,"name":"address","nodeType":"ElementaryTypeName","src":"4412:7:37","typeDescriptions":{}}},"id":8191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4412:10:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4403:19:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"66616c7365","id":8194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4434:7:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_ba9154e0baa69c78e0ca563b867df81bae9d177c4ea1452c35c84386a70f0f7a","typeString":"literal_string \"false\""},"value":"false"},"id":8195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4403:38:37","trueExpression":{"hexValue":"74727565","id":8193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4425:6:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_6273151f959616268004b58dbb21e5c851b7b8d04498b4aabee12291d22fc034","typeString":"literal_string \"true\""},"value":"true"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_4469722d7d4ac2cbdf3fc886d9139057a3c344426625eaf30418d802265ae8c0","typeString":"literal_string \",\"totalSupply\":\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_ccb5f3e987cb328edd9f76ba2daa43ca61a2ef39edd95992637c448e8fd43f7c","typeString":"literal_string \",\"fixedSupply\":\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":8180,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4324:3:37","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":8181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4328:12:37","memberName":"encodePacked","nodeType":"MemberAccess","src":"4324:16:37","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":8196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4324:118:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":8197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4152:290:37","trueExpression":{"arguments":[{"hexValue":"2c22746f6b656e41646472657373223a22","id":8166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4223:19:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_122843ed390c6550f12f99e765bd40409b7404b3d64eda766944c89b45f7573d","typeString":"literal_string \",\"tokenAddress\":\"\""},"value":",\"tokenAddress\":\""},{"arguments":[{"hexValue":"3230","id":8176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4296:2:37","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"expression":{"arguments":[{"arguments":[{"expression":{"id":8171,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8034,"src":"4260:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":8172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4266:15:37","memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":4626,"src":"4260:21:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4252:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":8169,"name":"uint160","nodeType":"ElementaryTypeName","src":"4252:7:37","typeDescriptions":{}}},"id":8173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4252:30:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":8168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4244:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":8167,"name":"uint256","nodeType":"ElementaryTypeName","src":"4244:7:37","typeDescriptions":{}}},"id":8174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4244:39:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4284:11:37","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1539,"src":"4244:51:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":8177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4244:55:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"22","id":8178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4301:3:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0","typeString":"literal_string \"\"\""},"value":"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_122843ed390c6550f12f99e765bd40409b7404b3d64eda766944c89b45f7573d","typeString":"literal_string \",\"tokenAddress\":\"\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0","typeString":"literal_string \"\"\""}],"expression":{"id":8164,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4206:3:37","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":8165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4210:12:37","memberName":"encodePacked","nodeType":"MemberAccess","src":"4206:16:37","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":8179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4206:99:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":8158,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4132:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":8157,"name":"string","nodeType":"ElementaryTypeName","src":"4132:6:37","typeDescriptions":{}}},"id":8198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4132:320:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"4105:347:37"},{"expression":{"arguments":[{"arguments":[{"hexValue":"646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c","id":8204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4544:31:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa","typeString":"literal_string \"data:application/json;base64,\""},"value":"data:application/json;base64,"},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"hexValue":"7b226e616d65223a22","id":8207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4668:11:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_14271abadab347880c45d45d3abf3dce36bb4aa23c658e4207d08ac9b3f38832","typeString":"literal_string \"{\"name\":\"\""},"value":"{\"name\":\""},{"expression":{"id":8208,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8048,"src":"4709:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_AssetDetails_$7793_memory_ptr","typeString":"struct YieldBoxURIBuilder.AssetDetails memory"}},"id":8209,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4717:4:37","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":7788,"src":"4709:12:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"222c2273796d626f6c223a22","id":8210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4751:14:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_e5340a53db9406a49e889e395f995bffe402fb090771dc22c4cb4d709cfb172b","typeString":"literal_string \"\",\"symbol\":\"\""},"value":"\",\"symbol\":\""},{"expression":{"id":8211,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8048,"src":"4795:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_AssetDetails_$7793_memory_ptr","typeString":"struct YieldBoxURIBuilder.AssetDetails memory"}},"id":8212,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4803:6:37","memberName":"symbol","nodeType":"MemberAccess","referencedDeclaration":7790,"src":"4795:14:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"22","id":8213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4839:3:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0","typeString":"literal_string \"\"\""},"value":"\""},{"condition":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":8218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":8214,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8034,"src":"4872:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":8215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4878:9:37","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"4872:15:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":8216,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"4891:9:37","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":8217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4901:7:37","memberName":"ERC1155","nodeType":"MemberAccess","referencedDeclaration":8286,"src":"4891:17:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"4872:36:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"2c22646563696d616c73223a","id":8220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4916:14:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_56a6a18fe17a1c7329dfbc0c37216227b3fea75ee720fe2eff9b1a862ccbdf5e","typeString":"literal_string \",\"decimals\":\""},"value":",\"decimals\":"},"id":8221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4872:58:37","trueExpression":{"hexValue":"","id":8219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4911:2:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"condition":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":8226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":8222,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8034,"src":"4960:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":8223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4966:9:37","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"4960:15:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":8224,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"4979:9:37","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":8225,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4989:7:37","memberName":"ERC1155","nodeType":"MemberAccess","referencedDeclaration":8286,"src":"4979:17:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"4960:36:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":8228,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8048,"src":"5004:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_AssetDetails_$7793_memory_ptr","typeString":"struct YieldBoxURIBuilder.AssetDetails memory"}},"id":8229,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5012:8:37","memberName":"decimals","nodeType":"MemberAccess","referencedDeclaration":7792,"src":"5004:16:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5021:8:37","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1443,"src":"5004:25:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":8231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5004:27:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":8232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4960:71:37","trueExpression":{"hexValue":"","id":8227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4999:2:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2c2270726f70657274696573223a7b227374726174656779223a22","id":8233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5061:29:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_36321e3ea606b626d6c65e5c494680b7c0b422d15faa02dd15facdf5a525b1d5","typeString":"literal_string \",\"properties\":{\"strategy\":\"\""},"value":",\"properties\":{\"strategy\":\""},{"arguments":[{"hexValue":"3230","id":8246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5174:2:37","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"expression":{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":8240,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8034,"src":"5144:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":8241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5150:8:37","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":4629,"src":"5144:14:37","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}],"id":8239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5136:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8238,"name":"address","nodeType":"ElementaryTypeName","src":"5136:7:37","typeDescriptions":{}}},"id":8242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5136:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5128:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":8236,"name":"uint160","nodeType":"ElementaryTypeName","src":"5128:7:37","typeDescriptions":{}}},"id":8243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5128:32:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":8235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5120:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":8234,"name":"uint256","nodeType":"ElementaryTypeName","src":"5120:7:37","typeDescriptions":{}}},"id":8244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5120:41:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5162:11:37","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":1539,"src":"5120:53:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":8247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5120:57:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"222c22746f6b656e54797065223a22","id":8248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5207:17:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_90f3baaa063e0a5d00291ae4b28fd673217a5ccabbf2cd3c2a0397d30320487d","typeString":"literal_string \"\",\"tokenType\":\"\""},"value":"\",\"tokenType\":\""},{"expression":{"id":8249,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8048,"src":"5254:7:37","typeDescriptions":{"typeIdentifier":"t_struct$_AssetDetails_$7793_memory_ptr","typeString":"struct YieldBoxURIBuilder.AssetDetails memory"}},"id":8250,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5262:9:37","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":7786,"src":"5254:17:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"22","id":8251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5301:3:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0","typeString":"literal_string \"\"\""},"value":"\""},{"id":8252,"name":"properties","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8156,"src":"5334:10:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"condition":{"commonType":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"id":8257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":8253,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8034,"src":"5374:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":8254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5380:9:37","memberName":"tokenType","nodeType":"MemberAccess","referencedDeclaration":4624,"src":"5374:15:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":8255,"name":"TokenType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8288,"src":"5393:9:37","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_TokenType_$8288_$","typeString":"type(enum TokenType)"}},"id":8256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5403:7:37","memberName":"ERC1155","nodeType":"MemberAccess","referencedDeclaration":8286,"src":"5393:17:37","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"src":"5374:36:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":8269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5481:2:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":8270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"5374:109:37","trueExpression":{"arguments":[{"arguments":[{"hexValue":"2c22746f6b656e4964223a","id":8262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5437:13:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_b05fb80e8a8e207c61862eb6f4549c9b8cf64a28f334e2f0e68325601d86ffd5","typeString":"literal_string \",\"tokenId\":\""},"value":",\"tokenId\":"},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":8263,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8034,"src":"5452:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset calldata"}},"id":8264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5458:7:37","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":4631,"src":"5452:13:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5466:8:37","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1443,"src":"5452:22:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":8266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5452:24:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b05fb80e8a8e207c61862eb6f4549c9b8cf64a28f334e2f0e68325601d86ffd5","typeString":"literal_string \",\"tokenId\":\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":8260,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5420:3:37","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":8261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5424:12:37","memberName":"encodePacked","nodeType":"MemberAccess","src":"5420:16:37","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":8267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5420:57:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":8259,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5413:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":8258,"name":"string","nodeType":"ElementaryTypeName","src":"5413:6:37","typeDescriptions":{}}},"id":8268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5413:65:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"7d7d","id":8271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5513:4:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_32f971f72ea685992ecf4272dc0616816bf318aa74b22d259e914d22aca053c3","typeString":"literal_string \"}}\""},"value":"}}"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_14271abadab347880c45d45d3abf3dce36bb4aa23c658e4207d08ac9b3f38832","typeString":"literal_string \"{\"name\":\"\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_e5340a53db9406a49e889e395f995bffe402fb090771dc22c4cb4d709cfb172b","typeString":"literal_string \"\",\"symbol\":\"\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0","typeString":"literal_string \"\"\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_36321e3ea606b626d6c65e5c494680b7c0b422d15faa02dd15facdf5a525b1d5","typeString":"literal_string \",\"properties\":{\"strategy\":\"\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_90f3baaa063e0a5d00291ae4b28fd673217a5ccabbf2cd3c2a0397d30320487d","typeString":"literal_string \"\",\"tokenType\":\"\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0","typeString":"literal_string \"\"\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_32f971f72ea685992ecf4272dc0616816bf318aa74b22d259e914d22aca053c3","typeString":"literal_string \"}}\""}],"expression":{"id":8205,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4597:3:37","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":8206,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4626:12:37","memberName":"encodePacked","nodeType":"MemberAccess","src":"4597:41:37","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":8272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4597:946:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":8273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5569:6:37","memberName":"encode","nodeType":"MemberAccess","referencedDeclaration":773,"src":"4597:978:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":8274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4597:980:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_bccab2d885f86fda81bfd84dd4248d31f8073b473d187111d36536db073076fa","typeString":"literal_string \"data:application/json;base64,\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":8202,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4506:3:37","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":8203,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4510:12:37","memberName":"encodePacked","nodeType":"MemberAccess","src":"4506:16:37","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":8275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4506:1089:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":8201,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4482:6:37","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":8200,"name":"string","nodeType":"ElementaryTypeName","src":"4482:6:37","typeDescriptions":{}}},"id":8276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4482:1127:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":8045,"id":8277,"nodeType":"Return","src":"4463:1146:37"}]},"functionSelector":"5c6d8435","id":8279,"implemented":true,"kind":"function","modifiers":[],"name":"uri","nameLocation":"3031:3:37","nodeType":"FunctionDefinition","parameters":{"id":8042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8034,"mutability":"mutable","name":"asset","nameLocation":"3059:5:37","nodeType":"VariableDeclaration","scope":8279,"src":"3044:20:37","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_calldata_ptr","typeString":"struct Asset"},"typeName":{"id":8033,"nodeType":"UserDefinedTypeName","pathNode":{"id":8032,"name":"Asset","nameLocations":["3044:5:37"],"nodeType":"IdentifierPath","referencedDeclaration":4632,"src":"3044:5:37"},"referencedDeclaration":4632,"src":"3044:5:37","typeDescriptions":{"typeIdentifier":"t_struct$_Asset_$4632_storage_ptr","typeString":"struct Asset"}},"visibility":"internal"},{"constant":false,"id":8037,"mutability":"mutable","name":"nativeToken","nameLocation":"3095:11:37","nodeType":"VariableDeclaration","scope":8279,"src":"3074:32:37","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_NativeToken_$5639_calldata_ptr","typeString":"struct NativeToken"},"typeName":{"id":8036,"nodeType":"UserDefinedTypeName","pathNode":{"id":8035,"name":"NativeToken","nameLocations":["3074:11:37"],"nodeType":"IdentifierPath","referencedDeclaration":5639,"src":"3074:11:37"},"referencedDeclaration":5639,"src":"3074:11:37","typeDescriptions":{"typeIdentifier":"t_struct$_NativeToken_$5639_storage_ptr","typeString":"struct NativeToken"}},"visibility":"internal"},{"constant":false,"id":8039,"mutability":"mutable","name":"totalSupply","nameLocation":"3124:11:37","nodeType":"VariableDeclaration","scope":8279,"src":"3116:19:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8038,"name":"uint256","nodeType":"ElementaryTypeName","src":"3116:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8041,"mutability":"mutable","name":"owner","nameLocation":"3153:5:37","nodeType":"VariableDeclaration","scope":8279,"src":"3145:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8040,"name":"address","nodeType":"ElementaryTypeName","src":"3145:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3034:130:37"},"returnParameters":{"id":8045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8044,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8279,"src":"3188:13:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8043,"name":"string","nodeType":"ElementaryTypeName","src":"3188:6:37","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3187:15:37"},"scope":8280,"src":"3022:2594:37","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":8281,"src":"355:5263:37","usedErrors":[]}],"src":"32:5587:37"},"id":37},"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol":{"ast":{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol","exportedSymbols":{"TokenType":[8288]},"id":8289,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":8282,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:38"},{"canonicalName":"TokenType","id":8288,"members":[{"id":8283,"name":"Native","nameLocation":"578:6:38","nodeType":"EnumValue","src":"578:6:38"},{"id":8284,"name":"ERC20","nameLocation":"590:5:38","nodeType":"EnumValue","src":"590:5:38"},{"id":8285,"name":"ERC721","nameLocation":"601:6:38","nodeType":"EnumValue","src":"601:6:38"},{"id":8286,"name":"ERC1155","nameLocation":"613:7:38","nodeType":"EnumValue","src":"613:7:38"},{"id":8287,"name":"None","nameLocation":"626:4:38","nodeType":"EnumValue","src":"626:4:38"}],"name":"TokenType","nameLocation":"562:9:38","nodeType":"EnumDefinition","src":"557:75:38"}],"src":"32:601:38"},"id":38},"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IStrategy.sol":{"ast":{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IStrategy.sol","exportedSymbols":{"IStrategy":[8364],"IYieldBox":[8538],"NO_STRATEGY":[8373],"TokenType":[8288]},"id":8374,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":8290,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:39"},{"id":8291,"literals":["experimental","ABIEncoderV2"],"nodeType":"PragmaDirective","src":"56:33:39"},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol","file":"../enums/YieldBoxTokenType.sol","id":8292,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8374,"sourceUnit":8289,"src":"91:40:39","symbolAliases":[],"unitAlias":""},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol","file":"./IYieldBox.sol","id":8293,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8374,"sourceUnit":8539,"src":"132:25:39","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IStrategy","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":8364,"linearizedBaseContracts":[8364],"name":"IStrategy","nameLocation":"169:9:39","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":8294,"nodeType":"StructuredDocumentation","src":"721:65:39","text":"Returns the address of the yieldBox that this strategy is for"},"functionSelector":"de406577","id":8300,"implemented":false,"kind":"function","modifiers":[],"name":"yieldBox","nameLocation":"800:8:39","nodeType":"FunctionDefinition","parameters":{"id":8295,"nodeType":"ParameterList","parameters":[],"src":"808:2:39"},"returnParameters":{"id":8299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8298,"mutability":"mutable","name":"yieldBox_","nameLocation":"844:9:39","nodeType":"VariableDeclaration","scope":8300,"src":"834:19:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$8538","typeString":"contract IYieldBox"},"typeName":{"id":8297,"nodeType":"UserDefinedTypeName","pathNode":{"id":8296,"name":"IYieldBox","nameLocations":["834:9:39"],"nodeType":"IdentifierPath","referencedDeclaration":8538,"src":"834:9:39"},"referencedDeclaration":8538,"src":"834:9:39","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldBox_$8538","typeString":"contract IYieldBox"}},"visibility":"internal"}],"src":"833:21:39"},"scope":8364,"src":"791:64:39","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8301,"nodeType":"StructuredDocumentation","src":"861:36:39","text":"Returns a name for this strategy"},"functionSelector":"06fdde03","id":8306,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"911:4:39","nodeType":"FunctionDefinition","parameters":{"id":8302,"nodeType":"ParameterList","parameters":[],"src":"915:2:39"},"returnParameters":{"id":8305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8304,"mutability":"mutable","name":"name_","nameLocation":"955:5:39","nodeType":"VariableDeclaration","scope":8306,"src":"941:19:39","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8303,"name":"string","nodeType":"ElementaryTypeName","src":"941:6:39","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"940:21:39"},"scope":8364,"src":"902:60:39","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8307,"nodeType":"StructuredDocumentation","src":"968:43:39","text":"Returns a description for this strategy"},"functionSelector":"7284e416","id":8312,"implemented":false,"kind":"function","modifiers":[],"name":"description","nameLocation":"1025:11:39","nodeType":"FunctionDefinition","parameters":{"id":8308,"nodeType":"ParameterList","parameters":[],"src":"1036:2:39"},"returnParameters":{"id":8311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8310,"mutability":"mutable","name":"description_","nameLocation":"1076:12:39","nodeType":"VariableDeclaration","scope":8312,"src":"1062:26:39","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8309,"name":"string","nodeType":"ElementaryTypeName","src":"1062:6:39","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1061:28:39"},"scope":8364,"src":"1016:74:39","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8313,"nodeType":"StructuredDocumentation","src":"1193:54:39","text":"Returns the standard that this strategy works with"},"functionSelector":"30fa738c","id":8319,"implemented":false,"kind":"function","modifiers":[],"name":"tokenType","nameLocation":"1261:9:39","nodeType":"FunctionDefinition","parameters":{"id":8314,"nodeType":"ParameterList","parameters":[],"src":"1270:2:39"},"returnParameters":{"id":8318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8317,"mutability":"mutable","name":"tokenType_","nameLocation":"1306:10:39","nodeType":"VariableDeclaration","scope":8319,"src":"1296:20:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"typeName":{"id":8316,"nodeType":"UserDefinedTypeName","pathNode":{"id":8315,"name":"TokenType","nameLocations":["1296:9:39"],"nodeType":"IdentifierPath","referencedDeclaration":8288,"src":"1296:9:39"},"referencedDeclaration":8288,"src":"1296:9:39","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"visibility":"internal"}],"src":"1295:22:39"},"scope":8364,"src":"1252:66:39","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8320,"nodeType":"StructuredDocumentation","src":"1324:62:39","text":"Returns the contract address that this strategy works with"},"functionSelector":"f6b4dfb4","id":8325,"implemented":false,"kind":"function","modifiers":[],"name":"contractAddress","nameLocation":"1400:15:39","nodeType":"FunctionDefinition","parameters":{"id":8321,"nodeType":"ParameterList","parameters":[],"src":"1415:2:39"},"returnParameters":{"id":8324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8323,"mutability":"mutable","name":"contractAddress_","nameLocation":"1449:16:39","nodeType":"VariableDeclaration","scope":8325,"src":"1441:24:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8322,"name":"address","nodeType":"ElementaryTypeName","src":"1441:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1440:26:39"},"scope":8364,"src":"1391:76:39","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8326,"nodeType":"StructuredDocumentation","src":"1473:109:39","text":"Returns the tokenId that this strategy works with (for EIP1155)\n This is always 0 for EIP20 tokens"},"functionSelector":"17d70f7c","id":8331,"implemented":false,"kind":"function","modifiers":[],"name":"tokenId","nameLocation":"1596:7:39","nodeType":"FunctionDefinition","parameters":{"id":8327,"nodeType":"ParameterList","parameters":[],"src":"1603:2:39"},"returnParameters":{"id":8330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8329,"mutability":"mutable","name":"tokenId_","nameLocation":"1637:8:39","nodeType":"VariableDeclaration","scope":8331,"src":"1629:16:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8328,"name":"uint256","nodeType":"ElementaryTypeName","src":"1629:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1628:18:39"},"scope":8364,"src":"1587:60:39","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8332,"nodeType":"StructuredDocumentation","src":"1762:433:39","text":"Returns the total value the strategy holds (principle + gain) expressed in asset token amount.\n This should be cheap in gas to retrieve. Can return a bit less than the actual, but MUST NOT return more.\n The gas cost of this function will be paid on any deposit or withdrawal onto and out of the YieldBox\n that uses this strategy. Also, anytime a protocol converts between shares and amount, this gets called."},"functionSelector":"ce845d1d","id":8337,"implemented":false,"kind":"function","modifiers":[],"name":"currentBalance","nameLocation":"2209:14:39","nodeType":"FunctionDefinition","parameters":{"id":8333,"nodeType":"ParameterList","parameters":[],"src":"2223:2:39"},"returnParameters":{"id":8336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8335,"mutability":"mutable","name":"amount","nameLocation":"2257:6:39","nodeType":"VariableDeclaration","scope":8337,"src":"2249:14:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8334,"name":"uint256","nodeType":"ElementaryTypeName","src":"2249:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2248:16:39"},"scope":8364,"src":"2200:65:39","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8338,"nodeType":"StructuredDocumentation","src":"2271:52:39","text":"Returns the maximum amount that can be withdrawn"},"functionSelector":"50188301","id":8343,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawable","nameLocation":"2337:12:39","nodeType":"FunctionDefinition","parameters":{"id":8339,"nodeType":"ParameterList","parameters":[],"src":"2349:2:39"},"returnParameters":{"id":8342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8341,"mutability":"mutable","name":"amount","nameLocation":"2383:6:39","nodeType":"VariableDeclaration","scope":8343,"src":"2375:14:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8340,"name":"uint256","nodeType":"ElementaryTypeName","src":"2375:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2374:16:39"},"scope":8364,"src":"2328:63:39","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8344,"nodeType":"StructuredDocumentation","src":"2397:211:39","text":"Returns the maximum amount that can be withdrawn for a low gas fee\n When more than this amount is withdrawn it will trigger divesting from the actual strategy\n which will incur higher gas costs"},"functionSelector":"e3575f05","id":8349,"implemented":false,"kind":"function","modifiers":[],"name":"cheapWithdrawable","nameLocation":"2622:17:39","nodeType":"FunctionDefinition","parameters":{"id":8345,"nodeType":"ParameterList","parameters":[],"src":"2639:2:39"},"returnParameters":{"id":8348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8347,"mutability":"mutable","name":"amount","nameLocation":"2673:6:39","nodeType":"VariableDeclaration","scope":8349,"src":"2665:14:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8346,"name":"uint256","nodeType":"ElementaryTypeName","src":"2665:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2664:16:39"},"scope":8364,"src":"2613:68:39","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8350,"nodeType":"StructuredDocumentation","src":"2793:539:39","text":"Is called by YieldBox to signal funds have been added, the strategy may choose to act on this\n When a large enough deposit is made, this should trigger the strategy to invest into the actual\n strategy. This function should normally NOT be used to invest on each call as that would be costly\n for small deposits.\n If the strategy handles native tokens (ETH) it will receive it directly (not wrapped). It will be\n up to the strategy to wrap it if needed.\n Only accept this call from the YieldBox"},"functionSelector":"afa91cc6","id":8355,"implemented":false,"kind":"function","modifiers":[],"name":"deposited","nameLocation":"3346:9:39","nodeType":"FunctionDefinition","parameters":{"id":8353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8352,"mutability":"mutable","name":"amount","nameLocation":"3364:6:39","nodeType":"VariableDeclaration","scope":8355,"src":"3356:14:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8351,"name":"uint256","nodeType":"ElementaryTypeName","src":"3356:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3355:16:39"},"returnParameters":{"id":8354,"nodeType":"ParameterList","parameters":[],"src":"3380:0:39"},"scope":8364,"src":"3337:44:39","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":8356,"nodeType":"StructuredDocumentation","src":"3387:538:39","text":"Is called by the YieldBox to ask the strategy to withdraw to the user\n When a strategy keeps a little reserve for cheap withdrawals and the requested withdrawal goes over this amount,\n the strategy should divest enough from the strategy to complete the withdrawal and rebalance the reserve.\n If the strategy handles native tokens (ETH) it should send this, not a wrapped version.\n With some strategies it might be hard to withdraw exactly the correct amount.\n Only accept this call from the YieldBox"},"functionSelector":"f3fef3a3","id":8363,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"3939:8:39","nodeType":"FunctionDefinition","parameters":{"id":8361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8358,"mutability":"mutable","name":"to","nameLocation":"3956:2:39","nodeType":"VariableDeclaration","scope":8363,"src":"3948:10:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8357,"name":"address","nodeType":"ElementaryTypeName","src":"3948:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8360,"mutability":"mutable","name":"amount","nameLocation":"3968:6:39","nodeType":"VariableDeclaration","scope":8363,"src":"3960:14:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8359,"name":"uint256","nodeType":"ElementaryTypeName","src":"3960:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3947:28:39"},"returnParameters":{"id":8362,"nodeType":"ParameterList","parameters":[],"src":"3984:0:39"},"scope":8364,"src":"3930:55:39","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":8374,"src":"159:3828:39","usedErrors":[]},{"constant":true,"id":8373,"mutability":"constant","name":"NO_STRATEGY","nameLocation":"4008:11:39","nodeType":"VariableDeclaration","scope":8374,"src":"3989:54:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"},"typeName":{"id":8366,"nodeType":"UserDefinedTypeName","pathNode":{"id":8365,"name":"IStrategy","nameLocations":["3989:9:39"],"nodeType":"IdentifierPath","referencedDeclaration":8364,"src":"3989:9:39"},"referencedDeclaration":8364,"src":"3989:9:39","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"value":{"arguments":[{"arguments":[{"hexValue":"30","id":8370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4040:1:39","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":8369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4032:7:39","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8368,"name":"address","nodeType":"ElementaryTypeName","src":"4032:7:39","typeDescriptions":{}}},"id":8371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:10:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8367,"name":"IStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8364,"src":"4022:9:39","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IStrategy_$8364_$","typeString":"type(contract IStrategy)"}},"id":8372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4022:21:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$8364","typeString":"contract IStrategy"}},"visibility":"internal"}],"src":"32:4013:39"},"id":39},"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IWrappedNative.sol":{"ast":{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IWrappedNative.sol","exportedSymbols":{"IERC20":[540],"IWrappedNative":[8387]},"id":8388,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":8375,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:40"},{"absolutePath":"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol","file":"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol","id":8376,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8388,"sourceUnit":541,"src":"56:71:40","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":8377,"name":"IERC20","nameLocations":["157:6:40"],"nodeType":"IdentifierPath","referencedDeclaration":540,"src":"157:6:40"},"id":8378,"nodeType":"InheritanceSpecifier","src":"157:6:40"}],"canonicalName":"IWrappedNative","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":8387,"linearizedBaseContracts":[8387,540],"name":"IWrappedNative","nameLocation":"139:14:40","nodeType":"ContractDefinition","nodes":[{"functionSelector":"d0e30db0","id":8381,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"179:7:40","nodeType":"FunctionDefinition","parameters":{"id":8379,"nodeType":"ParameterList","parameters":[],"src":"186:2:40"},"returnParameters":{"id":8380,"nodeType":"ParameterList","parameters":[],"src":"205:0:40"},"scope":8387,"src":"170:36:40","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"2e1a7d4d","id":8386,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"221:8:40","nodeType":"FunctionDefinition","parameters":{"id":8384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8383,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8386,"src":"230:7:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8382,"name":"uint256","nodeType":"ElementaryTypeName","src":"230:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"229:9:40"},"returnParameters":{"id":8385,"nodeType":"ParameterList","parameters":[],"src":"247:0:40"},"scope":8387,"src":"212:36:40","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":8388,"src":"129:121:40","usedErrors":[]}],"src":"32:219:40"},"id":40},"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol":{"ast":{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol","exportedSymbols":{"IYieldBox":[8538],"TokenType":[8288]},"id":8539,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":8389,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:41"},{"id":8390,"literals":["experimental","ABIEncoderV2"],"nodeType":"PragmaDirective","src":"56:33:41"},{"absolutePath":"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol","file":"../enums/YieldBoxTokenType.sol","id":8391,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8539,"sourceUnit":8289,"src":"91:40:41","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IYieldBox","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":8538,"linearizedBaseContracts":[8538],"name":"IYieldBox","nameLocation":"143:9:41","nodeType":"ContractDefinition","nodes":[{"functionSelector":"eb6d3a11","id":8396,"implemented":false,"kind":"function","modifiers":[],"name":"wrappedNative","nameLocation":"168:13:41","nodeType":"FunctionDefinition","parameters":{"id":8392,"nodeType":"ParameterList","parameters":[],"src":"181:2:41"},"returnParameters":{"id":8395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8394,"mutability":"mutable","name":"wrappedNative","nameLocation":"215:13:41","nodeType":"VariableDeclaration","scope":8396,"src":"207:21:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8393,"name":"address","nodeType":"ElementaryTypeName","src":"207:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"206:23:41"},"scope":8538,"src":"159:71:41","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"cf35bdd0","id":8410,"implemented":false,"kind":"function","modifiers":[],"name":"assets","nameLocation":"245:6:41","nodeType":"FunctionDefinition","parameters":{"id":8399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8398,"mutability":"mutable","name":"assetId","nameLocation":"260:7:41","nodeType":"VariableDeclaration","scope":8410,"src":"252:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8397,"name":"uint256","nodeType":"ElementaryTypeName","src":"252:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"251:17:41"},"returnParameters":{"id":8409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8402,"mutability":"mutable","name":"tokenType","nameLocation":"339:9:41","nodeType":"VariableDeclaration","scope":8410,"src":"329:19:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"},"typeName":{"id":8401,"nodeType":"UserDefinedTypeName","pathNode":{"id":8400,"name":"TokenType","nameLocations":["329:9:41"],"nodeType":"IdentifierPath","referencedDeclaration":8288,"src":"329:9:41"},"referencedDeclaration":8288,"src":"329:9:41","typeDescriptions":{"typeIdentifier":"t_enum$_TokenType_$8288","typeString":"enum TokenType"}},"visibility":"internal"},{"constant":false,"id":8404,"mutability":"mutable","name":"contractAddress","nameLocation":"370:15:41","nodeType":"VariableDeclaration","scope":8410,"src":"362:23:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8403,"name":"address","nodeType":"ElementaryTypeName","src":"362:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8406,"mutability":"mutable","name":"strategy","nameLocation":"407:8:41","nodeType":"VariableDeclaration","scope":8410,"src":"399:16:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8405,"name":"address","nodeType":"ElementaryTypeName","src":"399:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8408,"mutability":"mutable","name":"tokenId","nameLocation":"437:7:41","nodeType":"VariableDeclaration","scope":8410,"src":"429:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8407,"name":"uint256","nodeType":"ElementaryTypeName","src":"429:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"315:139:41"},"scope":8538,"src":"236:219:41","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"1f0ee4c3","id":8421,"implemented":false,"kind":"function","modifiers":[],"name":"nativeTokens","nameLocation":"470:12:41","nodeType":"FunctionDefinition","parameters":{"id":8413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8412,"mutability":"mutable","name":"assetId","nameLocation":"491:7:41","nodeType":"VariableDeclaration","scope":8421,"src":"483:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8411,"name":"uint256","nodeType":"ElementaryTypeName","src":"483:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"482:17:41"},"returnParameters":{"id":8420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8415,"mutability":"mutable","name":"name","nameLocation":"574:4:41","nodeType":"VariableDeclaration","scope":8421,"src":"560:18:41","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8414,"name":"string","nodeType":"ElementaryTypeName","src":"560:6:41","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":8417,"mutability":"mutable","name":"symbol","nameLocation":"606:6:41","nodeType":"VariableDeclaration","scope":8421,"src":"592:20:41","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8416,"name":"string","nodeType":"ElementaryTypeName","src":"592:6:41","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":8419,"mutability":"mutable","name":"decimals","nameLocation":"632:8:41","nodeType":"VariableDeclaration","scope":8421,"src":"626:14:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":8418,"name":"uint8","nodeType":"ElementaryTypeName","src":"626:5:41","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"546:104:41"},"scope":8538,"src":"461:190:41","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a123c33e","id":8428,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"666:5:41","nodeType":"FunctionDefinition","parameters":{"id":8424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8423,"mutability":"mutable","name":"assetId","nameLocation":"680:7:41","nodeType":"VariableDeclaration","scope":8428,"src":"672:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8422,"name":"uint256","nodeType":"ElementaryTypeName","src":"672:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"671:17:41"},"returnParameters":{"id":8427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8426,"mutability":"mutable","name":"owner","nameLocation":"720:5:41","nodeType":"VariableDeclaration","scope":8428,"src":"712:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8425,"name":"address","nodeType":"ElementaryTypeName","src":"712:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"711:15:41"},"scope":8538,"src":"657:70:41","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"bd85b039","id":8435,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"742:11:41","nodeType":"FunctionDefinition","parameters":{"id":8431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8430,"mutability":"mutable","name":"assetId","nameLocation":"762:7:41","nodeType":"VariableDeclaration","scope":8435,"src":"754:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8429,"name":"uint256","nodeType":"ElementaryTypeName","src":"754:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"753:17:41"},"returnParameters":{"id":8434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8433,"mutability":"mutable","name":"totalSupply","nameLocation":"802:11:41","nodeType":"VariableDeclaration","scope":8435,"src":"794:19:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8432,"name":"uint256","nodeType":"ElementaryTypeName","src":"794:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"793:21:41"},"scope":8538,"src":"733:82:41","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"b8489fb5","id":8444,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAsset","nameLocation":"830:19:41","nodeType":"FunctionDefinition","parameters":{"id":8442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8437,"mutability":"mutable","name":"operator","nameLocation":"867:8:41","nodeType":"VariableDeclaration","scope":8444,"src":"859:16:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8436,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8439,"mutability":"mutable","name":"assetId","nameLocation":"893:7:41","nodeType":"VariableDeclaration","scope":8444,"src":"885:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8438,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8441,"mutability":"mutable","name":"approved","nameLocation":"915:8:41","nodeType":"VariableDeclaration","scope":8444,"src":"910:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8440,"name":"bool","nodeType":"ElementaryTypeName","src":"910:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"849:80:41"},"returnParameters":{"id":8443,"nodeType":"ParameterList","parameters":[],"src":"938:0:41"},"scope":8538,"src":"821:118:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"9a9af97a","id":8461,"implemented":false,"kind":"function","modifiers":[],"name":"depositAsset","nameLocation":"954:12:41","nodeType":"FunctionDefinition","parameters":{"id":8455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8446,"mutability":"mutable","name":"assetId","nameLocation":"984:7:41","nodeType":"VariableDeclaration","scope":8461,"src":"976:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8445,"name":"uint256","nodeType":"ElementaryTypeName","src":"976:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8448,"mutability":"mutable","name":"from","nameLocation":"1009:4:41","nodeType":"VariableDeclaration","scope":8461,"src":"1001:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8447,"name":"address","nodeType":"ElementaryTypeName","src":"1001:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8450,"mutability":"mutable","name":"to","nameLocation":"1031:2:41","nodeType":"VariableDeclaration","scope":8461,"src":"1023:10:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8449,"name":"address","nodeType":"ElementaryTypeName","src":"1023:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8452,"mutability":"mutable","name":"amount","nameLocation":"1051:6:41","nodeType":"VariableDeclaration","scope":8461,"src":"1043:14:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8451,"name":"uint256","nodeType":"ElementaryTypeName","src":"1043:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8454,"mutability":"mutable","name":"share","nameLocation":"1075:5:41","nodeType":"VariableDeclaration","scope":8461,"src":"1067:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8453,"name":"uint256","nodeType":"ElementaryTypeName","src":"1067:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"966:120:41"},"returnParameters":{"id":8460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8457,"mutability":"mutable","name":"amountOut","nameLocation":"1113:9:41","nodeType":"VariableDeclaration","scope":8461,"src":"1105:17:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8456,"name":"uint256","nodeType":"ElementaryTypeName","src":"1105:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8459,"mutability":"mutable","name":"shareOut","nameLocation":"1132:8:41","nodeType":"VariableDeclaration","scope":8461,"src":"1124:16:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8458,"name":"uint256","nodeType":"ElementaryTypeName","src":"1124:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1104:37:41"},"scope":8538,"src":"945:197:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"8d2e63b8","id":8478,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"1157:8:41","nodeType":"FunctionDefinition","parameters":{"id":8472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8463,"mutability":"mutable","name":"assetId","nameLocation":"1183:7:41","nodeType":"VariableDeclaration","scope":8478,"src":"1175:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8462,"name":"uint256","nodeType":"ElementaryTypeName","src":"1175:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8465,"mutability":"mutable","name":"from","nameLocation":"1208:4:41","nodeType":"VariableDeclaration","scope":8478,"src":"1200:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8464,"name":"address","nodeType":"ElementaryTypeName","src":"1200:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8467,"mutability":"mutable","name":"to","nameLocation":"1230:2:41","nodeType":"VariableDeclaration","scope":8478,"src":"1222:10:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8466,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8469,"mutability":"mutable","name":"amount","nameLocation":"1250:6:41","nodeType":"VariableDeclaration","scope":8478,"src":"1242:14:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8468,"name":"uint256","nodeType":"ElementaryTypeName","src":"1242:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8471,"mutability":"mutable","name":"share","nameLocation":"1274:5:41","nodeType":"VariableDeclaration","scope":8478,"src":"1266:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8470,"name":"uint256","nodeType":"ElementaryTypeName","src":"1266:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1165:120:41"},"returnParameters":{"id":8477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8474,"mutability":"mutable","name":"amountOut","nameLocation":"1312:9:41","nodeType":"VariableDeclaration","scope":8478,"src":"1304:17:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8473,"name":"uint256","nodeType":"ElementaryTypeName","src":"1304:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8476,"mutability":"mutable","name":"shareOut","nameLocation":"1331:8:41","nodeType":"VariableDeclaration","scope":8478,"src":"1323:16:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8475,"name":"uint256","nodeType":"ElementaryTypeName","src":"1323:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1303:37:41"},"scope":8538,"src":"1148:193:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"0411b252","id":8489,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1356:8:41","nodeType":"FunctionDefinition","parameters":{"id":8487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8480,"mutability":"mutable","name":"from","nameLocation":"1382:4:41","nodeType":"VariableDeclaration","scope":8489,"src":"1374:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8479,"name":"address","nodeType":"ElementaryTypeName","src":"1374:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8482,"mutability":"mutable","name":"to","nameLocation":"1404:2:41","nodeType":"VariableDeclaration","scope":8489,"src":"1396:10:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8481,"name":"address","nodeType":"ElementaryTypeName","src":"1396:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8484,"mutability":"mutable","name":"assetId","nameLocation":"1424:7:41","nodeType":"VariableDeclaration","scope":8489,"src":"1416:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8483,"name":"uint256","nodeType":"ElementaryTypeName","src":"1416:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8486,"mutability":"mutable","name":"share","nameLocation":"1449:5:41","nodeType":"VariableDeclaration","scope":8489,"src":"1441:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8485,"name":"uint256","nodeType":"ElementaryTypeName","src":"1441:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1364:96:41"},"returnParameters":{"id":8488,"nodeType":"ParameterList","parameters":[],"src":"1469:0:41"},"scope":8538,"src":"1347:123:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"daf210b1","id":8502,"implemented":false,"kind":"function","modifiers":[],"name":"batchTransfer","nameLocation":"1485:13:41","nodeType":"FunctionDefinition","parameters":{"id":8500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8491,"mutability":"mutable","name":"from","nameLocation":"1516:4:41","nodeType":"VariableDeclaration","scope":8502,"src":"1508:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8490,"name":"address","nodeType":"ElementaryTypeName","src":"1508:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8493,"mutability":"mutable","name":"to","nameLocation":"1538:2:41","nodeType":"VariableDeclaration","scope":8502,"src":"1530:10:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8492,"name":"address","nodeType":"ElementaryTypeName","src":"1530:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8496,"mutability":"mutable","name":"assetIds_","nameLocation":"1569:9:41","nodeType":"VariableDeclaration","scope":8502,"src":"1550:28:41","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":8494,"name":"uint256","nodeType":"ElementaryTypeName","src":"1550:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8495,"nodeType":"ArrayTypeName","src":"1550:9:41","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":8499,"mutability":"mutable","name":"shares_","nameLocation":"1607:7:41","nodeType":"VariableDeclaration","scope":8502,"src":"1588:26:41","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":8497,"name":"uint256","nodeType":"ElementaryTypeName","src":"1588:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8498,"nodeType":"ArrayTypeName","src":"1588:9:41","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1498:122:41"},"returnParameters":{"id":8501,"nodeType":"ParameterList","parameters":[],"src":"1629:0:41"},"scope":8538,"src":"1476:154:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"215b595a","id":8515,"implemented":false,"kind":"function","modifiers":[],"name":"transferMultiple","nameLocation":"1645:16:41","nodeType":"FunctionDefinition","parameters":{"id":8513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8504,"mutability":"mutable","name":"from","nameLocation":"1679:4:41","nodeType":"VariableDeclaration","scope":8515,"src":"1671:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8503,"name":"address","nodeType":"ElementaryTypeName","src":"1671:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8507,"mutability":"mutable","name":"tos","nameLocation":"1712:3:41","nodeType":"VariableDeclaration","scope":8515,"src":"1693:22:41","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":8505,"name":"address","nodeType":"ElementaryTypeName","src":"1693:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8506,"nodeType":"ArrayTypeName","src":"1693:9:41","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":8509,"mutability":"mutable","name":"assetId","nameLocation":"1733:7:41","nodeType":"VariableDeclaration","scope":8515,"src":"1725:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8508,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8512,"mutability":"mutable","name":"shares","nameLocation":"1769:6:41","nodeType":"VariableDeclaration","scope":8515,"src":"1750:25:41","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":8510,"name":"uint256","nodeType":"ElementaryTypeName","src":"1750:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8511,"nodeType":"ArrayTypeName","src":"1750:9:41","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1661:120:41"},"returnParameters":{"id":8514,"nodeType":"ParameterList","parameters":[],"src":"1790:0:41"},"scope":8538,"src":"1636:155:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"8eb22cdd","id":8526,"implemented":false,"kind":"function","modifiers":[],"name":"toShare","nameLocation":"1806:7:41","nodeType":"FunctionDefinition","parameters":{"id":8522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8517,"mutability":"mutable","name":"assetId","nameLocation":"1831:7:41","nodeType":"VariableDeclaration","scope":8526,"src":"1823:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8516,"name":"uint256","nodeType":"ElementaryTypeName","src":"1823:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8519,"mutability":"mutable","name":"amount","nameLocation":"1856:6:41","nodeType":"VariableDeclaration","scope":8526,"src":"1848:14:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8518,"name":"uint256","nodeType":"ElementaryTypeName","src":"1848:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8521,"mutability":"mutable","name":"roundUp","nameLocation":"1877:7:41","nodeType":"VariableDeclaration","scope":8526,"src":"1872:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8520,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1813:77:41"},"returnParameters":{"id":8525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8524,"mutability":"mutable","name":"share","nameLocation":"1922:5:41","nodeType":"VariableDeclaration","scope":8526,"src":"1914:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8523,"name":"uint256","nodeType":"ElementaryTypeName","src":"1914:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1913:15:41"},"scope":8538,"src":"1797:132:41","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"442c1599","id":8537,"implemented":false,"kind":"function","modifiers":[],"name":"toAmount","nameLocation":"1944:8:41","nodeType":"FunctionDefinition","parameters":{"id":8533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8528,"mutability":"mutable","name":"assetId","nameLocation":"1970:7:41","nodeType":"VariableDeclaration","scope":8537,"src":"1962:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8527,"name":"uint256","nodeType":"ElementaryTypeName","src":"1962:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8530,"mutability":"mutable","name":"share","nameLocation":"1995:5:41","nodeType":"VariableDeclaration","scope":8537,"src":"1987:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8529,"name":"uint256","nodeType":"ElementaryTypeName","src":"1987:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8532,"mutability":"mutable","name":"roundUp","nameLocation":"2015:7:41","nodeType":"VariableDeclaration","scope":8537,"src":"2010:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8531,"name":"bool","nodeType":"ElementaryTypeName","src":"2010:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1952:76:41"},"returnParameters":{"id":8536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8535,"mutability":"mutable","name":"amount","nameLocation":"2060:6:41","nodeType":"VariableDeclaration","scope":8537,"src":"2052:14:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8534,"name":"uint256","nodeType":"ElementaryTypeName","src":"2052:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2051:16:41"},"scope":8538,"src":"1935:133:41","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":8539,"src":"133:1937:41","usedErrors":[]}],"src":"32:2039:41"},"id":41}},"contracts":{"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol":{"BaseBoringBatchable":{"abi":[{"inputs":[{"internalType":"bytes[]","name":"calls","type":"bytes[]"},{"internalType":"bool","name":"revertOnFail","type":"bool"}],"name":"batch","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{"batch(bytes[],bool)":{"params":{"calls":"An array of inputs for each call.","revertOnFail":"If True then reverts after a failed call and stops doing further calls."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523461001657610379908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c63d2423b511461002857600080fd5b60403660031901126100915760043567ffffffffffffffff80821161008d573660238301121561008d57816004013590811161008d573660248260051b8401011161008d5760243590811515820361008957602461008693016101f6565b80f35b8380fd5b8280fd5b80fd5b91908110156100db5760051b81013590601e19813603018212156100d657019081359167ffffffffffffffff83116100d65760200182360381136100d6579190565b600080fd5b634e487b7160e01b600052603260045260246000fd5b908092918237016000815290565b634e487b7160e01b600052604160045260246000fd5b604051906040820182811067ffffffffffffffff82111761013557604052565b6100ff565b6040519190601f01601f1916820167ffffffffffffffff81118382101761013557604052565b67ffffffffffffffff811161013557601f01601f191660200190565b3d156101a2573d9061019561019083610160565b61013a565b9182523d6000602084013e565b606090565b60005b8381106101ba5750506000910152565b81810151838201526020016101aa565b604091602082526101ea81518092816020860152602086860191016101a7565b601f01601f1916010190565b919060005b8181106102085750505050565b600080610216838588610094565b604093916102288551809381936100f1565b0390305af461023561017c565b901580610292575b61026a5750506000198114610254576001016101fb565b634e487b7160e01b600052601160045260246000fd5b9061027761028e92610299565b905162461bcd60e51b8152918291600483016101ca565b0390fd5b508461023d565b604481511061030d576004810151810190602081602484019303126100d65760248101519067ffffffffffffffff82116100d65701816043820112156100d65760248101516102ea61019082610160565b92818452604482840101116100d65761030a9160446020850191016101a7565b90565b50610316610115565b601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c7900000060208201529056fea26469706673582212205e2866895249f4cb3d9dfd2164821ba11e82f39eafa686a0474522600b9eea8464736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x379 SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xD2423B51 EQ PUSH2 0x28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x91 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT PUSH2 0x8D JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x8D JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x8D JUMPI CALLDATASIZE PUSH1 0x24 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT PUSH2 0x8D JUMPI PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x89 JUMPI PUSH1 0x24 PUSH2 0x86 SWAP4 ADD PUSH2 0x1F6 JUMP JUMPDEST DUP1 RETURN JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0xDB JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0xD6 JUMPI ADD SWAP1 DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xD6 JUMPI PUSH1 0x20 ADD DUP3 CALLDATASIZE SUB DUP2 SGT PUSH2 0xD6 JUMPI SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP1 SWAP3 SWAP2 DUP3 CALLDATACOPY ADD PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x40 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x135 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xFF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP4 DUP3 LT OR PUSH2 0x135 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x135 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x1A2 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x195 PUSH2 0x190 DUP4 PUSH2 0x160 JUMP JUMPDEST PUSH2 0x13A JUMP JUMPDEST SWAP2 DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x1BA JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1AA JUMP JUMPDEST PUSH1 0x40 SWAP2 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1EA DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x1A7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x208 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x216 DUP4 DUP6 DUP9 PUSH2 0x94 JUMP JUMPDEST PUSH1 0x40 SWAP4 SWAP2 PUSH2 0x228 DUP6 MLOAD DUP1 SWAP4 DUP2 SWAP4 PUSH2 0xF1 JUMP JUMPDEST SUB SWAP1 ADDRESS GAS DELEGATECALL PUSH2 0x235 PUSH2 0x17C JUMP JUMPDEST SWAP1 ISZERO DUP1 PUSH2 0x292 JUMPI JUMPDEST PUSH2 0x26A JUMPI POP POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x254 JUMPI PUSH1 0x1 ADD PUSH2 0x1FB JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x277 PUSH2 0x28E SWAP3 PUSH2 0x299 JUMP JUMPDEST SWAP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 SWAP2 PUSH1 0x4 DUP4 ADD PUSH2 0x1CA JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP DUP5 PUSH2 0x23D JUMP JUMPDEST PUSH1 0x44 DUP2 MLOAD LT PUSH2 0x30D JUMPI PUSH1 0x4 DUP2 ADD MLOAD DUP2 ADD SWAP1 PUSH1 0x20 DUP2 PUSH1 0x24 DUP5 ADD SWAP4 SUB SLT PUSH2 0xD6 JUMPI PUSH1 0x24 DUP2 ADD MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xD6 JUMPI ADD DUP2 PUSH1 0x43 DUP3 ADD SLT ISZERO PUSH2 0xD6 JUMPI PUSH1 0x24 DUP2 ADD MLOAD PUSH2 0x2EA PUSH2 0x190 DUP3 PUSH2 0x160 JUMP JUMPDEST SWAP3 DUP2 DUP5 MSTORE PUSH1 0x44 DUP3 DUP5 ADD ADD GT PUSH2 0xD6 JUMPI PUSH2 0x30A SWAP2 PUSH1 0x44 PUSH1 0x20 DUP6 ADD SWAP2 ADD PUSH2 0x1A7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP PUSH2 0x316 PUSH2 0x115 JUMP JUMPDEST PUSH1 0x1D DUP2 MSTORE PUSH32 0x5472616E73616374696F6E2072657665727465642073696C656E746C79000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5E 0x28 PUSH7 0x895249F4CB3D9D REVERT 0x21 PUSH5 0x821BA11E82 RETURN SWAP15 0xAF 0xA6 DUP7 LOG0 SELFBALANCE GASLIMIT 0x22 PUSH1 0xB SWAP15 0xEA DUP5 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"378:1699:0:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_encode_bytes_calldata":{"entryPoint":241,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_string":{"entryPoint":458,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":314,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_1412":{"entryPoint":277,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":352,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_array_index_access_bytes_calldata_dyn_calldata":{"entryPoint":148,"id":null,"parameterSlots":3,"returnSlots":2},"copy_memory_to_memory_with_cleanup":{"entryPoint":423,"id":null,"parameterSlots":3,"returnSlots":0},"extract_returndata":{"entryPoint":380,"id":null,"parameterSlots":0,"returnSlots":1},"fun_batch":{"entryPoint":502,"id":77,"parameterSlots":3,"returnSlots":0},"fun_getRevertMsg":{"entryPoint":665,"id":28,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":255,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436101561001257600080fd5b6000803560e01c63d2423b511461002857600080fd5b60403660031901126100915760043567ffffffffffffffff80821161008d573660238301121561008d57816004013590811161008d573660248260051b8401011161008d5760243590811515820361008957602461008693016101f6565b80f35b8380fd5b8280fd5b80fd5b91908110156100db5760051b81013590601e19813603018212156100d657019081359167ffffffffffffffff83116100d65760200182360381136100d6579190565b600080fd5b634e487b7160e01b600052603260045260246000fd5b908092918237016000815290565b634e487b7160e01b600052604160045260246000fd5b604051906040820182811067ffffffffffffffff82111761013557604052565b6100ff565b6040519190601f01601f1916820167ffffffffffffffff81118382101761013557604052565b67ffffffffffffffff811161013557601f01601f191660200190565b3d156101a2573d9061019561019083610160565b61013a565b9182523d6000602084013e565b606090565b60005b8381106101ba5750506000910152565b81810151838201526020016101aa565b604091602082526101ea81518092816020860152602086860191016101a7565b601f01601f1916010190565b919060005b8181106102085750505050565b600080610216838588610094565b604093916102288551809381936100f1565b0390305af461023561017c565b901580610292575b61026a5750506000198114610254576001016101fb565b634e487b7160e01b600052601160045260246000fd5b9061027761028e92610299565b905162461bcd60e51b8152918291600483016101ca565b0390fd5b508461023d565b604481511061030d576004810151810190602081602484019303126100d65760248101519067ffffffffffffffff82116100d65701816043820112156100d65760248101516102ea61019082610160565b92818452604482840101116100d65761030a9160446020850191016101a7565b90565b50610316610115565b601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c7900000060208201529056fea26469706673582212205e2866895249f4cb3d9dfd2164821ba11e82f39eafa686a0474522600b9eea8464736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xD2423B51 EQ PUSH2 0x28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x91 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT PUSH2 0x8D JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x8D JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x8D JUMPI CALLDATASIZE PUSH1 0x24 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT PUSH2 0x8D JUMPI PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x89 JUMPI PUSH1 0x24 PUSH2 0x86 SWAP4 ADD PUSH2 0x1F6 JUMP JUMPDEST DUP1 RETURN JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0xDB JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0xD6 JUMPI ADD SWAP1 DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xD6 JUMPI PUSH1 0x20 ADD DUP3 CALLDATASIZE SUB DUP2 SGT PUSH2 0xD6 JUMPI SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP1 SWAP3 SWAP2 DUP3 CALLDATACOPY ADD PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x40 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x135 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xFF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP4 DUP3 LT OR PUSH2 0x135 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x135 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x1A2 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x195 PUSH2 0x190 DUP4 PUSH2 0x160 JUMP JUMPDEST PUSH2 0x13A JUMP JUMPDEST SWAP2 DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x1BA JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1AA JUMP JUMPDEST PUSH1 0x40 SWAP2 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1EA DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x1A7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x208 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x216 DUP4 DUP6 DUP9 PUSH2 0x94 JUMP JUMPDEST PUSH1 0x40 SWAP4 SWAP2 PUSH2 0x228 DUP6 MLOAD DUP1 SWAP4 DUP2 SWAP4 PUSH2 0xF1 JUMP JUMPDEST SUB SWAP1 ADDRESS GAS DELEGATECALL PUSH2 0x235 PUSH2 0x17C JUMP JUMPDEST SWAP1 ISZERO DUP1 PUSH2 0x292 JUMPI JUMPDEST PUSH2 0x26A JUMPI POP POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x254 JUMPI PUSH1 0x1 ADD PUSH2 0x1FB JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x277 PUSH2 0x28E SWAP3 PUSH2 0x299 JUMP JUMPDEST SWAP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 SWAP2 PUSH1 0x4 DUP4 ADD PUSH2 0x1CA JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP DUP5 PUSH2 0x23D JUMP JUMPDEST PUSH1 0x44 DUP2 MLOAD LT PUSH2 0x30D JUMPI PUSH1 0x4 DUP2 ADD MLOAD DUP2 ADD SWAP1 PUSH1 0x20 DUP2 PUSH1 0x24 DUP5 ADD SWAP4 SUB SLT PUSH2 0xD6 JUMPI PUSH1 0x24 DUP2 ADD MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xD6 JUMPI ADD DUP2 PUSH1 0x43 DUP3 ADD SLT ISZERO PUSH2 0xD6 JUMPI PUSH1 0x24 DUP2 ADD MLOAD PUSH2 0x2EA PUSH2 0x190 DUP3 PUSH2 0x160 JUMP JUMPDEST SWAP3 DUP2 DUP5 MSTORE PUSH1 0x44 DUP3 DUP5 ADD ADD GT PUSH2 0xD6 JUMPI PUSH2 0x30A SWAP2 PUSH1 0x44 PUSH1 0x20 DUP6 ADD SWAP2 ADD PUSH2 0x1A7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP PUSH2 0x316 PUSH2 0x115 JUMP JUMPDEST PUSH1 0x1D DUP2 MSTORE PUSH32 0x5472616E73616374696F6E2072657665727465642073696C656E746C79000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5E 0x28 PUSH7 0x895249F4CB3D9D REVERT 0x21 PUSH5 0x821BA11E82 RETURN SWAP15 0xAF 0xA6 DUP7 LOG0 SELFBALANCE GASLIMIT 0x22 PUSH1 0xB SWAP15 0xEA DUP5 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"378:1699:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;378:1699:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;378:1699:0;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;-1:-1:-1;;378:1699:0;;;;;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;378:1699:0;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;-1:-1:-1;378:1699:0;;;;:::o;:::-;;;:::o;:::-;;;;;;;;-1:-1:-1;;378:1699:0;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;378:1699:0;;;;:::o;1729:345::-;;;1832:1;1835:16;;;;;;1729:345;;;;:::o;1853:3::-;1832:1;1938:8;;;;;;:::i;:::-;378:1699;;;;;;;;;;;:::i;:::-;1911:36;1919:4;;1911:36;;;;:::i;:::-;1966:8;;:24;;;1853:3;1962:94;;-1:-1:-1;;;;378:1699:0;;;;;;1820:13;;378:1699;;;;1832:1;378:1699;;;;;1832:1;378:1699;1962:94;2018:21;;2011:29;2018:21;;:::i;:::-;378:1699;;-1:-1:-1;;;2011:29:0;;378:1699;;;2011:29;;;;:::i;:::-;;;;1966:24;;;;;603:496;838:2;378:1699;;817:23;813:67;;893:107;;;378:1699;1017:33;;;;;;;;378:1699;;;;;1017:33;;;378:1699;;;;;;;;;;;;;;;;1017:33;378:1699;;;;;;;:::i;:::-;;;;;838:2;378:1699;;;;;;;;;838:2;1017:33;378:1699;;;;;:::i;:::-;603:496;:::o;813:67::-;378:1699;;;:::i;:::-;;;;;;;;;842:38;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"177800","executionCost":"227","totalCost":"178027"},"external":{"batch(bytes[],bool)":"infinite"},"internal":{"_getRevertMsg(bytes memory)":"infinite"}},"methodIdentifiers":{"batch(bytes[],bool)":"d2423b51"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batch(bytes[],bool)\":{\"params\":{\"calls\":\"An array of inputs for each call.\",\"revertOnFail\":\"If True then reverts after a failed call and stops doing further calls.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batch(bytes[],bool)\":{\"notice\":\"Allows batched call to self (this contract).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\":\"BaseBoringBatchable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\n// WARNING!!!\\r\\n// Combining BoringBatchable with msg.value can cause double spending issues\\r\\n// https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/\\r\\n\\r\\nimport \\\"./interfaces/IERC20.sol\\\";\\r\\n\\r\\ncontract BaseBoringBatchable {\\r\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\r\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\r\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n\\r\\n        assembly {\\r\\n            // Slice the sighash.\\r\\n            _returnData := add(_returnData, 0x04)\\r\\n        }\\r\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\r\\n    }\\r\\n\\r\\n    /// @notice Allows batched call to self (this contract).\\r\\n    /// @param calls An array of inputs for each call.\\r\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\r\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\r\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\r\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\r\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\r\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable {\\r\\n        for (uint256 i = 0; i < calls.length; i++) {\\r\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\r\\n            if (!success && revertOnFail) {\\r\\n                revert(_getRevertMsg(result));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BoringBatchable is BaseBoringBatchable {\\r\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\r\\n    /// Lookup `IERC20.permit`.\\r\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\r\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\r\\n    function permitToken(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public {\\r\\n        token.permit(from, to, amount, deadline, v, r, s);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0e12064dbcb5659e5eaaef1baf8e7d611429d8699da9805eaa908644b6605151\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc7605391c07120ced6c1cca9d01abf39add948385828037a537b2d6b4c52f4a3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batch(bytes[],bool)":{"notice":"Allows batched call to self (this contract)."}},"version":1}},"BoringBatchable":{"abi":[{"inputs":[{"internalType":"bytes[]","name":"calls","type":"bytes[]"},{"internalType":"bool","name":"revertOnFail","type":"bool"}],"name":"batch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"batch(bytes[],bool)":{"params":{"calls":"An array of inputs for each call.","revertOnFail":"If True then reverts after a failed call and stops doing further calls."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234610016576104cf908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c9081637c516e941461003a575063d2423b511461003557600080fd5b6100c4565b3461009e5761010036600319011261009e57600435610058816100a1565b60243590610065826100a1565b604435610071816100a1565b60a43560ff8116810361009a576100979360e4359360c435936084359260643592610404565b80f35b8480fd5b80fd5b73ffffffffffffffffffffffffffffffffffffffff8116036100bf57565b600080fd5b60403660031901126100bf5760043567ffffffffffffffff8082116100bf57366023830112156100bf5781600401359081116100bf573660248260051b840101116100bf576024359081151582036100bf5760246101229301610292565b005b91908110156101665760051b81013590601e19813603018212156100bf57019081359167ffffffffffffffff83116100bf5760200182360381136100bf579190565b634e487b7160e01b600052603260045260246000fd5b908092918237016000815290565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116101b457604052565b61018a565b6040810190811067ffffffffffffffff8211176101b457604052565b90601f8019910116810190811067ffffffffffffffff8211176101b457604052565b67ffffffffffffffff81116101b457601f01601f191660200190565b3d1561023e573d90610224826101f7565b9161023260405193846101d5565b82523d6000602084013e565b606090565b60005b8381106102565750506000910152565b8181015183820152602001610246565b604091602082526102868151809281602086015260208686019101610243565b601f01601f1916010190565b919060005b8181106102a45750505050565b6000806102b2838588610124565b604093916102c485518093819361017c565b0390305af46102d1610213565b90158061032e575b61030657505060001981146102f057600101610297565b634e487b7160e01b600052601160045260246000fd5b9061031361032a92610335565b905162461bcd60e51b815291829160048301610266565b0390fd5b50846102d9565b60448151106103b3576004810151810190602081602484019303126100bf5760248101519067ffffffffffffffff82116100bf5701816043820112156100bf576024810151610383816101f7565b9261039160405194856101d5565b818452604482840101116100bf576103b0916044602085019101610243565b90565b506040516103c0816101b9565b601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b60009103126100bf57565b6040513d6000823e3d90fd5b949391969590929573ffffffffffffffffffffffffffffffffffffffff80961691823b156100bf5760ff60e496600099958a968a6040519d8e9c8d9b63d505accf60e01b8d521660048c01521660248a01526044890152606488015216608486015260a485015260c48401525af180156104945761047f5750565b8061048c610492926101a0565b806103ed565b565b6103f856fea264697066735822122055a33a04798a17eca844224d87de6656b6e070371a2331f9b0e36fd7bb0df64464736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x4CF SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x7C516E94 EQ PUSH2 0x3A JUMPI POP PUSH4 0xD2423B51 EQ PUSH2 0x35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC4 JUMP JUMPDEST CALLVALUE PUSH2 0x9E JUMPI PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9E JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x58 DUP2 PUSH2 0xA1 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x65 DUP3 PUSH2 0xA1 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH2 0x71 DUP2 PUSH2 0xA1 JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 SUB PUSH2 0x9A JUMPI PUSH2 0x97 SWAP4 PUSH1 0xE4 CALLDATALOAD SWAP4 PUSH1 0xC4 CALLDATALOAD SWAP4 PUSH1 0x84 CALLDATALOAD SWAP3 PUSH1 0x64 CALLDATALOAD SWAP3 PUSH2 0x404 JUMP JUMPDEST DUP1 RETURN JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SUB PUSH2 0xBF JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xBF JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT PUSH2 0xBF JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0xBF JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP1 DUP2 GT PUSH2 0xBF JUMPI CALLDATASIZE PUSH1 0x24 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT PUSH2 0xBF JUMPI PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0xBF JUMPI PUSH1 0x24 PUSH2 0x122 SWAP4 ADD PUSH2 0x292 JUMP JUMPDEST STOP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x166 JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0xBF JUMPI ADD SWAP1 DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xBF JUMPI PUSH1 0x20 ADD DUP3 CALLDATASIZE SUB DUP2 SGT PUSH2 0xBF JUMPI SWAP2 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP1 SWAP3 SWAP2 DUP3 CALLDATACOPY ADD PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1B4 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x18A JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1B4 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1B4 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1B4 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x23E JUMPI RETURNDATASIZE SWAP1 PUSH2 0x224 DUP3 PUSH2 0x1F7 JUMP JUMPDEST SWAP2 PUSH2 0x232 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x1D5 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x256 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x246 JUMP JUMPDEST PUSH1 0x40 SWAP2 PUSH1 0x20 DUP3 MSTORE PUSH2 0x286 DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x243 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x2A4 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B2 DUP4 DUP6 DUP9 PUSH2 0x124 JUMP JUMPDEST PUSH1 0x40 SWAP4 SWAP2 PUSH2 0x2C4 DUP6 MLOAD DUP1 SWAP4 DUP2 SWAP4 PUSH2 0x17C JUMP JUMPDEST SUB SWAP1 ADDRESS GAS DELEGATECALL PUSH2 0x2D1 PUSH2 0x213 JUMP JUMPDEST SWAP1 ISZERO DUP1 PUSH2 0x32E JUMPI JUMPDEST PUSH2 0x306 JUMPI POP POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x2F0 JUMPI PUSH1 0x1 ADD PUSH2 0x297 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x313 PUSH2 0x32A SWAP3 PUSH2 0x335 JUMP JUMPDEST SWAP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 SWAP2 PUSH1 0x4 DUP4 ADD PUSH2 0x266 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP DUP5 PUSH2 0x2D9 JUMP JUMPDEST PUSH1 0x44 DUP2 MLOAD LT PUSH2 0x3B3 JUMPI PUSH1 0x4 DUP2 ADD MLOAD DUP2 ADD SWAP1 PUSH1 0x20 DUP2 PUSH1 0x24 DUP5 ADD SWAP4 SUB SLT PUSH2 0xBF JUMPI PUSH1 0x24 DUP2 ADD MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xBF JUMPI ADD DUP2 PUSH1 0x43 DUP3 ADD SLT ISZERO PUSH2 0xBF JUMPI PUSH1 0x24 DUP2 ADD MLOAD PUSH2 0x383 DUP2 PUSH2 0x1F7 JUMP JUMPDEST SWAP3 PUSH2 0x391 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1D5 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x44 DUP3 DUP5 ADD ADD GT PUSH2 0xBF JUMPI PUSH2 0x3B0 SWAP2 PUSH1 0x44 PUSH1 0x20 DUP6 ADD SWAP2 ADD PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x3C0 DUP2 PUSH2 0x1B9 JUMP JUMPDEST PUSH1 0x1D DUP2 MSTORE PUSH32 0x5472616E73616374696F6E2072657665727465642073696C656E746C79000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xBF JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP5 SWAP4 SWAP2 SWAP7 SWAP6 SWAP1 SWAP3 SWAP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP7 AND SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0xBF JUMPI PUSH1 0xFF PUSH1 0xE4 SWAP7 PUSH1 0x0 SWAP10 SWAP6 DUP11 SWAP7 DUP11 PUSH1 0x40 MLOAD SWAP14 DUP15 SWAP13 DUP14 SWAP12 PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP14 MSTORE AND PUSH1 0x4 DUP13 ADD MSTORE AND PUSH1 0x24 DUP11 ADD MSTORE PUSH1 0x44 DUP10 ADD MSTORE PUSH1 0x64 DUP9 ADD MSTORE AND PUSH1 0x84 DUP7 ADD MSTORE PUSH1 0xA4 DUP6 ADD MSTORE PUSH1 0xC4 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x494 JUMPI PUSH2 0x47F JUMPI POP JUMP JUMPDEST DUP1 PUSH2 0x48C PUSH2 0x492 SWAP3 PUSH2 0x1A0 JUMP JUMPDEST DUP1 PUSH2 0x3ED JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3F8 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SSTORE LOG3 GASPRICE DIV PUSH26 0x8A17ECA844224D87DE6656B6E070371A2331F9B0E36FD7BB0DF6 PREVRANDAO PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"2081:670:0:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_fromMemory":{"entryPoint":1005,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_bytes_calldata":{"entryPoint":380,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_string":{"entryPoint":614,"id":null,"parameterSlots":2,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":503,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_array_index_access_bytes_calldata_dyn_calldata":{"entryPoint":292,"id":null,"parameterSlots":3,"returnSlots":2},"copy_memory_to_memory_with_cleanup":{"entryPoint":579,"id":null,"parameterSlots":3,"returnSlots":0},"external_fun_batch":{"entryPoint":196,"id":null,"parameterSlots":0,"returnSlots":0},"extract_returndata":{"entryPoint":531,"id":null,"parameterSlots":0,"returnSlots":1},"finalize_allocation":{"entryPoint":469,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_1608":{"entryPoint":416,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_2177":{"entryPoint":441,"id":null,"parameterSlots":1,"returnSlots":0},"fun_batch":{"entryPoint":658,"id":77,"parameterSlots":3,"returnSlots":0},"fun_getRevertMsg":{"entryPoint":821,"id":28,"parameterSlots":1,"returnSlots":1},"fun_permitToken":{"entryPoint":1028,"id":114,"parameterSlots":8,"returnSlots":0},"panic_error_0x41":{"entryPoint":394,"id":null,"parameterSlots":0,"returnSlots":0},"revert_forward":{"entryPoint":1016,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_contract_IERC20":{"entryPoint":161,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436101561001257600080fd5b6000803560e01c9081637c516e941461003a575063d2423b511461003557600080fd5b6100c4565b3461009e5761010036600319011261009e57600435610058816100a1565b60243590610065826100a1565b604435610071816100a1565b60a43560ff8116810361009a576100979360e4359360c435936084359260643592610404565b80f35b8480fd5b80fd5b73ffffffffffffffffffffffffffffffffffffffff8116036100bf57565b600080fd5b60403660031901126100bf5760043567ffffffffffffffff8082116100bf57366023830112156100bf5781600401359081116100bf573660248260051b840101116100bf576024359081151582036100bf5760246101229301610292565b005b91908110156101665760051b81013590601e19813603018212156100bf57019081359167ffffffffffffffff83116100bf5760200182360381136100bf579190565b634e487b7160e01b600052603260045260246000fd5b908092918237016000815290565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116101b457604052565b61018a565b6040810190811067ffffffffffffffff8211176101b457604052565b90601f8019910116810190811067ffffffffffffffff8211176101b457604052565b67ffffffffffffffff81116101b457601f01601f191660200190565b3d1561023e573d90610224826101f7565b9161023260405193846101d5565b82523d6000602084013e565b606090565b60005b8381106102565750506000910152565b8181015183820152602001610246565b604091602082526102868151809281602086015260208686019101610243565b601f01601f1916010190565b919060005b8181106102a45750505050565b6000806102b2838588610124565b604093916102c485518093819361017c565b0390305af46102d1610213565b90158061032e575b61030657505060001981146102f057600101610297565b634e487b7160e01b600052601160045260246000fd5b9061031361032a92610335565b905162461bcd60e51b815291829160048301610266565b0390fd5b50846102d9565b60448151106103b3576004810151810190602081602484019303126100bf5760248101519067ffffffffffffffff82116100bf5701816043820112156100bf576024810151610383816101f7565b9261039160405194856101d5565b818452604482840101116100bf576103b0916044602085019101610243565b90565b506040516103c0816101b9565b601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b60009103126100bf57565b6040513d6000823e3d90fd5b949391969590929573ffffffffffffffffffffffffffffffffffffffff80961691823b156100bf5760ff60e496600099958a968a6040519d8e9c8d9b63d505accf60e01b8d521660048c01521660248a01526044890152606488015216608486015260a485015260c48401525af180156104945761047f5750565b8061048c610492926101a0565b806103ed565b565b6103f856fea264697066735822122055a33a04798a17eca844224d87de6656b6e070371a2331f9b0e36fd7bb0df64464736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x7C516E94 EQ PUSH2 0x3A JUMPI POP PUSH4 0xD2423B51 EQ PUSH2 0x35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC4 JUMP JUMPDEST CALLVALUE PUSH2 0x9E JUMPI PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x9E JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x58 DUP2 PUSH2 0xA1 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x65 DUP3 PUSH2 0xA1 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH2 0x71 DUP2 PUSH2 0xA1 JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 SUB PUSH2 0x9A JUMPI PUSH2 0x97 SWAP4 PUSH1 0xE4 CALLDATALOAD SWAP4 PUSH1 0xC4 CALLDATALOAD SWAP4 PUSH1 0x84 CALLDATALOAD SWAP3 PUSH1 0x64 CALLDATALOAD SWAP3 PUSH2 0x404 JUMP JUMPDEST DUP1 RETURN JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SUB PUSH2 0xBF JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xBF JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT PUSH2 0xBF JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0xBF JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP1 DUP2 GT PUSH2 0xBF JUMPI CALLDATASIZE PUSH1 0x24 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT PUSH2 0xBF JUMPI PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0xBF JUMPI PUSH1 0x24 PUSH2 0x122 SWAP4 ADD PUSH2 0x292 JUMP JUMPDEST STOP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x166 JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0xBF JUMPI ADD SWAP1 DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xBF JUMPI PUSH1 0x20 ADD DUP3 CALLDATASIZE SUB DUP2 SGT PUSH2 0xBF JUMPI SWAP2 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP1 SWAP3 SWAP2 DUP3 CALLDATACOPY ADD PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1B4 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x18A JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1B4 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1B4 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1B4 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x23E JUMPI RETURNDATASIZE SWAP1 PUSH2 0x224 DUP3 PUSH2 0x1F7 JUMP JUMPDEST SWAP2 PUSH2 0x232 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x1D5 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x256 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x246 JUMP JUMPDEST PUSH1 0x40 SWAP2 PUSH1 0x20 DUP3 MSTORE PUSH2 0x286 DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x243 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x2A4 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B2 DUP4 DUP6 DUP9 PUSH2 0x124 JUMP JUMPDEST PUSH1 0x40 SWAP4 SWAP2 PUSH2 0x2C4 DUP6 MLOAD DUP1 SWAP4 DUP2 SWAP4 PUSH2 0x17C JUMP JUMPDEST SUB SWAP1 ADDRESS GAS DELEGATECALL PUSH2 0x2D1 PUSH2 0x213 JUMP JUMPDEST SWAP1 ISZERO DUP1 PUSH2 0x32E JUMPI JUMPDEST PUSH2 0x306 JUMPI POP POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x2F0 JUMPI PUSH1 0x1 ADD PUSH2 0x297 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x313 PUSH2 0x32A SWAP3 PUSH2 0x335 JUMP JUMPDEST SWAP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 SWAP2 PUSH1 0x4 DUP4 ADD PUSH2 0x266 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP DUP5 PUSH2 0x2D9 JUMP JUMPDEST PUSH1 0x44 DUP2 MLOAD LT PUSH2 0x3B3 JUMPI PUSH1 0x4 DUP2 ADD MLOAD DUP2 ADD SWAP1 PUSH1 0x20 DUP2 PUSH1 0x24 DUP5 ADD SWAP4 SUB SLT PUSH2 0xBF JUMPI PUSH1 0x24 DUP2 ADD MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xBF JUMPI ADD DUP2 PUSH1 0x43 DUP3 ADD SLT ISZERO PUSH2 0xBF JUMPI PUSH1 0x24 DUP2 ADD MLOAD PUSH2 0x383 DUP2 PUSH2 0x1F7 JUMP JUMPDEST SWAP3 PUSH2 0x391 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x1D5 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x44 DUP3 DUP5 ADD ADD GT PUSH2 0xBF JUMPI PUSH2 0x3B0 SWAP2 PUSH1 0x44 PUSH1 0x20 DUP6 ADD SWAP2 ADD PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x3C0 DUP2 PUSH2 0x1B9 JUMP JUMPDEST PUSH1 0x1D DUP2 MSTORE PUSH32 0x5472616E73616374696F6E2072657665727465642073696C656E746C79000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xBF JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP5 SWAP4 SWAP2 SWAP7 SWAP6 SWAP1 SWAP3 SWAP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP7 AND SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0xBF JUMPI PUSH1 0xFF PUSH1 0xE4 SWAP7 PUSH1 0x0 SWAP10 SWAP6 DUP11 SWAP7 DUP11 PUSH1 0x40 MLOAD SWAP14 DUP15 SWAP13 DUP14 SWAP12 PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP14 MSTORE AND PUSH1 0x4 DUP13 ADD MSTORE AND PUSH1 0x24 DUP11 ADD MSTORE PUSH1 0x44 DUP10 ADD MSTORE PUSH1 0x64 DUP9 ADD MSTORE AND PUSH1 0x84 DUP7 ADD MSTORE PUSH1 0xA4 DUP6 ADD MSTORE PUSH1 0xC4 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x494 JUMPI PUSH2 0x47F JUMPI POP JUMP JUMPDEST DUP1 PUSH2 0x48C PUSH2 0x492 SWAP3 PUSH2 0x1A0 JUMP JUMPDEST DUP1 PUSH2 0x3ED JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3F8 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SSTORE LOG3 GASPRICE DIV PUSH26 0x8A17ECA844224D87DE6656B6E070371A2331F9B0E36FD7BB0DF6 PREVRANDAO PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"2081:670:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;2081:670:0;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;2081:670:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;2081:670:0;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;2081:670:0;;;;:::o;:::-;;;:::o;:::-;;;;;;;;-1:-1:-1;;2081:670:0;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;2081:670:0;;;;:::o;1729:345::-;;;1832:1;1835:16;;;;;;1729:345;;;;:::o;1853:3::-;1832:1;1938:8;;;;;;:::i;:::-;2081:670;;;;;;;;;;;:::i;:::-;1911:36;1919:4;;1911:36;;;;:::i;:::-;1966:8;;:24;;;1853:3;1962:94;;-1:-1:-1;;;;2081:670:0;;;;;;1820:13;;2081:670;;;;1832:1;2081:670;;;;;1832:1;2081:670;1962:94;2018:21;;2011:29;2018:21;;:::i;:::-;2081:670;;-1:-1:-1;;;2011:29:0;;2081:670;;;2011:29;;;;:::i;:::-;;;;1966:24;;;;;603:496;838:2;2081:670;;817:23;813:67;;893:107;;;2081:670;1017:33;;;;;;;;2081:670;;;;;1017:33;;;2081:670;;;;;;;;;;;;;;;;1017:33;2081:670;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;838:2;2081:670;;;;;;;;;838:2;1017:33;2081:670;;;;;:::i;:::-;603:496;:::o;813:67::-;2081:670;;;;;;:::i;:::-;;;;;;;;;842:38;:::o;2081:670::-;;;;;;;:::o;:::-;;;;;;;;;;2468:280;;;;;;;;;2081:670;;;;2691:49;;;;;;2081:670;;;2691:49;2081:670;;;;;;;;;;;;;;;2691:49;;2081:670;2691:49;;;2081:670;;;;;;;;;;;;;;;;;;;;;;;;;;;2691:49;;;;;;;;2468:280;:::o;2691:49::-;;;;;;:::i;:::-;;;:::i;:::-;2468:280::o;2691:49::-;;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"246200","executionCost":"294","totalCost":"246494"},"external":{"batch(bytes[],bool)":"infinite","permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{"batch(bytes[],bool)":"d2423b51","permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)":"7c516e94"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batch(bytes[],bool)\":{\"params\":{\"calls\":\"An array of inputs for each call.\",\"revertOnFail\":\"If True then reverts after a failed call and stops doing further calls.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batch(bytes[],bool)\":{\"notice\":\"Allows batched call to self (this contract).\"},\"permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\":\"BoringBatchable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\n// WARNING!!!\\r\\n// Combining BoringBatchable with msg.value can cause double spending issues\\r\\n// https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/\\r\\n\\r\\nimport \\\"./interfaces/IERC20.sol\\\";\\r\\n\\r\\ncontract BaseBoringBatchable {\\r\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\r\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\r\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n\\r\\n        assembly {\\r\\n            // Slice the sighash.\\r\\n            _returnData := add(_returnData, 0x04)\\r\\n        }\\r\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\r\\n    }\\r\\n\\r\\n    /// @notice Allows batched call to self (this contract).\\r\\n    /// @param calls An array of inputs for each call.\\r\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\r\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\r\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\r\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\r\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\r\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable {\\r\\n        for (uint256 i = 0; i < calls.length; i++) {\\r\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\r\\n            if (!success && revertOnFail) {\\r\\n                revert(_getRevertMsg(result));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BoringBatchable is BaseBoringBatchable {\\r\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\r\\n    /// Lookup `IERC20.permit`.\\r\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\r\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\r\\n    function permitToken(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public {\\r\\n        token.permit(from, to, amount, deadline, v, r, s);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0e12064dbcb5659e5eaaef1baf8e7d611429d8699da9805eaa908644b6605151\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc7605391c07120ced6c1cca9d01abf39add948385828037a537b2d6b4c52f4a3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batch(bytes[],bool)":{"notice":"Allows batched call to self (this contract)."},"permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`."}},"version":1}}},"@boringcrypto/boring-solidity/contracts/BoringFactory.sol":{"BoringFactory":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"masterContract","type":"address"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"},{"indexed":true,"internalType":"address","name":"cloneAddress","type":"address"}],"name":"LogDeploy","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"clonesOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"masterContract","type":"address"}],"name":"clonesOfCount","outputs":[{"internalType":"uint256","name":"cloneCount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"masterContract","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bool","name":"useCreate2","type":"bool"}],"name":"deploy","outputs":[{"internalType":"address","name":"cloneAddress","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"masterContractOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"clonesOfCount(address)":{"params":{"masterContract":"The address of the master contract."},"returns":{"cloneCount":"total number of clones for the masterContract."}},"deploy(address,bytes,bool)":{"params":{"data":"Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.","masterContract":"The address of the contract to clone.","useCreate2":"Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt."},"returns":{"cloneAddress":"Address of the created clone contract."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608080604052346100165761055d908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c9081631f54245b1461005a575080638fd4365414610055578063bafe4f14146100505763fba96be81461004b57600080fd5b6101c7565b61018c565b610132565b60603660031901126100e25761006e6100e9565b67ffffffffffffffff906024358281116100e557366023820112156100e55780600401359283116100e55736602484830101116100e5576044359384151585036100e2576100de6100c48686602486018761034e565b6040516001600160a01b0390911681529081906020820190565b0390f35b80fd5b8380fd5b600435906001600160a01b03821682036100ff57565b600080fd5b805482101561011c5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b346100ff5760403660031901126100ff5761014b6100e9565b602435906001600160a01b038091166000526001602052604060002080548310156100ff5760209261017c91610104565b9190546040519260031b1c168152f35b346100ff5760203660031901126100ff5760206001600160a01b03806101b06100e9565b166000526000825260406000205416604051908152f35b346100ff5760203660031901126100ff576001600160a01b036101e86100e9565b1660005260016020526020604060002054604051908152f35b1561020857565b606460405162461bcd60e51b815260206004820152602060248201527f426f72696e67466163746f72793a204e6f206d6173746572436f6e74726163746044820152fd5b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161027657604052565b61024c565b92919267ffffffffffffffff918281116102765760405192601f8201601f19908116603f0116840190811184821017610276576040528294818452818301116100ff578281602093846000960137010152565b805468010000000000000000811015610276576102f091600182018155610104565b819291549060031b916001600160a01b03809116831b921b1916179055565b60009103126100ff57565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b6040513d6000823e3d90fd5b9061043f9493916104446001600160a01b039182811694610370861515610201565b606082901b6bffffffffffffffffffffffff191690156104d557603761039736898861027b565b6020815191012091604051907f3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000825260148201526e5af43d82803e903d91602b57fd5bf360881b60288201526000f59788915b6104268161040b856001600160a01b03166000526000602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b6001600160a01b03166000526001602052604060002090565b6102ce565b851692833b156100ff57604051631377d1f560e21b8152916000838061046e85856004840161031a565b038134895af19283156104d0577fd62166f3c2149208e51788b1401cc356bf5da1fc6c7886a32e18570f57d88b3b936104b7575b506104b26040519283928361031a565b0390a3565b806104c46104ca92610262565b8061030f565b386104a2565b610342565b603790604051907f3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000825260148201526e5af43d82803e903d91602b57fd5bf360881b60288201526000f09788916103ea56fea26469706673582212203278dafbe06216885b71b9853d6b5d5df81764eab048976f29a5eb1656f30ca164736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x55D SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1F54245B EQ PUSH2 0x5A JUMPI POP DUP1 PUSH4 0x8FD43654 EQ PUSH2 0x55 JUMPI DUP1 PUSH4 0xBAFE4F14 EQ PUSH2 0x50 JUMPI PUSH4 0xFBA96BE8 EQ PUSH2 0x4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x18C JUMP JUMPDEST PUSH2 0x132 JUMP JUMPDEST PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE2 JUMPI PUSH2 0x6E PUSH2 0xE9 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 DUP2 GT PUSH2 0xE5 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0xE5 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP3 DUP4 GT PUSH2 0xE5 JUMPI CALLDATASIZE PUSH1 0x24 DUP5 DUP4 ADD ADD GT PUSH2 0xE5 JUMPI PUSH1 0x44 CALLDATALOAD SWAP4 DUP5 ISZERO ISZERO DUP6 SUB PUSH2 0xE2 JUMPI PUSH2 0xDE PUSH2 0xC4 DUP7 DUP7 PUSH1 0x24 DUP7 ADD DUP8 PUSH2 0x34E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xFF JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x11C JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0xFF JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xFF JUMPI PUSH2 0x14B PUSH2 0xE9 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP4 LT ISZERO PUSH2 0xFF JUMPI PUSH1 0x20 SWAP3 PUSH2 0x17C SWAP2 PUSH2 0x104 JUMP JUMPDEST SWAP2 SWAP1 SLOAD PUSH1 0x40 MLOAD SWAP3 PUSH1 0x3 SHL SHR AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xFF JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xFF JUMPI PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x1B0 PUSH2 0xE9 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x0 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xFF JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xFF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1E8 PUSH2 0xE9 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST ISZERO PUSH2 0x208 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E67466163746F72793A204E6F206D6173746572436F6E7472616374 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x276 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24C JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 DUP3 DUP2 GT PUSH2 0x276 JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP5 ADD SWAP1 DUP2 GT DUP5 DUP3 LT OR PUSH2 0x276 JUMPI PUSH1 0x40 MSTORE DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0xFF JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST DUP1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x276 JUMPI PUSH2 0x2F0 SWAP2 PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x104 JUMP JUMPDEST DUP2 SWAP3 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND DUP4 SHL SWAP3 SHL NOT AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xFF JUMPI JUMP JUMPDEST SWAP1 SWAP2 DUP1 PUSH1 0x40 SWAP4 PUSH1 0x20 DUP5 MSTORE DUP2 PUSH1 0x20 DUP6 ADD MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x43F SWAP5 SWAP4 SWAP2 PUSH2 0x444 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP2 AND SWAP5 PUSH2 0x370 DUP7 ISZERO ISZERO PUSH2 0x201 JUMP JUMPDEST PUSH1 0x60 DUP3 SWAP1 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x37 PUSH2 0x397 CALLDATASIZE DUP10 DUP9 PUSH2 0x27B JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP2 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000000000000000000000 DUP3 MSTORE PUSH1 0x14 DUP3 ADD MSTORE PUSH15 0x5AF43D82803E903D91602B57FD5BF3 PUSH1 0x88 SHL PUSH1 0x28 DUP3 ADD MSTORE PUSH1 0x0 CREATE2 SWAP8 DUP9 SWAP2 JUMPDEST PUSH2 0x426 DUP2 PUSH2 0x40B DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2CE JUMP JUMPDEST DUP6 AND SWAP3 DUP4 EXTCODESIZE ISZERO PUSH2 0xFF JUMPI PUSH1 0x40 MLOAD PUSH4 0x1377D1F5 PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 PUSH1 0x0 DUP4 DUP1 PUSH2 0x46E DUP6 DUP6 PUSH1 0x4 DUP5 ADD PUSH2 0x31A JUMP JUMPDEST SUB DUP2 CALLVALUE DUP10 GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x4D0 JUMPI PUSH32 0xD62166F3C2149208E51788B1401CC356BF5DA1FC6C7886A32E18570F57D88B3B SWAP4 PUSH2 0x4B7 JUMPI JUMPDEST POP PUSH2 0x4B2 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x31A JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST DUP1 PUSH2 0x4C4 PUSH2 0x4CA SWAP3 PUSH2 0x262 JUMP JUMPDEST DUP1 PUSH2 0x30F JUMP JUMPDEST CODESIZE PUSH2 0x4A2 JUMP JUMPDEST PUSH2 0x342 JUMP JUMPDEST PUSH1 0x37 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000000000000000000000 DUP3 MSTORE PUSH1 0x14 DUP3 ADD MSTORE PUSH15 0x5AF43D82803E903D91602B57FD5BF3 PUSH1 0x88 SHL PUSH1 0x28 DUP3 ADD MSTORE PUSH1 0x0 CREATE SWAP8 DUP9 SWAP2 PUSH2 0x3EA JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN PUSH25 0xDAFBE06216885B71B9853D6B5D5DF81764EAB048976F29A5EB AND JUMP RETURN 0xC LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"145:3269:1:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":233,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_available_length_bytes":{"entryPoint":635,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_fromMemory":{"entryPoint":783,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes_calldata":{"entryPoint":794,"id":null,"parameterSlots":3,"returnSlots":1},"array_push_from_address_to_array_address_dyn_storage_ptr":{"entryPoint":718,"id":null,"parameterSlots":2,"returnSlots":0},"external_fun_clonesOf":{"entryPoint":306,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_clonesOfCount":{"entryPoint":455,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_masterContractOf":{"entryPoint":396,"id":null,"parameterSlots":0,"returnSlots":0},"finalize_allocation":{"entryPoint":610,"id":null,"parameterSlots":1,"returnSlots":0},"fun_deploy":{"entryPoint":846,"id":224,"parameterSlots":4,"returnSlots":1},"mapping_index_access_mapping_address_array_address_dyn_storage_of_address":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_address_array_address_dyn_storage_of_address_1552":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":588,"id":null,"parameterSlots":0,"returnSlots":0},"require_helper_stringliteral_ca26":{"entryPoint":513,"id":null,"parameterSlots":1,"returnSlots":0},"revert_forward":{"entryPoint":834,"id":null,"parameterSlots":0,"returnSlots":0},"storage_array_index_access_address_dyn":{"entryPoint":260,"id":null,"parameterSlots":2,"returnSlots":2},"update_storage_value_offsett_address_to_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436101561001257600080fd5b6000803560e01c9081631f54245b1461005a575080638fd4365414610055578063bafe4f14146100505763fba96be81461004b57600080fd5b6101c7565b61018c565b610132565b60603660031901126100e25761006e6100e9565b67ffffffffffffffff906024358281116100e557366023820112156100e55780600401359283116100e55736602484830101116100e5576044359384151585036100e2576100de6100c48686602486018761034e565b6040516001600160a01b0390911681529081906020820190565b0390f35b80fd5b8380fd5b600435906001600160a01b03821682036100ff57565b600080fd5b805482101561011c5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b346100ff5760403660031901126100ff5761014b6100e9565b602435906001600160a01b038091166000526001602052604060002080548310156100ff5760209261017c91610104565b9190546040519260031b1c168152f35b346100ff5760203660031901126100ff5760206001600160a01b03806101b06100e9565b166000526000825260406000205416604051908152f35b346100ff5760203660031901126100ff576001600160a01b036101e86100e9565b1660005260016020526020604060002054604051908152f35b1561020857565b606460405162461bcd60e51b815260206004820152602060248201527f426f72696e67466163746f72793a204e6f206d6173746572436f6e74726163746044820152fd5b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161027657604052565b61024c565b92919267ffffffffffffffff918281116102765760405192601f8201601f19908116603f0116840190811184821017610276576040528294818452818301116100ff578281602093846000960137010152565b805468010000000000000000811015610276576102f091600182018155610104565b819291549060031b916001600160a01b03809116831b921b1916179055565b60009103126100ff57565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b6040513d6000823e3d90fd5b9061043f9493916104446001600160a01b039182811694610370861515610201565b606082901b6bffffffffffffffffffffffff191690156104d557603761039736898861027b565b6020815191012091604051907f3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000825260148201526e5af43d82803e903d91602b57fd5bf360881b60288201526000f59788915b6104268161040b856001600160a01b03166000526000602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b6001600160a01b03166000526001602052604060002090565b6102ce565b851692833b156100ff57604051631377d1f560e21b8152916000838061046e85856004840161031a565b038134895af19283156104d0577fd62166f3c2149208e51788b1401cc356bf5da1fc6c7886a32e18570f57d88b3b936104b7575b506104b26040519283928361031a565b0390a3565b806104c46104ca92610262565b8061030f565b386104a2565b610342565b603790604051907f3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000825260148201526e5af43d82803e903d91602b57fd5bf360881b60288201526000f09788916103ea56fea26469706673582212203278dafbe06216885b71b9853d6b5d5df81764eab048976f29a5eb1656f30ca164736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1F54245B EQ PUSH2 0x5A JUMPI POP DUP1 PUSH4 0x8FD43654 EQ PUSH2 0x55 JUMPI DUP1 PUSH4 0xBAFE4F14 EQ PUSH2 0x50 JUMPI PUSH4 0xFBA96BE8 EQ PUSH2 0x4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x18C JUMP JUMPDEST PUSH2 0x132 JUMP JUMPDEST PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE2 JUMPI PUSH2 0x6E PUSH2 0xE9 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 DUP2 GT PUSH2 0xE5 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0xE5 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP3 DUP4 GT PUSH2 0xE5 JUMPI CALLDATASIZE PUSH1 0x24 DUP5 DUP4 ADD ADD GT PUSH2 0xE5 JUMPI PUSH1 0x44 CALLDATALOAD SWAP4 DUP5 ISZERO ISZERO DUP6 SUB PUSH2 0xE2 JUMPI PUSH2 0xDE PUSH2 0xC4 DUP7 DUP7 PUSH1 0x24 DUP7 ADD DUP8 PUSH2 0x34E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xFF JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x11C JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0xFF JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xFF JUMPI PUSH2 0x14B PUSH2 0xE9 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP4 LT ISZERO PUSH2 0xFF JUMPI PUSH1 0x20 SWAP3 PUSH2 0x17C SWAP2 PUSH2 0x104 JUMP JUMPDEST SWAP2 SWAP1 SLOAD PUSH1 0x40 MLOAD SWAP3 PUSH1 0x3 SHL SHR AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xFF JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xFF JUMPI PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x1B0 PUSH2 0xE9 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x0 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xFF JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xFF JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1E8 PUSH2 0xE9 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST ISZERO PUSH2 0x208 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E67466163746F72793A204E6F206D6173746572436F6E7472616374 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x276 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24C JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 DUP3 DUP2 GT PUSH2 0x276 JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP5 ADD SWAP1 DUP2 GT DUP5 DUP3 LT OR PUSH2 0x276 JUMPI PUSH1 0x40 MSTORE DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0xFF JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST DUP1 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x276 JUMPI PUSH2 0x2F0 SWAP2 PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x104 JUMP JUMPDEST DUP2 SWAP3 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND DUP4 SHL SWAP3 SHL NOT AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xFF JUMPI JUMP JUMPDEST SWAP1 SWAP2 DUP1 PUSH1 0x40 SWAP4 PUSH1 0x20 DUP5 MSTORE DUP2 PUSH1 0x20 DUP6 ADD MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x43F SWAP5 SWAP4 SWAP2 PUSH2 0x444 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP2 AND SWAP5 PUSH2 0x370 DUP7 ISZERO ISZERO PUSH2 0x201 JUMP JUMPDEST PUSH1 0x60 DUP3 SWAP1 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x37 PUSH2 0x397 CALLDATASIZE DUP10 DUP9 PUSH2 0x27B JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP2 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000000000000000000000 DUP3 MSTORE PUSH1 0x14 DUP3 ADD MSTORE PUSH15 0x5AF43D82803E903D91602B57FD5BF3 PUSH1 0x88 SHL PUSH1 0x28 DUP3 ADD MSTORE PUSH1 0x0 CREATE2 SWAP8 DUP9 SWAP2 JUMPDEST PUSH2 0x426 DUP2 PUSH2 0x40B DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2CE JUMP JUMPDEST DUP6 AND SWAP3 DUP4 EXTCODESIZE ISZERO PUSH2 0xFF JUMPI PUSH1 0x40 MLOAD PUSH4 0x1377D1F5 PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 PUSH1 0x0 DUP4 DUP1 PUSH2 0x46E DUP6 DUP6 PUSH1 0x4 DUP5 ADD PUSH2 0x31A JUMP JUMPDEST SUB DUP2 CALLVALUE DUP10 GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x4D0 JUMPI PUSH32 0xD62166F3C2149208E51788B1401CC356BF5DA1FC6C7886A32E18570F57D88B3B SWAP4 PUSH2 0x4B7 JUMPI JUMPDEST POP PUSH2 0x4B2 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x31A JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST DUP1 PUSH2 0x4C4 PUSH2 0x4CA SWAP3 PUSH2 0x262 JUMP JUMPDEST DUP1 PUSH2 0x30F JUMP JUMPDEST CODESIZE PUSH2 0x4A2 JUMP JUMPDEST PUSH2 0x342 JUMP JUMPDEST PUSH1 0x37 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH32 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000000000000000000000 DUP3 MSTORE PUSH1 0x14 DUP3 ADD MSTORE PUSH15 0x5AF43D82803E903D91602B57FD5BF3 PUSH1 0x88 SHL PUSH1 0x28 DUP3 ADD MSTORE PUSH1 0x0 CREATE SWAP8 DUP9 SWAP2 PUSH2 0x3EA JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ORIGIN PUSH25 0xDAFBE06216885B71B9853D6B5D5DF81764EAB048976F29A5EB AND JUMP RETURN 0xC LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"145:3269:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;145:3269:1;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;145:3269:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;145:3269:1;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;145:3269:1;;-1:-1:-1;145:3269:1;;;-1:-1:-1;145:3269:1;:::o;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;145:3269:1;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;145:3269:1;;;-1:-1:-1;145:3269:1;;;;;-1:-1:-1;145:3269:1;;;680:45;;;;;145:3269;680:45;;;;:::i;:::-;145:3269;;;;;;;;;;;;;;;;;;;-1:-1:-1;;145:3269:1;;;;;-1:-1:-1;;;;;145:3269:1;;;:::i;:::-;;-1:-1:-1;145:3269:1;-1:-1:-1;145:3269:1;;;-1:-1:-1;145:3269:1;;;;;;;;;;;;;;;-1:-1:-1;;145:3269:1;;;;-1:-1:-1;;;;;145:3269:1;;:::i;:::-;;-1:-1:-1;145:3269:1;1075:8;145:3269;;;;-1:-1:-1;145:3269:1;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;145:3269:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;145:3269:1;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;145:3269:1;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;145:3269:1;;;;:::o;:::-;;;;;;;;;;1653:1758;;3226:24;1653:1758;;;3226:43;-1:-1:-1;;;;;145:3269:1;;;;1830:28;1822:73;1830:28;;;1822:73;:::i;:::-;145:3269;;;;-1:-1:-1;;145:3269:1;;2024:1134;;;2334:394;145:3269;;;;;:::i;:::-;;;;;;2182:15;2334:394;;;;;;;;;;;-1:-1:-1;;;2334:394:1;;;;1856:1;2334:394;2024:1134;;;;3168:47;:30;;;-1:-1:-1;;;;;145:3269:1;1856:1;145:3269;1856:1;145:3269;;;1856:1;145:3269;;;3168:30;145:3269;-1:-1:-1;;;;;145:3269:1;-1:-1:-1;;;;;145:3269:1;;;;;;;;3168:47;-1:-1:-1;;;;;145:3269:1;;;3226:8;145:3269;;;;;;;3226:24;:43;:::i;:::-;145:3269;;3282:58;;;;;;145:3269;;-1:-1:-1;;;3282:58:1;;145:3269;1856:1;145:3269;;3282:58;;145:3269;3282:58;;;;:::i;:::-;;3324:9;;3282:58;;;;;;;;3358:45;3282:58;;;2024:1134;145:3269;3358:45;145:3269;;3358:45;;;;;:::i;:::-;;;;1653:1758::o;3282:58::-;;;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;2024:1134::-;2760:387;;;;;;;;;;;;-1:-1:-1;;;2760:387:1;;;;1856:1;2760:387;2024:1134;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"274600","executionCost":"319","totalCost":"274919"},"external":{"clonesOf(address,uint256)":"6816","clonesOfCount(address)":"2484","deploy(address,bytes,bool)":"infinite","masterContractOf(address)":"2471"}},"methodIdentifiers":{"clonesOf(address,uint256)":"8fd43654","clonesOfCount(address)":"fba96be8","deploy(address,bytes,bool)":"1f54245b","masterContractOf(address)":"bafe4f14"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cloneAddress\",\"type\":\"address\"}],\"name\":\"LogDeploy\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"clonesOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"}],\"name\":\"clonesOfCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cloneCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"useCreate2\",\"type\":\"bool\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cloneAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"masterContractOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clonesOfCount(address)\":{\"params\":{\"masterContract\":\"The address of the master contract.\"},\"returns\":{\"cloneCount\":\"total number of clones for the masterContract.\"}},\"deploy(address,bytes,bool)\":{\"params\":{\"data\":\"Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\",\"masterContract\":\"The address of the contract to clone.\",\"useCreate2\":\"Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\"},\"returns\":{\"cloneAddress\":\"Address of the created clone contract.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clonesOf(address,uint256)\":{\"notice\":\"Mapping from masterContract to an array of all clones On mainnet events can be used to get this list, but events aren't always easy to retrieve and barely work on sidechains. While this adds gas, it makes enumerating all clones much easier.\"},\"clonesOfCount(address)\":{\"notice\":\"Returns the count of clones that exists for a specific masterContract\"},\"deploy(address,bytes,bool)\":{\"notice\":\"Deploys a given master Contract as a clone. Any ETH transferred with this call is forwarded to the new clone. Emits `LogDeploy`.\"},\"masterContractOf(address)\":{\"notice\":\"Mapping from clone contracts to their masterContract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@boringcrypto/boring-solidity/contracts/BoringFactory.sol\":\"BoringFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/BoringFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./interfaces/IMasterContract.sol\\\";\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\ncontract BoringFactory {\\r\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\r\\n\\r\\n    /// @notice Mapping from clone contracts to their masterContract.\\r\\n    mapping(address => address) public masterContractOf;\\r\\n\\r\\n    /// @notice Mapping from masterContract to an array of all clones\\r\\n    /// On mainnet events can be used to get this list, but events aren't always easy to retrieve and\\r\\n    /// barely work on sidechains. While this adds gas, it makes enumerating all clones much easier.\\r\\n    mapping(address => address[]) public clonesOf;\\r\\n\\r\\n    /// @notice Returns the count of clones that exists for a specific masterContract\\r\\n    /// @param masterContract The address of the master contract.\\r\\n    /// @return cloneCount total number of clones for the masterContract.\\r\\n    function clonesOfCount(address masterContract) public view returns (uint256 cloneCount) {\\r\\n        cloneCount = clonesOf[masterContract].length;\\r\\n    }\\r\\n\\r\\n    /// @notice Deploys a given master Contract as a clone.\\r\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\r\\n    /// Emits `LogDeploy`.\\r\\n    /// @param masterContract The address of the contract to clone.\\r\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\r\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\r\\n    /// @return cloneAddress Address of the created clone contract.\\r\\n    function deploy(\\r\\n        address masterContract,\\r\\n        bytes calldata data,\\r\\n        bool useCreate2\\r\\n    ) public payable returns (address cloneAddress) {\\r\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\r\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\r\\n\\r\\n        if (useCreate2) {\\r\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\r\\n            bytes32 salt = keccak256(data);\\r\\n\\r\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\r\\n            assembly {\\r\\n                let clone := mload(0x40)\\r\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\r\\n                mstore(add(clone, 0x14), targetBytes)\\r\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\r\\n                cloneAddress := create2(0, clone, 0x37, salt)\\r\\n            }\\r\\n        } else {\\r\\n            assembly {\\r\\n                let clone := mload(0x40)\\r\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\r\\n                mstore(add(clone, 0x14), targetBytes)\\r\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\r\\n                cloneAddress := create(0, clone, 0x37)\\r\\n            }\\r\\n        }\\r\\n        masterContractOf[cloneAddress] = masterContract;\\r\\n        clonesOf[masterContract].push(cloneAddress);\\r\\n\\r\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\r\\n\\r\\n        emit LogDeploy(masterContract, data, cloneAddress);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x09b8928fe64262a9cf934b360193a581cc6709d8642fd1b9f19d550991c475d7\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IMasterContract {\\r\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\r\\n    /// Also kown as the constructor for cloned contracts.\\r\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\r\\n    /// @param data Can be abi encoded arguments or anything else.\\r\\n    function init(bytes calldata data) external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0xdc1227c73bcaaf012c37ab85424909a4e900df34ecfcf9d090f7998e4d3aefe7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":131,"contract":"@boringcrypto/boring-solidity/contracts/BoringFactory.sol:BoringFactory","label":"masterContractOf","offset":0,"slot":"0","type":"t_mapping(t_address,t_address)"},{"astId":137,"contract":"@boringcrypto/boring-solidity/contracts/BoringFactory.sol:BoringFactory","label":"clonesOf","offset":0,"slot":"1","type":"t_mapping(t_address,t_array(t_address)dyn_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_address,t_array(t_address)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address[])","numberOfBytes":"32","value":"t_array(t_address)dyn_storage"}}},"userdoc":{"kind":"user","methods":{"clonesOf(address,uint256)":{"notice":"Mapping from masterContract to an array of all clones On mainnet events can be used to get this list, but events aren't always easy to retrieve and barely work on sidechains. While this adds gas, it makes enumerating all clones much easier."},"clonesOfCount(address)":{"notice":"Returns the count of clones that exists for a specific masterContract"},"deploy(address,bytes,bool)":{"notice":"Deploys a given master Contract as a clone. Any ETH transferred with this call is forwarded to the new clone. Emits `LogDeploy`."},"masterContractOf(address)":{"notice":"Mapping from clone contracts to their masterContract."}},"version":1}}},"@boringcrypto/boring-solidity/contracts/Domain.sol":{"Domain":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60c034608c574660a052602081017f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218815246604083015230606083015260608252608082019180831060018060401b0384111760765782604052519020608052603a9081610092823960805181505060a051815050f35b634e487b7160e01b600052604160045260246000fd5b600080fdfe600080fdfea26469706673582212209eb3715cd4db45383d21432c18d0bb0577d9c3a09f393ba6b589c5ac0ccd2b9364736f6c63430008120033","opcodes":"PUSH1 0xC0 CALLVALUE PUSH1 0x8C JUMPI CHAINID PUSH1 0xA0 MSTORE PUSH1 0x20 DUP2 ADD PUSH32 0x47E79534A245952E8B16893A336B85A3D9EA9FA8C573F3D803AFB92A79469218 DUP2 MSTORE CHAINID PUSH1 0x40 DUP4 ADD MSTORE ADDRESS PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x60 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP2 DUP1 DUP4 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP5 GT OR PUSH1 0x76 JUMPI DUP3 PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 PUSH1 0x80 MSTORE PUSH1 0x3A SWAP1 DUP2 PUSH2 0x92 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 POP POP PUSH1 0xA0 MLOAD DUP2 POP POP RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 0xB3 PUSH18 0x5CD4DB45383D21432C18D0BB0577D9C3A09F CODECOPY EXTCODESIZE 0xA6 0xB5 DUP10 0xC5 0xAC 0xC 0xCD 0x2B SWAP4 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"315:1685:2:-:0;;;;1053:55;1164:35;;918:67;;;397:68;;;1053:55;315:1685;397:68;;;979:4;397:68;;;;;918:67;;397:68;;;;;;;;;;;;;;;;;;315:1685;397:68;;908:78;;397:68;1118:82;315:1685;;;;;;397:68;315:1685;;;;1164:35;315:1685;;;;;397:68;;;;-1:-1:-1;397:68:2;;;;;-1:-1:-1;397:68:2;315:1685;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212209eb3715cd4db45383d21432c18d0bb0577d9c3a09f393ba6b589c5ac0ccd2b9364736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 0xB3 PUSH18 0x5CD4DB45383D21432C18D0BB0577D9C3A09F CODECOPY EXTCODESIZE 0xA6 0xB5 DUP10 0xC5 0xAC 0xC 0xCD 0x2B SWAP4 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"315:1685:2:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_calculateDomainSeparator(uint256)":"infinite","_domainSeparator()":"infinite","_getDigest(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@boringcrypto/boring-solidity/contracts/Domain.sol\":\"Domain\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/Domain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Based on code and smartness by Ross Campbell and Keno\\r\\n// Uses immutable to store the domain separator to reduce gas usage\\r\\n// If the chain id changes due to a fork, the forked chain will calculate on the fly.\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\ncontract Domain {\\r\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\r\\n    // See https://eips.ethereum.org/EIPS/eip-191\\r\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\r\\n\\r\\n    // solhint-disable var-name-mixedcase\\r\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\r\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\r\\n\\r\\n    /// @dev Calculate the DOMAIN_SEPARATOR\\r\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\r\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, chainId, address(this)));\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\r\\n    }\\r\\n\\r\\n    /// @dev Return the DOMAIN_SEPARATOR\\r\\n    // It's named internal to allow making it public from the contract that uses it by creating a simple view function\\r\\n    // with the desired public name, such as DOMAIN_SEPARATOR or domainSeparator.\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function _domainSeparator() internal view returns (bytes32) {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\r\\n    }\\r\\n\\r\\n    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\\r\\n        digest = keccak256(abi.encodePacked(EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA, _domainSeparator(), dataHash));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x26e7d78c93c138e022d6fce9bc32d17fa3a0df1603927ddba65b9e81acbd1820\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol":{"IERC1155":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256","name":"_id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"_value","type":"string"},{"indexed":true,"internalType":"uint256","name":"_id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_owners","type":"address[]"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\":\"IERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\ninterface IERC1155 is IERC165 {\\r\\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\\r\\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n    event URI(string _value, uint256 indexed _id);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n\\r\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\r\\n\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x39f388312b08552eb8a5f09cbe6b0c6ea511a6a47c72985e1ab53b777b911771\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC165 {\\r\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x2929dd1b0483b96a0b59b4b945684705adf252697b404fe7f126816cb78d684c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol":{"IERC1155TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"internalType":"uint256[]","name":"_values","type":"uint256[]"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_id","type":"uint256"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\":\"IERC1155TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC1155TokenReceiver {\\r\\n    function onERC1155Received(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0x5a73c68c2975f8908b96e76fe916a1a39b86fd7acb2d1e463e85e7841225c0cf\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC165 {\\r\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x2929dd1b0483b96a0b59b4b945684705adf252697b404fe7f126816cb78d684c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","totalSupply()":"18160ddd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"EIP 2612\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc7605391c07120ced6c1cca9d01abf39add948385828037a537b2d6b4c52f4a3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"EIP 2612"}},"version":1}}},"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"_approved","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721  Note: the ERC-165 identifier for this interface is 0x80ac58cd.","events":{"Approval(address,address,uint256)":{"details":"This emits when the approved address for an NFT is changed or  reaffirmed. The zero address indicates there is no approved address.  When a Transfer event emits, this also indicates that the approved  address for that NFT (if any) is reset to none."},"ApprovalForAll(address,address,bool)":{"details":"This emits when an operator is enabled or disabled for an owner.  The operator can manage all NFTs of the owner."},"Transfer(address,address,uint256)":{"details":"This emits when ownership of any NFT changes by any mechanism.  This event emits when NFTs are created (`from` == 0) and destroyed  (`to` == 0). Exception: during contract creation, any number of NFTs  may be created and assigned without emitting Transfer. At the time of  any transfer, the approved address for that NFT (if any) is reset to none."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"The zero address indicates there is no approved address.  Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.","params":{"_approved":"The new approved NFT controller","_tokenId":"The NFT to approve"}},"balanceOf(address)":{"details":"NFTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.","params":{"_owner":"An address for whom to query the balance"},"returns":{"_0":"The number of NFTs owned by `_owner`, possibly zero"}},"getApproved(uint256)":{"details":"Throws if `_tokenId` is not a valid NFT.","params":{"_tokenId":"The NFT to find the approved address for"},"returns":{"_0":"The approved address for this NFT, or the zero address if there is none"}},"isApprovedForAll(address,address)":{"params":{"_operator":"The address that acts on behalf of the owner","_owner":"The address that owns the NFTs"},"returns":{"_0":"True if `_operator` is an approved operator for `_owner`, false otherwise"}},"ownerOf(uint256)":{"details":"NFTs assigned to zero address are considered invalid, and queries  about them do throw.","params":{"_tokenId":"The identifier for an NFT"},"returns":{"_0":"The address of the owner of the NFT"}},"safeTransferFrom(address,address,uint256)":{"details":"This works identically to the other function with an extra data parameter,  except this function just sets data to \"\".","params":{"_from":"The current owner of the NFT","_to":"The new owner","_tokenId":"The NFT to transfer"}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT. When transfer is complete, this function  checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.","params":{"_from":"The current owner of the NFT","_to":"The new owner","_tokenId":"The NFT to transfer","data":"Additional data with no specified format, sent in call to `_to`"}},"setApprovalForAll(address,bool)":{"details":"Emits the ApprovalForAll event. The contract MUST allow  multiple operators per owner.","params":{"_approved":"True if the operator is approved, false to revoke approval","_operator":"Address to add to the set of authorized operators"}},"transferFrom(address,address,uint256)":{"details":"Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT.","params":{"_from":"The current owner of the NFT","_to":"The new owner","_tokenId":"The NFT to transfer"}}},"title":"ERC-721 Non-Fungible Token Standard","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"This emits when the approved address for an NFT is changed or  reaffirmed. The zero address indicates there is no approved address.  When a Transfer event emits, this also indicates that the approved  address for that NFT (if any) is reset to none.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"This emits when an operator is enabled or disabled for an owner.  The operator can manage all NFTs of the owner.\"},\"Transfer(address,address,uint256)\":{\"details\":\"This emits when ownership of any NFT changes by any mechanism.  This event emits when NFTs are created (`from` == 0) and destroyed  (`to` == 0). Exception: during contract creation, any number of NFTs  may be created and assigned without emitting Transfer. At the time of  any transfer, the approved address for that NFT (if any) is reset to none.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"The zero address indicates there is no approved address.  Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.\",\"params\":{\"_approved\":\"The new approved NFT controller\",\"_tokenId\":\"The NFT to approve\"}},\"balanceOf(address)\":{\"details\":\"NFTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.\",\"params\":{\"_owner\":\"An address for whom to query the balance\"},\"returns\":{\"_0\":\"The number of NFTs owned by `_owner`, possibly zero\"}},\"getApproved(uint256)\":{\"details\":\"Throws if `_tokenId` is not a valid NFT.\",\"params\":{\"_tokenId\":\"The NFT to find the approved address for\"},\"returns\":{\"_0\":\"The approved address for this NFT, or the zero address if there is none\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"_operator\":\"The address that acts on behalf of the owner\",\"_owner\":\"The address that owns the NFTs\"},\"returns\":{\"_0\":\"True if `_operator` is an approved operator for `_owner`, false otherwise\"}},\"ownerOf(uint256)\":{\"details\":\"NFTs assigned to zero address are considered invalid, and queries  about them do throw.\",\"params\":{\"_tokenId\":\"The identifier for an NFT\"},\"returns\":{\"_0\":\"The address of the owner of the NFT\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"This works identically to the other function with an extra data parameter,  except this function just sets data to \\\"\\\".\",\"params\":{\"_from\":\"The current owner of the NFT\",\"_to\":\"The new owner\",\"_tokenId\":\"The NFT to transfer\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT. When transfer is complete, this function  checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\",\"params\":{\"_from\":\"The current owner of the NFT\",\"_to\":\"The new owner\",\"_tokenId\":\"The NFT to transfer\",\"data\":\"Additional data with no specified format, sent in call to `_to`\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Emits the ApprovalForAll event. The contract MUST allow  multiple operators per owner.\",\"params\":{\"_approved\":\"True if the operator is approved, false to revoke approval\",\"_operator\":\"Address to add to the set of authorized operators\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT.\",\"params\":{\"_from\":\"The current owner of the NFT\",\"_to\":\"The new owner\",\"_tokenId\":\"The NFT to transfer\"}}},\"title\":\"ERC-721 Non-Fungible Token Standard\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Change or reaffirm the approved address for an NFT\"},\"balanceOf(address)\":{\"notice\":\"Count all NFTs assigned to an owner\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved address for a single NFT\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Query if an address is an authorized operator for another address\"},\"ownerOf(uint256)\":{\"notice\":\"Find the owner of an NFT\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfers the ownership of an NFT from one address to another address\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers the ownership of an NFT from one address to another address\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for a third party (\\\"operator\\\") to manage  all of `msg.sender`'s assets\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE  THEY MAY BE PERMANENTLY LOST\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\\r\\ninterface IERC721 /* is ERC165 */ {\\r\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\r\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\r\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\r\\n    ///  may be created and assigned without emitting Transfer. At the time of\\r\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when the approved address for an NFT is changed or\\r\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\r\\n    ///  When a Transfer event emits, this also indicates that the approved\\r\\n    ///  address for that NFT (if any) is reset to none.\\r\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\r\\n    ///  The operator can manage all NFTs of the owner.\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n    /// @notice Count all NFTs assigned to an owner\\r\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\r\\n    ///  function throws for queries about the zero address.\\r\\n    /// @param _owner An address for whom to query the balance\\r\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\r\\n    function balanceOf(address _owner) external view returns (uint256);\\r\\n\\r\\n    /// @notice Find the owner of an NFT\\r\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\r\\n    ///  about them do throw.\\r\\n    /// @param _tokenId The identifier for an NFT\\r\\n    /// @return The address of the owner of the NFT\\r\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\r\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\r\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\r\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\r\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\\r\\n\\r\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\r\\n    /// @dev This works identically to the other function with an extra data parameter,\\r\\n    ///  except this function just sets data to \\\"\\\".\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\r\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\r\\n    ///  THEY MAY BE PERMANENTLY LOST\\r\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\r\\n    ///  `_tokenId` is not a valid NFT.\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Change or reaffirm the approved address for an NFT\\r\\n    /// @dev The zero address indicates there is no approved address.\\r\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\r\\n    ///  operator of the current owner.\\r\\n    /// @param _approved The new approved NFT controller\\r\\n    /// @param _tokenId The NFT to approve\\r\\n    function approve(address _approved, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\r\\n    ///  all of `msg.sender`'s assets\\r\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\r\\n    ///  multiple operators per owner.\\r\\n    /// @param _operator Address to add to the set of authorized operators\\r\\n    /// @param _approved True if the operator is approved, false to revoke approval\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    /// @notice Get the approved address for a single NFT\\r\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\r\\n    /// @param _tokenId The NFT to find the approved address for\\r\\n    /// @return The approved address for this NFT, or the zero address if there is none\\r\\n    function getApproved(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n    /// @notice Query if an address is an authorized operator for another address\\r\\n    /// @param _owner The address that owns the NFTs\\r\\n    /// @param _operator The address that acts on behalf of the owner\\r\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n}\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\r\\ninterface IERC721Metadata /* is ERC721 */ {\\r\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\r\\n    function name() external view returns (string memory _name);\\r\\n\\r\\n    /// @notice An abbreviated name for NFTs in this contract\\r\\n    function symbol() external view returns (string memory _symbol);\\r\\n\\r\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\r\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\r\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\r\\n    ///  Metadata JSON Schema\\\".\\r\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\r\\n}\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\\r\\ninterface IERC721Enumerable /* is ERC721 */ {\\r\\n    /// @notice Count NFTs tracked by this contract\\r\\n    /// @return A count of valid NFTs tracked by this contract, where each one of\\r\\n    ///  them has an assigned and queryable owner not equal to the zero address\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /// @notice Enumerate valid NFTs\\r\\n    /// @dev Throws if `_index` >= `totalSupply()`.\\r\\n    /// @param _index A counter less than `totalSupply()`\\r\\n    /// @return The token identifier for the `_index`th NFT,\\r\\n    ///  (sort order not specified)\\r\\n    function tokenByIndex(uint256 _index) external view returns (uint256);\\r\\n\\r\\n    /// @notice Enumerate NFTs assigned to an owner\\r\\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\\r\\n    ///  `_owner` is the zero address, representing invalid NFTs.\\r\\n    /// @param _owner An address where we are interested in NFTs owned by them\\r\\n    /// @param _index A counter less than `balanceOf(_owner)`\\r\\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\\r\\n    ///   (sort order not specified)\\r\\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x8091cd3dd3561fe90675780de7111f11430b7b6f9174cff8e9a8eaa4ab682aca\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"approve(address,uint256)":{"notice":"Change or reaffirm the approved address for an NFT"},"balanceOf(address)":{"notice":"Count all NFTs assigned to an owner"},"getApproved(uint256)":{"notice":"Get the approved address for a single NFT"},"isApprovedForAll(address,address)":{"notice":"Query if an address is an authorized operator for another address"},"ownerOf(uint256)":{"notice":"Find the owner of an NFT"},"safeTransferFrom(address,address,uint256)":{"notice":"Transfers the ownership of an NFT from one address to another address"},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Transfers the ownership of an NFT from one address to another address"},"setApprovalForAll(address,bool)":{"notice":"Enable or disable approval for a third party (\"operator\") to manage  all of `msg.sender`'s assets"},"transferFrom(address,address,uint256)":{"notice":"Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE  THEY MAY BE PERMANENTLY LOST"}},"version":1}},"IERC721Enumerable":{"abi":[{"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721  Note: the ERC-165 identifier for this interface is 0x780e9d63.","kind":"dev","methods":{"tokenByIndex(uint256)":{"details":"Throws if `_index` >= `totalSupply()`.","params":{"_index":"A counter less than `totalSupply()`"},"returns":{"_0":"The token identifier for the `_index`th NFT,  (sort order not specified)"}},"tokenOfOwnerByIndex(address,uint256)":{"details":"Throws if `_index` >= `balanceOf(_owner)` or if  `_owner` is the zero address, representing invalid NFTs.","params":{"_index":"A counter less than `balanceOf(_owner)`","_owner":"An address where we are interested in NFTs owned by them"},"returns":{"_0":"The token identifier for the `_index`th NFT assigned to `_owner`,   (sort order not specified)"}},"totalSupply()":{"returns":{"_0":"A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address"}}},"title":"ERC-721 Non-Fungible Token Standard, optional enumeration extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","totalSupply()":"18160ddd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721  Note: the ERC-165 identifier for this interface is 0x780e9d63.\",\"kind\":\"dev\",\"methods\":{\"tokenByIndex(uint256)\":{\"details\":\"Throws if `_index` >= `totalSupply()`.\",\"params\":{\"_index\":\"A counter less than `totalSupply()`\"},\"returns\":{\"_0\":\"The token identifier for the `_index`th NFT,  (sort order not specified)\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Throws if `_index` >= `balanceOf(_owner)` or if  `_owner` is the zero address, representing invalid NFTs.\",\"params\":{\"_index\":\"A counter less than `balanceOf(_owner)`\",\"_owner\":\"An address where we are interested in NFTs owned by them\"},\"returns\":{\"_0\":\"The token identifier for the `_index`th NFT assigned to `_owner`,   (sort order not specified)\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address\"}}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenByIndex(uint256)\":{\"notice\":\"Enumerate valid NFTs\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"Enumerate NFTs assigned to an owner\"},\"totalSupply()\":{\"notice\":\"Count NFTs tracked by this contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\\r\\ninterface IERC721 /* is ERC165 */ {\\r\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\r\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\r\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\r\\n    ///  may be created and assigned without emitting Transfer. At the time of\\r\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when the approved address for an NFT is changed or\\r\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\r\\n    ///  When a Transfer event emits, this also indicates that the approved\\r\\n    ///  address for that NFT (if any) is reset to none.\\r\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\r\\n    ///  The operator can manage all NFTs of the owner.\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n    /// @notice Count all NFTs assigned to an owner\\r\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\r\\n    ///  function throws for queries about the zero address.\\r\\n    /// @param _owner An address for whom to query the balance\\r\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\r\\n    function balanceOf(address _owner) external view returns (uint256);\\r\\n\\r\\n    /// @notice Find the owner of an NFT\\r\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\r\\n    ///  about them do throw.\\r\\n    /// @param _tokenId The identifier for an NFT\\r\\n    /// @return The address of the owner of the NFT\\r\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\r\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\r\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\r\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\r\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\\r\\n\\r\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\r\\n    /// @dev This works identically to the other function with an extra data parameter,\\r\\n    ///  except this function just sets data to \\\"\\\".\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\r\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\r\\n    ///  THEY MAY BE PERMANENTLY LOST\\r\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\r\\n    ///  `_tokenId` is not a valid NFT.\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Change or reaffirm the approved address for an NFT\\r\\n    /// @dev The zero address indicates there is no approved address.\\r\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\r\\n    ///  operator of the current owner.\\r\\n    /// @param _approved The new approved NFT controller\\r\\n    /// @param _tokenId The NFT to approve\\r\\n    function approve(address _approved, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\r\\n    ///  all of `msg.sender`'s assets\\r\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\r\\n    ///  multiple operators per owner.\\r\\n    /// @param _operator Address to add to the set of authorized operators\\r\\n    /// @param _approved True if the operator is approved, false to revoke approval\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    /// @notice Get the approved address for a single NFT\\r\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\r\\n    /// @param _tokenId The NFT to find the approved address for\\r\\n    /// @return The approved address for this NFT, or the zero address if there is none\\r\\n    function getApproved(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n    /// @notice Query if an address is an authorized operator for another address\\r\\n    /// @param _owner The address that owns the NFTs\\r\\n    /// @param _operator The address that acts on behalf of the owner\\r\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n}\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\r\\ninterface IERC721Metadata /* is ERC721 */ {\\r\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\r\\n    function name() external view returns (string memory _name);\\r\\n\\r\\n    /// @notice An abbreviated name for NFTs in this contract\\r\\n    function symbol() external view returns (string memory _symbol);\\r\\n\\r\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\r\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\r\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\r\\n    ///  Metadata JSON Schema\\\".\\r\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\r\\n}\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\\r\\ninterface IERC721Enumerable /* is ERC721 */ {\\r\\n    /// @notice Count NFTs tracked by this contract\\r\\n    /// @return A count of valid NFTs tracked by this contract, where each one of\\r\\n    ///  them has an assigned and queryable owner not equal to the zero address\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /// @notice Enumerate valid NFTs\\r\\n    /// @dev Throws if `_index` >= `totalSupply()`.\\r\\n    /// @param _index A counter less than `totalSupply()`\\r\\n    /// @return The token identifier for the `_index`th NFT,\\r\\n    ///  (sort order not specified)\\r\\n    function tokenByIndex(uint256 _index) external view returns (uint256);\\r\\n\\r\\n    /// @notice Enumerate NFTs assigned to an owner\\r\\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\\r\\n    ///  `_owner` is the zero address, representing invalid NFTs.\\r\\n    /// @param _owner An address where we are interested in NFTs owned by them\\r\\n    /// @param _index A counter less than `balanceOf(_owner)`\\r\\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\\r\\n    ///   (sort order not specified)\\r\\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x8091cd3dd3561fe90675780de7111f11430b7b6f9174cff8e9a8eaa4ab682aca\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"tokenByIndex(uint256)":{"notice":"Enumerate valid NFTs"},"tokenOfOwnerByIndex(address,uint256)":{"notice":"Enumerate NFTs assigned to an owner"},"totalSupply()":{"notice":"Count NFTs tracked by this contract"}},"version":1}},"IERC721Metadata":{"abi":[{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"_name","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"_symbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721  Note: the ERC-165 identifier for this interface is 0x5b5e139f.","kind":"dev","methods":{"tokenURI(uint256)":{"details":"Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \"ERC721  Metadata JSON Schema\"."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"name()":"06fdde03","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\",\"kind\":\"dev\",\"methods\":{\"tokenURI(uint256)\":{\"details\":\"Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \\\"ERC721  Metadata JSON Schema\\\".\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"name()\":{\"notice\":\"A descriptive name for a collection of NFTs in this contract\"},\"symbol()\":{\"notice\":\"An abbreviated name for NFTs in this contract\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\\r\\ninterface IERC721 /* is ERC165 */ {\\r\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\r\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\r\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\r\\n    ///  may be created and assigned without emitting Transfer. At the time of\\r\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when the approved address for an NFT is changed or\\r\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\r\\n    ///  When a Transfer event emits, this also indicates that the approved\\r\\n    ///  address for that NFT (if any) is reset to none.\\r\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\r\\n    ///  The operator can manage all NFTs of the owner.\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n    /// @notice Count all NFTs assigned to an owner\\r\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\r\\n    ///  function throws for queries about the zero address.\\r\\n    /// @param _owner An address for whom to query the balance\\r\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\r\\n    function balanceOf(address _owner) external view returns (uint256);\\r\\n\\r\\n    /// @notice Find the owner of an NFT\\r\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\r\\n    ///  about them do throw.\\r\\n    /// @param _tokenId The identifier for an NFT\\r\\n    /// @return The address of the owner of the NFT\\r\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\r\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\r\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\r\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\r\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\\r\\n\\r\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\r\\n    /// @dev This works identically to the other function with an extra data parameter,\\r\\n    ///  except this function just sets data to \\\"\\\".\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\r\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\r\\n    ///  THEY MAY BE PERMANENTLY LOST\\r\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\r\\n    ///  `_tokenId` is not a valid NFT.\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Change or reaffirm the approved address for an NFT\\r\\n    /// @dev The zero address indicates there is no approved address.\\r\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\r\\n    ///  operator of the current owner.\\r\\n    /// @param _approved The new approved NFT controller\\r\\n    /// @param _tokenId The NFT to approve\\r\\n    function approve(address _approved, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\r\\n    ///  all of `msg.sender`'s assets\\r\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\r\\n    ///  multiple operators per owner.\\r\\n    /// @param _operator Address to add to the set of authorized operators\\r\\n    /// @param _approved True if the operator is approved, false to revoke approval\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    /// @notice Get the approved address for a single NFT\\r\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\r\\n    /// @param _tokenId The NFT to find the approved address for\\r\\n    /// @return The approved address for this NFT, or the zero address if there is none\\r\\n    function getApproved(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n    /// @notice Query if an address is an authorized operator for another address\\r\\n    /// @param _owner The address that owns the NFTs\\r\\n    /// @param _operator The address that acts on behalf of the owner\\r\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n}\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\r\\ninterface IERC721Metadata /* is ERC721 */ {\\r\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\r\\n    function name() external view returns (string memory _name);\\r\\n\\r\\n    /// @notice An abbreviated name for NFTs in this contract\\r\\n    function symbol() external view returns (string memory _symbol);\\r\\n\\r\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\r\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\r\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\r\\n    ///  Metadata JSON Schema\\\".\\r\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\r\\n}\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\\r\\ninterface IERC721Enumerable /* is ERC721 */ {\\r\\n    /// @notice Count NFTs tracked by this contract\\r\\n    /// @return A count of valid NFTs tracked by this contract, where each one of\\r\\n    ///  them has an assigned and queryable owner not equal to the zero address\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /// @notice Enumerate valid NFTs\\r\\n    /// @dev Throws if `_index` >= `totalSupply()`.\\r\\n    /// @param _index A counter less than `totalSupply()`\\r\\n    /// @return The token identifier for the `_index`th NFT,\\r\\n    ///  (sort order not specified)\\r\\n    function tokenByIndex(uint256 _index) external view returns (uint256);\\r\\n\\r\\n    /// @notice Enumerate NFTs assigned to an owner\\r\\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\\r\\n    ///  `_owner` is the zero address, representing invalid NFTs.\\r\\n    /// @param _owner An address where we are interested in NFTs owned by them\\r\\n    /// @param _index A counter less than `balanceOf(_owner)`\\r\\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\\r\\n    ///   (sort order not specified)\\r\\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x8091cd3dd3561fe90675780de7111f11430b7b6f9174cff8e9a8eaa4ab682aca\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"name()":{"notice":"A descriptive name for a collection of NFTs in this contract"},"symbol()":{"notice":"An abbreviated name for NFTs in this contract"},"tokenURI(uint256)":{"notice":"A distinct Uniform Resource Identifier (URI) for a given asset."}},"version":1}}},"@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol":{"IERC721TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"address","name":"_from","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol\":\"IERC721TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC721TokenReceiver {\\r\\n    function onERC721Received(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256 _tokenId,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xd466593f91b204a62802f199b0f99869b81f87807db088a52319c60ed7bd6080\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol":{"IMasterContract":{"abi":[{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"init","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{"init(bytes)":{"params":{"data":"Can be abi encoded arguments or anything else."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"init(bytes)":"4ddf47d4"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"init(bytes)\":{\"params\":{\"data\":\"Can be abi encoded arguments or anything else.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"init(bytes)\":{\"notice\":\"Init function that gets called from `BoringFactory.deploy`. Also kown as the constructor for cloned contracts. Any ETH send to `BoringFactory.deploy` ends up here.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol\":\"IMasterContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IMasterContract {\\r\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\r\\n    /// Also kown as the constructor for cloned contracts.\\r\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\r\\n    /// @param data Can be abi encoded arguments or anything else.\\r\\n    function init(bytes calldata data) external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0xdc1227c73bcaaf012c37ab85424909a4e900df34ecfcf9d090f7998e4d3aefe7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"init(bytes)":{"notice":"Init function that gets called from `BoringFactory.deploy`. Also kown as the constructor for cloned contracts. Any ETH send to `BoringFactory.deploy` ends up here."}},"version":1}}},"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol":{"Base64":{"abi":[],"devdoc":{"author":"Brecht Devos - <brecht@loopring.org>","kind":"dev","methods":{},"title":"Base64","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220b42ceb2083c96c0b08a26e4afb347584d84fc076da6e5e1814b94867e139463f64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0x2C 0xEB KECCAK256 DUP4 0xC9 PUSH13 0xB08A26E4AFB347584D84FC076 0xDA PUSH15 0x5E1814B94867E139463F64736F6C63 NUMBER STOP ADDMOD SLT STOP CALLER ","sourceMap":"267:2084:10:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220b42ceb2083c96c0b08a26e4afb347584d84fc076da6e5e1814b94867e139463f64736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0x2C 0xEB KECCAK256 DUP4 0xC9 PUSH13 0xB08A26E4AFB347584D84FC076 0xDA PUSH15 0x5E1814B94867E139463F64736F6C63 NUMBER STOP ADDMOD SLT STOP CALLER ","sourceMap":"267:2084:10:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"encode(bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Brecht Devos - <brecht@loopring.org>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Base64\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Provides functions for encoding/decoding base64\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\":\"Base64\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n// solhint-disable no-empty-blocks\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides functions for encoding/decoding base64\\r\\nlibrary Base64 {\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                // read 3 bytes\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n                case 1 {\\r\\n                    mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n                }\\r\\n                case 2 {\\r\\n                    mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n                }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf85defde09eac584631013ed63018550950e1de602103538806b611ed86aa5b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Provides functions for encoding/decoding base64","version":1}}},"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol":{"BoringAddress":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212200e8f9966736707b54158f726c0d30396c1ed248054ce4edcde02d982d8c5e45b64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE DUP16 SWAP10 PUSH7 0x736707B54158F7 0x26 0xC0 0xD3 SUB SWAP7 0xC1 0xED 0x24 DUP1 SLOAD 0xCE 0x4E 0xDC 0xDE MUL 0xD9 DUP3 0xD8 0xC5 0xE4 JUMPDEST PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"101:478:11:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212200e8f9966736707b54158f726c0d30396c1ed248054ce4edcde02d982d8c5e45b64736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE DUP16 SWAP10 PUSH7 0x736707B54158F7 0x26 0xC0 0xD3 SUB SWAP7 0xC1 0xED 0x24 DUP1 SLOAD 0xCE 0x4E 0xDC 0xDE MUL 0xD9 DUP3 0xD8 0xC5 0xE4 JUMPDEST PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"101:478:11:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"isContract(address)":"infinite","sendNative(address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\":\"BoringAddress\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\nlibrary BoringAddress {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function sendNative(address to, uint256 amount) internal {\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"BoringAddress: transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdcdf9c08bc41b6091e03d4bb44d6503bd084ae9d990277d0761ed6e1cdeefbb3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol":{"BoringERC20":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212209e1189b2465df64f1dc055dee4adb66779aacd9a9ef8f1a9ae76518f024d29e264736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 GT DUP10 0xB2 CHAINID 0x5D 0xF6 0x4F SAR 0xC0 SSTORE 0xDE 0xE4 0xAD 0xB6 PUSH8 0x79AACD9A9EF8F1A9 0xAE PUSH23 0x518F024D29E264736F6C63430008120033000000000000 ","sourceMap":"140:4409:12:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212209e1189b2465df64f1dc055dee4adb66779aacd9a9ef8f1a9ae76518f024d29e264736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 GT DUP10 0xB2 CHAINID 0x5D 0xF6 0x4F SAR 0xC0 SSTORE 0xDE 0xE4 0xAD 0xB6 PUSH8 0x79AACD9A9EF8F1A9 0xAE PUSH23 0x518F024D29E264736F6C63430008120033000000000000 ","sourceMap":"140:4409:12:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"returnDataToString(bytes memory)":"infinite","safeBalanceOf(contract IERC20,address)":"infinite","safeDecimals(contract IERC20)":"infinite","safeName(contract IERC20)":"infinite","safeSymbol(contract IERC20)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":\"BoringERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc7605391c07120ced6c1cca9d01abf39add948385828037a537b2d6b4c52f4a3\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to The address of the user to check.\\r\\n    /// @return amount The token amount.\\r\\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\\r\\n        require(success && data.length >= 32, \\\"BoringERC20: BalanceOf failed\\\");\\r\\n        amount = abi.decode(data, (uint256));\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1781055f2cd993ad2c58db7ea644b5d8017daf1f89e824cb5f47d8da10389722\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1184,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Counters.sol":{"Counters":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212201c8bd7202149d7e3374e4ba6bb744732f05c5a792932e4e5d8defdc85d9aede364736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHR DUP12 0xD7 KECCAK256 0x21 0x49 0xD7 0xE3 CALLDATACOPY 0x4E 0x4B 0xA6 0xBB PUSH21 0x4732F05C5A792932E4E5D8DEFDC85D9AEDE364736F PUSH13 0x63430008120033000000000000 ","sourceMap":"424:971:15:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212201c8bd7202149d7e3374e4ba6bb744732f05c5a792932e4e5d8defdc85d9aede364736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHR DUP12 0xD7 KECCAK256 0x21 0x49 0xD7 0xE3 CALLDATACOPY 0x4E 0x4B 0xA6 0xBB PUSH21 0x4732F05C5A792932E4E5D8DEFDC85D9AEDE364736F PUSH13 0x63430008120033000000000000 ","sourceMap":"424:971:15:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"current(struct Counters.Counter storage pointer)":"infinite","decrement(struct Counters.Counter storage pointer)":"infinite","increment(struct Counters.Counter storage pointer)":"infinite","reset(struct Counters.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122084143393a6ad5a934587723e919655da4d1eda8b30792b4ccc2d05547e8c800f64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP5 EQ CALLER SWAP4 0xA6 0xAD GAS SWAP4 GASLIMIT DUP8 PUSH19 0x3E919655DA4D1EDA8B30792B4CCC2D05547E8C DUP1 0xF PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"188:2065:16:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122084143393a6ad5a934587723e919655da4d1eda8b30792b4ccc2d05547e8c800f64736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP5 EQ CALLER SWAP4 0xA6 0xAD GAS SWAP4 GASLIMIT DUP8 PUSH19 0x3E919655DA4D1EDA8B30792B4CCC2D05547E8C DUP1 0xF PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"188:2065:16:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212200e6019b5acc838cf7d78e492a8fa9ebb02bdbd7ee7b498156112f950fbf538f364736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE PUSH1 0x19 0xB5 0xAC 0xC8 CODESIZE 0xCF PUSH30 0x78E492A8FA9EBB02BDBD7EE7B498156112F950FBF538F364736F6C634300 ADDMOD SLT STOP CALLER ","sourceMap":"369:8168:17:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212200e6019b5acc838cf7d78e492a8fa9ebb02bdbd7ee7b498156112f950fbf538f364736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE PUSH1 0x19 0xB5 0xAC 0xC8 CODESIZE 0xCF PUSH30 0x78E492A8FA9EBB02BDBD7EE7B498156112F950FBF538F364736F6C634300 ADDMOD SLT STOP CALLER ","sourceMap":"369:8168:17:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"EIP712":{"abi":[],"devdoc":{"details":"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._","kind":"dev","methods":{"constructor":{"details":"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212208c521f0823c8ec9961c889723f361326a13ee6d91e91c6fd2f160bebcb00026664736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 MSTORE 0x1F ADDMOD 0x23 0xC8 0xEC SWAP10 PUSH2 0xC889 PUSH19 0x3F361326A13EE6D91E91C6FD2F160BEBCB0002 PUSH7 0x64736F6C634300 ADDMOD SLT STOP CALLER ","sourceMap":"202:12302:19:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212208c521f0823c8ec9961c889723f361326a13ee6d91e91c6fd2f160bebcb00026664736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 MSTORE 0x1F ADDMOD 0x23 0xC8 0xEC SWAP10 PUSH2 0xC889 PUSH19 0x3F361326A13EE6D91E91C6FD2F160BEBCB0002 PUSH7 0x64736F6C634300 ADDMOD SLT STOP CALLER ","sourceMap":"202:12302:19:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Multicall/Multicall3.sol":{"Multicall3":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bool","name":"allowFailure","type":"bool"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct Multicall3.Call[]","name":"calls","type":"tuple[]"}],"name":"multicall","outputs":[{"components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bool","name":"allowFailure","type":"bool"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct Multicall3.CallValue[]","name":"calls","type":"tuple[]"}],"name":"multicallValue","outputs":[{"components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361090890816100618239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c9182636e5a9cbb1461006d5750508063715018a6146100685780638da5cb5b14610063578063e8bbf5d71461005e5763f2fde38b1461005957600080fd5b61038b565b6102c5565b61029e565b610248565b61007636610137565b829161008182610555565b9361008a6106f3565b50805b8381106100b2576100ae86886100a488341461079a565b51918291826101d1565b0390f35b6100bc81876105d4565b516101246101206100d66100d1858989610716565b610738565b9261011a86808d870151809c019b60606100f789516001600160a01b031690565b980151978851916020809a01915af161010e6106cd565b95830195865215158252565b51151590565b1590565b610131575060010161008d565b516107fa565b9060206003198301126101845760043567ffffffffffffffff9283821161018457806023830112156101845781600401359384116101845760248460051b83010111610184576024019190565b600080fd5b60005b83811061019c5750506000910152565b818101518382015260200161018c565b906020916101c581518092818552858086019101610189565b601f01601f1916010190565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610206575050505050505090565b909192939495968580610237600193603f1986820301885286838d51805115158452015191818582015201906101ac565b9901940194019295949391906101f5565b346101845760008060031936011261029b5761026261041c565b806001600160a01b038154811981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b346101845760003660031901126101845760206001600160a01b0360005416604051908152f35b6102ce36610137565b6102d781610555565b906102e06104d2565b9060009384835260209480868501526060604080950152805b83811061030d578451806100ae88826101d1565b61031781876105d4565b5161036a61012084808b61033461032f888c8c6105ed565b610675565b828c61034783516001600160a01b031690565b92015180519301915af19261011a61035d6106cd565b828d019081529415158252565b61013157506001016102f9565b35906001600160a01b038216820361018457565b34610184576020366003190112610184576004356001600160a01b038116808203610184576103b861041c565b156103c8576103c690610474565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6001600160a01b0360005416330361043057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600054906001600160a01b0380911691826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b634e487b7160e01b600052604160045260246000fd5b604051906060820182811067ffffffffffffffff8211176104f257604052565b6104bc565b604051906080820182811067ffffffffffffffff8211176104f257604052565b6040519190601f01601f1916820167ffffffffffffffff8111838210176104f257604052565b67ffffffffffffffff81116104f25760051b60200190565b906105676105628361053d565b610517565b8281528092610578601f199161053d565b016000805b82811061058a5750505050565b604090815182810181811067ffffffffffffffff8211176104f257602093528381528260608183015282870101520161057d565b634e487b7160e01b600052603260045260246000fd5b80518210156105e85760209160051b010190565b6105be565b91908110156105e85760051b81013590605e1981360301821215610184570190565b3590811515820361018457565b67ffffffffffffffff81116104f257601f01601f191660200190565b81601f82011215610184578035906106526105628361061c565b928284526020838301011161018457816000926020809301838601378301015290565b606081360312610184576106876104d2565b9061069181610377565b825261069f6020820161060f565b602083015260408101359067ffffffffffffffff8211610184576106c591369101610638565b604082015290565b3d156106ee573d906106e16105628361061c565b9182523d6000602084013e565b606090565b6106fb6104f7565b90600082526000602083015260006040830152606080830152565b91908110156105e85760051b81013590607e1981360301821215610184570190565b6080813603126101845761074a6104f7565b9061075481610377565b82526107626020820161060f565b60208301526040810135604083015260608101359067ffffffffffffffff82116101845761079291369101610638565b606082015290565b156107a157565b60405162461bcd60e51b815260206004820152601a60248201527f4d756c746963616c6c333a2076616c7565206d69736d617463680000000000006044820152606490fd5b9060206107f79281815201906101ac565b90565b604481511061088d576004810151810190602081602484019303126101845760248101519067ffffffffffffffff8211610184570190806043830112156101845760248201519161084d6105628461061c565b91838352604484830101116101845761088992610871916044602085019101610189565b60405162461bcd60e51b8152918291600483016107e6565b0390fd5b60405162461bcd60e51b815260206004820152600e60248201527f526561736f6e20756e6b6e6f776e0000000000000000000000000000000000006044820152606490fdfea2646970667358221220e6197064e2fda5f4a59f7febbccdc3e19a001168ece792406e99ed25fc1cc78164736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x5B JUMPI PUSH1 0x0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR DUP4 SSTORE SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP1 LOG3 PUSH2 0x908 SWAP1 DUP2 PUSH2 0x61 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6E5A9CBB EQ PUSH2 0x6D JUMPI POP POP DUP1 PUSH4 0x715018A6 EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x63 JUMPI DUP1 PUSH4 0xE8BBF5D7 EQ PUSH2 0x5E JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0x59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38B JUMP JUMPDEST PUSH2 0x2C5 JUMP JUMPDEST PUSH2 0x29E JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST PUSH2 0x76 CALLDATASIZE PUSH2 0x137 JUMP JUMPDEST DUP3 SWAP2 PUSH2 0x81 DUP3 PUSH2 0x555 JUMP JUMPDEST SWAP4 PUSH2 0x8A PUSH2 0x6F3 JUMP JUMPDEST POP DUP1 JUMPDEST DUP4 DUP2 LT PUSH2 0xB2 JUMPI PUSH2 0xAE DUP7 DUP9 PUSH2 0xA4 DUP9 CALLVALUE EQ PUSH2 0x79A JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1D1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xBC DUP2 DUP8 PUSH2 0x5D4 JUMP JUMPDEST MLOAD PUSH2 0x124 PUSH2 0x120 PUSH2 0xD6 PUSH2 0xD1 DUP6 DUP10 DUP10 PUSH2 0x716 JUMP JUMPDEST PUSH2 0x738 JUMP JUMPDEST SWAP3 PUSH2 0x11A DUP7 DUP1 DUP14 DUP8 ADD MLOAD DUP1 SWAP13 ADD SWAP12 PUSH1 0x60 PUSH2 0xF7 DUP10 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP9 ADD MLOAD SWAP8 DUP9 MLOAD SWAP2 PUSH1 0x20 DUP1 SWAP11 ADD SWAP2 GAS CALL PUSH2 0x10E PUSH2 0x6CD JUMP JUMPDEST SWAP6 DUP4 ADD SWAP6 DUP7 MSTORE ISZERO ISZERO DUP3 MSTORE JUMP JUMPDEST MLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x131 JUMPI POP PUSH1 0x1 ADD PUSH2 0x8D JUMP JUMPDEST MLOAD PUSH2 0x7FA JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x184 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0x184 JUMPI DUP1 PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x184 JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP4 DUP5 GT PUSH2 0x184 JUMPI PUSH1 0x24 DUP5 PUSH1 0x5 SHL DUP4 ADD ADD GT PUSH2 0x184 JUMPI PUSH1 0x24 ADD SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x19C JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x18C JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x1C5 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x189 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 SWAP3 MSTORE PUSH1 0x40 SWAP3 DUP4 DUP2 ADD DUP3 DUP6 DUP6 PUSH1 0x5 SHL DUP5 ADD ADD SWAP7 ADD SWAP5 PUSH1 0x0 SWAP3 JUMPDEST DUP6 DUP5 LT PUSH2 0x206 JUMPI POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 DUP6 DUP1 PUSH2 0x237 PUSH1 0x1 SWAP4 PUSH1 0x3F NOT DUP7 DUP3 SUB ADD DUP9 MSTORE DUP7 DUP4 DUP14 MLOAD DUP1 MLOAD ISZERO ISZERO DUP5 MSTORE ADD MLOAD SWAP2 DUP2 DUP6 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x1AC JUMP JUMPDEST SWAP10 ADD SWAP5 ADD SWAP5 ADD SWAP3 SWAP6 SWAP5 SWAP4 SWAP2 SWAP1 PUSH2 0x1F5 JUMP JUMPDEST CALLVALUE PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x29B JUMPI PUSH2 0x262 PUSH2 0x41C JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 SLOAD DUP2 NOT DUP2 AND DUP4 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x184 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x184 JUMPI PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x0 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x2CE CALLDATASIZE PUSH2 0x137 JUMP JUMPDEST PUSH2 0x2D7 DUP2 PUSH2 0x555 JUMP JUMPDEST SWAP1 PUSH2 0x2E0 PUSH2 0x4D2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP4 DUP5 DUP4 MSTORE PUSH1 0x20 SWAP5 DUP1 DUP7 DUP6 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP1 SWAP6 ADD MSTORE DUP1 JUMPDEST DUP4 DUP2 LT PUSH2 0x30D JUMPI DUP5 MLOAD DUP1 PUSH2 0xAE DUP9 DUP3 PUSH2 0x1D1 JUMP JUMPDEST PUSH2 0x317 DUP2 DUP8 PUSH2 0x5D4 JUMP JUMPDEST MLOAD PUSH2 0x36A PUSH2 0x120 DUP5 DUP1 DUP12 PUSH2 0x334 PUSH2 0x32F DUP9 DUP13 DUP13 PUSH2 0x5ED JUMP JUMPDEST PUSH2 0x675 JUMP JUMPDEST DUP3 DUP13 PUSH2 0x347 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP3 ADD MLOAD DUP1 MLOAD SWAP4 ADD SWAP2 GAS CALL SWAP3 PUSH2 0x11A PUSH2 0x35D PUSH2 0x6CD JUMP JUMPDEST DUP3 DUP14 ADD SWAP1 DUP2 MSTORE SWAP5 ISZERO ISZERO DUP3 MSTORE JUMP JUMPDEST PUSH2 0x131 JUMPI POP PUSH1 0x1 ADD PUSH2 0x2F9 JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x184 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x184 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x184 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP3 SUB PUSH2 0x184 JUMPI PUSH2 0x3B8 PUSH2 0x41C JUMP JUMPDEST ISZERO PUSH2 0x3C8 JUMPI PUSH2 0x3C6 SWAP1 PUSH2 0x474 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x0 SLOAD AND CALLER SUB PUSH2 0x430 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x0 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP2 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND OR PUSH1 0x0 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x4F2 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x4BC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x80 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x4F2 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP4 DUP3 LT OR PUSH2 0x4F2 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F2 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x567 PUSH2 0x562 DUP4 PUSH2 0x53D JUMP JUMPDEST PUSH2 0x517 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x578 PUSH1 0x1F NOT SWAP2 PUSH2 0x53D JUMP JUMPDEST ADD PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT PUSH2 0x58A JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x40 SWAP1 DUP2 MLOAD DUP3 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x4F2 JUMPI PUSH1 0x20 SWAP4 MSTORE DUP4 DUP2 MSTORE DUP3 PUSH1 0x60 DUP2 DUP4 ADD MSTORE DUP3 DUP8 ADD ADD MSTORE ADD PUSH2 0x57D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x5BE JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x5E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x184 JUMPI ADD SWAP1 JUMP JUMPDEST CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x184 JUMPI JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F2 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x184 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x652 PUSH2 0x562 DUP4 PUSH2 0x61C JUMP JUMPDEST SWAP3 DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x184 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 CALLDATASIZE SUB SLT PUSH2 0x184 JUMPI PUSH2 0x687 PUSH2 0x4D2 JUMP JUMPDEST SWAP1 PUSH2 0x691 DUP2 PUSH2 0x377 JUMP JUMPDEST DUP3 MSTORE PUSH2 0x69F PUSH1 0x20 DUP3 ADD PUSH2 0x60F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x184 JUMPI PUSH2 0x6C5 SWAP2 CALLDATASIZE SWAP2 ADD PUSH2 0x638 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x6EE JUMPI RETURNDATASIZE SWAP1 PUSH2 0x6E1 PUSH2 0x562 DUP4 PUSH2 0x61C JUMP JUMPDEST SWAP2 DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH2 0x6FB PUSH2 0x4F7 JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x7E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x184 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 DUP2 CALLDATASIZE SUB SLT PUSH2 0x184 JUMPI PUSH2 0x74A PUSH2 0x4F7 JUMP JUMPDEST SWAP1 PUSH2 0x754 DUP2 PUSH2 0x377 JUMP JUMPDEST DUP3 MSTORE PUSH2 0x762 PUSH1 0x20 DUP3 ADD PUSH2 0x60F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x184 JUMPI PUSH2 0x792 SWAP2 CALLDATASIZE SWAP2 ADD PUSH2 0x638 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x7A1 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D756C746963616C6C333A2076616C7565206D69736D61746368000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x7F7 SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x1AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x44 DUP2 MLOAD LT PUSH2 0x88D JUMPI PUSH1 0x4 DUP2 ADD MLOAD DUP2 ADD SWAP1 PUSH1 0x20 DUP2 PUSH1 0x24 DUP5 ADD SWAP4 SUB SLT PUSH2 0x184 JUMPI PUSH1 0x24 DUP2 ADD MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x184 JUMPI ADD SWAP1 DUP1 PUSH1 0x43 DUP4 ADD SLT ISZERO PUSH2 0x184 JUMPI PUSH1 0x24 DUP3 ADD MLOAD SWAP2 PUSH2 0x84D PUSH2 0x562 DUP5 PUSH2 0x61C JUMP JUMPDEST SWAP2 DUP4 DUP4 MSTORE PUSH1 0x44 DUP5 DUP4 ADD ADD GT PUSH2 0x184 JUMPI PUSH2 0x889 SWAP3 PUSH2 0x871 SWAP2 PUSH1 0x44 PUSH1 0x20 DUP6 ADD SWAP2 ADD PUSH2 0x189 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 SWAP2 PUSH1 0x4 DUP4 ADD PUSH2 0x7E6 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526561736F6E20756E6B6E6F776E000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 NOT PUSH17 0x64E2FDA5F4A59F7FEBBCCDC3E19A001168 0xEC 0xE7 SWAP3 BLOCKHASH PUSH15 0x99ED25FC1CC78164736F6C63430008 SLT STOP CALLER ","sourceMap":"1335:2675:20:-:0;;;;;;;2525:6:13;1335:2675:20;;719:10:14;-1:-1:-1;;;;;;1335:2675:20;;;;;;719:10:14;-1:-1:-1;;;;;1335:2675:20;;;;2573:40:13;;2525:6;2573:40;1335:2675:20;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":887,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_struct_CallValue_calldata_dyn_calldata":{"entryPoint":311,"id":null,"parameterSlots":1,"returnSlots":2},"abi_decode_bool":{"entryPoint":1551,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes":{"entryPoint":1592,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_struct_Result_dyn":{"entryPoint":465,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":428,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":2022,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_and_zero_memory_array_array_struct_Result_dyn":{"entryPoint":1365,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_and_zero_memory_struct_struct_CallValue":{"entryPoint":1779,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory":{"entryPoint":1303,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_2926":{"entryPoint":1234,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory_2938":{"entryPoint":1271,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_array_struct_Result_dyn":{"entryPoint":1341,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":1564,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_array_index_access_struct_CallValue_calldata_dyn_calldata":{"entryPoint":1814,"id":null,"parameterSlots":3,"returnSlots":1},"calldata_array_index_access_struct_Call_calldata_dyn_calldata":{"entryPoint":1517,"id":null,"parameterSlots":3,"returnSlots":1},"cleanup_address":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_bool":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"convert_struct_CallValue_calldata_to_struct_CallValue":{"entryPoint":1848,"id":null,"parameterSlots":1,"returnSlots":1},"convert_struct_Call_calldata_to_struct_Call":{"entryPoint":1653,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":393,"id":null,"parameterSlots":3,"returnSlots":0},"external_fun_multicall":{"entryPoint":709,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_owner":{"entryPoint":670,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_renounceOwnership":{"entryPoint":584,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_transferOwnership":{"entryPoint":907,"id":null,"parameterSlots":0,"returnSlots":0},"extract_returndata":{"entryPoint":1741,"id":null,"parameterSlots":0,"returnSlots":1},"fun_checkOwner":{"entryPoint":1052,"id":1231,"parameterSlots":0,"returnSlots":0},"fun_getRevertMsg":{"entryPoint":2042,"id":3175,"parameterSlots":1,"returnSlots":0},"fun_transferOwnership":{"entryPoint":1140,"id":1288,"parameterSlots":1,"returnSlots":0},"memory_array_index_access_struct_Result_dyn":{"entryPoint":1492,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x32":{"entryPoint":1470,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1212,"id":null,"parameterSlots":0,"returnSlots":0},"require_helper_stringliteral_52d1":{"entryPoint":1946,"id":null,"parameterSlots":1,"returnSlots":0},"write_to_memory_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"604060808152600436101561001357600080fd5b600090813560e01c9182636e5a9cbb1461006d5750508063715018a6146100685780638da5cb5b14610063578063e8bbf5d71461005e5763f2fde38b1461005957600080fd5b61038b565b6102c5565b61029e565b610248565b61007636610137565b829161008182610555565b9361008a6106f3565b50805b8381106100b2576100ae86886100a488341461079a565b51918291826101d1565b0390f35b6100bc81876105d4565b516101246101206100d66100d1858989610716565b610738565b9261011a86808d870151809c019b60606100f789516001600160a01b031690565b980151978851916020809a01915af161010e6106cd565b95830195865215158252565b51151590565b1590565b610131575060010161008d565b516107fa565b9060206003198301126101845760043567ffffffffffffffff9283821161018457806023830112156101845781600401359384116101845760248460051b83010111610184576024019190565b600080fd5b60005b83811061019c5750506000910152565b818101518382015260200161018c565b906020916101c581518092818552858086019101610189565b601f01601f1916010190565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610206575050505050505090565b909192939495968580610237600193603f1986820301885286838d51805115158452015191818582015201906101ac565b9901940194019295949391906101f5565b346101845760008060031936011261029b5761026261041c565b806001600160a01b038154811981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b346101845760003660031901126101845760206001600160a01b0360005416604051908152f35b6102ce36610137565b6102d781610555565b906102e06104d2565b9060009384835260209480868501526060604080950152805b83811061030d578451806100ae88826101d1565b61031781876105d4565b5161036a61012084808b61033461032f888c8c6105ed565b610675565b828c61034783516001600160a01b031690565b92015180519301915af19261011a61035d6106cd565b828d019081529415158252565b61013157506001016102f9565b35906001600160a01b038216820361018457565b34610184576020366003190112610184576004356001600160a01b038116808203610184576103b861041c565b156103c8576103c690610474565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6001600160a01b0360005416330361043057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600054906001600160a01b0380911691826001600160a01b0319821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b634e487b7160e01b600052604160045260246000fd5b604051906060820182811067ffffffffffffffff8211176104f257604052565b6104bc565b604051906080820182811067ffffffffffffffff8211176104f257604052565b6040519190601f01601f1916820167ffffffffffffffff8111838210176104f257604052565b67ffffffffffffffff81116104f25760051b60200190565b906105676105628361053d565b610517565b8281528092610578601f199161053d565b016000805b82811061058a5750505050565b604090815182810181811067ffffffffffffffff8211176104f257602093528381528260608183015282870101520161057d565b634e487b7160e01b600052603260045260246000fd5b80518210156105e85760209160051b010190565b6105be565b91908110156105e85760051b81013590605e1981360301821215610184570190565b3590811515820361018457565b67ffffffffffffffff81116104f257601f01601f191660200190565b81601f82011215610184578035906106526105628361061c565b928284526020838301011161018457816000926020809301838601378301015290565b606081360312610184576106876104d2565b9061069181610377565b825261069f6020820161060f565b602083015260408101359067ffffffffffffffff8211610184576106c591369101610638565b604082015290565b3d156106ee573d906106e16105628361061c565b9182523d6000602084013e565b606090565b6106fb6104f7565b90600082526000602083015260006040830152606080830152565b91908110156105e85760051b81013590607e1981360301821215610184570190565b6080813603126101845761074a6104f7565b9061075481610377565b82526107626020820161060f565b60208301526040810135604083015260608101359067ffffffffffffffff82116101845761079291369101610638565b606082015290565b156107a157565b60405162461bcd60e51b815260206004820152601a60248201527f4d756c746963616c6c333a2076616c7565206d69736d617463680000000000006044820152606490fd5b9060206107f79281815201906101ac565b90565b604481511061088d576004810151810190602081602484019303126101845760248101519067ffffffffffffffff8211610184570190806043830112156101845760248201519161084d6105628461061c565b91838352604484830101116101845761088992610871916044602085019101610189565b60405162461bcd60e51b8152918291600483016107e6565b0390fd5b60405162461bcd60e51b815260206004820152600e60248201527f526561736f6e20756e6b6e6f776e0000000000000000000000000000000000006044820152606490fdfea2646970667358221220e6197064e2fda5f4a59f7febbccdc3e19a001168ece792406e99ed25fc1cc78164736f6c63430008120033","opcodes":"PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6E5A9CBB EQ PUSH2 0x6D JUMPI POP POP DUP1 PUSH4 0x715018A6 EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x63 JUMPI DUP1 PUSH4 0xE8BBF5D7 EQ PUSH2 0x5E JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0x59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38B JUMP JUMPDEST PUSH2 0x2C5 JUMP JUMPDEST PUSH2 0x29E JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST PUSH2 0x76 CALLDATASIZE PUSH2 0x137 JUMP JUMPDEST DUP3 SWAP2 PUSH2 0x81 DUP3 PUSH2 0x555 JUMP JUMPDEST SWAP4 PUSH2 0x8A PUSH2 0x6F3 JUMP JUMPDEST POP DUP1 JUMPDEST DUP4 DUP2 LT PUSH2 0xB2 JUMPI PUSH2 0xAE DUP7 DUP9 PUSH2 0xA4 DUP9 CALLVALUE EQ PUSH2 0x79A JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1D1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xBC DUP2 DUP8 PUSH2 0x5D4 JUMP JUMPDEST MLOAD PUSH2 0x124 PUSH2 0x120 PUSH2 0xD6 PUSH2 0xD1 DUP6 DUP10 DUP10 PUSH2 0x716 JUMP JUMPDEST PUSH2 0x738 JUMP JUMPDEST SWAP3 PUSH2 0x11A DUP7 DUP1 DUP14 DUP8 ADD MLOAD DUP1 SWAP13 ADD SWAP12 PUSH1 0x60 PUSH2 0xF7 DUP10 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP9 ADD MLOAD SWAP8 DUP9 MLOAD SWAP2 PUSH1 0x20 DUP1 SWAP11 ADD SWAP2 GAS CALL PUSH2 0x10E PUSH2 0x6CD JUMP JUMPDEST SWAP6 DUP4 ADD SWAP6 DUP7 MSTORE ISZERO ISZERO DUP3 MSTORE JUMP JUMPDEST MLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x131 JUMPI POP PUSH1 0x1 ADD PUSH2 0x8D JUMP JUMPDEST MLOAD PUSH2 0x7FA JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x184 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0x184 JUMPI DUP1 PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x184 JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP4 DUP5 GT PUSH2 0x184 JUMPI PUSH1 0x24 DUP5 PUSH1 0x5 SHL DUP4 ADD ADD GT PUSH2 0x184 JUMPI PUSH1 0x24 ADD SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x19C JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x18C JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x1C5 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x189 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 SWAP3 MSTORE PUSH1 0x40 SWAP3 DUP4 DUP2 ADD DUP3 DUP6 DUP6 PUSH1 0x5 SHL DUP5 ADD ADD SWAP7 ADD SWAP5 PUSH1 0x0 SWAP3 JUMPDEST DUP6 DUP5 LT PUSH2 0x206 JUMPI POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 DUP6 DUP1 PUSH2 0x237 PUSH1 0x1 SWAP4 PUSH1 0x3F NOT DUP7 DUP3 SUB ADD DUP9 MSTORE DUP7 DUP4 DUP14 MLOAD DUP1 MLOAD ISZERO ISZERO DUP5 MSTORE ADD MLOAD SWAP2 DUP2 DUP6 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x1AC JUMP JUMPDEST SWAP10 ADD SWAP5 ADD SWAP5 ADD SWAP3 SWAP6 SWAP5 SWAP4 SWAP2 SWAP1 PUSH2 0x1F5 JUMP JUMPDEST CALLVALUE PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x29B JUMPI PUSH2 0x262 PUSH2 0x41C JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 SLOAD DUP2 NOT DUP2 AND DUP4 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x184 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x184 JUMPI PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x0 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x2CE CALLDATASIZE PUSH2 0x137 JUMP JUMPDEST PUSH2 0x2D7 DUP2 PUSH2 0x555 JUMP JUMPDEST SWAP1 PUSH2 0x2E0 PUSH2 0x4D2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP4 DUP5 DUP4 MSTORE PUSH1 0x20 SWAP5 DUP1 DUP7 DUP6 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP1 SWAP6 ADD MSTORE DUP1 JUMPDEST DUP4 DUP2 LT PUSH2 0x30D JUMPI DUP5 MLOAD DUP1 PUSH2 0xAE DUP9 DUP3 PUSH2 0x1D1 JUMP JUMPDEST PUSH2 0x317 DUP2 DUP8 PUSH2 0x5D4 JUMP JUMPDEST MLOAD PUSH2 0x36A PUSH2 0x120 DUP5 DUP1 DUP12 PUSH2 0x334 PUSH2 0x32F DUP9 DUP13 DUP13 PUSH2 0x5ED JUMP JUMPDEST PUSH2 0x675 JUMP JUMPDEST DUP3 DUP13 PUSH2 0x347 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP3 ADD MLOAD DUP1 MLOAD SWAP4 ADD SWAP2 GAS CALL SWAP3 PUSH2 0x11A PUSH2 0x35D PUSH2 0x6CD JUMP JUMPDEST DUP3 DUP14 ADD SWAP1 DUP2 MSTORE SWAP5 ISZERO ISZERO DUP3 MSTORE JUMP JUMPDEST PUSH2 0x131 JUMPI POP PUSH1 0x1 ADD PUSH2 0x2F9 JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x184 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x184 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x184 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 DUP3 SUB PUSH2 0x184 JUMPI PUSH2 0x3B8 PUSH2 0x41C JUMP JUMPDEST ISZERO PUSH2 0x3C8 JUMPI PUSH2 0x3C6 SWAP1 PUSH2 0x474 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x0 SLOAD AND CALLER SUB PUSH2 0x430 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x0 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP2 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND OR PUSH1 0x0 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x4F2 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x4BC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x80 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x4F2 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP4 DUP3 LT OR PUSH2 0x4F2 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F2 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x567 PUSH2 0x562 DUP4 PUSH2 0x53D JUMP JUMPDEST PUSH2 0x517 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x578 PUSH1 0x1F NOT SWAP2 PUSH2 0x53D JUMP JUMPDEST ADD PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT PUSH2 0x58A JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x40 SWAP1 DUP2 MLOAD DUP3 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x4F2 JUMPI PUSH1 0x20 SWAP4 MSTORE DUP4 DUP2 MSTORE DUP3 PUSH1 0x60 DUP2 DUP4 ADD MSTORE DUP3 DUP8 ADD ADD MSTORE ADD PUSH2 0x57D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x5BE JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x5E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x184 JUMPI ADD SWAP1 JUMP JUMPDEST CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x184 JUMPI JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F2 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x184 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x652 PUSH2 0x562 DUP4 PUSH2 0x61C JUMP JUMPDEST SWAP3 DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x184 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 CALLDATASIZE SUB SLT PUSH2 0x184 JUMPI PUSH2 0x687 PUSH2 0x4D2 JUMP JUMPDEST SWAP1 PUSH2 0x691 DUP2 PUSH2 0x377 JUMP JUMPDEST DUP3 MSTORE PUSH2 0x69F PUSH1 0x20 DUP3 ADD PUSH2 0x60F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x184 JUMPI PUSH2 0x6C5 SWAP2 CALLDATASIZE SWAP2 ADD PUSH2 0x638 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x6EE JUMPI RETURNDATASIZE SWAP1 PUSH2 0x6E1 PUSH2 0x562 DUP4 PUSH2 0x61C JUMP JUMPDEST SWAP2 DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH2 0x6FB PUSH2 0x4F7 JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x7E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x184 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 DUP2 CALLDATASIZE SUB SLT PUSH2 0x184 JUMPI PUSH2 0x74A PUSH2 0x4F7 JUMP JUMPDEST SWAP1 PUSH2 0x754 DUP2 PUSH2 0x377 JUMP JUMPDEST DUP3 MSTORE PUSH2 0x762 PUSH1 0x20 DUP3 ADD PUSH2 0x60F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x184 JUMPI PUSH2 0x792 SWAP2 CALLDATASIZE SWAP2 ADD PUSH2 0x638 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x7A1 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D756C746963616C6C333A2076616C7565206D69736D61746368000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x7F7 SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x1AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x44 DUP2 MLOAD LT PUSH2 0x88D JUMPI PUSH1 0x4 DUP2 ADD MLOAD DUP2 ADD SWAP1 PUSH1 0x20 DUP2 PUSH1 0x24 DUP5 ADD SWAP4 SUB SLT PUSH2 0x184 JUMPI PUSH1 0x24 DUP2 ADD MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x184 JUMPI ADD SWAP1 DUP1 PUSH1 0x43 DUP4 ADD SLT ISZERO PUSH2 0x184 JUMPI PUSH1 0x24 DUP3 ADD MLOAD SWAP2 PUSH2 0x84D PUSH2 0x562 DUP5 PUSH2 0x61C JUMP JUMPDEST SWAP2 DUP4 DUP4 MSTORE PUSH1 0x44 DUP5 DUP4 ADD ADD GT PUSH2 0x184 JUMPI PUSH2 0x889 SWAP3 PUSH2 0x871 SWAP2 PUSH1 0x44 PUSH1 0x20 DUP6 ADD SWAP2 ADD PUSH2 0x189 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 SWAP2 PUSH1 0x4 DUP4 ADD PUSH2 0x7E6 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x526561736F6E20756E6B6E6F776E000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE6 NOT PUSH17 0x64E2FDA5F4A59F7FEBBCCDC3E19A001168 0xEC 0xE7 SWAP3 BLOCKHASH PUSH15 0x99ED25FC1CC78164736F6C63430008 SLT STOP CALLER ","sourceMap":"1335:2675:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;2485:22;2571:20;;;;:::i;:::-;1335:2675;;;:::i;:::-;;2640:13;2655:10;;;;;;1335:2675;3442:9;;3434:66;3442:9;;:27;3434:66;:::i;:::-;1335:2675;;;;;;:::i;:::-;;;;2640:13;2707;;;;:::i;:::-;;3197:15;1335:2675;2735:16;2743:8;;;;;:::i;:::-;2735:16;:::i;:::-;2780:11;3063:115;2780:11;;;;;1335:2675;;;;;3149:14;1335:2675;;;-1:-1:-1;;;;;1335:2675:20;;;;3149:14;;;3101:77;;;;;;;;;;;;;:::i;:::-;3080:17;;;3063:115;;;1335:2675;;;;;3063:115;1335:2675;;;;;;3197:15;;1335:2675;3197:15;3193:88;;1335:2675;;;2640:13;;3193:88;3247:17;;:::i;1335:2675::-;;;-1:-1:-1;;1335:2675:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;1335:2675:20;;;;;;;;;;-1:-1:-1;;1335:2675:20;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;1335:2675:20;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;1063:62:13;;:::i;:::-;1335:2675:20;-1:-1:-1;;;;;1335:2675:20;;;;;;;;;2573:40:13;;;;1335:2675:20;;;;;;;;;;;-1:-1:-1;;1335:2675:20;;;;;-1:-1:-1;;;;;1335:2675:20;;;;;;;;;;;;;:::i;:::-;1868:20;;;:::i;:::-;1335:2675;;;:::i;:::-;-1:-1:-1;;1335:2675:20;;;;;;;;;;;;;;;;;1932:13;1947:10;;;;;;1335:2675;;;;;;;:::i;1932:13::-;1999;;;;:::i;:::-;;2182:15;1335:2675;2035:8;;;2027:16;2035:8;;;;;:::i;:::-;2027:16;:::i;:::-;1335:2675;;;;;-1:-1:-1;;;;;1335:2675:20;;;;2134:14;;;2098:65;;;;;;;;2060:103;2098:65;;:::i;:::-;2077:17;;;2060:103;;;1335:2675;;;;;;2182:15;2178:88;;1335:2675;;;1932:13;;1335:2675;;;-1:-1:-1;;;;;1335:2675:20;;;;;;:::o;:::-;;;;;;-1:-1:-1;;1335:2675:20;;;;;;-1:-1:-1;;;;;1335:2675:20;;;;;;;1063:62:13;;:::i;:::-;2169:22;1335:2675:20;;2263:8:13;;;:::i;:::-;1335:2675:20;;;;-1:-1:-1;;;1335:2675:20;;;;;;;;;;;;;;;;;-1:-1:-1;;;1335:2675:20;;;;;;;1359:130:13;-1:-1:-1;;;;;1273:6:13;1335:2675:20;;719:10:14;1422:23:13;1335:2675:20;;1359:130:13:o;1335:2675:20:-;;;;;;;;;;;;;;;;;;;;;;;;;2433:187:13;2525:6;1335:2675:20;;-1:-1:-1;;;;;1335:2675:20;;;;;-1:-1:-1;;;;;1335:2675:20;;;;2525:6:13;1335:2675:20;;2573:40:13;2525:6;2573:40;;2433:187::o;1335:2675:20:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;1335:2675:20;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;:::-;;-1:-1:-1;1335:2675:20;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;1335:2675:20;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;1335:2675:20;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;1335:2675:20;;;;:::o;:::-;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;1335:2675:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;3516:491::-;3759:2;1335:2675;;3738:23;3734:53;;3800:107;;;1335:2675;3924:33;;;;;;;;1335:2675;;;;;3924:33;;;1335:2675;;;;;;;;;;;;;;;;;3924:33;1335:2675;;;;;;;;:::i;:::-;;;;;3759:2;1335:2675;;;;;;;3917:41;1335:2675;;;3759:2;3924:33;1335:2675;;;;;:::i;:::-;;;-1:-1:-1;;;3917:41:20;;1335:2675;;;3800:107;3917:41;;;:::i;:::-;;;;3734:53;1335:2675;;-1:-1:-1;;;3763:24:20;;1335:2675;3763:24;;;1335:2675;;;;;;;3759:2;1335:2675;;;;;3763:24"},"gasEstimates":{"creation":{"codeDepositCost":"462400","executionCost":"26286","totalCost":"488686"},"external":{"multicall((address,bool,bytes)[])":"infinite","multicallValue((address,bool,uint256,bytes)[])":"infinite","owner()":"2340","renounceOwnership()":"28090","transferOwnership(address)":"28269"},"internal":{"_getRevertMsg(bytes memory)":"infinite"}},"methodIdentifiers":{"multicall((address,bool,bytes)[])":"e8bbf5d7","multicallValue((address,bool,uint256,bytes)[])":"6e5a9cbb","owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicall\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.CallValue[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicallValue\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall3.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Multicall/Multicall3.sol\":\"Multicall3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Multicall/Multicall3.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/*\\r\\n\\r\\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____        \\r\\n _\\\\///////\\\\\\\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/////\\\\\\\\\\\\///______/\\\\\\\\\\\\///\\\\\\\\\\\\________/\\\\\\\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__       \\r\\n  _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_      \\r\\n   _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\/\\\\\\\\\\\\______/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_     \\r\\n    _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\/////////________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \\r\\n     _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_________________\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_   \\r\\n      _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_________________\\\\/\\\\\\\\\\\\______\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\_____\\\\///\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\///\\\\\\\\\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_ \\r\\n        _______\\\\///________\\\\///________\\\\///__\\\\///______________\\\\///////////_______\\\\/////_____________\\\\/////////__\\\\///________\\\\///__\\r\\n\\r\\n*/\\r\\n\\r\\ncontract Multicall3 is Ownable {\\r\\n    struct Call {\\r\\n        address target;\\r\\n        bool allowFailure;\\r\\n        bytes callData;\\r\\n    }\\r\\n\\r\\n    struct CallValue {\\r\\n        address target;\\r\\n        bool allowFailure;\\r\\n        uint256 value;\\r\\n        bytes callData;\\r\\n    }\\r\\n\\r\\n    struct Result {\\r\\n        bool success;\\r\\n        bytes returnData;\\r\\n    }\\r\\n\\r\\n    function multicall(\\r\\n        Call[] calldata calls\\r\\n    ) public payable returns (Result[] memory returnData) {\\r\\n        uint256 length = calls.length;\\r\\n        returnData = new Result[](length);\\r\\n        Call memory calli;\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            Result memory result = returnData[i];\\r\\n            calli = calls[i];\\r\\n\\r\\n            (result.success, result.returnData) = calli.target.call(\\r\\n                calli.callData\\r\\n            );\\r\\n            if (!result.success) {\\r\\n                _getRevertMsg(result.returnData);\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function multicallValue(\\r\\n        CallValue[] calldata calls\\r\\n    ) public payable returns (Result[] memory returnData) {\\r\\n        uint256 valAccumulator;\\r\\n        uint256 length = calls.length;\\r\\n        returnData = new Result[](length);\\r\\n        CallValue memory calli;\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            Result memory result = returnData[i];\\r\\n            calli = calls[i];\\r\\n            uint256 val = calli.value;\\r\\n            // Humanity will be a Type V Kardashev Civilization before this overflows - andreas\\r\\n            // ~ 10^25 Wei in existence << ~ 10^76 size uint fits in a uint256\\r\\n            unchecked {\\r\\n                valAccumulator += val;\\r\\n            }\\r\\n            (result.success, result.returnData) = calli.target.call{value: val}(\\r\\n                calli.callData\\r\\n            );\\r\\n            if (!result.success) {\\r\\n                _getRevertMsg(result.returnData);\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        // Finally, make sure the msg.value = SUM(call[0...i].value)\\r\\n        require(msg.value == valAccumulator, \\\"Multicall3: value mismatch\\\");\\r\\n    }\\r\\n\\r\\n    function _getRevertMsg(bytes memory _returnData) private pure {\\r\\n        // If the _res length is less than 68, then\\r\\n        // the transaction failed with custom error or silently (without a revert message)\\r\\n        if (_returnData.length < 68) revert(\\\"Reason unknown\\\");\\r\\n\\r\\n        assembly {\\r\\n            // Slice the sighash.\\r\\n            _returnData := add(_returnData, 0x04)\\r\\n        }\\r\\n        revert(abi.decode(_returnData, (string))); // All that remains is the revert string\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe1fd773513383a18315331da191c2a4fe35908f8c5ce1d7ab7c98701676f5333\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1184,"contract":"contracts/Multicall/Multicall3.sol:Multicall3","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Swapper/MultiSwapper.sol":{"MultiSwapper":{"abi":[{"inputs":[{"internalType":"address","name":"_factory","type":"address"},{"internalType":"contract YieldBox","name":"_yieldBox","type":"address"},{"internalType":"bytes32","name":"_pairCodeHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"tokenOutId","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"},{"internalType":"bytes","name":"dexData","type":"bytes"}],"name":"getInputAmount","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenInId","type":"uint256"},{"internalType":"uint256","name":"shareIn","type":"uint256"},{"internalType":"bytes","name":"dexData","type":"bytes"}],"name":"getOutputAmount","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenInId","type":"uint256"},{"internalType":"uint256","name":"tokenOutId","type":"uint256"},{"internalType":"uint256","name":"shareIn","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"bytes","name":"dexData","type":"bytes"}],"name":"swap","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"constructor":{"params":{"_factory":"UniswapV2Factory address","_pairCodeHash":"UniswapV2 pair code hash","_yieldBox":"YieldBox address"}},"getInputAmount(uint256,uint256,bytes)":{"details":"dexData examples:     - for UniV2, it should contain address[] swapPath","params":{"dexData":"Custom DEX data for query execution","shareOut":"Shares out to compute the amount for","tokenOutId":"YieldBox asset id"}},"getOutputAmount(uint256,uint256,bytes)":{"details":"dexData examples:     - for UniV2, it should contain address[] swapPath","params":{"dexData":"Custom DEX data for query execution","shareIn":"Shares to get the amount for","tokenInId":"YieldBox asset id"}},"swap(uint256,uint256,uint256,address,uint256,bytes)":{"details":"returns both amount and sharesdexData examples:     - for UniV2, it should contain address[] swapPath","params":{"amountOutMin":"Minimum amount to be received","dexData":"Custom DEX data for query execution","shareIn":"Shares to be swapped","to":"Receiver address","tokenInId":"YieldBox asset id","tokenOutId":"YieldBox asset id"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0xE0 CALLVALUE PUSH2 0xF8 JUMPI PUSH1 0x1F PUSH2 0x1430 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0xFD JUMPI DUP1 DUP5 SWAP3 PUSH1 0x60 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0xF8 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP4 AND DUP4 SUB PUSH2 0xF8 JUMPI PUSH1 0x20 DUP2 ADD MLOAD SWAP2 DUP3 AND DUP3 SUB PUSH2 0xF8 JUMPI PUSH1 0x40 ADD MLOAD SWAP2 PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE PUSH1 0xC0 MSTORE PUSH1 0x40 MLOAD PUSH2 0x131C SWAP1 DUP2 PUSH2 0x114 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH1 0xC6 ADD MSTORE DUP2 DUP2 PUSH2 0x430 ADD MSTORE DUP2 DUP2 PUSH2 0x4EE ADD MSTORE DUP2 DUP2 PUSH2 0x681 ADD MSTORE DUP2 DUP2 PUSH2 0x6CB ADD MSTORE PUSH2 0xB1A ADD MSTORE PUSH1 0xA0 MLOAD DUP2 DUP2 DUP2 PUSH1 0x92 ADD MSTORE DUP2 DUP2 PUSH2 0x3D6 ADD MSTORE DUP2 DUP2 PUSH2 0x857 ADD MSTORE DUP2 DUP2 PUSH2 0x8E9 ADD MSTORE PUSH2 0xAC0 ADD MSTORE PUSH1 0xC0 MLOAD DUP2 DUP2 DUP2 PUSH1 0xE8 ADD MSTORE DUP2 DUP2 PUSH2 0x40D ADD MSTORE DUP2 DUP2 PUSH2 0x4BD ADD MSTORE DUP2 DUP2 PUSH2 0x64F ADD MSTORE DUP2 DUP2 PUSH2 0x6A9 ADD MSTORE PUSH2 0xAF8 ADD MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x532BB192 EQ PUSH2 0xA7F JUMPI DUP1 PUSH4 0x55A68E10 EQ PUSH2 0x344 JUMPI PUSH4 0xC6FE9549 EQ PUSH2 0x3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x32C JUMPI PUSH2 0x5A PUSH2 0x4E CALLDATASIZE PUSH2 0xBBC JUMP JUMPDEST DUP2 SWAP5 SWAP3 SWAP4 SWAP5 ADD SWAP1 PUSH2 0xC2D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 PUSH4 0x442C1599 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 SWAP2 DUP3 DUP5 ADD MSTORE PUSH1 0x44 SWAP1 PUSH1 0x0 DUP3 DUP6 ADD MSTORE PUSH1 0x20 SWAP3 PUSH1 0x64 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP8 DUP7 DUP2 DUP5 PUSH32 0x0 AND GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0x338 JUMPI PUSH1 0x0 SWAP8 PUSH2 0x304 JUMPI JUMPDEST POP PUSH32 0x0 SWAP5 PUSH32 0x0 PUSH2 0x115 PUSH1 0x2 DUP8 MLOAD LT ISZERO PUSH2 0xE7E JUMP JUMPDEST PUSH2 0x11F DUP7 MLOAD PUSH2 0xECA JUMP JUMPDEST SWAP7 DUP8 MLOAD SWAP10 PUSH1 0x0 NOT SWAP11 DUP12 DUP2 ADD SWAP1 DUP2 GT PUSH2 0x2EF JUMPI PUSH2 0x13B SWAP1 DUP11 PUSH2 0xCC4 JUMP JUMPDEST MSTORE DUP7 MLOAD DUP11 DUP2 ADD SWAP1 DUP2 GT PUSH2 0x210 JUMPI DUP1 JUMPDEST PUSH2 0x161 JUMPI DUP10 PUSH2 0x158 DUP11 PUSH2 0xCB7 JUMP JUMPDEST MLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP11 DUP2 ADD DUP2 DUP2 GT PUSH2 0x2EF JUMPI PUSH2 0x191 DUP5 DUP11 DUP9 PUSH2 0x188 DUP7 DUP3 PUSH2 0x180 DUP9 DUP7 PUSH2 0xCC4 JUMP JUMPDEST MLOAD AND SWAP4 PUSH2 0xCC4 JUMP JUMPDEST MLOAD AND SWAP1 DUP7 PUSH2 0x10C7 JUMP JUMPDEST PUSH2 0x19B DUP5 DUP14 PUSH2 0xCC4 JUMP JUMPDEST MLOAD SWAP2 DUP3 ISZERO PUSH2 0x285 JUMPI PUSH2 0x1C2 DUP4 DUP3 PUSH2 0x1C7 SWAP4 ISZERO ISZERO DUP1 PUSH2 0x27C JUMPI JUMPDEST PUSH2 0x1BD SWAP1 PUSH2 0x1194 JUMP JUMPDEST PUSH2 0x12A9 JUMP JUMPDEST PUSH2 0x1226 JUMP JUMPDEST SWAP2 DUP2 SUB SWAP1 DUP2 GT PUSH2 0x267 JUMPI SWAP1 PUSH2 0x1DE PUSH2 0x1E4 SWAP3 PUSH2 0x128A JUMP JUMPDEST SWAP1 PUSH2 0x1206 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD SWAP2 DUP3 DUP2 GT PUSH2 0x267 JUMPI DUP3 LT PUSH2 0x225 JUMPI PUSH2 0x201 SWAP1 DUP12 PUSH2 0xCC4 JUMP JUMPDEST MSTORE DUP1 ISZERO PUSH2 0x210 JUMPI DUP11 ADD DUP1 PUSH2 0x14A JUMP JUMPDEST DUP7 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP14 SWAP1 MSTORE PUSH1 0x14 DUP2 DUP12 ADD MSTORE PUSH32 0x64732D6D6174682D6164642D6F766572666C6F77000000000000000000000000 DUP2 DUP11 ADD MSTORE DUP7 SWAP1 REVERT JUMPDEST DUP10 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST POP DUP5 ISZERO ISZERO PUSH2 0x1B4 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP14 SWAP1 MSTORE PUSH1 0x2C DUP2 DUP12 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F4F DUP2 DUP11 ADD MSTORE PUSH32 0x55545055545F414D4F554E540000000000000000000000000000000000000000 DUP2 DUP9 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP8 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST SWAP1 SWAP7 POP DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x331 JUMPI JUMPDEST PUSH2 0x31C DUP2 DUP4 PUSH2 0xBF3 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x32C JUMPI MLOAD SWAP6 CODESIZE PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x312 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x32C JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x32C JUMPI PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x32C JUMPI PUSH1 0xA4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x32C JUMPI PUSH2 0x38B PUSH2 0x393 SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xB8E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xC2D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH4 0x11A5CC77 PUSH1 0xE3 SHL DUP3 MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x84 DUP4 ADD MSTORE PUSH1 0x40 DUP3 PUSH1 0xA4 DUP2 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x338 JUMPI PUSH1 0x0 SWAP3 PUSH2 0xA5D JUMPI JUMPDEST POP PUSH2 0x454 PUSH32 0x0 DUP3 DUP5 PUSH32 0x0 PUSH2 0xEFC JUMP JUMPDEST SWAP3 DUP4 MLOAD DUP1 PUSH1 0x0 NOT DUP2 ADD GT PUSH2 0x7EA JUMPI PUSH2 0x470 SWAP1 PUSH1 0x0 NOT ADD DUP6 PUSH2 0xCC4 JUMP JUMPDEST MLOAD SWAP3 PUSH1 0x84 CALLDATALOAD DUP5 LT PUSH2 0xA18 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x48C DUP5 PUSH2 0xCB7 JUMP JUMPDEST MLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x49F DUP6 PUSH2 0xCB7 JUMP JUMPDEST MLOAD AND SWAP1 DUP5 MLOAD PUSH1 0x1 LT ISZERO PUSH2 0xA02 JUMPI PUSH1 0x0 SWAP3 DUP4 PUSH2 0x547 PUSH2 0x555 PUSH2 0x512 DUP4 SWAP7 PUSH32 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP14 ADD MLOAD AND SWAP1 PUSH32 0x0 PUSH2 0xDDC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 SWAP2 DUP3 SWAP1 PUSH1 0x64 DUP3 ADD SWAP1 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0xBF3 JUMP JUMPDEST MLOAD SWAP3 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x9FB JUMPI RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7BC JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x587 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP4 PUSH2 0xBF3 JUMP JUMPDEST DUP2 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY JUMPDEST DUP2 PUSH2 0x9CC JUMPI JUMPDEST POP ISZERO PUSH2 0x987 JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0x7EA JUMPI DUP2 LT ISZERO PUSH2 0x81B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x5C8 DUP3 DUP6 PUSH2 0xCC4 JUMP JUMPDEST MLOAD AND SWAP1 PUSH1 0x1 DUP2 ADD DUP2 GT PUSH2 0x7EA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x5EA PUSH1 0x1 DUP4 ADD DUP7 PUSH2 0xCC4 JUMP JUMPDEST MLOAD AND SWAP2 PUSH2 0x5F7 DUP4 DUP3 PUSH2 0xD15 JUMP JUMPDEST POP SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x60E PUSH1 0x1 DUP6 ADD DUP11 PUSH2 0xCC4 JUMP JUMPDEST MLOAD SWAP5 AND DUP3 SUB PUSH2 0x813 JUMPI PUSH1 0x0 SWAP4 SWAP2 JUMPDEST DUP7 MLOAD DUP1 PUSH1 0x1 NOT DUP2 ADD GT PUSH2 0x7EA JUMPI PUSH1 0x1 NOT ADD DUP5 LT ISZERO PUSH2 0x800 JUMPI PUSH1 0x2 DUP5 ADD DUP5 GT PUSH2 0x7EA JUMPI PUSH2 0x6EF PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x6A5 PUSH32 0x0 DUP5 PUSH2 0x67C PUSH1 0x2 DUP11 ADD DUP14 PUSH2 0xCC4 JUMP JUMPDEST MLOAD AND DUP7 PUSH32 0x0 PUSH2 0xDDC JUMP JUMPDEST SWAP4 JUMPDEST PUSH32 0x0 SWAP2 PUSH32 0x0 PUSH2 0xDDC JUMP JUMPDEST AND SWAP2 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x20 DUP2 ADD LT PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x20 DUP6 ADD GT OR PUSH2 0x7BC JUMPI PUSH1 0x20 DUP4 ADD PUSH1 0x40 MSTORE PUSH1 0x0 DUP4 MSTORE DUP4 EXTCODESIZE ISZERO PUSH2 0x32C JUMPI PUSH1 0x40 MLOAD PUSH4 0x22C0D9F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x24 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x44 DUP6 ADD MSTORE PUSH1 0x80 PUSH1 0x64 DUP6 ADD MSTORE DUP1 MLOAD PUSH1 0x84 DUP6 ADD DUP2 SWAP1 MSTORE DUP5 SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x7D2 JUMPI POP POP SWAP2 DUP2 PUSH1 0x0 PUSH1 0xA4 DUP3 DUP7 DUP4 DUP4 DUP2 SWAP10 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x338 JUMPI PUSH2 0x7A1 JUMPI JUMPDEST PUSH2 0x79C SWAP2 POP PUSH2 0xD06 JUMP JUMPDEST PUSH2 0x5A1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x7BC JUMPI PUSH2 0x79C SWAP2 PUSH1 0x40 MSTORE PUSH2 0x792 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP3 DUP3 ADD DUP2 ADD MLOAD PUSH1 0xA4 DUP10 DUP5 ADD ADD MSTORE DUP8 SWAP5 POP ADD PUSH2 0x760 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x6EF PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 ADDRESS SWAP4 PUSH2 0x6A7 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x61C JUMP JUMPDEST POP SWAP3 POP DUP1 MLOAD SWAP1 PUSH1 0x0 NOT DUP3 ADD SWAP2 DUP3 GT PUSH2 0x7EA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x83F SWAP2 PUSH2 0xCC4 JUMP JUMPDEST MLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE SWAP2 PUSH1 0x20 SWAP2 DUP4 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 PUSH1 0x0 SWAP2 AND GAS CALL DUP1 ISZERO PUSH2 0x338 JUMPI PUSH2 0x958 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 MLOAD SWAP3 PUSH4 0x4D4D7CBD PUSH1 0xE1 SHL DUP5 MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x4 DUP6 ADD MSTORE ADDRESS PUSH1 0x24 DUP6 ADD MSTORE AND PUSH1 0x44 DUP4 ADD MSTORE DUP1 PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP4 ADD MSTORE PUSH1 0x40 DUP3 PUSH1 0xA4 DUP2 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS CALL DUP1 ISZERO PUSH2 0x338 JUMPI PUSH1 0x40 SWAP3 PUSH1 0x0 SWAP2 PUSH2 0x929 JUMPI JUMPDEST POP DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST PUSH2 0x949 SWAP2 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x951 JUMPI JUMPDEST PUSH2 0x941 DUP2 DUP4 PUSH2 0xBF3 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xCD8 JUMP JUMPDEST SWAP1 POP DUP4 PUSH2 0x91C JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x937 JUMP JUMPDEST PUSH2 0x979 SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x980 JUMPI JUMPDEST PUSH2 0x971 DUP2 DUP4 PUSH2 0xBF3 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xCEE JUMP JUMPDEST POP DUP3 PUSH2 0x89F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x967 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E73666572206661696C656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP1 ISZERO SWAP3 POP DUP3 ISZERO PUSH2 0x9E1 JUMPI JUMPDEST POP POP DUP6 PUSH2 0x598 JUMP JUMPDEST PUSH2 0x9F4 SWAP3 POP PUSH1 0x20 DUP1 SWAP2 DUP4 ADD ADD SWAP2 ADD PUSH2 0xCEE JUMP JUMPDEST DUP6 DUP1 PUSH2 0x9D9 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x592 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E742D616D6F756E742D6F7574000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0xA77 SWAP2 SWAP3 POP PUSH1 0x40 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x951 JUMPI PUSH2 0x941 DUP2 DUP4 PUSH2 0xBF3 JUMP JUMPDEST POP SWAP1 DUP4 PUSH2 0x407 JUMP JUMPDEST CALLVALUE PUSH2 0x32C JUMPI PUSH2 0xA90 PUSH2 0x4E CALLDATASIZE PUSH2 0xBBC JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH4 0x442C1599 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x20 DUP3 PUSH1 0x64 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x338 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xB59 JUMPI JUMPDEST PUSH2 0xB3E SWAP3 POP PUSH32 0x0 SWAP2 PUSH32 0x0 PUSH2 0xEFC JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 NOT DUP2 ADD SWAP2 SWAP1 DUP3 GT PUSH2 0x7EA JUMPI PUSH1 0x20 SWAP2 PUSH2 0x158 SWAP2 PUSH2 0xCC4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0xB86 JUMPI JUMPDEST DUP2 PUSH2 0xB73 PUSH1 0x20 SWAP4 DUP4 PUSH2 0xBF3 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x32C JUMPI PUSH2 0xB3E SWAP2 MLOAD SWAP1 PUSH2 0xAF1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xB66 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x32C JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x32C JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x32C JUMPI JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x32C JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x32C JUMPI PUSH2 0xBEF SWAP2 PUSH1 0x4 ADD PUSH2 0xB8E JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7BC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7BC JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 DUP2 DUP5 SUB SLT PUSH2 0x32C JUMPI DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x32C JUMPI ADD SWAP2 DUP1 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x32C JUMPI DUP3 CALLDATALOAD PUSH2 0xC63 DUP2 PUSH2 0xC15 JUMP JUMPDEST SWAP4 PUSH2 0xC71 PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0xBF3 JUMP JUMPDEST DUP2 DUP6 MSTORE DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x32C JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xC98 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x32C JUMPI DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0xC8A JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0xA02 JUMPI PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0xA02 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x32C JUMPI PUSH1 0x20 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x32C JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x32C JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x7EA JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP5 AND DUP4 DUP3 AND DUP2 DUP2 EQ PUSH2 0xD89 JUMPI LT ISZERO PUSH2 0xD84 JUMPI SWAP3 JUMPDEST SWAP2 DUP4 AND ISZERO PUSH2 0xD3F JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A205A45524F5F414444524553530000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0xD35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A204944454E544943414C5F41444452 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x4553534553 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0xDE6 SWAP2 PUSH2 0xD15 JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP6 DUP7 DUP1 SWAP3 PUSH1 0x60 SHL AND DUP5 MSTORE PUSH1 0x60 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x60 DUP2 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP6 DUP3 DUP6 LT DUP8 DUP7 GT OR PUSH2 0x7BC JUMPI PUSH1 0xE0 SWAP4 DUP6 PUSH1 0x40 MSTORE DUP4 MLOAD SWAP1 KECCAK256 SWAP1 PUSH1 0x80 DUP5 ADD SWAP7 PUSH1 0xFF PUSH1 0xF8 SHL DUP9 MSTORE PUSH1 0x60 SHL AND PUSH1 0x81 DUP5 ADD MSTORE PUSH1 0x95 DUP4 ADD MSTORE PUSH1 0xB5 DUP3 ADD MSTORE PUSH1 0x55 DUP4 MSTORE ADD SWAP3 DUP2 DUP5 LT SWAP1 DUP5 GT OR PUSH2 0x7BC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 AND SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xE85 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E56414C49445F504154480000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xED4 DUP3 PUSH2 0xC15 JUMP JUMPDEST PUSH2 0xEE1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0xBF3 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0xEF2 PUSH1 0x1F NOT SWAP2 PUSH2 0xC15 JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0xF0F PUSH1 0x2 DUP4 MLOAD LT ISZERO PUSH2 0xE7E JUMP JUMPDEST PUSH2 0xF19 DUP3 MLOAD PUSH2 0xECA JUMP JUMPDEST SWAP3 PUSH2 0xF23 DUP5 PUSH2 0xCB7 JUMP JUMPDEST MSTORE PUSH1 0x0 JUMPDEST DUP3 MLOAD PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0x7EA JUMPI DUP2 LT ISZERO PUSH2 0x10A5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH2 0xF50 DUP3 DUP7 PUSH2 0xCC4 JUMP JUMPDEST MLOAD AND PUSH1 0x1 DUP3 ADD SWAP3 DUP4 DUP4 GT PUSH2 0x7EA JUMPI PUSH2 0xF77 SWAP2 DUP6 SWAP2 PUSH2 0xF6E DUP7 DUP10 PUSH2 0xCC4 JUMP JUMPDEST MLOAD AND SWAP1 DUP11 PUSH2 0x10C7 JUMP JUMPDEST PUSH2 0xF84 DUP4 DUP9 SWAP6 SWAP4 SWAP6 PUSH2 0xCC4 JUMP JUMPDEST MLOAD DUP1 ISZERO PUSH2 0x103A JUMPI PUSH2 0xFB3 PUSH2 0xFAC PUSH2 0xFB9 SWAP3 DUP8 ISZERO ISZERO DUP1 PUSH2 0x1031 JUMPI JUMPDEST PUSH2 0xFA7 SWAP1 PUSH2 0x1194 JUMP JUMPDEST PUSH2 0x128A JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x12A9 JUMP JUMPDEST SWAP5 PUSH2 0x1226 JUMP JUMPDEST SWAP1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0x7EA JUMPI DUP2 LT PUSH2 0xFEC JUMPI PUSH2 0xFDA PUSH2 0xFE1 SWAP2 PUSH2 0xFE7 SWAP6 PUSH2 0x1206 JUMP JUMPDEST SWAP2 DUP8 PUSH2 0xCC4 JUMP JUMPDEST MSTORE PUSH2 0xD06 JUMP JUMPDEST PUSH2 0xF27 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x64732D6D6174682D6164642D6F766572666C6F77000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP DUP5 ISZERO ISZERO PUSH2 0xF9E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F49 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x4E5055545F414D4F554E54000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP POP POP SWAP2 POP JUMP JUMPDEST MLOAD SWAP1 PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x32C JUMPI JUMP JUMPDEST PUSH1 0x60 DUP3 SWAP2 PUSH2 0x10EE PUSH1 0x4 SWAP6 SWAP7 PUSH2 0x10DC DUP9 DUP7 PUSH2 0xD15 JUMP JUMPDEST POP SWAP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 SWAP5 PUSH2 0xDDC JUMP JUMPDEST AND PUSH1 0x40 MLOAD SWAP5 DUP6 DUP1 SWAP3 PUSH4 0x240BC6B PUSH1 0xE2 SHL DUP3 MSTORE GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x338 JUMPI PUSH1 0x0 SWAP1 DUP2 SWAP5 PUSH2 0x1139 JUMPI JUMPDEST POP DUP2 SWAP1 PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND SWAP5 AND SWAP5 AND SWAP2 AND EQ PUSH1 0x0 EQ PUSH2 0xBEF JUMPI SWAP2 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP5 RETURNDATASIZE DUP3 GT PUSH2 0x118C JUMPI JUMPDEST DUP2 PUSH2 0x1153 PUSH1 0x60 SWAP4 DUP4 PUSH2 0xBF3 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1189 JUMPI PUSH2 0x1164 DUP5 PUSH2 0x10AC JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH2 0x1173 PUSH1 0x20 DUP8 ADD PUSH2 0x10AC JUMP JUMPDEST SWAP6 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND SUB PUSH2 0x1189 JUMPI POP DUP2 PUSH2 0x1113 JUMP JUMPDEST DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1146 JUMP JUMPDEST ISZERO PUSH2 0x119B JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F4C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x4951554944495459000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x1210 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x3E8 SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV DUP2 EQ DUP3 ISZERO OR ISZERO PUSH2 0x7EA JUMPI DUP4 DIV SUB PUSH2 0x1245 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x64732D6D6174682D6D756C2D6F766572666C6F77000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x3E5 SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV DUP2 EQ DUP3 ISZERO OR ISZERO PUSH2 0x7EA JUMPI DUP4 DIV SUB PUSH2 0x1245 JUMPI JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 DUP1 ISZERO SWAP2 DUP3 ISZERO PUSH2 0x12C0 JUMPI JUMPDEST POP POP ISZERO PUSH2 0x1245 JUMPI JUMP JUMPDEST DUP1 DUP3 MUL SWAP5 POP SWAP2 POP DUP2 ISZERO DUP3 DUP6 DIV DUP3 EQ OR ISZERO PUSH2 0x7EA JUMPI PUSH2 0x12DE SWAP1 DUP5 PUSH2 0x1206 JUMP JUMPDEST EQ CODESIZE DUP1 PUSH2 0x12B7 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB PUSH10 0xF0264317D9B9869EC03 SWAP11 0xF9 0xB6 SWAP5 JUMPDEST SWAP7 0x28 0xE7 JUMPI 0xD4 JUMPI 0xE5 0xCF ADDMOD MOD 0x2F DUP9 PUSH29 0x221C64736F6C6343000812003300000000000000000000000000000000 ","sourceMap":"511:6065:21:-:0;;;;;;;;;;;;;-1:-1:-1;;511:6065:21;;;;-1:-1:-1;;;;;511:6065:21;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;511:6065:21;;;;;;;;;;;;;;;;;;;;;;1075:18;;;511:6065;1104:20;1135:28;;511:6065;;;;;;;;1075:18;511:6065;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1135:28;511:6065;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;511:6065:21;;;;;;-1:-1:-1;511:6065:21;;;;;-1:-1:-1;511:6065:21"},"deployedBytecode":{"functionDebugData":{"abi_decode_array_address_dyn":{"entryPoint":3117,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":3310,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":2958,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_uint112_fromMemory":{"entryPoint":4268,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_uint256t_uint256_fromMemory":{"entryPoint":3288,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_uint256t_uint256t_bytes_calldata":{"entryPoint":3004,"id":null,"parameterSlots":1,"returnSlots":4},"abi_encode_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_and_zero_memory_array_array_uint256_dyn":{"entryPoint":3786,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_address_dyn":{"entryPoint":3093,"id":null,"parameterSlots":1,"returnSlots":1},"checked_div_uint256":{"entryPoint":4614,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":3059,"id":null,"parameterSlots":2,"returnSlots":0},"fun_getAmountsOut":{"entryPoint":3836,"id":4399,"parameterSlots":4,"returnSlots":1},"fun_getReserves":{"entryPoint":4295,"id":4156,"parameterSlots":4,"returnSlots":2},"fun_mul":{"entryPoint":4777,"id":4001,"parameterSlots":2,"returnSlots":1},"fun_mul_10494":{"entryPoint":4646,"id":4001,"parameterSlots":1,"returnSlots":1},"fun_mul_10495":{"entryPoint":4746,"id":4001,"parameterSlots":1,"returnSlots":1},"fun_pairFor":{"entryPoint":3548,"id":4103,"parameterSlots":4,"returnSlots":1},"fun_sortTokens":{"entryPoint":3349,"id":4053,"parameterSlots":2,"returnSlots":2},"increment_uint256":{"entryPoint":3334,"id":null,"parameterSlots":1,"returnSlots":1},"memory_array_index_access_uint256_dyn":{"entryPoint":3268,"id":null,"parameterSlots":2,"returnSlots":1},"memory_array_index_access_uint256_dyn_10487":{"entryPoint":3255,"id":null,"parameterSlots":1,"returnSlots":1},"require_helper_stringliteral":{"entryPoint":3710,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_7e8d":{"entryPoint":4500,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"immutableReferences":{"3193":[{"length":32,"start":198},{"length":32,"start":1072},{"length":32,"start":1262},{"length":32,"start":1665},{"length":32,"start":1739},{"length":32,"start":2842}],"3196":[{"length":32,"start":146},{"length":32,"start":982},{"length":32,"start":2135},{"length":32,"start":2281},{"length":32,"start":2752}],"3198":[{"length":32,"start":232},{"length":32,"start":1037},{"length":32,"start":1213},{"length":32,"start":1615},{"length":32,"start":1705},{"length":32,"start":2808}]},"linkReferences":{},"object":"6080604052600436101561001257600080fd5b60003560e01c8063532bb19214610a7f57806355a68e10146103445763c6fe95491461003d57600080fd5b3461032c5761005a61004e36610bbc565b81949293940190610c2d565b6040519263442c159960e01b84526004840152602491828401526044906000828501526020926064926001600160a01b0385878681847f0000000000000000000000000000000000000000000000000000000000000000165afa96871561033857600097610304575b507f0000000000000000000000000000000000000000000000000000000000000000947f0000000000000000000000000000000000000000000000000000000000000000610115600287511015610e7e565b61011f8651610eca565b968751996000199a8b81019081116102ef5761013b908a610cc4565b5286518a810190811161021057805b61016157896101588a610cb7565b51604051908152f35b8a81018181116102ef57610191848a8861018886826101808886610cc4565b511693610cc4565b511690866110c7565b61019b848d610cc4565b51918215610285576101c283826101c79315158061027c575b6101bd90611194565b6112a9565b611226565b91810390811161026757906101de6101e49261128a565b90611206565b90600182019182811161026757821061022557610201908b610cc4565b528015610210578a018061014a565b86634e487b7160e01b60005260116004526000fd5b60405162461bcd60e51b8152600481018d90526014818b01527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000818a01528690fd5b89634e487b7160e01b60005260116004526000fd5b508415156101b4565b505060405162461bcd60e51b8152600481018d9052602c818b01527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f818a01527f55545055545f414d4f554e54000000000000000000000000000000000000000081880152608490fd5b87634e487b7160e01b60005260116004526000fd5b9096508581813d8311610331575b61031c8183610bf3565b8101031261032c575195386100c3565b600080fd5b503d610312565b6040513d6000823e3d90fd5b3461032c5760c036600319011261032c576064356001600160a01b038116810361032c5760a43567ffffffffffffffff811161032c5761038b610393913690600401610b8e565b810190610c2d565b604051906311a5cc7760e31b8252600435600483015230602483015230604483015260006064830152604435608483015260408260a48160006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af191821561033857600092610a5d575b506104547f000000000000000000000000000000000000000000000000000000000000000082847f0000000000000000000000000000000000000000000000000000000000000000610efc565b928351806000198101116107ea57610470906000190185610cc4565b51926084358410610a18576001600160a01b0361048c84610cb7565b51166001600160a01b0361049f85610cb7565b511690845160011015610a02576000928361054761055561051283967f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b0360408d015116907f0000000000000000000000000000000000000000000000000000000000000000610ddc565b60405163a9059cbb60e01b602082019081526001600160a01b0390921660248201526044810195909552939182906064820190565b03601f198101835282610bf3565b51925af13d156109fb573d67ffffffffffffffff81116107bc5760405190610587601f8201601f191660200183610bf3565b81523d6000602083013e5b816109cc575b50156109875760005b825160001981019081116107ea5781101561081b576001600160a01b036105c88285610cc4565b5116906001810181116107ea576001600160a01b036105ea6001830186610cc4565b5116916105f78382610d15565b50926001600160a01b0361060e600185018a610cc4565b519416820361081357600093915b8651806001198101116107ea5760011901841015610800576002840184116107ea576106ef6001600160a01b03916106a57f00000000000000000000000000000000000000000000000000000000000000008461067c60028a018d610cc4565b5116867f0000000000000000000000000000000000000000000000000000000000000000610ddc565b935b7f0000000000000000000000000000000000000000000000000000000000000000917f0000000000000000000000000000000000000000000000000000000000000000610ddc565b16916040519182602081011067ffffffffffffffff6020850111176107bc576020830160405260008352833b1561032c5760405163022c0d9f60e01b8152600481019690965260248601919091526001600160a01b0316604485015260806064850152805160848501819052849160005b8281106107d25750509181600060a482868383819984010152601f801991011681010301925af18015610338576107a1575b61079c9150610d06565b6105a1565b67ffffffffffffffff82116107bc5761079c91604052610792565b634e487b7160e01b600052604160045260246000fd5b602082820181015160a4898401015287945001610760565b634e487b7160e01b600052601160045260246000fd5b6106ef6001600160a01b039130936106a7565b60009161061c565b50925080519060001982019182116107ea576001600160a01b039161083f91610cc4565b5160405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152602481018490529160209183916044918391600091165af1801561033857610958575b506001600160a01b0360405192634d4d7cbd60e11b845260243560048501523060248501521660448301528060648301526000608483015260408260a48160006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af1801561033857604092600091610929575b5082519182526020820152f35b6109499150833d8511610951575b6109418183610bf3565b810190610cd8565b90508361091c565b503d610937565b6109799060203d602011610980575b6109718183610bf3565b810190610cee565b508261089f565b503d610967565b60405162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c6564000000006044820152606490fd5b80518015925082156109e1575b505085610598565b6109f49250602080918301019101610cee565b85806109d9565b6060610592565b634e487b7160e01b600052603260045260246000fd5b60405162461bcd60e51b815260206004820152601760248201527f696e73756666696369656e742d616d6f756e742d6f75740000000000000000006044820152606490fd5b610a7791925060403d604011610951576109418183610bf3565b509083610407565b3461032c57610a9061004e36610bbc565b906040519263442c159960e01b845260048401526024830152600060448301526020826064816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa90811561033857600091610b59575b610b3e92507f0000000000000000000000000000000000000000000000000000000000000000917f0000000000000000000000000000000000000000000000000000000000000000610efc565b80516000198101919082116107ea5760209161015891610cc4565b90506020823d8211610b86575b81610b7360209383610bf3565b8101031261032c57610b3e915190610af1565b3d9150610b66565b9181601f8401121561032c5782359167ffffffffffffffff831161032c576020838186019501011161032c57565b606060031982011261032c5760043591602435916044359067ffffffffffffffff821161032c57610bef91600401610b8e565b9091565b90601f8019910116810190811067ffffffffffffffff8211176107bc57604052565b67ffffffffffffffff81116107bc5760051b60200190565b602090818184031261032c5780359067ffffffffffffffff821161032c57019180601f8401121561032c578235610c6381610c15565b93610c716040519586610bf3565b818552838086019260051b82010192831161032c578301905b828210610c98575050505090565b81356001600160a01b038116810361032c578152908301908301610c8a565b805115610a025760200190565b8051821015610a025760209160051b010190565b919082604091031261032c576020825192015190565b9081602091031261032c5751801515810361032c5790565b60001981146107ea5760010190565b90916001600160a01b0391828416838216818114610d89571015610d8457925b91831615610d3f57565b60405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606490fd5b610d35565b60405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b6064820152608490fd5b91610de691610d15565b929060405160208101916bffffffffffffffffffffffff199586809260601b16845260601b16603482015260288152606081019267ffffffffffffffff95828510878611176107bc5760e093856040528351902090608084019660ff60f81b885260601b166081840152609583015260b5820152605583520192818410908411176107bc576001600160a01b03926040525190201690565b15610e8557565b60405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f5041544800006044820152606490fd5b90610ed482610c15565b610ee16040519182610bf3565b8281528092610ef2601f1991610c15565b0190602036910137565b9392919091610f0f600283511015610e7e565b610f198251610eca565b92610f2384610cb7565b5260005b825160001981019081116107ea578110156110a5576001600160a01b039081610f508286610cc4565b511660018201928383116107ea57610f77918591610f6e8689610cc4565b5116908a6110c7565b610f848388959395610cc4565b51801561103a57610fb3610fac610fb99287151580611031575b610fa790611194565b61128a565b92836112a9565b94611226565b908101908181116107ea578110610fec57610fda610fe191610fe795611206565b9187610cc4565b52610d06565b610f27565b60405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606490fd5b50841515610f9e565b60405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152608490fd5b5050509150565b51906dffffffffffffffffffffffffffff8216820361032c57565b606082916110ee600495966110dc8886610d15565b50976001600160a01b03958694610ddc565b1660405194858092630240bc6b60e21b82525afa928315610338576000908194611139575b5081906dffffffffffffffffffffffffffff80911694169416911614600014610bef5791565b93506060843d821161118c575b8161115360609383610bf3565b8101031261118957611164846110ac565b906040611173602087016110ac565b95015163ffffffff811603611189575081611113565b80fd5b3d9150611146565b1561119b57565b60405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f49515549444954590000000000000000000000000000000000000000000000006064820152608490fd5b8115611210570490565b634e487b7160e01b600052601260045260246000fd5b906103e891828102928184048114821517156107ea5783040361124557565b60405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f770000000000000000000000006044820152606490fd5b906103e591828102928184048114821517156107ea5783040361124557565b6000929180159182156112c0575b50501561124557565b808202945091508115828504821417156107ea576112de9084611206565b1438806112b756fea2646970667358221220db690f0264317d9b9869ec039af9b6945b9628e757d457e5cf08062f887c221c64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x532BB192 EQ PUSH2 0xA7F JUMPI DUP1 PUSH4 0x55A68E10 EQ PUSH2 0x344 JUMPI PUSH4 0xC6FE9549 EQ PUSH2 0x3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x32C JUMPI PUSH2 0x5A PUSH2 0x4E CALLDATASIZE PUSH2 0xBBC JUMP JUMPDEST DUP2 SWAP5 SWAP3 SWAP4 SWAP5 ADD SWAP1 PUSH2 0xC2D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP3 PUSH4 0x442C1599 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 SWAP2 DUP3 DUP5 ADD MSTORE PUSH1 0x44 SWAP1 PUSH1 0x0 DUP3 DUP6 ADD MSTORE PUSH1 0x20 SWAP3 PUSH1 0x64 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP8 DUP7 DUP2 DUP5 PUSH32 0x0 AND GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0x338 JUMPI PUSH1 0x0 SWAP8 PUSH2 0x304 JUMPI JUMPDEST POP PUSH32 0x0 SWAP5 PUSH32 0x0 PUSH2 0x115 PUSH1 0x2 DUP8 MLOAD LT ISZERO PUSH2 0xE7E JUMP JUMPDEST PUSH2 0x11F DUP7 MLOAD PUSH2 0xECA JUMP JUMPDEST SWAP7 DUP8 MLOAD SWAP10 PUSH1 0x0 NOT SWAP11 DUP12 DUP2 ADD SWAP1 DUP2 GT PUSH2 0x2EF JUMPI PUSH2 0x13B SWAP1 DUP11 PUSH2 0xCC4 JUMP JUMPDEST MSTORE DUP7 MLOAD DUP11 DUP2 ADD SWAP1 DUP2 GT PUSH2 0x210 JUMPI DUP1 JUMPDEST PUSH2 0x161 JUMPI DUP10 PUSH2 0x158 DUP11 PUSH2 0xCB7 JUMP JUMPDEST MLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP11 DUP2 ADD DUP2 DUP2 GT PUSH2 0x2EF JUMPI PUSH2 0x191 DUP5 DUP11 DUP9 PUSH2 0x188 DUP7 DUP3 PUSH2 0x180 DUP9 DUP7 PUSH2 0xCC4 JUMP JUMPDEST MLOAD AND SWAP4 PUSH2 0xCC4 JUMP JUMPDEST MLOAD AND SWAP1 DUP7 PUSH2 0x10C7 JUMP JUMPDEST PUSH2 0x19B DUP5 DUP14 PUSH2 0xCC4 JUMP JUMPDEST MLOAD SWAP2 DUP3 ISZERO PUSH2 0x285 JUMPI PUSH2 0x1C2 DUP4 DUP3 PUSH2 0x1C7 SWAP4 ISZERO ISZERO DUP1 PUSH2 0x27C JUMPI JUMPDEST PUSH2 0x1BD SWAP1 PUSH2 0x1194 JUMP JUMPDEST PUSH2 0x12A9 JUMP JUMPDEST PUSH2 0x1226 JUMP JUMPDEST SWAP2 DUP2 SUB SWAP1 DUP2 GT PUSH2 0x267 JUMPI SWAP1 PUSH2 0x1DE PUSH2 0x1E4 SWAP3 PUSH2 0x128A JUMP JUMPDEST SWAP1 PUSH2 0x1206 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD SWAP2 DUP3 DUP2 GT PUSH2 0x267 JUMPI DUP3 LT PUSH2 0x225 JUMPI PUSH2 0x201 SWAP1 DUP12 PUSH2 0xCC4 JUMP JUMPDEST MSTORE DUP1 ISZERO PUSH2 0x210 JUMPI DUP11 ADD DUP1 PUSH2 0x14A JUMP JUMPDEST DUP7 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP14 SWAP1 MSTORE PUSH1 0x14 DUP2 DUP12 ADD MSTORE PUSH32 0x64732D6D6174682D6164642D6F766572666C6F77000000000000000000000000 DUP2 DUP11 ADD MSTORE DUP7 SWAP1 REVERT JUMPDEST DUP10 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST POP DUP5 ISZERO ISZERO PUSH2 0x1B4 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP14 SWAP1 MSTORE PUSH1 0x2C DUP2 DUP12 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F4F DUP2 DUP11 ADD MSTORE PUSH32 0x55545055545F414D4F554E540000000000000000000000000000000000000000 DUP2 DUP9 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP8 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST SWAP1 SWAP7 POP DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x331 JUMPI JUMPDEST PUSH2 0x31C DUP2 DUP4 PUSH2 0xBF3 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x32C JUMPI MLOAD SWAP6 CODESIZE PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x312 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x32C JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x32C JUMPI PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x32C JUMPI PUSH1 0xA4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x32C JUMPI PUSH2 0x38B PUSH2 0x393 SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xB8E JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xC2D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH4 0x11A5CC77 PUSH1 0xE3 SHL DUP3 MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x84 DUP4 ADD MSTORE PUSH1 0x40 DUP3 PUSH1 0xA4 DUP2 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x338 JUMPI PUSH1 0x0 SWAP3 PUSH2 0xA5D JUMPI JUMPDEST POP PUSH2 0x454 PUSH32 0x0 DUP3 DUP5 PUSH32 0x0 PUSH2 0xEFC JUMP JUMPDEST SWAP3 DUP4 MLOAD DUP1 PUSH1 0x0 NOT DUP2 ADD GT PUSH2 0x7EA JUMPI PUSH2 0x470 SWAP1 PUSH1 0x0 NOT ADD DUP6 PUSH2 0xCC4 JUMP JUMPDEST MLOAD SWAP3 PUSH1 0x84 CALLDATALOAD DUP5 LT PUSH2 0xA18 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x48C DUP5 PUSH2 0xCB7 JUMP JUMPDEST MLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x49F DUP6 PUSH2 0xCB7 JUMP JUMPDEST MLOAD AND SWAP1 DUP5 MLOAD PUSH1 0x1 LT ISZERO PUSH2 0xA02 JUMPI PUSH1 0x0 SWAP3 DUP4 PUSH2 0x547 PUSH2 0x555 PUSH2 0x512 DUP4 SWAP7 PUSH32 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP14 ADD MLOAD AND SWAP1 PUSH32 0x0 PUSH2 0xDDC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 SWAP2 DUP3 SWAP1 PUSH1 0x64 DUP3 ADD SWAP1 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0xBF3 JUMP JUMPDEST MLOAD SWAP3 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x9FB JUMPI RETURNDATASIZE PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7BC JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0x587 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP4 PUSH2 0xBF3 JUMP JUMPDEST DUP2 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP4 ADD RETURNDATACOPY JUMPDEST DUP2 PUSH2 0x9CC JUMPI JUMPDEST POP ISZERO PUSH2 0x987 JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0x7EA JUMPI DUP2 LT ISZERO PUSH2 0x81B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x5C8 DUP3 DUP6 PUSH2 0xCC4 JUMP JUMPDEST MLOAD AND SWAP1 PUSH1 0x1 DUP2 ADD DUP2 GT PUSH2 0x7EA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x5EA PUSH1 0x1 DUP4 ADD DUP7 PUSH2 0xCC4 JUMP JUMPDEST MLOAD AND SWAP2 PUSH2 0x5F7 DUP4 DUP3 PUSH2 0xD15 JUMP JUMPDEST POP SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x60E PUSH1 0x1 DUP6 ADD DUP11 PUSH2 0xCC4 JUMP JUMPDEST MLOAD SWAP5 AND DUP3 SUB PUSH2 0x813 JUMPI PUSH1 0x0 SWAP4 SWAP2 JUMPDEST DUP7 MLOAD DUP1 PUSH1 0x1 NOT DUP2 ADD GT PUSH2 0x7EA JUMPI PUSH1 0x1 NOT ADD DUP5 LT ISZERO PUSH2 0x800 JUMPI PUSH1 0x2 DUP5 ADD DUP5 GT PUSH2 0x7EA JUMPI PUSH2 0x6EF PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x6A5 PUSH32 0x0 DUP5 PUSH2 0x67C PUSH1 0x2 DUP11 ADD DUP14 PUSH2 0xCC4 JUMP JUMPDEST MLOAD AND DUP7 PUSH32 0x0 PUSH2 0xDDC JUMP JUMPDEST SWAP4 JUMPDEST PUSH32 0x0 SWAP2 PUSH32 0x0 PUSH2 0xDDC JUMP JUMPDEST AND SWAP2 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x20 DUP2 ADD LT PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x20 DUP6 ADD GT OR PUSH2 0x7BC JUMPI PUSH1 0x20 DUP4 ADD PUSH1 0x40 MSTORE PUSH1 0x0 DUP4 MSTORE DUP4 EXTCODESIZE ISZERO PUSH2 0x32C JUMPI PUSH1 0x40 MLOAD PUSH4 0x22C0D9F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x24 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x44 DUP6 ADD MSTORE PUSH1 0x80 PUSH1 0x64 DUP6 ADD MSTORE DUP1 MLOAD PUSH1 0x84 DUP6 ADD DUP2 SWAP1 MSTORE DUP5 SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x7D2 JUMPI POP POP SWAP2 DUP2 PUSH1 0x0 PUSH1 0xA4 DUP3 DUP7 DUP4 DUP4 DUP2 SWAP10 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x338 JUMPI PUSH2 0x7A1 JUMPI JUMPDEST PUSH2 0x79C SWAP2 POP PUSH2 0xD06 JUMP JUMPDEST PUSH2 0x5A1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x7BC JUMPI PUSH2 0x79C SWAP2 PUSH1 0x40 MSTORE PUSH2 0x792 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP3 DUP3 ADD DUP2 ADD MLOAD PUSH1 0xA4 DUP10 DUP5 ADD ADD MSTORE DUP8 SWAP5 POP ADD PUSH2 0x760 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x6EF PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 ADDRESS SWAP4 PUSH2 0x6A7 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x61C JUMP JUMPDEST POP SWAP3 POP DUP1 MLOAD SWAP1 PUSH1 0x0 NOT DUP3 ADD SWAP2 DUP3 GT PUSH2 0x7EA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x83F SWAP2 PUSH2 0xCC4 JUMP JUMPDEST MLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE SWAP2 PUSH1 0x20 SWAP2 DUP4 SWAP2 PUSH1 0x44 SWAP2 DUP4 SWAP2 PUSH1 0x0 SWAP2 AND GAS CALL DUP1 ISZERO PUSH2 0x338 JUMPI PUSH2 0x958 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 MLOAD SWAP3 PUSH4 0x4D4D7CBD PUSH1 0xE1 SHL DUP5 MSTORE PUSH1 0x24 CALLDATALOAD PUSH1 0x4 DUP6 ADD MSTORE ADDRESS PUSH1 0x24 DUP6 ADD MSTORE AND PUSH1 0x44 DUP4 ADD MSTORE DUP1 PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP4 ADD MSTORE PUSH1 0x40 DUP3 PUSH1 0xA4 DUP2 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS CALL DUP1 ISZERO PUSH2 0x338 JUMPI PUSH1 0x40 SWAP3 PUSH1 0x0 SWAP2 PUSH2 0x929 JUMPI JUMPDEST POP DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST PUSH2 0x949 SWAP2 POP DUP4 RETURNDATASIZE DUP6 GT PUSH2 0x951 JUMPI JUMPDEST PUSH2 0x941 DUP2 DUP4 PUSH2 0xBF3 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xCD8 JUMP JUMPDEST SWAP1 POP DUP4 PUSH2 0x91C JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x937 JUMP JUMPDEST PUSH2 0x979 SWAP1 PUSH1 0x20 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x980 JUMPI JUMPDEST PUSH2 0x971 DUP2 DUP4 PUSH2 0xBF3 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xCEE JUMP JUMPDEST POP DUP3 PUSH2 0x89F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x967 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E73666572206661696C656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP1 ISZERO SWAP3 POP DUP3 ISZERO PUSH2 0x9E1 JUMPI JUMPDEST POP POP DUP6 PUSH2 0x598 JUMP JUMPDEST PUSH2 0x9F4 SWAP3 POP PUSH1 0x20 DUP1 SWAP2 DUP4 ADD ADD SWAP2 ADD PUSH2 0xCEE JUMP JUMPDEST DUP6 DUP1 PUSH2 0x9D9 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x592 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E742D616D6F756E742D6F7574000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0xA77 SWAP2 SWAP3 POP PUSH1 0x40 RETURNDATASIZE PUSH1 0x40 GT PUSH2 0x951 JUMPI PUSH2 0x941 DUP2 DUP4 PUSH2 0xBF3 JUMP JUMPDEST POP SWAP1 DUP4 PUSH2 0x407 JUMP JUMPDEST CALLVALUE PUSH2 0x32C JUMPI PUSH2 0xA90 PUSH2 0x4E CALLDATASIZE PUSH2 0xBBC JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH4 0x442C1599 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x20 DUP3 PUSH1 0x64 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x338 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xB59 JUMPI JUMPDEST PUSH2 0xB3E SWAP3 POP PUSH32 0x0 SWAP2 PUSH32 0x0 PUSH2 0xEFC JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 NOT DUP2 ADD SWAP2 SWAP1 DUP3 GT PUSH2 0x7EA JUMPI PUSH1 0x20 SWAP2 PUSH2 0x158 SWAP2 PUSH2 0xCC4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0xB86 JUMPI JUMPDEST DUP2 PUSH2 0xB73 PUSH1 0x20 SWAP4 DUP4 PUSH2 0xBF3 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x32C JUMPI PUSH2 0xB3E SWAP2 MLOAD SWAP1 PUSH2 0xAF1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xB66 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x32C JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x32C JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x32C JUMPI JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x32C JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x32C JUMPI PUSH2 0xBEF SWAP2 PUSH1 0x4 ADD PUSH2 0xB8E JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7BC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7BC JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 DUP2 DUP5 SUB SLT PUSH2 0x32C JUMPI DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x32C JUMPI ADD SWAP2 DUP1 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x32C JUMPI DUP3 CALLDATALOAD PUSH2 0xC63 DUP2 PUSH2 0xC15 JUMP JUMPDEST SWAP4 PUSH2 0xC71 PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0xBF3 JUMP JUMPDEST DUP2 DUP6 MSTORE DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x32C JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xC98 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x32C JUMPI DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0xC8A JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0xA02 JUMPI PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0xA02 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 PUSH1 0x40 SWAP2 SUB SLT PUSH2 0x32C JUMPI PUSH1 0x20 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x32C JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x32C JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x7EA JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP5 AND DUP4 DUP3 AND DUP2 DUP2 EQ PUSH2 0xD89 JUMPI LT ISZERO PUSH2 0xD84 JUMPI SWAP3 JUMPDEST SWAP2 DUP4 AND ISZERO PUSH2 0xD3F JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A205A45524F5F414444524553530000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0xD35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A204944454E544943414C5F41444452 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x4553534553 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0xDE6 SWAP2 PUSH2 0xD15 JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP6 DUP7 DUP1 SWAP3 PUSH1 0x60 SHL AND DUP5 MSTORE PUSH1 0x60 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x28 DUP2 MSTORE PUSH1 0x60 DUP2 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF SWAP6 DUP3 DUP6 LT DUP8 DUP7 GT OR PUSH2 0x7BC JUMPI PUSH1 0xE0 SWAP4 DUP6 PUSH1 0x40 MSTORE DUP4 MLOAD SWAP1 KECCAK256 SWAP1 PUSH1 0x80 DUP5 ADD SWAP7 PUSH1 0xFF PUSH1 0xF8 SHL DUP9 MSTORE PUSH1 0x60 SHL AND PUSH1 0x81 DUP5 ADD MSTORE PUSH1 0x95 DUP4 ADD MSTORE PUSH1 0xB5 DUP3 ADD MSTORE PUSH1 0x55 DUP4 MSTORE ADD SWAP3 DUP2 DUP5 LT SWAP1 DUP5 GT OR PUSH2 0x7BC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 AND SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xE85 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E56414C49445F504154480000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xED4 DUP3 PUSH2 0xC15 JUMP JUMPDEST PUSH2 0xEE1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0xBF3 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0xEF2 PUSH1 0x1F NOT SWAP2 PUSH2 0xC15 JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0xF0F PUSH1 0x2 DUP4 MLOAD LT ISZERO PUSH2 0xE7E JUMP JUMPDEST PUSH2 0xF19 DUP3 MLOAD PUSH2 0xECA JUMP JUMPDEST SWAP3 PUSH2 0xF23 DUP5 PUSH2 0xCB7 JUMP JUMPDEST MSTORE PUSH1 0x0 JUMPDEST DUP3 MLOAD PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 GT PUSH2 0x7EA JUMPI DUP2 LT ISZERO PUSH2 0x10A5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH2 0xF50 DUP3 DUP7 PUSH2 0xCC4 JUMP JUMPDEST MLOAD AND PUSH1 0x1 DUP3 ADD SWAP3 DUP4 DUP4 GT PUSH2 0x7EA JUMPI PUSH2 0xF77 SWAP2 DUP6 SWAP2 PUSH2 0xF6E DUP7 DUP10 PUSH2 0xCC4 JUMP JUMPDEST MLOAD AND SWAP1 DUP11 PUSH2 0x10C7 JUMP JUMPDEST PUSH2 0xF84 DUP4 DUP9 SWAP6 SWAP4 SWAP6 PUSH2 0xCC4 JUMP JUMPDEST MLOAD DUP1 ISZERO PUSH2 0x103A JUMPI PUSH2 0xFB3 PUSH2 0xFAC PUSH2 0xFB9 SWAP3 DUP8 ISZERO ISZERO DUP1 PUSH2 0x1031 JUMPI JUMPDEST PUSH2 0xFA7 SWAP1 PUSH2 0x1194 JUMP JUMPDEST PUSH2 0x128A JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x12A9 JUMP JUMPDEST SWAP5 PUSH2 0x1226 JUMP JUMPDEST SWAP1 DUP2 ADD SWAP1 DUP2 DUP2 GT PUSH2 0x7EA JUMPI DUP2 LT PUSH2 0xFEC JUMPI PUSH2 0xFDA PUSH2 0xFE1 SWAP2 PUSH2 0xFE7 SWAP6 PUSH2 0x1206 JUMP JUMPDEST SWAP2 DUP8 PUSH2 0xCC4 JUMP JUMPDEST MSTORE PUSH2 0xD06 JUMP JUMPDEST PUSH2 0xF27 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x64732D6D6174682D6164642D6F766572666C6F77000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP DUP5 ISZERO ISZERO PUSH2 0xF9E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F49 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x4E5055545F414D4F554E54000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP POP POP SWAP2 POP JUMP JUMPDEST MLOAD SWAP1 PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x32C JUMPI JUMP JUMPDEST PUSH1 0x60 DUP3 SWAP2 PUSH2 0x10EE PUSH1 0x4 SWAP6 SWAP7 PUSH2 0x10DC DUP9 DUP7 PUSH2 0xD15 JUMP JUMPDEST POP SWAP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 SWAP5 PUSH2 0xDDC JUMP JUMPDEST AND PUSH1 0x40 MLOAD SWAP5 DUP6 DUP1 SWAP3 PUSH4 0x240BC6B PUSH1 0xE2 SHL DUP3 MSTORE GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x338 JUMPI PUSH1 0x0 SWAP1 DUP2 SWAP5 PUSH2 0x1139 JUMPI JUMPDEST POP DUP2 SWAP1 PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 SWAP2 AND SWAP5 AND SWAP5 AND SWAP2 AND EQ PUSH1 0x0 EQ PUSH2 0xBEF JUMPI SWAP2 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP5 RETURNDATASIZE DUP3 GT PUSH2 0x118C JUMPI JUMPDEST DUP2 PUSH2 0x1153 PUSH1 0x60 SWAP4 DUP4 PUSH2 0xBF3 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1189 JUMPI PUSH2 0x1164 DUP5 PUSH2 0x10AC JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH2 0x1173 PUSH1 0x20 DUP8 ADD PUSH2 0x10AC JUMP JUMPDEST SWAP6 ADD MLOAD PUSH4 0xFFFFFFFF DUP2 AND SUB PUSH2 0x1189 JUMPI POP DUP2 PUSH2 0x1113 JUMP JUMPDEST DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1146 JUMP JUMPDEST ISZERO PUSH2 0x119B JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x556E697377617056324C6962726172793A20494E53554646494349454E545F4C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x4951554944495459000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x1210 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x3E8 SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV DUP2 EQ DUP3 ISZERO OR ISZERO PUSH2 0x7EA JUMPI DUP4 DIV SUB PUSH2 0x1245 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x64732D6D6174682D6D756C2D6F766572666C6F77000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x3E5 SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV DUP2 EQ DUP3 ISZERO OR ISZERO PUSH2 0x7EA JUMPI DUP4 DIV SUB PUSH2 0x1245 JUMPI JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 DUP1 ISZERO SWAP2 DUP3 ISZERO PUSH2 0x12C0 JUMPI JUMPDEST POP POP ISZERO PUSH2 0x1245 JUMPI JUMP JUMPDEST DUP1 DUP3 MUL SWAP5 POP SWAP2 POP DUP2 ISZERO DUP3 DUP6 DIV DUP3 EQ OR ISZERO PUSH2 0x7EA JUMPI PUSH2 0x12DE SWAP1 DUP5 PUSH2 0x1206 JUMP JUMPDEST EQ CODESIZE DUP1 PUSH2 0x12B7 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB PUSH10 0xF0264317D9B9869EC03 SWAP11 0xF9 0xB6 SWAP5 JUMPDEST SWAP7 0x28 0xE7 JUMPI 0xD4 JUMPI 0xE5 0xCF ADDMOD MOD 0x2F DUP9 PUSH29 0x221C64736F6C6343000812003300000000000000000000000000000000 ","sourceMap":"511:6065:21:-:0;;;;;;;;;;;;;;;;;;;;;;1868:44;511:6065;1868:44;;;511:6065;;;;;;;;;;;2689:32;511:6065;;;:::i;:::-;2689:32;;;;;;;;:::i;:::-;511:6065;;;;;;2752:46;;511:6065;2752:46;;511:6065;;;;;;;;;;;;;;2752:46;511:6065;;;-1:-1:-1;;;;;2752:8:21;;;;;;511:6065;2752:46;;;;;;;511:6065;2752:46;;;511:6065;2880:7;;2945:12;;5121:59:25;5144:1;511:6065:21;;5129:16:25;;5121:59;:::i;:::-;5201:26;511:6065:21;;5201:26:25;:::i;:::-;511:6065:21;;;;;;;;;;;;;;;5238:39:25;;;;:::i;:::-;511:6065:21;;;;;;;;;;;5288:332:25;5322:5;;;2990:10:21;;;;:::i;:::-;511:6065;;;;;;;5329:3:25;511:6065:21;;;;;;;;5391:139:25;5447:11;;;5477:7;5447:11;;;;;;:::i;:::-;511:6065:21;;5477:7:25;;:::i;:::-;511:6065:21;;5391:139:25;;;:::i;:::-;5574:10;;;;:::i;:::-;511:6065:21;3673:13:25;;;511:6065:21;;3898:24:25;3768:13;;3898:34;3768:13;;;:31;;;5329:3;3746:121;;;:::i;:::-;3898:24;:::i;:::-;:34;:::i;:::-;511:6065:21;;;;;;;;3965:34:25;;4022:23;3965:34;;:::i;:::-;4022:23;;:::i;:::-;511:6065:21;5263:1:25;511:6065:21;;;;;;;;290:16:24;;511:6065:21;;5545:63:25;;;;:::i;:::-;511:6065:21;;;;;;;5293:27:25;;;511:6065:21;;;;;;;;;;;;;;;-1:-1:-1;;;511:6065:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3768:31:25;-1:-1:-1;3785:14:25;;;3768:31;;511:6065:21;-1:-1:-1;;511:6065:21;;-1:-1:-1;;;511:6065:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2752:46;;;;;;;;;;;;;;;;;:::i;:::-;;;511:6065;;;;;2752:46;;;;511:6065;;;;2752:46;;;;;;511:6065;;;;;;;;;;;;;;;-1:-1:-1;;511:6065:21;;;;;;-1:-1:-1;;;;;511:6065:21;;;;;;;;;;;;;;3888:32;511:6065;;;;;;:::i;:::-;3888:32;;;;:::i;:::-;511:6065;;;;;;3954:146;;511:6065;;;3954:146;;511:6065;4018:4;511:6065;;;;4018:4;511:6065;;;;;;;;;;;;;;;;3954:8;511:6065;3954:8;511:6065;-1:-1:-1;;;;;3954:8:21;511:6065;3954:146;;;;;;;511:6065;3954:146;;;511:6065;5113:12;5004:132;5113:12;5049:7;;;5004:132;:::i;:::-;511:6065;;;;;;;;;;;5159:27;;-1:-1:-1;;511:6065:21;5159:27;;:::i;:::-;511:6065;;;;5205:25;;511:6065;;-1:-1:-1;;;;;5315:7:21;;;:::i;:::-;511:6065;;-1:-1:-1;;;;;5385:7:21;;;:::i;:::-;511:6065;;;;;5184:1;511:6065;;;;;5113:12;;3675:48:12;;5351:65:21;5113:12;;;511:6065;-1:-1:-1;;;;;511:6065:21;;;;;5049:7;;5351:65;:::i;:::-;511:6065;;-1:-1:-1;;;511:6065:21;3675:48:12;;;;;-1:-1:-1;;;;;511:6065:21;;;;3675:48:12;;511:6065:21;;;;;;;;3675:48:12;511:6065:21;;;;;;;;3675:48:12;;;;;;;;;;:::i;:::-;3655:69;;;;484:10;;;;;511:6065:21;484:10:12;;;;511:6065:21;;;;3675:48:12;511:6065:21;;-1:-1:-1;;511:6065:21;;484:10:12;511:6065:21;;:::i;:::-;484:10:12;;;511:6065:21;;484:10:12;;;;3743:57;;;484:10;;;;;511:6065:21;5757:3;511:6065;;-1:-1:-1;;511:6065:21;;;;;;;5736:19;;;;;-1:-1:-1;;;;;5812:7:21;;;;:::i;:::-;511:6065;;;5184:1;511:6065;;;;;;-1:-1:-1;;;;;5821:11:21;5184:1;511:6065;;5821:11;;:::i;:::-;511:6065;;5869:42;;;;;:::i;:::-;511:6065;;-1:-1:-1;;;;;5946:14:21;5184:1;511:6065;;5946:14;;:::i;:::-;511:6065;;;6018:15;;511:6065;;;6018:101;;;511:6065;;;;;;;;;;-1:-1:-1;;511:6065:21;6147:19;;511:6065;;;6165:1;511:6065;;;;;;6430:62;-1:-1:-1;;;;;5113:12:21;6186:171;5113:12;511:6065;6292:11;6165:1;511:6065;;6292:11;;:::i;:::-;511:6065;;5049:7;;6186:171;:::i;:::-;6147:233;;5113:12;5049:7;;6430:62;:::i;:::-;511:6065;;;;;;;;;;;;;;;;;;;;;;;;484:10:12;;6397:157:21;;;;;511:6065;;-1:-1:-1;;;6397:157:21;;511:6065;6397:157;;511:6065;;;;;;;;;;;-1:-1:-1;;;;;511:6065:21;;;;;;;;;;;;;;;;;;;;-1:-1:-1;511:6065:21;;;;;;;;;;;;;;;;;;;;;;3675:48:12;;;511:6065:21;;;;;6397:157;;;;;;;;;;;511:6065;5757:3;;;;:::i;:::-;5725:9;;6397:157;511:6065;;;;;5757:3;511:6065;;;6397:157;;511:6065;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;511:6065:21;;;;;;;;;;;;;;;6147:233;6430:62;-1:-1:-1;;;;;4018:4:21;;6147:233;;;6018:101;511:6065;6018:101;;;5736:19;;;;511:6065;;;;;;;;;;;;-1:-1:-1;;;;;4278:21:21;;;;:::i;:::-;511:6065;;;-1:-1:-1;;;4271:67:21;;-1:-1:-1;;;;;3954:8:21;511:6065;;4271:67;;511:6065;;;;;;;;;;;;;;;;-1:-1:-1;;511:6065:21;4271:67;;;;;;;;5720:846;511:6065;-1:-1:-1;;;;;511:6065:21;;;;;;4364:142;;511:6065;;;4364:142;;511:6065;4018:4;511:6065;;;;;;;;;;;;;;;;;;;;3954:8;511:6065;3954:8;511:6065;-1:-1:-1;;;;;3954:8:21;511:6065;4364:142;;;;;;511:6065;;;4364:142;;;5720:846;511:6065;;;;;;;;;;;4364:142;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;4271:67;;;511:6065;4271:67;511:6065;4271:67;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;484:10:12;511:6065:21;;-1:-1:-1;;;484:10:12;;511:6065:21;;484:10:12;;;;511:6065:21;484:10:12;;511:6065:21;484:10:12;511:6065:21;;;484:10:12;511:6065:21;;484:10:12;3743:57;511:6065:21;;3755:16:12;;;-1:-1:-1;3755:44:12;;;;3743:57;;;;;;3755:44;3775:24;;;511:6065:21;3775:24:12;;;;;;;;:::i;:::-;3755:44;;;;484:10;511:6065:21;484:10:12;;511:6065:21;;;;;;;;;;;;;;;-1:-1:-1;;;511:6065:21;;;;;;;;;;;;;;;;;;;;3954:146;;;;;511:6065;3954:146;511:6065;3954:146;;;;;;;:::i;:::-;;;;;;511:6065;;;;1806:32;511:6065;;;:::i;1806:32::-;511:6065;;;;;;;1868:44;;511:6065;1868:44;;511:6065;;;;;;;;;;1868:44;:8;511:6065;1868:8;-1:-1:-1;;;;;1868:8:21;511:6065;1868:44;;;;;;;511:6065;1868:44;;;511:6065;1950:132;2059:12;;;1995:7;;1950:132;:::i;:::-;511:6065;;-1:-1:-1;;511:6065:21;;;;;;;;1868:44;2105:27;;;;:::i;1868:44::-;;;;;;;;;;;;;;;;;:::i;:::-;;;511:6065;;;;1950:132;511:6065;;1868:44;;;;;;-1:-1:-1;1868:44:21;;511:6065;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;511:6065:21;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;3675:48:12;;;511:6065:21;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;511:6065:21;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;511:6065:21;;;;;;;:::o;345:400:25:-;;;-1:-1:-1;;;;;511:6065:21;;;;;;;496:16:25;;;511:6065:21;;584:15:25;;;;:79;;565:98;;511:6065:21;682:20:25;511:6065:21;;345:400:25:o;511:6065:21:-;;;-1:-1:-1;;;511:6065:21;;;;;;;;;;;;;;;;;;;;584:79:25;;;511:6065:21;;;-1:-1:-1;;;511:6065:21;;;;;;;;;;;;;;;;;-1:-1:-1;;;511:6065:21;;;;;;;837:702:25;;1051:26;837:702;1051:26;:::i;:::-;511:6065:21;;;;1342:32:25;;;511:6065:21;;;;;;;;;;;;;;;;;;;1342:32:25;;;511:6065:21;;;;;;;;;;;;;;;;;;;;;;1332:43:25;;1209:254;;;;511:6065:21;;;;;;;;;;;;;;;;;;;;;;1209:254:25;;511:6065:21;;;;;;;;;;;-1:-1:-1;;;;;511:6065:21;;;;1173:313:25;;511:6065:21;837:702:25;:::o;511:6065:21:-;;;;:::o;:::-;;;-1:-1:-1;;;511:6065:21;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;3675:48:12;511:6065:21;3675:48:12;;511:6065:21;;:::i;:::-;;;;;;;;:::o;4143:691:25:-;;;;;;4349:59;4372:1;511:6065:21;;4357:16:25;;4349:59;:::i;:::-;4429:26;511:6065:21;;4429:26:25;:::i;:::-;4466:21;;;;:::i;:::-;511:6065:21;4474:1:25;4535:3;511:6065:21;;-1:-1:-1;;511:6065:21;;;;;;;4514:19:25;;;;;-1:-1:-1;;;;;4653:7:25;;;;;;:::i;:::-;511:6065:21;;4532:1:25;511:6065:21;;;;;;;;4597:139:25;4679:11;;;;;;;:::i;:::-;511:6065:21;;4597:139:25;;;:::i;:::-;4781:10;;;;;;;:::i;:::-;511:6065:21;2944:12:25;;511:6065:21;;3221:31:25;3173:17;3285:19;3037:13;;;;:31;;;4535:3;3015:121;;;:::i;:::-;3173:17;:::i;:::-;3221:31;;;:::i;:::-;3285:19;;:::i;:::-;511:6065:21;;;;;;;;;290:16:24;;511:6065:21;;3348:23:25;4751:64;3348:23;4535:3;3348:23;;:::i;:::-;4751:64;;;:::i;:::-;511:6065:21;4535:3:25;:::i;:::-;4503:9;;511:6065:21;;;-1:-1:-1;;;511:6065:21;;;;;;;;;;;;;;;;;;;;3037:31:25;-1:-1:-1;3054:14:25;;;3037:31;;511:6065:21;;;-1:-1:-1;;;511:6065:21;;;;;;;;;;;;;;;;;;;;;;;;;4514:19:25;;;;;;4143:691::o;511:6065:21:-;;;;;;;;;;:::o;1597:534:25:-;1901:100;1597:534;;1930:46;1901:100;1597:534;;1823:26;;;;:::i;:::-;511:6065:21;;-1:-1:-1;;;;;1930:46:25;;;;:::i;:::-;511:6065:21;;;;;;;;;;1901:100:25;;;;;;;;;-1:-1:-1;;;1901:100:25;;;1597:534;511:6065:21;;;;;;;;;2035:88:25;511:6065:21;;;2035:16:25;:88;511:6065:21;;;1597:534:25;:::o;1901:100::-;;;;;;;;;;;;;;;;;:::i;:::-;;;511:6065:21;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;1901:100:25;;;;511:6065:21;;;1901:100:25;;;-1:-1:-1;1901:100:25;;511:6065:21;;;;:::o;:::-;;;-1:-1:-1;;;511:6065:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;493:151:24;;3927:4:25;511:6065:21;;;;;;;;;;;;;;;;592:9:24;511:6065:21;591:20:24;511:6065:21;;493:151:24:o;511:6065:21:-;;;-1:-1:-1;;;511:6065:21;;;;;;;;;;;;;;;;;;;;493:151:24;;3995:3:25;511:6065:21;;;;;;;;;;;;;;;;592:9:24;511:6065:21;591:20:24;511:6065:21;;493:151:24:o;:::-;511:6065:21;;493:151:24;581:6;;;:30;;;;493:151;511:6065:21;;;;;493:151:24:o;581:30::-;511:6065:21;;;;-1:-1:-1;511:6065:21;-1:-1:-1;511:6065:21;;;;;;;;;;;591:15:24;592:9;;591:15;:::i;:::-;:20;581:30;;;"},"gasEstimates":{"creation":{"codeDepositCost":"978400","executionCost":"infinite","totalCost":"infinite"},"external":{"getInputAmount(uint256,uint256,bytes)":"infinite","getOutputAmount(uint256,uint256,bytes)":"infinite","swap(uint256,uint256,uint256,address,uint256,bytes)":"infinite"},"internal":{"_swap(uint256[] memory,address[] memory,address)":"infinite","_swapExactTokensForTokens(uint256,uint256,address[] memory,address)":"infinite"}},"methodIdentifiers":{"getInputAmount(uint256,uint256,bytes)":"c6fe9549","getOutputAmount(uint256,uint256,bytes)":"532bb192","swap(uint256,uint256,uint256,address,uint256,bytes)":"55a68e10"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract YieldBox\",\"name\":\"_yieldBox\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_pairCodeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenOutId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dexData\",\"type\":\"bytes\"}],\"name\":\"getInputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenInId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dexData\",\"type\":\"bytes\"}],\"name\":\"getOutputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenInId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dexData\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_factory\":\"UniswapV2Factory address\",\"_pairCodeHash\":\"UniswapV2 pair code hash\",\"_yieldBox\":\"YieldBox address\"}},\"getInputAmount(uint256,uint256,bytes)\":{\"details\":\"dexData examples:     - for UniV2, it should contain address[] swapPath\",\"params\":{\"dexData\":\"Custom DEX data for query execution\",\"shareOut\":\"Shares out to compute the amount for\",\"tokenOutId\":\"YieldBox asset id\"}},\"getOutputAmount(uint256,uint256,bytes)\":{\"details\":\"dexData examples:     - for UniV2, it should contain address[] swapPath\",\"params\":{\"dexData\":\"Custom DEX data for query execution\",\"shareIn\":\"Shares to get the amount for\",\"tokenInId\":\"YieldBox asset id\"}},\"swap(uint256,uint256,uint256,address,uint256,bytes)\":{\"details\":\"returns both amount and sharesdexData examples:     - for UniV2, it should contain address[] swapPath\",\"params\":{\"amountOutMin\":\"Minimum amount to be received\",\"dexData\":\"Custom DEX data for query execution\",\"shareIn\":\"Shares to be swapped\",\"to\":\"Receiver address\",\"tokenInId\":\"YieldBox asset id\",\"tokenOutId\":\"YieldBox asset id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"creates a new MultiSwapper contract\"},\"getInputAmount(uint256,uint256,bytes)\":{\"notice\":\"returns necessary input amount for a fixed output amount\"},\"getOutputAmount(uint256,uint256,bytes)\":{\"notice\":\"returns the possible output amount for input share\"},\"swap(uint256,uint256,uint256,address,uint256,bytes)\":{\"notice\":\"swaps token in with token out\"}},\"notice\":\"Modified from https://github.com/sushiswap/kashi-lending/blob/master/contracts/swappers/SushiSwapMultiSwapper.sol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swapper/MultiSwapper.sol\":\"MultiSwapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\n// WARNING!!!\\r\\n// Combining BoringBatchable with msg.value can cause double spending issues\\r\\n// https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/\\r\\n\\r\\nimport \\\"./interfaces/IERC20.sol\\\";\\r\\n\\r\\ncontract BaseBoringBatchable {\\r\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\r\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\r\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n\\r\\n        assembly {\\r\\n            // Slice the sighash.\\r\\n            _returnData := add(_returnData, 0x04)\\r\\n        }\\r\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\r\\n    }\\r\\n\\r\\n    /// @notice Allows batched call to self (this contract).\\r\\n    /// @param calls An array of inputs for each call.\\r\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\r\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\r\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\r\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\r\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\r\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable {\\r\\n        for (uint256 i = 0; i < calls.length; i++) {\\r\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\r\\n            if (!success && revertOnFail) {\\r\\n                revert(_getRevertMsg(result));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BoringBatchable is BaseBoringBatchable {\\r\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\r\\n    /// Lookup `IERC20.permit`.\\r\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\r\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\r\\n    function permitToken(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public {\\r\\n        token.permit(from, to, amount, deadline, v, r, s);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0e12064dbcb5659e5eaaef1baf8e7d611429d8699da9805eaa908644b6605151\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/BoringFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./interfaces/IMasterContract.sol\\\";\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\ncontract BoringFactory {\\r\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\r\\n\\r\\n    /// @notice Mapping from clone contracts to their masterContract.\\r\\n    mapping(address => address) public masterContractOf;\\r\\n\\r\\n    /// @notice Mapping from masterContract to an array of all clones\\r\\n    /// On mainnet events can be used to get this list, but events aren't always easy to retrieve and\\r\\n    /// barely work on sidechains. While this adds gas, it makes enumerating all clones much easier.\\r\\n    mapping(address => address[]) public clonesOf;\\r\\n\\r\\n    /// @notice Returns the count of clones that exists for a specific masterContract\\r\\n    /// @param masterContract The address of the master contract.\\r\\n    /// @return cloneCount total number of clones for the masterContract.\\r\\n    function clonesOfCount(address masterContract) public view returns (uint256 cloneCount) {\\r\\n        cloneCount = clonesOf[masterContract].length;\\r\\n    }\\r\\n\\r\\n    /// @notice Deploys a given master Contract as a clone.\\r\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\r\\n    /// Emits `LogDeploy`.\\r\\n    /// @param masterContract The address of the contract to clone.\\r\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\r\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\r\\n    /// @return cloneAddress Address of the created clone contract.\\r\\n    function deploy(\\r\\n        address masterContract,\\r\\n        bytes calldata data,\\r\\n        bool useCreate2\\r\\n    ) public payable returns (address cloneAddress) {\\r\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\r\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\r\\n\\r\\n        if (useCreate2) {\\r\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\r\\n            bytes32 salt = keccak256(data);\\r\\n\\r\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\r\\n            assembly {\\r\\n                let clone := mload(0x40)\\r\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\r\\n                mstore(add(clone, 0x14), targetBytes)\\r\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\r\\n                cloneAddress := create2(0, clone, 0x37, salt)\\r\\n            }\\r\\n        } else {\\r\\n            assembly {\\r\\n                let clone := mload(0x40)\\r\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\r\\n                mstore(add(clone, 0x14), targetBytes)\\r\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\r\\n                cloneAddress := create(0, clone, 0x37)\\r\\n            }\\r\\n        }\\r\\n        masterContractOf[cloneAddress] = masterContract;\\r\\n        clonesOf[masterContract].push(cloneAddress);\\r\\n\\r\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\r\\n\\r\\n        emit LogDeploy(masterContract, data, cloneAddress);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x09b8928fe64262a9cf934b360193a581cc6709d8642fd1b9f19d550991c475d7\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/Domain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Based on code and smartness by Ross Campbell and Keno\\r\\n// Uses immutable to store the domain separator to reduce gas usage\\r\\n// If the chain id changes due to a fork, the forked chain will calculate on the fly.\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\ncontract Domain {\\r\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\r\\n    // See https://eips.ethereum.org/EIPS/eip-191\\r\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\r\\n\\r\\n    // solhint-disable var-name-mixedcase\\r\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\r\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\r\\n\\r\\n    /// @dev Calculate the DOMAIN_SEPARATOR\\r\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\r\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, chainId, address(this)));\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\r\\n    }\\r\\n\\r\\n    /// @dev Return the DOMAIN_SEPARATOR\\r\\n    // It's named internal to allow making it public from the contract that uses it by creating a simple view function\\r\\n    // with the desired public name, such as DOMAIN_SEPARATOR or domainSeparator.\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function _domainSeparator() internal view returns (bytes32) {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\r\\n    }\\r\\n\\r\\n    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\\r\\n        digest = keccak256(abi.encodePacked(EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA, _domainSeparator(), dataHash));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x26e7d78c93c138e022d6fce9bc32d17fa3a0df1603927ddba65b9e81acbd1820\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\ninterface IERC1155 is IERC165 {\\r\\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\\r\\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n    event URI(string _value, uint256 indexed _id);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n\\r\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\r\\n\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x39f388312b08552eb8a5f09cbe6b0c6ea511a6a47c72985e1ab53b777b911771\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC1155TokenReceiver {\\r\\n    function onERC1155Received(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0x5a73c68c2975f8908b96e76fe916a1a39b86fd7acb2d1e463e85e7841225c0cf\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC165 {\\r\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x2929dd1b0483b96a0b59b4b945684705adf252697b404fe7f126816cb78d684c\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc7605391c07120ced6c1cca9d01abf39add948385828037a537b2d6b4c52f4a3\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\\r\\ninterface IERC721 /* is ERC165 */ {\\r\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\r\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\r\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\r\\n    ///  may be created and assigned without emitting Transfer. At the time of\\r\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when the approved address for an NFT is changed or\\r\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\r\\n    ///  When a Transfer event emits, this also indicates that the approved\\r\\n    ///  address for that NFT (if any) is reset to none.\\r\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\r\\n    ///  The operator can manage all NFTs of the owner.\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n    /// @notice Count all NFTs assigned to an owner\\r\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\r\\n    ///  function throws for queries about the zero address.\\r\\n    /// @param _owner An address for whom to query the balance\\r\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\r\\n    function balanceOf(address _owner) external view returns (uint256);\\r\\n\\r\\n    /// @notice Find the owner of an NFT\\r\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\r\\n    ///  about them do throw.\\r\\n    /// @param _tokenId The identifier for an NFT\\r\\n    /// @return The address of the owner of the NFT\\r\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\r\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\r\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\r\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\r\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\\r\\n\\r\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\r\\n    /// @dev This works identically to the other function with an extra data parameter,\\r\\n    ///  except this function just sets data to \\\"\\\".\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\r\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\r\\n    ///  THEY MAY BE PERMANENTLY LOST\\r\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\r\\n    ///  `_tokenId` is not a valid NFT.\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Change or reaffirm the approved address for an NFT\\r\\n    /// @dev The zero address indicates there is no approved address.\\r\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\r\\n    ///  operator of the current owner.\\r\\n    /// @param _approved The new approved NFT controller\\r\\n    /// @param _tokenId The NFT to approve\\r\\n    function approve(address _approved, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\r\\n    ///  all of `msg.sender`'s assets\\r\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\r\\n    ///  multiple operators per owner.\\r\\n    /// @param _operator Address to add to the set of authorized operators\\r\\n    /// @param _approved True if the operator is approved, false to revoke approval\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    /// @notice Get the approved address for a single NFT\\r\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\r\\n    /// @param _tokenId The NFT to find the approved address for\\r\\n    /// @return The approved address for this NFT, or the zero address if there is none\\r\\n    function getApproved(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n    /// @notice Query if an address is an authorized operator for another address\\r\\n    /// @param _owner The address that owns the NFTs\\r\\n    /// @param _operator The address that acts on behalf of the owner\\r\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n}\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\r\\ninterface IERC721Metadata /* is ERC721 */ {\\r\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\r\\n    function name() external view returns (string memory _name);\\r\\n\\r\\n    /// @notice An abbreviated name for NFTs in this contract\\r\\n    function symbol() external view returns (string memory _symbol);\\r\\n\\r\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\r\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\r\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\r\\n    ///  Metadata JSON Schema\\\".\\r\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\r\\n}\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\\r\\ninterface IERC721Enumerable /* is ERC721 */ {\\r\\n    /// @notice Count NFTs tracked by this contract\\r\\n    /// @return A count of valid NFTs tracked by this contract, where each one of\\r\\n    ///  them has an assigned and queryable owner not equal to the zero address\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /// @notice Enumerate valid NFTs\\r\\n    /// @dev Throws if `_index` >= `totalSupply()`.\\r\\n    /// @param _index A counter less than `totalSupply()`\\r\\n    /// @return The token identifier for the `_index`th NFT,\\r\\n    ///  (sort order not specified)\\r\\n    function tokenByIndex(uint256 _index) external view returns (uint256);\\r\\n\\r\\n    /// @notice Enumerate NFTs assigned to an owner\\r\\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\\r\\n    ///  `_owner` is the zero address, representing invalid NFTs.\\r\\n    /// @param _owner An address where we are interested in NFTs owned by them\\r\\n    /// @param _index A counter less than `balanceOf(_owner)`\\r\\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\\r\\n    ///   (sort order not specified)\\r\\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x8091cd3dd3561fe90675780de7111f11430b7b6f9174cff8e9a8eaa4ab682aca\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC721TokenReceiver {\\r\\n    function onERC721Received(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256 _tokenId,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xd466593f91b204a62802f199b0f99869b81f87807db088a52319c60ed7bd6080\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IMasterContract {\\r\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\r\\n    /// Also kown as the constructor for cloned contracts.\\r\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\r\\n    /// @param data Can be abi encoded arguments or anything else.\\r\\n    function init(bytes calldata data) external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0xdc1227c73bcaaf012c37ab85424909a4e900df34ecfcf9d090f7998e4d3aefe7\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n// solhint-disable no-empty-blocks\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides functions for encoding/decoding base64\\r\\nlibrary Base64 {\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                // read 3 bytes\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n                case 1 {\\r\\n                    mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n                }\\r\\n                case 2 {\\r\\n                    mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n                }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf85defde09eac584631013ed63018550950e1de602103538806b611ed86aa5b2\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\nlibrary BoringAddress {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function sendNative(address to, uint256 amount) internal {\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"BoringAddress: transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdcdf9c08bc41b6091e03d4bb44d6503bd084ae9d990277d0761ed6e1cdeefbb3\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to The address of the user to check.\\r\\n    /// @return amount The token amount.\\r\\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\\r\\n        require(success && data.length >= 32, \\\"BoringERC20: BalanceOf failed\\\");\\r\\n        amount = abi.decode(data, (uint256));\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1781055f2cd993ad2c58db7ea644b5d8017daf1f89e824cb5f47d8da10389722\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Swapper/MultiSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\r\\nimport \\\"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/ISwapper.sol\\\";\\r\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\r\\n\\r\\nimport \\\"./libraries/UniswapV2Library.sol\\\";\\r\\n\\r\\n/// Modified from https://github.com/sushiswap/kashi-lending/blob/master/contracts/swappers/SushiSwapMultiSwapper.sol\\r\\ncontract MultiSwapper is ISwapper {\\r\\n    using BoringERC20 for IERC20;\\r\\n\\r\\n    // ************ //\\r\\n    // *** VARS *** //\\r\\n    // ************ //\\r\\n    address private immutable factory;\\r\\n    YieldBox private immutable yieldBox;\\r\\n    bytes32 private immutable pairCodeHash;\\r\\n\\r\\n    /// @notice creates a new MultiSwapper contract\\r\\n    /// @param _factory UniswapV2Factory address\\r\\n    /// @param _yieldBox YieldBox address\\r\\n    /// @param _pairCodeHash UniswapV2 pair code hash\\r\\n    constructor(address _factory, YieldBox _yieldBox, bytes32 _pairCodeHash) {\\r\\n        factory = _factory;\\r\\n        yieldBox = _yieldBox;\\r\\n        pairCodeHash = _pairCodeHash;\\r\\n    }\\r\\n\\r\\n    // ********************** //\\r\\n    // *** VIEW FUNCTIONS *** //\\r\\n    // ********************** //\\r\\n    /// @notice returns the possible output amount for input share\\r\\n    /// @param tokenInId YieldBox asset id\\r\\n    /// @param shareIn Shares to get the amount for\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    function getOutputAmount(\\r\\n        uint256 tokenInId,\\r\\n        uint256 shareIn,\\r\\n        bytes calldata dexData\\r\\n    ) external view override returns (uint256 amountOut) {\\r\\n        address[] memory path = abi.decode(dexData, (address[]));\\r\\n        uint256 amountIn = yieldBox.toAmount(tokenInId, shareIn, false);\\r\\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(\\r\\n            factory,\\r\\n            amountIn,\\r\\n            path,\\r\\n            pairCodeHash\\r\\n        );\\r\\n        amountOut = amounts[amounts.length - 1];\\r\\n    }\\r\\n\\r\\n    /// @notice returns necessary input amount for a fixed output amount\\r\\n    /// @param tokenOutId YieldBox asset id\\r\\n    /// @param shareOut Shares out to compute the amount for\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    function getInputAmount(\\r\\n        uint256 tokenOutId,\\r\\n        uint256 shareOut,\\r\\n        bytes calldata dexData\\r\\n    ) external view override returns (uint256 amountIn) {\\r\\n        address[] memory path = abi.decode(dexData, (address[]));\\r\\n        uint256 amountOut = yieldBox.toAmount(tokenOutId, shareOut, false);\\r\\n        uint256[] memory amounts = UniswapV2Library.getAmountsIn(\\r\\n            factory,\\r\\n            amountOut,\\r\\n            path,\\r\\n            pairCodeHash\\r\\n        );\\r\\n        amountIn = amounts[0];\\r\\n    }\\r\\n\\r\\n    // ************************ //\\r\\n    // *** PUBLIC FUNCTIONS *** //\\r\\n    // ************************ //\\r\\n    /// @notice swaps token in with token out\\r\\n    /// @dev returns both amount and shares\\r\\n    /// @param tokenInId YieldBox asset id\\r\\n    /// @param tokenOutId YieldBox asset id\\r\\n    /// @param shareIn Shares to be swapped\\r\\n    /// @param to Receiver address\\r\\n    /// @param amountOutMin Minimum amount to be received\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    function swap(\\r\\n        uint256 tokenInId,\\r\\n        uint256 tokenOutId,\\r\\n        uint256 shareIn,\\r\\n        address to,\\r\\n        uint256 amountOutMin,\\r\\n        bytes calldata dexData\\r\\n    ) external override returns (uint256 amountOut, uint256 shareOut) {\\r\\n        address[] memory path = abi.decode(dexData, (address[]));\\r\\n        (uint256 amountIn, ) = yieldBox.withdraw(\\r\\n            tokenInId,\\r\\n            address(this),\\r\\n            address(this),\\r\\n            0,\\r\\n            shareIn\\r\\n        );\\r\\n\\r\\n        amountOut = _swapExactTokensForTokens(\\r\\n            amountIn,\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        IERC20(path[path.length - 1]).approve(address(yieldBox), amountOut);\\r\\n        (, shareOut) = yieldBox.depositAsset(\\r\\n            tokenOutId,\\r\\n            address(this),\\r\\n            to,\\r\\n            amountOut,\\r\\n            0\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // ************************* //\\r\\n    // *** PRIVATE FUNCTIONS *** //\\r\\n    // ************************* //\\r\\n    // Swaps an exact amount of tokens for another token through the path passed as an argument\\r\\n    // Returns the amount of the final token\\r\\n    function _swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] memory path,\\r\\n        address to\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(\\r\\n            factory,\\r\\n            amountIn,\\r\\n            path,\\r\\n            pairCodeHash\\r\\n        );\\r\\n        amountOut = amounts[amounts.length - 1];\\r\\n        require(amountOut >= amountOutMin, \\\"insufficient-amount-out\\\");\\r\\n        // Required for the next step\\r\\n        IERC20(path[0]).safeTransfer(\\r\\n            UniswapV2Library.pairFor(factory, path[0], path[1], pairCodeHash),\\r\\n            amountIn\\r\\n        );\\r\\n        _swap(amounts, path, to);\\r\\n    }\\r\\n\\r\\n    // requires the initial amount to have already been sent to the first pair\\r\\n    function _swap(\\r\\n        uint256[] memory amounts,\\r\\n        address[] memory path,\\r\\n        address _to\\r\\n    ) internal virtual {\\r\\n        for (uint256 i; i < path.length - 1; i++) {\\r\\n            (address input, address output) = (path[i], path[i + 1]);\\r\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\r\\n            uint256 amountOut = amounts[i + 1];\\r\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\r\\n                ? (uint256(0), amountOut)\\r\\n                : (amountOut, uint256(0));\\r\\n            address to = i < path.length - 2\\r\\n                ? UniswapV2Library.pairFor(\\r\\n                    factory,\\r\\n                    output,\\r\\n                    path[i + 2],\\r\\n                    pairCodeHash\\r\\n                )\\r\\n                : _to;\\r\\n\\r\\n            IUniswapV2Pair(\\r\\n                UniswapV2Library.pairFor(factory, input, output, pairCodeHash)\\r\\n            ).swap(amount0Out, amount1Out, to, new bytes(0));\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6d42a168f1543e6dc013938e34ccf37be0bd5d0a35c5173913b8ce7296c8c717\",\"license\":\"UNLICENSED\"},\"contracts/Swapper/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x814e9f72a8fb573d012fc20dddef94e1260b4c5391335e50369b0a640b1b3217\",\"license\":\"UNLICENSED\"},\"contracts/Swapper/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(\\r\\n        address to\\r\\n    ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5460a26c1b7bd724e515eb668ed64b1d13540fa444d9fa6beb53518396e199d5\",\"license\":\"UNLICENSED\"},\"contracts/Swapper/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity >=0.6.6;\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc0369b9b483ff1943f19cdfc6e1aba2443defbb9375b154bef051d6ab02715d5\",\"license\":\"UNLICENSED\"},\"contracts/Swapper/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\r\\n\\r\\n// solhint-disable max-line-length\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\r\\n        (token0, token1) = tokenA < tokenB\\r\\n            ? (tokenA, tokenB)\\r\\n            : (tokenB, tokenA);\\r\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(\\r\\n        address factory,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bytes32 pairCodeHash\\r\\n    ) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(\\r\\n            uint160(\\r\\n                uint256(\\r\\n                    keccak256(\\r\\n                        abi.encodePacked(\\r\\n                            hex\\\"ff\\\",\\r\\n                            factory,\\r\\n                            keccak256(abi.encodePacked(token0, token1)),\\r\\n                            pairCodeHash // init code hash\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // fetches and sorts the reserves for a pair\\r\\n    function getReserves(\\r\\n        address factory,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bytes32 pairCodeHash\\r\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\r\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\r\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\r\\n            pairFor(factory, tokenA, tokenB, pairCodeHash)\\r\\n        ).getReserves();\\r\\n        (reserveA, reserveB) = tokenA == token0\\r\\n            ? (reserve0, reserve1)\\r\\n            : (reserve1, reserve0);\\r\\n    }\\r\\n\\r\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) internal pure returns (uint256 amountB) {\\r\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\r\\n        require(\\r\\n            reserveA > 0 && reserveB > 0,\\r\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n        amountB = amountA.mul(reserveB) / reserveA;\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) internal pure returns (uint256 amountOut) {\\r\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\r\\n        require(\\r\\n            reserveIn > 0 && reserveOut > 0,\\r\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n        uint256 amountInWithFee = amountIn.mul(997);\\r\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) internal pure returns (uint256 amountIn) {\\r\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\r\\n        require(\\r\\n            reserveIn > 0 && reserveOut > 0,\\r\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\r\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\r\\n        amountIn = (numerator / denominator).add(1);\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountOut calculations on any number of pairs\\r\\n    function getAmountsOut(\\r\\n        address factory,\\r\\n        uint256 amountIn,\\r\\n        address[] memory path,\\r\\n        bytes32 pairCodeHash\\r\\n    ) internal view returns (uint256[] memory amounts) {\\r\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\r\\n        amounts = new uint256[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint256 i; i < path.length - 1; i++) {\\r\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\r\\n                factory,\\r\\n                path[i],\\r\\n                path[i + 1],\\r\\n                pairCodeHash\\r\\n            );\\r\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountIn calculations on any number of pairs\\r\\n    function getAmountsIn(\\r\\n        address factory,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        bytes32 pairCodeHash\\r\\n    ) internal view returns (uint256[] memory amounts) {\\r\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\r\\n        amounts = new uint256[](path.length);\\r\\n        amounts[amounts.length - 1] = amountOut;\\r\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\r\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\r\\n                factory,\\r\\n                path[i - 1],\\r\\n                path[i],\\r\\n                pairCodeHash\\r\\n            );\\r\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8ad76ca55416d6127fbd4cc3d543a98189da0e7be1450d7b1a4735bc65f40349\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ISwapper {\\r\\n    /// @notice returns the possible output amount for input share\\r\\n    /// @param tokenInId YieldBox asset id\\r\\n    /// @param shareIn Shares to get the amount for\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    ///     - for Curve, it should contain uint256[] tokenIndexes\\r\\n    function getOutputAmount(\\r\\n        uint256 tokenInId,\\r\\n        uint256 shareIn,\\r\\n        bytes calldata dexData\\r\\n    ) external view returns (uint256 amountOut);\\r\\n\\r\\n    /// @notice returns necessary input amount for a fixed output amount\\r\\n    /// @param tokenOutId YieldBox asset id\\r\\n    /// @param shareOut Shares out to compute the amount for\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    function getInputAmount(\\r\\n        uint256 tokenOutId,\\r\\n        uint256 shareOut,\\r\\n        bytes calldata dexData\\r\\n    ) external view returns (uint256 amountIn);\\r\\n\\r\\n    /// @notice swaps token in with token out\\r\\n    /// @dev returns both amount and shares\\r\\n    /// @param tokenInId YieldBox asset id\\r\\n    /// @param tokenOutId YieldBox asset id\\r\\n    /// @param shareIn Shares to be swapped\\r\\n    /// @param to Receiver address\\r\\n    /// @param amountOutMin Minimum amount to be received\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    ///     - for Curve, it should contain uint256[] tokenIndexes\\r\\n    function swap(\\r\\n        uint256 tokenInId,\\r\\n        uint256 tokenOutId,\\r\\n        uint256 shareIn,\\r\\n        address to,\\r\\n        uint256 amountOutMin,\\r\\n        bytes calldata dexData\\r\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\r\\n}\\r\\n\",\"keccak256\":\"0x732f6f2f5468f60ac354afed655bc603ba7f26eb805166f011d9d985722cd55c\",\"license\":\"UNLICENSED\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\nimport \\\"./ERC1155.sol\\\";\\n\\n// An asset is a token + a strategy\\nstruct Asset {\\n    TokenType tokenType;\\n    address contractAddress;\\n    IStrategy strategy;\\n    uint256 tokenId;\\n}\\n\\ncontract AssetRegister is ERC1155 {\\n    using BoringAddress for address;\\n\\n    mapping(address => mapping(address => mapping(uint256 => bool))) public isApprovedForAsset;\\n\\n    event AssetRegistered(\\n        TokenType indexed tokenType,\\n        address indexed contractAddress,\\n        IStrategy strategy,\\n        uint256 indexed tokenId,\\n        uint256 assetId\\n    );\\n    event ApprovalForAsset(address indexed sender, address indexed operator, uint256 assetId, bool approved);\\n\\n    // ids start at 1 so that id 0 means it's not yet registered\\n    mapping(TokenType => mapping(address => mapping(IStrategy => mapping(uint256 => uint256)))) public ids;\\n    Asset[] public assets;\\n\\n    constructor() {\\n        assets.push(Asset(TokenType.None, address(0), NO_STRATEGY, 0));\\n    }\\n\\n    function assetCount() public view returns (uint256) {\\n        return assets.length;\\n    }\\n\\n    function _registerAsset(\\n        TokenType tokenType,\\n        address contractAddress,\\n        IStrategy strategy,\\n        uint256 tokenId\\n    ) internal returns (uint256 assetId) {\\n        // Checks\\n        assetId = ids[tokenType][contractAddress][strategy][tokenId];\\n\\n        // If assetId is 0, this is a new asset that needs to be registered\\n        if (assetId == 0) {\\n            // Only do these checks if a new asset needs to be created\\n            require(tokenId == 0 || tokenType != TokenType.ERC20, \\\"YieldBox: No tokenId for ERC20\\\");\\n            require(\\n                tokenType == TokenType.Native ||\\n                    (tokenType == strategy.tokenType() && contractAddress == strategy.contractAddress() && tokenId == strategy.tokenId()),\\n                \\\"YieldBox: Strategy mismatch\\\"\\n            );\\n            // If a new token gets added, the isContract checks that this is a deployed contract. Needed for security.\\n            // Prevents getting shares for a future token whose address is known in advance. For instance a token that will be deployed with CREATE2 in the future or while the contract creation is\\n            // in the mempool\\n            require((tokenType == TokenType.Native && contractAddress == address(0)) || contractAddress.isContract(), \\\"YieldBox: Not a token\\\");\\n\\n            // Effects\\n            assetId = assets.length;\\n            assets.push(Asset(tokenType, contractAddress, strategy, tokenId));\\n            ids[tokenType][contractAddress][strategy][tokenId] = assetId;\\n\\n            // The actual URI isn't emitted here as per EIP1155, because that would make this call super expensive.\\n            emit URI(\\\"\\\", assetId);\\n            emit AssetRegistered(tokenType, contractAddress, strategy, tokenId, assetId);\\n        }\\n    }\\n\\n    function registerAsset(TokenType tokenType, address contractAddress, IStrategy strategy, uint256 tokenId) public returns (uint256 assetId) {\\n        // Native assets can only be added internally by the NativeTokenFactory\\n        require(\\n            tokenType == TokenType.ERC20 || tokenType == TokenType.ERC721 || tokenType == TokenType.ERC1155,\\n            \\\"AssetManager: cannot add Native\\\"\\n        );\\n        assetId = _registerAsset(tokenType, contractAddress, strategy, tokenId);\\n    }\\n\\n    function setApprovalForAsset(address operator, uint256 assetId, bool approved) external virtual {\\n        require(assetId < assetCount(), \\\"AssetManager: asset not valid\\\");\\n        isApprovedForAsset[msg.sender][operator][assetId] = approved;\\n\\n        emit ApprovalForAsset(msg.sender, operator, assetId, approved);\\n    }\\n}\\n\",\"keccak256\":\"0x614d8dd6ef5b414eda33855d3f55091d8669169d8f8ca584153c91111094c72f\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/BoringMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary BoringMath {\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= type(uint128).max, \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= type(uint64).max, \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= type(uint32).max, \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n\\n    function muldiv(\\n        uint256 value,\\n        uint256 mul,\\n        uint256 div,\\n        bool roundUp\\n    ) internal pure returns (uint256 result) {\\n        result = (value * mul) / div;\\n        if (roundUp && (result * div) / mul < value) {\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x72b9e717e3845aa584e81dee9a2f486c42941ebdb552130887b383ce59a7627d\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\n\\n// Written by OreNoMochi (https://github.com/OreNoMochii), BoringCrypto\\n\\ncontract ERC1155 is IERC1155 {\\n    using BoringAddress for address;\\n\\n    // mappings\\n\\n    mapping(address => mapping(address => bool)) public override isApprovedForAll; // map of operator approval\\n    mapping(address => mapping(uint256 => uint256)) public override balanceOf; // map of tokens owned by\\n    mapping(uint256 => uint256) public totalSupply; // totalSupply per token\\n\\n    function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\\n        return\\n            interfaceID == this.supportsInterface.selector || // EIP-165\\n            interfaceID == 0xd9b67a26 || // ERC-1155\\n            interfaceID == 0x0e89341c; // EIP-1155 Metadata\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view override returns (uint256[] memory balances) {\\n        uint256 len = owners.length;\\n        require(len == ids.length, \\\"ERC1155: Length mismatch\\\");\\n\\n        balances = new uint256[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            balances[i] = balanceOf[owners[i]][ids[i]];\\n        }\\n    }\\n\\n    function _mint(address to, uint256 id, uint256 value) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[to][id] += value;\\n        totalSupply[id] += value;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, value);\\n    }\\n\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        require(from != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        totalSupply[id] -= value;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, value);\\n    }\\n\\n    function _transferSingle(address from, address to, uint256 id, uint256 value) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        balanceOf[to][id] += value;\\n\\n        emit TransferSingle(msg.sender, from, to, id, value);\\n    }\\n\\n    function _transferBatch(address from, address to, uint256[] calldata ids, uint256[] calldata values) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        uint256 len = ids.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 id = ids[i];\\n            uint256 value = values[i];\\n            balanceOf[from][id] -= value;\\n            balanceOf[to][id] += value;\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, values);\\n    }\\n\\n    function _requireTransferAllowed(address _from, bool _approved) internal view virtual {\\n        require(_from == msg.sender || _approved || isApprovedForAll[_from][msg.sender] == true, \\\"Transfer not allowed\\\");\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external override {\\n        _requireTransferAllowed(from, false);\\n\\n        _transferSingle(from, to, id, value);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, value, data) ==\\n                    bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override {\\n        require(ids.length == values.length, \\\"ERC1155: Length mismatch\\\");\\n        _requireTransferAllowed(from, false);\\n\\n        _transferBatch(from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, values, data) ==\\n                    bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function uri(uint256 /*assetId*/) external view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x946ff1e91845883dc69b26d2547bb8d53b0fabe08dcb6c4f8e4d6c32d585195c\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\n\\ncontract ERC1155TokenReceiver is IERC1155TokenReceiver {\\n    // ERC1155 receivers that simple accept the transfer\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xf23a6e61; //bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xbc197c81; //bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))\\n    }\\n}\\n\",\"keccak256\":\"0xdfcb43caa675d8c9d0864f300257d2cf1b263f2206c862f601abf86863dfde6d\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol\\\";\\n\\ncontract ERC721TokenReceiver is IERC721TokenReceiver {\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return 0x150b7a02; //bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\n    }\\n}\\n\",\"keccak256\":\"0x6278868ed51f956038b649b6d4b212e620c1563a31ddfd666c6f1d2fb5aa2f4f\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"./AssetRegister.sol\\\";\\nimport \\\"./BoringMath.sol\\\";\\n\\nstruct NativeToken {\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n    string uri;\\n}\\n\\n/// @title NativeTokenFactory\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The NativeTokenFactory is a token factory to create ERC1155 tokens. This is used by YieldBox to create\\n/// native tokens in YieldBox. These have many benefits:\\n/// - low and predictable gas usage\\n/// - simplified approval\\n/// - no hidden features, all these tokens behave the same\\n\\ncontract NativeTokenFactory is AssetRegister {\\n    using BoringMath for uint256;\\n\\n    mapping(uint256 => NativeToken) public nativeTokens;\\n    mapping(uint256 => address) public owner;\\n    mapping(uint256 => address) public pendingOwner;\\n\\n    event TokenCreated(address indexed creator, string name, string symbol, uint8 decimals, uint256 tokenId);\\n    event OwnershipTransferred(uint256 indexed tokenId, address indexed previousOwner, address indexed newOwner);\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'msg.sender' is an address (an operator) that is approved by 'from', it's allowed.\\n    modifier allowed(address _from, uint256 _id) {\\n        _requireTransferAllowed(_from, isApprovedForAsset[_from][msg.sender][_id]);\\n        _;\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    /// @param tokenId The `tokenId` that the sender has to be owner of.\\n    modifier onlyOwner(uint256 tokenId) {\\n        require(msg.sender == owner[tokenId], \\\"NTF: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param tokenId The `tokenId` of the token that ownership whose ownership will be transferred/renounced.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(uint256 tokenId, address newOwner, bool direct, bool renounce) public onlyOwner(tokenId) {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"NTF: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(tokenId, owner[tokenId], newOwner);\\n            owner[tokenId] = newOwner;\\n            pendingOwner[tokenId] = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner[tokenId] = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    /// @param tokenId The `tokenId` of the token that ownership is claimed for.\\n    function claimOwnership(uint256 tokenId) public {\\n        address _pendingOwner = pendingOwner[tokenId];\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"NTF: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(tokenId, owner[tokenId], _pendingOwner);\\n        owner[tokenId] = _pendingOwner;\\n        pendingOwner[tokenId] = address(0);\\n    }\\n\\n    /// @notice Create a new native token. This will be an ERC1155 token. If later it's needed as an ERC20 token it can\\n    /// be wrapped into an ERC20 token. Native support for ERC1155 tokens is growing though.\\n    /// @param name The name of the token.\\n    /// @param symbol The symbol of the token.\\n    /// @param decimals The number of decimals of the token (this is just for display purposes). Should be set to 18 in normal cases.\\n    function createToken(string calldata name, string calldata symbol, uint8 decimals, string calldata uri) public returns (uint32 tokenId) {\\n        // To keep each Token unique in the AssetRegister, we use the assetId as the tokenId. So for native assets, the tokenId is always equal to the assetId.\\n        tokenId = assets.length.to32();\\n        _registerAsset(TokenType.Native, address(0), NO_STRATEGY, tokenId);\\n        // Initial supply is 0, use owner can mint. For a fixed supply the owner can mint and revoke ownership.\\n        // The msg.sender is the initial owner, can be changed after.\\n        nativeTokens[tokenId] = NativeToken(name, symbol, decimals, uri);\\n        owner[tokenId] = msg.sender;\\n\\n        emit TokenCreated(msg.sender, name, symbol, decimals, tokenId);\\n        emit TransferSingle(msg.sender, address(0), address(0), tokenId, 0);\\n        emit OwnershipTransferred(tokenId, address(0), msg.sender);\\n    }\\n\\n    /// @notice The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\\n    /// @param tokenId The token to be minted.\\n    /// @param to The account to transfer the minted tokens to.\\n    /// @param amount The amount of tokens to mint.\\n    /// @dev For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.\\n    function mint(uint256 tokenId, address to, uint256 amount) public onlyOwner(tokenId) {\\n        _mint(to, tokenId, amount);\\n    }\\n\\n    /// @notice Burns tokens. Only the holder of tokens can burn them or an approved operator.\\n    /// @param tokenId The token to be burned.\\n    /// @param amount The amount of tokens to burn.\\n    function burn(uint256 tokenId, address from, uint256 amount) public allowed(from, tokenId) {\\n        require(assets[tokenId].tokenType == TokenType.Native, \\\"NTF: Not native\\\");\\n        _burn(from, tokenId, amount);\\n    }\\n\\n    /// @notice The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\\n    /// @param tokenId The token to be minted.\\n    /// @param tos The accounts to transfer the minted tokens to.\\n    /// @param amounts The amounts of tokens to mint.\\n    /// @dev If the tos array is longer than the amounts array there will be an out of bounds error. If the amounts array is longer, the extra amounts are simply ignored.\\n    /// @dev For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.\\n    function batchMint(uint256 tokenId, address[] calldata tos, uint256[] calldata amounts) public onlyOwner(tokenId) {\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            _mint(tos[i], tokenId, amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Burns tokens. This is only useful to be used by an operator.\\n    /// @param tokenId The token to be burned.\\n    /// @param froms The accounts to burn tokens from.\\n    /// @param amounts The amounts of tokens to burn.\\n    function batchBurn(uint256 tokenId, address[] calldata froms, uint256[] calldata amounts) public {\\n        require(assets[tokenId].tokenType == TokenType.Native, \\\"NTF: Not native\\\");\\n        uint256 len = froms.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            _requireTransferAllowed(froms[i], isApprovedForAsset[froms[i]][msg.sender][tokenId]);\\n            _burn(froms[i], tokenId, amounts[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x12cfa2a50322ae33b741b6bd0bc63feff775d4ba034c9937bbc49f1c33190a96\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// The YieldBox\\n// The original BentoBox is owned by the Sushi team to set strategies for each token. Abracadabra wanted different strategies, which led to\\n// them launching their own DegenBox. The YieldBox solves this by allowing an unlimited number of strategies for each token in a fully\\n// permissionless manner. The YieldBox has no owner and operates fully permissionless.\\n\\n// Other improvements:\\n// Better system to make sure the token to share ratio doesn't reset.\\n// Full support for rebasing tokens.\\n\\n// This contract stores funds, handles their transfers, approvals and strategies.\\n\\n// Copyright (c) 2021, 2022 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Since the contract is permissionless, only one deployment per chain is needed. If it's not yet deployed\\n// on a chain or if you want to make a derivative work, contact @BoringCrypto. The core of YieldBox is\\n// copyrighted. Most of the contracts that it builds on are open source though.\\n\\n// BEWARE: Still under active development\\n// Security review not done yet\\n\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\nimport \\\"./interfaces/IWrappedNative.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/Domain.sol\\\";\\nimport \\\"./ERC721TokenReceiver.sol\\\";\\nimport \\\"./ERC1155TokenReceiver.sol\\\";\\nimport \\\"./ERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./AssetRegister.sol\\\";\\nimport \\\"./NativeTokenFactory.sol\\\";\\nimport \\\"./YieldBoxRebase.sol\\\";\\nimport \\\"./YieldBoxURIBuilder.sol\\\";\\nimport \\\"./YieldBoxPermit.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n\\n/// @title YieldBox\\n/// @author BoringCrypto, Keno\\n/// @notice The YieldBox is a vault for tokens. The stored tokens can assigned to strategies.\\n/// Yield from this will go to the token depositors.\\n/// Any funds transfered directly onto the YieldBox will be lost, use the deposit function instead.\\ncontract YieldBox is YieldBoxPermit, BoringBatchable, NativeTokenFactory, ERC721TokenReceiver, ERC1155TokenReceiver {\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n    using BoringAddress for address;\\n    using BoringERC20 for IERC20;\\n    using BoringERC20 for IWrappedNative;\\n    using YieldBoxRebase for uint256;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n    event Deposited(\\n        address indexed sender,\\n        address indexed from,\\n        address indexed to,\\n        uint256 assetId,\\n        uint256 amountIn,\\n        uint256 shareIn,\\n        uint256 amountOut,\\n        uint256 shareOut,\\n        bool isNFT\\n    );\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed from,\\n        address indexed to,\\n        uint256 assetId,\\n        uint256 amountIn,\\n        uint256 shareIn,\\n        uint256 amountOut,\\n        uint256 shareOut\\n    );\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n    IWrappedNative public immutable wrappedNative;\\n    YieldBoxURIBuilder public immutable uriBuilder;\\n\\n    constructor(IWrappedNative wrappedNative_, YieldBoxURIBuilder uriBuilder_) YieldBoxPermit(\\\"YieldBox\\\") {\\n        wrappedNative = wrappedNative_;\\n        uriBuilder = uriBuilder_;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` the strategy contract holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(Asset storage asset) internal view returns (uint256 amount) {\\n        return asset.strategy.currentBalance();\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param assetId The id of the asset.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount repesented in shares.\\n    function depositAsset(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from, assetId) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        Asset storage asset = assets[assetId];\\n        require(asset.tokenType != TokenType.Native && asset.tokenType != TokenType.ERC721, \\\"YieldBox: can't deposit type\\\");\\n\\n        // Effects\\n        uint256 totalAmount = _tokenBalanceOf(asset);\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = amount._toShares(totalSupply[assetId], totalAmount, false);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = share._toAmount(totalSupply[assetId], totalAmount, true);\\n        }\\n\\n        _mint(to, assetId, share);\\n\\n        // Interactions\\n        if (asset.tokenType == TokenType.ERC20) {\\n            // For ERC20 tokens, use the safe helper function to deal with broken ERC20 implementations. This actually calls transferFrom on the ERC20 contract.\\n            IERC20(asset.contractAddress).safeTransferFrom(from, address(asset.strategy), amount);\\n        } else {\\n            // ERC1155\\n            // When depositing yieldBox tokens into the yieldBox, things can be simplified\\n            if (asset.contractAddress == address(this)) {\\n                _transferSingle(from, address(asset.strategy), asset.tokenId, amount);\\n            } else {\\n                IERC1155(asset.contractAddress).safeTransferFrom(from, address(asset.strategy), asset.tokenId, amount, \\\"\\\");\\n            }\\n        }\\n\\n        asset.strategy.deposited(amount);\\n\\n        emit Deposited(msg.sender, from, to, assetId, amount, share, amountOut, shareOut, false);\\n\\n        return (amount, share);\\n    }\\n\\n    /// @notice Deposit an NFT asset\\n    /// @param assetId The id of the asset.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount repesented in shares.\\n    function depositNFTAsset(\\n        uint256 assetId,\\n        address from,\\n        address to\\n    ) public allowed(from, assetId) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        Asset storage asset = assets[assetId];\\n        require(asset.tokenType == TokenType.ERC721, \\\"YieldBox: not ERC721\\\");\\n\\n        // Effects\\n        _mint(to, assetId, 1);\\n\\n        // Interactions\\n        IERC721(asset.contractAddress).safeTransferFrom(from, address(asset.strategy), asset.tokenId);\\n\\n        asset.strategy.deposited(1);\\n\\n        emit Deposited(msg.sender, from, to, assetId, 1, 1, 1, 1, true);\\n\\n        return (1, 1);\\n    }\\n\\n    /// @notice Deposit ETH asset\\n    /// @param assetId The id of the asset.\\n    /// @param to which account to push the tokens.\\n    /// @param amount ETH amount to deposit.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount repesented in shares.\\n    function depositETHAsset(\\n        uint256 assetId,\\n        address to,\\n        uint256 amount\\n    ) public payable returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        Asset storage asset = assets[assetId];\\n        require(asset.tokenType == TokenType.ERC20 && asset.contractAddress == address(wrappedNative), \\\"YieldBox: not wrappedNative\\\");\\n\\n        // Effects\\n        uint256 share = amount._toShares(totalSupply[assetId], _tokenBalanceOf(asset), false);\\n\\n        _mint(to, assetId, share);\\n\\n        // Interactions\\n        wrappedNative.deposit{ value: amount }();\\n        // Strategies always receive wrappedNative (supporting both wrapped and raw native tokens adds too much complexity)\\n        wrappedNative.safeTransfer(address(asset.strategy), amount);\\n        asset.strategy.deposited(amount);\\n\\n        emit Deposited(msg.sender, msg.sender, to, assetId, amount, share, amountOut, shareOut, false);\\n\\n        return (amount, share);\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param assetId The id of the asset.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from, assetId) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        Asset storage asset = assets[assetId];\\n        require(asset.tokenType != TokenType.Native, \\\"YieldBox: can't withdraw Native\\\");\\n\\n        // Handle ERC721 separately\\n        if (asset.tokenType == TokenType.ERC721) {\\n            return _withdrawNFT(asset, assetId, from, to);\\n        }\\n\\n        return _withdrawFungible(asset, assetId, from, to, amount, share);\\n    }\\n\\n    /// @notice Handles burning and withdrawal of ERC20 and 1155 tokens.\\n    /// @param asset The asset to withdraw.\\n    /// @param assetId The id of the asset.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    function _withdrawNFT(\\n        Asset storage asset,\\n        uint256 assetId,\\n        address from,\\n        address to\\n    ) internal returns (uint256 amountOut, uint256 shareOut) {\\n        _burn(from, assetId, 1);\\n\\n        // Interactions\\n        asset.strategy.withdraw(to, 1);\\n\\n        emit Withdraw(msg.sender, from, to, assetId, 1, 1, 1, 1);\\n\\n        return (1, 1);\\n    }\\n\\n    /// @notice Handles burning and withdrawal of ERC20 and 1155 tokens.\\n    /// @param asset The asset to withdraw.\\n    /// @param assetId The id of the asset.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function _withdrawFungible(\\n        Asset storage asset,\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) internal returns (uint256 amountOut, uint256 shareOut) {\\n        // Effects\\n        uint256 totalAmount = _tokenBalanceOf(asset);\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = amount._toShares(totalSupply[assetId], totalAmount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = share._toAmount(totalSupply[assetId], totalAmount, false);\\n        }\\n\\n        _burn(from, assetId, share);\\n\\n        // Interactions\\n        asset.strategy.withdraw(to, amount);\\n\\n        emit Withdraw(msg.sender, from, to, assetId, amount, share, amountOut, shareOut);\\n\\n        return (amount, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param assetId The id of the asset.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 assetId,\\n        uint256 share\\n    ) public allowed(from, assetId) {\\n        _transferSingle(from, to, assetId, share);\\n    }\\n\\n    function batchTransfer(\\n        address from,\\n        address to,\\n        uint256[] calldata assetIds_,\\n        uint256[] calldata shares_\\n    ) public allowed(from, type(uint256).max) {\\n        _transferBatch(from, to, assetIds_, shares_);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param assetId The id of the asset.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    function transferMultiple(\\n        address from,\\n        address[] calldata tos,\\n        uint256 assetId,\\n        uint256[] calldata shares\\n    ) public allowed(from, type(uint256).max) {\\n        // Checks\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            require(tos[i] != address(0), \\\"YieldBox: to not set\\\"); // To avoid a bad UI from burning funds\\n        }\\n\\n        // Effects\\n        uint256 totalAmount;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            uint256 share_ = shares[i];\\n            balanceOf[to][assetId] += share_;\\n            totalAmount += share_;\\n            emit TransferSingle(msg.sender, from, to, assetId, share_);\\n        }\\n        balanceOf[from][assetId] -= totalAmount;\\n    }\\n\\n    /// @notice Update approval status for an operator\\n    /// @param operator The address approved to perform actions on your behalf\\n    /// @param approved True/False\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        // Checks\\n        require(operator != address(0), \\\"YieldBox: operator not set\\\"); // Important for security\\n        require(operator != address(this), \\\"YieldBox: can't approve yieldBox\\\");\\n\\n        // Effects\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @notice Update approval status for an operator\\n    /// @param _owner The YieldBox account owner\\n    /// @param operator The address approved to perform actions on your behalf\\n    /// @param approved True/False\\n    function _setApprovalForAll(\\n        address _owner,\\n        address operator,\\n        bool approved\\n    ) internal override{\\n        isApprovedForAll[_owner][operator] = approved;\\n        emit ApprovalForAll(_owner, operator, approved);\\n    }\\n\\n    /// @notice Update approval status for an operator and for a specific asset\\n    /// @param operator The address approved to perform actions on your behalf\\n    /// @param assetId The asset id  to update approval status for\\n    /// @param approved True/False\\n    function setApprovalForAsset(\\n        address operator,\\n        uint256 assetId,\\n        bool approved\\n    ) external override {\\n        // Checks\\n        require(operator != address(0), \\\"YieldBox: operator not set\\\"); // Important for security\\n        require(operator != address(this), \\\"YieldBox: can't approve yieldBox\\\");\\n        require(assetId < assetCount(), \\\"YieldBox: asset not valid\\\");\\n\\n        // Effects\\n        _setApprovalForAsset(msg.sender, operator, assetId, approved);\\n    }\\n\\n    /// @notice Update approval status for an operator and for a specific asset\\n    /// @param _owner The owner of the asset\\n    /// @param operator The address approved to perform actions on your behalf\\n    /// @param assetId The asset id  to update approval status for\\n    /// @param approved True/False\\n    function _setApprovalForAsset(\\n        address _owner,\\n        address operator,\\n        uint256 assetId,\\n        bool approved\\n    ) internal override {\\n        isApprovedForAsset[_owner][operator][assetId] = approved;\\n        emit ApprovalForAsset(_owner, operator, assetId, approved);\\n    }\\n\\n    // This functionality has been split off into a separate contract. This is only a view function, so gas usage isn't a huge issue.\\n    // This keeps the YieldBox contract smaller, so it can be optimized more.\\n    function uri(uint256 assetId) external view override returns (string memory) {\\n        return uriBuilder.uri(assets[assetId], nativeTokens[assetId], totalSupply[assetId], owner[assetId]);\\n    }\\n\\n    function name(uint256 assetId) external view returns (string memory) {\\n        return uriBuilder.name(assets[assetId], nativeTokens[assetId].name);\\n    }\\n\\n    function symbol(uint256 assetId) external view returns (string memory) {\\n        return uriBuilder.symbol(assets[assetId], nativeTokens[assetId].symbol);\\n    }\\n\\n    function decimals(uint256 assetId) external view returns (uint8) {\\n        return uriBuilder.decimals(assets[assetId], nativeTokens[assetId].decimals);\\n    }\\n\\n    // Helper functions\\n\\n    /// @notice Helper function to return totals for an asset\\n    /// @param assetId The regierestered asset id\\n    /// @return totalShare The total amount for asset represented in shares\\n    /// @return totalAmount The total amount for asset\\n    function assetTotals(uint256 assetId) external view returns (uint256 totalShare, uint256 totalAmount) {\\n        totalShare = totalSupply[assetId];\\n        totalAmount = _tokenBalanceOf(assets[assetId]);\\n    }\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param assetId The id of the asset.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        uint256 assetId,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        if (assets[assetId].tokenType == TokenType.Native || assets[assetId].tokenType == TokenType.ERC721) {\\n            share = amount;\\n        } else {\\n            share = amount._toShares(totalSupply[assetId], _tokenBalanceOf(assets[assetId]), roundUp);\\n        }\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param assetId The id of the asset.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        uint256 assetId,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        if (assets[assetId].tokenType == TokenType.Native || assets[assetId].tokenType == TokenType.ERC721) {\\n            amount = share;\\n        } else {\\n            amount = share._toAmount(totalSupply[assetId], _tokenBalanceOf(assets[assetId]), roundUp);\\n        }\\n    }\\n\\n    /// @dev Helper function represent the balance in `token` amount for a `user` for an `asset`.\\n    /// @param user The `user` to get the amount for.\\n    /// @param assetId The id of the asset.\\n    function amountOf(address user, uint256 assetId) external view returns (uint256 amount) {\\n        if (assets[assetId].tokenType == TokenType.Native || assets[assetId].tokenType == TokenType.ERC721) {\\n            amount = balanceOf[user][assetId];\\n        } else {\\n            amount = balanceOf[user][assetId]._toAmount(totalSupply[assetId], _tokenBalanceOf(assets[assetId]), false);\\n        }\\n    }\\n\\n    /// @notice Helper function to register & deposit an asset\\n    /// @param tokenType Registration token type.\\n    /// @param contractAddress Token address.\\n    /// @param strategy Asset's strategy address.\\n    /// @param tokenId Registration token id.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount amount to deposit.\\n    /// @param share amount to deposit represented in shares.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount repesented in shares.\\n    function deposit(\\n        TokenType tokenType,\\n        address contractAddress,\\n        IStrategy strategy,\\n        uint256 tokenId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public returns (uint256 amountOut, uint256 shareOut) {\\n        if (tokenType == TokenType.Native) {\\n            // If native token, register it as an ERC1155 asset (as that's what it is)\\n            return depositAsset(registerAsset(TokenType.ERC1155, address(this), strategy, tokenId), from, to, amount, share);\\n        } else {\\n            return depositAsset(registerAsset(tokenType, contractAddress, strategy, tokenId), from, to, amount, share);\\n        }\\n    }\\n\\n    /// @notice Helper function to register & deposit ETH\\n    /// @param strategy Asset's strategy address.\\n    /// @param amount amount to deposit.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount repesented in shares.\\n    function depositETH(\\n        IStrategy strategy,\\n        address to,\\n        uint256 amount\\n    ) public payable returns (uint256 amountOut, uint256 shareOut) {\\n        return depositETHAsset(registerAsset(TokenType.ERC20, address(wrappedNative), strategy, 0), to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc8a1e20fad72a94030af574e1b593eef13e85648d012fd273d253731a5ef6b54\",\"license\":\"UNLICENSED\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxPermit.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./interfaces/IYieldBox.sol\\\";\\n\\n/**\\n * Modification of the OpenZeppelin ERC20Permit contract to support ERC721 tokens.\\n * OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol).\\n *\\n * @dev Implementation of the ERC-4494 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-4494[EIP-4494].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC721 allowance (see {IERC721-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC721-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract YieldBoxPermit is EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 assetId,uint256 nonce,uint256 deadline)\\\");\\n    \\n\\n    bytes32 private constant _PERMIT_ALL_TYPEHASH =\\n        keccak256(\\\"PermitAll(address owner,address spender,uint256 nonce,uint256 deadline)\\\");\\n    \\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC721 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 assetId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(block.timestamp <= deadline, \\\"YieldBoxPermit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, assetId, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"YieldBoxPermit: invalid signature\\\");\\n\\n        _setApprovalForAsset(owner, spender, assetId, true);\\n    }\\n\\n\\n    function _setApprovalForAsset(\\n        address owner,\\n        address spender,\\n        uint256 assetId,\\n        bool approved\\n    ) internal virtual;\\n\\n\\n    function permitAll(\\n        address owner,\\n        address spender,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(block.timestamp <= deadline, \\\"YieldBoxPermit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_ALL_TYPEHASH, owner, spender, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"YieldBoxPermit: invalid signature\\\");\\n\\n        _setApprovalForAll(owner, spender, true);\\n    }\\n\\n    function _setApprovalForAll(\\n        address _owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual;\\n    \\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x4b7a7a6df1334f2019b90a4a64286a7ffdf32711109a0309d7d95f94ae5b25ee\",\"license\":\"UNLICENSED\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxRebase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/Domain.sol\\\";\\nimport \\\"./ERC1155TokenReceiver.sol\\\";\\nimport \\\"./ERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/BoringFactory.sol\\\";\\n\\nlibrary YieldBoxRebase {\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function _toShares(\\n        uint256 amount,\\n        uint256 totalShares_,\\n        uint256 totalAmount,\\n        bool roundUp\\n    ) internal pure returns (uint256 share) {\\n        // To prevent reseting the ratio due to withdrawal of all shares, we start with\\n        // 1 amount/1e8 shares already burned. This also starts with a 1 : 1e8 ratio which\\n        // functions like 8 decimal fixed point math. This prevents ratio attacks or inaccuracy\\n        // due to 'gifting' or rebasing tokens. (Up to a certain degree)\\n        totalAmount++;\\n        totalShares_ += 1e8;\\n\\n        // Calculte the shares using te current amount to share ratio\\n        share = (amount * totalShares_) / totalAmount;\\n\\n        // Default is to round down (Solidity), round up if required\\n        if (roundUp && (share * totalAmount) / totalShares_ < amount) {\\n            share++;\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function _toAmount(\\n        uint256 share,\\n        uint256 totalShares_,\\n        uint256 totalAmount,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount) {\\n        // To prevent reseting the ratio due to withdrawal of all shares, we start with\\n        // 1 amount/1e8 shares already burned. This also starts with a 1 : 1e8 ratio which\\n        // functions like 8 decimal fixed point math. This prevents ratio attacks or inaccuracy\\n        // due to 'gifting' or rebasing tokens. (Up to a certain degree)\\n        totalAmount++;\\n        totalShares_ += 1e8;\\n\\n        // Calculte the amount using te current amount to share ratio\\n        amount = (share * totalAmount) / totalShares_;\\n\\n        // Default is to round down (Solidity), round up if required\\n        if (roundUp && (amount * totalShares_) / totalAmount < share) {\\n            amount++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x903bdfa00cef45f5502885fa878101d5e160102e06868d19fbade03a1fd2713d\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxURIBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\nimport \\\"./interfaces/IYieldBox.sol\\\";\\nimport \\\"./NativeTokenFactory.sol\\\";\\n\\n// solhint-disable quotes\\n\\ncontract YieldBoxURIBuilder {\\n    using BoringERC20 for IERC20;\\n    using Strings for uint256;\\n    using Base64 for bytes;\\n\\n    struct AssetDetails {\\n        string tokenType;\\n        string name;\\n        string symbol;\\n        uint256 decimals;\\n    }\\n\\n    function name(Asset calldata asset, string calldata nativeName) external view returns (string memory) {\\n        if (asset.strategy == NO_STRATEGY) {\\n            return nativeName;\\n        } else {\\n            if (asset.tokenType == TokenType.ERC20) {\\n                IERC20 token = IERC20(asset.contractAddress);\\n                return string(abi.encodePacked(token.safeName(), \\\" (\\\", asset.strategy.name(), \\\")\\\"));\\n            } else if (asset.tokenType == TokenType.ERC1155) {\\n                return\\n                    string(\\n                        abi.encodePacked(\\n                            string(\\n                                abi.encodePacked(\\n                                    \\\"ERC1155:\\\",\\n                                    uint256(uint160(asset.contractAddress)).toHexString(20),\\n                                    \\\"/\\\",\\n                                    asset.tokenId.toString()\\n                                )\\n                            ),\\n                            \\\" (\\\",\\n                            asset.strategy.name(),\\n                            \\\")\\\"\\n                        )\\n                    );\\n            } else {\\n                return string(abi.encodePacked(nativeName, \\\" (\\\", asset.strategy.name(), \\\")\\\"));\\n            }\\n        }\\n    }\\n\\n    function symbol(Asset calldata asset, string calldata nativeSymbol) external view returns (string memory) {\\n        if (asset.strategy == NO_STRATEGY) {\\n            return nativeSymbol;\\n        } else {\\n            if (asset.tokenType == TokenType.ERC20) {\\n                IERC20 token = IERC20(asset.contractAddress);\\n                return string(abi.encodePacked(token.safeSymbol(), \\\" (\\\", asset.strategy.name(), \\\")\\\"));\\n            } else if (asset.tokenType == TokenType.ERC1155) {\\n                return string(abi.encodePacked(\\\"ERC1155\\\", \\\" (\\\", asset.strategy.name(), \\\")\\\"));\\n            } else {\\n                return string(abi.encodePacked(nativeSymbol, \\\" (\\\", asset.strategy.name(), \\\")\\\"));\\n            }\\n        }\\n    }\\n\\n    function decimals(Asset calldata asset, uint8 nativeDecimals) external view returns (uint8) {\\n        if (asset.tokenType == TokenType.ERC1155) {\\n            return 0;\\n        } else if (asset.tokenType == TokenType.ERC20) {\\n            IERC20 token = IERC20(asset.contractAddress);\\n            return token.safeDecimals();\\n        } else {\\n            return nativeDecimals;\\n        }\\n    }\\n\\n    function uri(\\n        Asset calldata asset,\\n        NativeToken calldata nativeToken,\\n        uint256 totalSupply,\\n        address owner\\n    ) external view returns (string memory) {\\n        AssetDetails memory details;\\n        if (asset.tokenType == TokenType.ERC1155) {\\n            // Contracts can't retrieve URIs, so the details are out of reach\\n            details.tokenType = \\\"ERC1155\\\";\\n            details.name = string(\\n                abi.encodePacked(\\\"ERC1155:\\\", uint256(uint160(asset.contractAddress)).toHexString(20), \\\"/\\\", asset.tokenId.toString())\\n            );\\n            details.symbol = \\\"ERC1155\\\";\\n        } else if (asset.tokenType == TokenType.ERC20) {\\n            IERC20 token = IERC20(asset.contractAddress);\\n            details = AssetDetails(\\\"ERC20\\\", token.safeName(), token.safeSymbol(), token.safeDecimals());\\n        } else {\\n            // Native\\n            details.tokenType = \\\"Native\\\";\\n            details.name = nativeToken.name;\\n            details.symbol = nativeToken.symbol;\\n            details.decimals = nativeToken.decimals;\\n        }\\n\\n        string memory properties = string(\\n            asset.tokenType != TokenType.Native\\n                ? abi.encodePacked(',\\\"tokenAddress\\\":\\\"', uint256(uint160(asset.contractAddress)).toHexString(20), '\\\"')\\n                : abi.encodePacked(',\\\"totalSupply\\\":', totalSupply.toString(), ',\\\"fixedSupply\\\":', owner == address(0) ? \\\"true\\\" : \\\"false\\\")\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    abi\\n                        .encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            details.name,\\n                            '\\\",\\\"symbol\\\":\\\"',\\n                            details.symbol,\\n                            '\\\"',\\n                            asset.tokenType == TokenType.ERC1155 ? \\\"\\\" : ',\\\"decimals\\\":',\\n                            asset.tokenType == TokenType.ERC1155 ? \\\"\\\" : details.decimals.toString(),\\n                            ',\\\"properties\\\":{\\\"strategy\\\":\\\"',\\n                            uint256(uint160(address(asset.strategy))).toHexString(20),\\n                            '\\\",\\\"tokenType\\\":\\\"',\\n                            details.tokenType,\\n                            '\\\"',\\n                            properties,\\n                            asset.tokenType == TokenType.ERC1155 ? string(abi.encodePacked(',\\\"tokenId\\\":', asset.tokenId.toString())) : \\\"\\\",\\n                            \\\"}}\\\"\\n                        )\\n                        .encode()\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x48f41f8c40d0d724dd09c88f6db8d1559c3e8c0796f5e17fc87f348405f9d155\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title TokenType\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The YieldBox can hold different types of tokens:\\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\\nenum TokenType {\\n    Native,\\n    ERC20,\\n    ERC721,\\n    ERC1155,\\n    None\\n}\\n\",\"keccak256\":\"0xc6adb740ff68d4162214dfa9d406422a066ae2197b7f0c8df5daa7c84b4a10aa\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\nimport \\\"./IYieldBox.sol\\\";\\n\\ninterface IStrategy {\\n    /// Each strategy only works with a single asset. This should help make implementations simpler and more readable.\\n    /// To safe gas a proxy pattern (YieldBox factory) could be used to deploy the same strategy for multiple tokens.\\n\\n    /// It is recommended that strategies keep a small amount of funds uninvested (like 5%) to handle small withdrawals\\n    /// and deposits without triggering costly investing/divesting logic.\\n\\n    /// #########################\\n    /// ### Basic Information ###\\n    /// #########################\\n\\n    /// Returns the address of the yieldBox that this strategy is for\\n    function yieldBox() external view returns (IYieldBox yieldBox_);\\n\\n    /// Returns a name for this strategy\\n    function name() external view returns (string memory name_);\\n\\n    /// Returns a description for this strategy\\n    function description() external view returns (string memory description_);\\n\\n    /// #######################\\n    /// ### Supported Token ###\\n    /// #######################\\n\\n    /// Returns the standard that this strategy works with\\n    function tokenType() external view returns (TokenType tokenType_);\\n\\n    /// Returns the contract address that this strategy works with\\n    function contractAddress() external view returns (address contractAddress_);\\n\\n    /// Returns the tokenId that this strategy works with (for EIP1155)\\n    /// This is always 0 for EIP20 tokens\\n    function tokenId() external view returns (uint256 tokenId_);\\n\\n    /// ###########################\\n    /// ### Balance Information ###\\n    /// ###########################\\n\\n    /// Returns the total value the strategy holds (principle + gain) expressed in asset token amount.\\n    /// This should be cheap in gas to retrieve. Can return a bit less than the actual, but MUST NOT return more.\\n    /// The gas cost of this function will be paid on any deposit or withdrawal onto and out of the YieldBox\\n    /// that uses this strategy. Also, anytime a protocol converts between shares and amount, this gets called.\\n    function currentBalance() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn\\n    function withdrawable() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn for a low gas fee\\n    /// When more than this amount is withdrawn it will trigger divesting from the actual strategy\\n    /// which will incur higher gas costs\\n    function cheapWithdrawable() external view returns (uint256 amount);\\n\\n    /// ##########################\\n    /// ### YieldBox Functions ###\\n    /// ##########################\\n\\n    /// Is called by YieldBox to signal funds have been added, the strategy may choose to act on this\\n    /// When a large enough deposit is made, this should trigger the strategy to invest into the actual\\n    /// strategy. This function should normally NOT be used to invest on each call as that would be costly\\n    /// for small deposits.\\n    /// If the strategy handles native tokens (ETH) it will receive it directly (not wrapped). It will be\\n    /// up to the strategy to wrap it if needed.\\n    /// Only accept this call from the YieldBox\\n    function deposited(uint256 amount) external;\\n\\n    /// Is called by the YieldBox to ask the strategy to withdraw to the user\\n    /// When a strategy keeps a little reserve for cheap withdrawals and the requested withdrawal goes over this amount,\\n    /// the strategy should divest enough from the strategy to complete the withdrawal and rebalance the reserve.\\n    /// If the strategy handles native tokens (ETH) it should send this, not a wrapped version.\\n    /// With some strategies it might be hard to withdraw exactly the correct amount.\\n    /// Only accept this call from the YieldBox\\n    function withdraw(address to, uint256 amount) external;\\n}\\n\\nIStrategy constant NO_STRATEGY = IStrategy(address(0));\\n\",\"keccak256\":\"0x637400567ba619671921a58dd2b17c9d1fdacc27f0f021d79bb4f122ead71902\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IWrappedNative.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IWrappedNative is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x458479ed595ed2327cc2e9376657aaa592825838e21af7a54a0b7e852c0ddd80\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\n\\ninterface IYieldBox {\\n    function wrappedNative() external view returns (address wrappedNative);\\n\\n    function assets(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            TokenType tokenType,\\n            address contractAddress,\\n            address strategy,\\n            uint256 tokenId\\n        );\\n\\n    function nativeTokens(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            uint8 decimals\\n        );\\n\\n    function owner(uint256 assetId) external view returns (address owner);\\n\\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\\n\\n    function setApprovalForAsset(\\n        address operator,\\n        uint256 assetId,\\n        bool approved\\n    ) external;\\n\\n    function depositAsset(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function withdraw(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 assetId,\\n        uint256 share\\n    ) external;\\n\\n    function batchTransfer(\\n        address from,\\n        address to,\\n        uint256[] calldata assetIds_,\\n        uint256[] calldata shares_\\n    ) external;\\n\\n    function transferMultiple(\\n        address from,\\n        address[] calldata tos,\\n        uint256 assetId,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function toShare(\\n        uint256 assetId,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function toAmount(\\n        uint256 assetId,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x83e4c62b4059bbd59cac87eb714311f9304ce164ead7b45a7562067732fdc5d3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"creates a new MultiSwapper contract"},"getInputAmount(uint256,uint256,bytes)":{"notice":"returns necessary input amount for a fixed output amount"},"getOutputAmount(uint256,uint256,bytes)":{"notice":"returns the possible output amount for input share"},"swap(uint256,uint256,uint256,address,uint256,bytes)":{"notice":"swaps token in with token out"}},"notice":"Modified from https://github.com/sushiswap/kashi-lending/blob/master/contracts/swappers/SushiSwapMultiSwapper.sol","version":1}}},"contracts/Swapper/interfaces/IUniswapV2Factory.sol":{"IUniswapV2Factory":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token0","type":"address"},{"indexed":true,"internalType":"address","name":"token1","type":"address"},{"indexed":false,"internalType":"address","name":"pair","type":"address"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"}],"name":"PairCreated","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"allPairs","outputs":[{"internalType":"address","name":"pair","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"allPairsLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],"name":"createPair","outputs":[{"internalType":"address","name":"pair","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"feeTo","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeToSetter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],"name":"getPair","outputs":[{"internalType":"address","name":"pair","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"setFeeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"setFeeToSetter","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allPairs(uint256)":"1e3dd18b","allPairsLength()":"574f2ba3","createPair(address,address)":"c9c65396","feeTo()":"017e7e58","feeToSetter()":"094b7415","getPair(address,address)":"e6a43905","setFeeTo(address)":"f46901ed","setFeeToSetter(address)":"a2e74af6"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swapper/interfaces/IUniswapV2Factory.sol\":\"IUniswapV2Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Swapper/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x814e9f72a8fb573d012fc20dddef94e1260b4c5391335e50369b0a640b1b3217\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Swapper/interfaces/IUniswapV2Pair.sol":{"IUniswapV2Pair":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0In","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1In","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount0Out","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1Out","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Swap","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint112","name":"reserve0","type":"uint112"},{"indexed":false,"internalType":"uint112","name":"reserve1","type":"uint112"}],"name":"Sync","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MINIMUM_LIQUIDITY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"PERMIT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getReserves","outputs":[{"internalType":"uint112","name":"reserve0","type":"uint112"},{"internalType":"uint112","name":"reserve1","type":"uint112"},{"internalType":"uint32","name":"blockTimestampLast","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"kLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"liquidity","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"price0CumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"price1CumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"skim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount0Out","type":"uint256"},{"internalType":"uint256","name":"amount1Out","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"sync","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","MINIMUM_LIQUIDITY()":"ba9a7a56","PERMIT_TYPEHASH()":"30adf81f","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(address)":"89afcb44","decimals()":"313ce567","factory()":"c45a0155","getReserves()":"0902f1ac","initialize(address,address)":"485cc955","kLast()":"7464fc3d","mint(address)":"6a627842","name()":"06fdde03","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","price0CumulativeLast()":"5909c0d5","price1CumulativeLast()":"5a3d5493","skim(address)":"bc25cf77","swap(uint256,uint256,address,bytes)":"022c0d9f","symbol()":"95d89b41","sync()":"fff6cae9","token0()":"0dfe1681","token1()":"d21220a7","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swapper/interfaces/IUniswapV2Pair.sol\":\"IUniswapV2Pair\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Swapper/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(\\r\\n        address to\\r\\n    ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5460a26c1b7bd724e515eb668ed64b1d13540fa444d9fa6beb53518396e199d5\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Swapper/libraries/SafeMath.sol":{"SafeMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122073b0ca16f35b97a04d9daecdf2e343ed267e71d617e13dc9f937d4913b8aab7b64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0xB0CA16F35B97A04D9DAECDF2E343ED267E71D617 0xE1 RETURNDATASIZE 0xC9 0xF9 CALLDATACOPY 0xD4 SWAP2 EXTCODESIZE DUP11 0xAB PUSH28 0x64736F6C634300081200330000000000000000000000000000000000 ","sourceMap":"178:469:24:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122073b0ca16f35b97a04d9daecdf2e343ed267e71d617e13dc9f937d4913b8aab7b64736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH20 0xB0CA16F35B97A04D9DAECDF2E343ED267E71D617 0xE1 RETURNDATASIZE 0xC9 0xF9 CALLDATACOPY 0xD4 SWAP2 EXTCODESIZE DUP11 0xAB PUSH28 0x64736F6C634300081200330000000000000000000000000000000000 ","sourceMap":"178:469:24:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"add(uint256,uint256)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swapper/libraries/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Swapper/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity >=0.6.6;\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc0369b9b483ff1943f19cdfc6e1aba2443defbb9375b154bef051d6ab02715d5\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Swapper/libraries/UniswapV2Library.sol":{"UniswapV2Library":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220de3bf8cdde4ef75553d2e5d0d2e3e36f6d0d63dda05476312886e0c6f1578eab64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE EXTCODESIZE 0xF8 0xCD 0xDE 0x4E 0xF7 SSTORE MSTORE8 0xD2 0xE5 0xD0 0xD2 0xE3 0xE3 PUSH16 0x6D0D63DDA05476312886E0C6F1578EAB PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"177:5453:25:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220de3bf8cdde4ef75553d2e5d0d2e3e36f6d0d63dda05476312886e0c6f1578eab64736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE EXTCODESIZE 0xF8 0xCD 0xDE 0x4E 0xF7 SSTORE MSTORE8 0xD2 0xE5 0xD0 0xD2 0xE3 0xE3 PUSH16 0x6D0D63DDA05476312886E0C6F1578EAB PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"177:5453:25:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"getAmountIn(uint256,uint256,uint256)":"infinite","getAmountOut(uint256,uint256,uint256)":"infinite","getAmountsIn(address,uint256,address[] memory,bytes32)":"infinite","getAmountsOut(address,uint256,address[] memory,bytes32)":"infinite","getReserves(address,address,address,bytes32)":"infinite","pairFor(address,address,address,bytes32)":"infinite","quote(uint256,uint256,uint256)":"infinite","sortTokens(address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swapper/libraries/UniswapV2Library.sol\":\"UniswapV2Library\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Swapper/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(\\r\\n        address to\\r\\n    ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5460a26c1b7bd724e515eb668ed64b1d13540fa444d9fa6beb53518396e199d5\",\"license\":\"UNLICENSED\"},\"contracts/Swapper/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity >=0.6.6;\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc0369b9b483ff1943f19cdfc6e1aba2443defbb9375b154bef051d6ab02715d5\",\"license\":\"UNLICENSED\"},\"contracts/Swapper/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\r\\n\\r\\n// solhint-disable max-line-length\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\r\\n        (token0, token1) = tokenA < tokenB\\r\\n            ? (tokenA, tokenB)\\r\\n            : (tokenB, tokenA);\\r\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(\\r\\n        address factory,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bytes32 pairCodeHash\\r\\n    ) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(\\r\\n            uint160(\\r\\n                uint256(\\r\\n                    keccak256(\\r\\n                        abi.encodePacked(\\r\\n                            hex\\\"ff\\\",\\r\\n                            factory,\\r\\n                            keccak256(abi.encodePacked(token0, token1)),\\r\\n                            pairCodeHash // init code hash\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // fetches and sorts the reserves for a pair\\r\\n    function getReserves(\\r\\n        address factory,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bytes32 pairCodeHash\\r\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\r\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\r\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\r\\n            pairFor(factory, tokenA, tokenB, pairCodeHash)\\r\\n        ).getReserves();\\r\\n        (reserveA, reserveB) = tokenA == token0\\r\\n            ? (reserve0, reserve1)\\r\\n            : (reserve1, reserve0);\\r\\n    }\\r\\n\\r\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) internal pure returns (uint256 amountB) {\\r\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\r\\n        require(\\r\\n            reserveA > 0 && reserveB > 0,\\r\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n        amountB = amountA.mul(reserveB) / reserveA;\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) internal pure returns (uint256 amountOut) {\\r\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\r\\n        require(\\r\\n            reserveIn > 0 && reserveOut > 0,\\r\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n        uint256 amountInWithFee = amountIn.mul(997);\\r\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) internal pure returns (uint256 amountIn) {\\r\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\r\\n        require(\\r\\n            reserveIn > 0 && reserveOut > 0,\\r\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\r\\n        );\\r\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\r\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\r\\n        amountIn = (numerator / denominator).add(1);\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountOut calculations on any number of pairs\\r\\n    function getAmountsOut(\\r\\n        address factory,\\r\\n        uint256 amountIn,\\r\\n        address[] memory path,\\r\\n        bytes32 pairCodeHash\\r\\n    ) internal view returns (uint256[] memory amounts) {\\r\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\r\\n        amounts = new uint256[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint256 i; i < path.length - 1; i++) {\\r\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\r\\n                factory,\\r\\n                path[i],\\r\\n                path[i + 1],\\r\\n                pairCodeHash\\r\\n            );\\r\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountIn calculations on any number of pairs\\r\\n    function getAmountsIn(\\r\\n        address factory,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        bytes32 pairCodeHash\\r\\n    ) internal view returns (uint256[] memory amounts) {\\r\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\r\\n        amounts = new uint256[](path.length);\\r\\n        amounts[amounts.length - 1] = amountOut;\\r\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\r\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\r\\n                factory,\\r\\n                path[i - 1],\\r\\n                path[i],\\r\\n                pairCodeHash\\r\\n            );\\r\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8ad76ca55416d6127fbd4cc3d543a98189da0e7be1450d7b1a4735bc65f40349\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/TapiocaDeployer/TapiocaDeployer.sol":{"TapiocaDeployer":{"abi":[{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes32","name":"bytecodeHash","type":"bytes32"}],"name":"computeAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes32","name":"bytecodeHash","type":"bytes32"},{"internalType":"address","name":"deployer","type":"address"}],"name":"computeAddress","outputs":[{"internalType":"address","name":"addr","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"bytes","name":"bytecode","type":"bytes"}],"name":"deploy","outputs":[{"internalType":"address","name":"addr","type":"address"}],"stateMutability":"payable","type":"function"}],"devdoc":{"author":"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Create2.sol","kind":"dev","methods":{"computeAddress(bytes32,bytes32)":{"details":"Returns the address where a contract will be stored if deployed via {deploy}. Any change in the `bytecodeHash` or `salt` will result in a new destination address."},"computeAddress(bytes32,bytes32,address)":{"details":"Returns the address where a contract will be stored if deployed via {deploy} from a contract located at `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}."},"deploy(uint256,bytes32,bytes)":{"details":"Deploys a contract using `CREATE2`. The address where the contract will be deployed can be known in advance via {computeAddress}. The bytecode for a contract can be obtained from Solidity with `type(contractName).creationCode`. Requirements: - `bytecode` must not be empty. - `salt` must have not been used for `bytecode` already. - the factory must have a balance of at least `amount`. - if `amount` is non-zero, `bytecode` must have a `payable` constructor."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234610016576102c6908161001c8239f35b600080fdfe6040608081526004908136101561001557600080fd5b6000803560e01c8063481286e61461023b57806366cfa057146100925763780653061461004157600080fd5b3461008f57606036600319011261008f576044359273ffffffffffffffffffffffffffffffffffffffff91828516850361008f5750602093610087916024359035610270565b915191168152f35b80fd5b509190606036600319011261020d576044359167ffffffffffffffff81358185116102375736602386011215610237578483013582811161022457845192601f8201601f19908116603f0116840190811184821017610211578552808352602096878401916024973689838301011161020d579080898b93018537850101528147106101cb5782511561018b57915173ffffffffffffffffffffffffffffffffffffffff92863592f51692831561014b57505051908152f35b60199085606494519362461bcd60e51b85528401528201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152fd5b60648488888189519362461bcd60e51b85528401528201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152fd5b845162461bcd60e51b8152808501889052601d818801527f437265617465323a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b8280fd5b634e487b7160e01b885260418552602488fd5b634e487b7160e01b875260418452602487fd5b8580fd5b503461008f578160031936011261008f575073ffffffffffffffffffffffffffffffffffffffff610087602093309060243590355b90605592600b92604051926040840152602083015281520160ff8153209056fea26469706673582212200834c6dd06bdc9e9402e4ebfb21b02aacb181f01b5b7f8c8433036d941948edd64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x2C6 SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x481286E6 EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x66CFA057 EQ PUSH2 0x92 JUMPI PUSH4 0x78065306 EQ PUSH2 0x41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x8F JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8F JUMPI PUSH1 0x44 CALLDATALOAD SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 DUP6 AND DUP6 SUB PUSH2 0x8F JUMPI POP PUSH1 0x20 SWAP4 PUSH2 0x87 SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 CALLDATALOAD PUSH2 0x270 JUMP JUMPDEST SWAP2 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x20D JUMPI PUSH1 0x44 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 CALLDATALOAD DUP2 DUP6 GT PUSH2 0x237 JUMPI CALLDATASIZE PUSH1 0x23 DUP7 ADD SLT ISZERO PUSH2 0x237 JUMPI DUP5 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT PUSH2 0x224 JUMPI DUP5 MLOAD SWAP3 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP5 ADD SWAP1 DUP2 GT DUP5 DUP3 LT OR PUSH2 0x211 JUMPI DUP6 MSTORE DUP1 DUP4 MSTORE PUSH1 0x20 SWAP7 DUP8 DUP5 ADD SWAP2 PUSH1 0x24 SWAP8 CALLDATASIZE DUP10 DUP4 DUP4 ADD ADD GT PUSH2 0x20D JUMPI SWAP1 DUP1 DUP10 DUP12 SWAP4 ADD DUP6 CALLDATACOPY DUP6 ADD ADD MSTORE DUP2 SELFBALANCE LT PUSH2 0x1CB JUMPI DUP3 MLOAD ISZERO PUSH2 0x18B JUMPI SWAP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP7 CALLDATALOAD SWAP3 CREATE2 AND SWAP3 DUP4 ISZERO PUSH2 0x14B JUMPI POP POP MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x19 SWAP1 DUP6 PUSH1 0x64 SWAP5 MLOAD SWAP4 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP6 MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x437265617465323A204661696C6564206F6E206465706C6F7900000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP5 DUP9 DUP9 DUP2 DUP10 MLOAD SWAP4 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP6 MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x437265617465323A2062797465636F6465206C656E677468206973207A65726F PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP5 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP6 ADD DUP9 SWAP1 MSTORE PUSH1 0x1D DUP2 DUP9 ADD MSTORE PUSH32 0x437265617465323A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 DUP5 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x8F JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x8F JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x87 PUSH1 0x20 SWAP4 ADDRESS SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 CALLDATALOAD JUMPDEST SWAP1 PUSH1 0x55 SWAP3 PUSH1 0xB SWAP3 PUSH1 0x40 MLOAD SWAP3 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE ADD PUSH1 0xFF DUP2 MSTORE8 KECCAK256 SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD CALLVALUE 0xC6 0xDD MOD 0xBD 0xC9 0xE9 BLOCKHASH 0x2E 0x4E 0xBF 0xB2 SHL MUL 0xAA 0xCB XOR 0x1F ADD 0xB5 0xB7 0xF8 0xC8 NUMBER ADDRESS CALLDATASIZE 0xD9 COINBASE SWAP5 DUP15 0xDD PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"254:3662:26:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"fun_computeAddress":{"entryPoint":624,"id":4568,"parameterSlots":3,"returnSlots":1}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6040608081526004908136101561001557600080fd5b6000803560e01c8063481286e61461023b57806366cfa057146100925763780653061461004157600080fd5b3461008f57606036600319011261008f576044359273ffffffffffffffffffffffffffffffffffffffff91828516850361008f5750602093610087916024359035610270565b915191168152f35b80fd5b509190606036600319011261020d576044359167ffffffffffffffff81358185116102375736602386011215610237578483013582811161022457845192601f8201601f19908116603f0116840190811184821017610211578552808352602096878401916024973689838301011161020d579080898b93018537850101528147106101cb5782511561018b57915173ffffffffffffffffffffffffffffffffffffffff92863592f51692831561014b57505051908152f35b60199085606494519362461bcd60e51b85528401528201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152fd5b60648488888189519362461bcd60e51b85528401528201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152fd5b845162461bcd60e51b8152808501889052601d818801527f437265617465323a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b8280fd5b634e487b7160e01b885260418552602488fd5b634e487b7160e01b875260418452602487fd5b8580fd5b503461008f578160031936011261008f575073ffffffffffffffffffffffffffffffffffffffff610087602093309060243590355b90605592600b92604051926040840152602083015281520160ff8153209056fea26469706673582212200834c6dd06bdc9e9402e4ebfb21b02aacb181f01b5b7f8c8433036d941948edd64736f6c63430008120033","opcodes":"PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 SWAP1 DUP2 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x481286E6 EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x66CFA057 EQ PUSH2 0x92 JUMPI PUSH4 0x78065306 EQ PUSH2 0x41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x8F JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8F JUMPI PUSH1 0x44 CALLDATALOAD SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 DUP6 AND DUP6 SUB PUSH2 0x8F JUMPI POP PUSH1 0x20 SWAP4 PUSH2 0x87 SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 CALLDATALOAD PUSH2 0x270 JUMP JUMPDEST SWAP2 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x20D JUMPI PUSH1 0x44 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 CALLDATALOAD DUP2 DUP6 GT PUSH2 0x237 JUMPI CALLDATASIZE PUSH1 0x23 DUP7 ADD SLT ISZERO PUSH2 0x237 JUMPI DUP5 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT PUSH2 0x224 JUMPI DUP5 MLOAD SWAP3 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP5 ADD SWAP1 DUP2 GT DUP5 DUP3 LT OR PUSH2 0x211 JUMPI DUP6 MSTORE DUP1 DUP4 MSTORE PUSH1 0x20 SWAP7 DUP8 DUP5 ADD SWAP2 PUSH1 0x24 SWAP8 CALLDATASIZE DUP10 DUP4 DUP4 ADD ADD GT PUSH2 0x20D JUMPI SWAP1 DUP1 DUP10 DUP12 SWAP4 ADD DUP6 CALLDATACOPY DUP6 ADD ADD MSTORE DUP2 SELFBALANCE LT PUSH2 0x1CB JUMPI DUP3 MLOAD ISZERO PUSH2 0x18B JUMPI SWAP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP7 CALLDATALOAD SWAP3 CREATE2 AND SWAP3 DUP4 ISZERO PUSH2 0x14B JUMPI POP POP MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x19 SWAP1 DUP6 PUSH1 0x64 SWAP5 MLOAD SWAP4 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP6 MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x437265617465323A204661696C6564206F6E206465706C6F7900000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x64 DUP5 DUP9 DUP9 DUP2 DUP10 MLOAD SWAP4 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP6 MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x437265617465323A2062797465636F6465206C656E677468206973207A65726F PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP5 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP6 ADD DUP9 SWAP1 MSTORE PUSH1 0x1D DUP2 DUP9 ADD MSTORE PUSH32 0x437265617465323A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 DUP5 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x8F JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x8F JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x87 PUSH1 0x20 SWAP4 ADDRESS SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 CALLDATALOAD JUMPDEST SWAP1 PUSH1 0x55 SWAP3 PUSH1 0xB SWAP3 PUSH1 0x40 MLOAD SWAP3 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE ADD PUSH1 0xFF DUP2 MSTORE8 KECCAK256 SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD CALLVALUE 0xC6 0xDD MOD 0xBD 0xC9 0xE9 BLOCKHASH 0x2E 0x4E 0xBF 0xB2 SHL MUL 0xAA 0xCB XOR 0x1F ADD 0xB5 0xB7 0xF8 0xC8 NUMBER ADDRESS CALLDATASIZE 0xD9 COINBASE SWAP5 DUP15 0xDD PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"254:3662:26:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;254:3662:26;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;254:3662:26;;;;-1:-1:-1;;254:3662:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;254:3662:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1041:21;;:31;254:3662;;;;1148:20;254:3662;;1260:102;;254:3662;;;;;1260:102;254:3662;1380:18;;;254:3662;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;254:3662:26;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;254:3662:26;;;;;;;;;-1:-1:-1;;;254:3662:26;;;;;;;;;;;;;;;;;;;;;;;;;1824:4;254:3662;1781:49;254:3662;1824:4;;254:3662;;;;;2087:1826;;2289:1617;2087:1826;2289:1617;2087:1826;2289:1617;;;;;;;;;;;;;;;;;;2087:1826;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"142000","executionCost":"196","totalCost":"142196"},"external":{"computeAddress(bytes32,bytes32)":"infinite","computeAddress(bytes32,bytes32,address)":"infinite","deploy(uint256,bytes32,bytes)":"infinite"}},"methodIdentifiers":{"computeAddress(bytes32,bytes32)":"481286e6","computeAddress(bytes32,bytes32,address)":"78065306","deploy(uint256,bytes32,bytes)":"66cfa057"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"computeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bytecodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"computeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Create2.sol\",\"kind\":\"dev\",\"methods\":{\"computeAddress(bytes32,bytes32)\":{\"details\":\"Returns the address where a contract will be stored if deployed via {deploy}. Any change in the `bytecodeHash` or `salt` will result in a new destination address.\"},\"computeAddress(bytes32,bytes32,address)\":{\"details\":\"Returns the address where a contract will be stored if deployed via {deploy} from a contract located at `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\"},\"deploy(uint256,bytes32,bytes)\":{\"details\":\"Deploys a contract using `CREATE2`. The address where the contract will be deployed can be known in advance via {computeAddress}. The bytecode for a contract can be obtained from Solidity with `type(contractName).creationCode`. Requirements: - `bytecode` must not be empty. - `salt` must have not been used for `bytecode` already. - the factory must have a balance of at least `amount`. - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TapiocaDeployer/TapiocaDeployer.sol\":\"TapiocaDeployer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/TapiocaDeployer/TapiocaDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n// TODO - Write deployment bytecode instead of Solidity compilation output\\r\\n\\r\\n/// @author https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Create2.sol\\r\\ncontract TapiocaDeployer {\\r\\n    /**\\r\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\r\\n     * will be deployed can be known in advance via {computeAddress}.\\r\\n     *\\r\\n     * The bytecode for a contract can be obtained from Solidity with\\r\\n     * `type(contractName).creationCode`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `bytecode` must not be empty.\\r\\n     * - `salt` must have not been used for `bytecode` already.\\r\\n     * - the factory must have a balance of at least `amount`.\\r\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\r\\n     */\\r\\n    function deploy(\\r\\n        uint256 amount,\\r\\n        bytes32 salt,\\r\\n        bytes memory bytecode\\r\\n    ) external payable returns (address addr) {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Create2: insufficient balance\\\"\\r\\n        );\\r\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\r\\n        }\\r\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\r\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\r\\n     */\\r\\n    function computeAddress(\\r\\n        bytes32 salt,\\r\\n        bytes32 bytecodeHash\\r\\n    ) external view returns (address) {\\r\\n        return computeAddress(salt, bytecodeHash, address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\r\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\r\\n     */\\r\\n    function computeAddress(\\r\\n        bytes32 salt,\\r\\n        bytes32 bytecodeHash,\\r\\n        address deployer\\r\\n    ) public pure returns (address addr) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let ptr := mload(0x40) // Get free memory pointer\\r\\n\\r\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\r\\n            // |-------------------|---------------------------------------------------------------------------|\\r\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\r\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\r\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\r\\n            // | 0xFF              |            FF                                                             |\\r\\n            // |-------------------|---------------------------------------------------------------------------|\\r\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\r\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\r\\n\\r\\n            mstore(add(ptr, 0x40), bytecodeHash)\\r\\n            mstore(add(ptr, 0x20), salt)\\r\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\r\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\r\\n            mstore8(start, 0xff)\\r\\n            addr := keccak256(start, 85)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x447c0e8915c1b445ab4a2fb902403223463387825ec6586d1c576508e6b4827a\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/ISwapper.sol":{"ISwapper":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenOutId","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"},{"internalType":"bytes","name":"dexData","type":"bytes"}],"name":"getInputAmount","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenInId","type":"uint256"},{"internalType":"uint256","name":"shareIn","type":"uint256"},{"internalType":"bytes","name":"dexData","type":"bytes"}],"name":"getOutputAmount","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenInId","type":"uint256"},{"internalType":"uint256","name":"tokenOutId","type":"uint256"},{"internalType":"uint256","name":"shareIn","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"bytes","name":"dexData","type":"bytes"}],"name":"swap","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"getInputAmount(uint256,uint256,bytes)":{"details":"dexData examples:     - for UniV2, it should contain address[] swapPath","params":{"dexData":"Custom DEX data for query execution","shareOut":"Shares out to compute the amount for","tokenOutId":"YieldBox asset id"}},"getOutputAmount(uint256,uint256,bytes)":{"details":"dexData examples:     - for UniV2, it should contain address[] swapPath     - for Curve, it should contain uint256[] tokenIndexes","params":{"dexData":"Custom DEX data for query execution","shareIn":"Shares to get the amount for","tokenInId":"YieldBox asset id"}},"swap(uint256,uint256,uint256,address,uint256,bytes)":{"details":"returns both amount and sharesdexData examples:     - for UniV2, it should contain address[] swapPath     - for Curve, it should contain uint256[] tokenIndexes","params":{"amountOutMin":"Minimum amount to be received","dexData":"Custom DEX data for query execution","shareIn":"Shares to be swapped","to":"Receiver address","tokenInId":"YieldBox asset id","tokenOutId":"YieldBox asset id"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getInputAmount(uint256,uint256,bytes)":"c6fe9549","getOutputAmount(uint256,uint256,bytes)":"532bb192","swap(uint256,uint256,uint256,address,uint256,bytes)":"55a68e10"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenOutId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dexData\",\"type\":\"bytes\"}],\"name\":\"getInputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenInId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dexData\",\"type\":\"bytes\"}],\"name\":\"getOutputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenInId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dexData\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getInputAmount(uint256,uint256,bytes)\":{\"details\":\"dexData examples:     - for UniV2, it should contain address[] swapPath\",\"params\":{\"dexData\":\"Custom DEX data for query execution\",\"shareOut\":\"Shares out to compute the amount for\",\"tokenOutId\":\"YieldBox asset id\"}},\"getOutputAmount(uint256,uint256,bytes)\":{\"details\":\"dexData examples:     - for UniV2, it should contain address[] swapPath     - for Curve, it should contain uint256[] tokenIndexes\",\"params\":{\"dexData\":\"Custom DEX data for query execution\",\"shareIn\":\"Shares to get the amount for\",\"tokenInId\":\"YieldBox asset id\"}},\"swap(uint256,uint256,uint256,address,uint256,bytes)\":{\"details\":\"returns both amount and sharesdexData examples:     - for UniV2, it should contain address[] swapPath     - for Curve, it should contain uint256[] tokenIndexes\",\"params\":{\"amountOutMin\":\"Minimum amount to be received\",\"dexData\":\"Custom DEX data for query execution\",\"shareIn\":\"Shares to be swapped\",\"to\":\"Receiver address\",\"tokenInId\":\"YieldBox asset id\",\"tokenOutId\":\"YieldBox asset id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getInputAmount(uint256,uint256,bytes)\":{\"notice\":\"returns necessary input amount for a fixed output amount\"},\"getOutputAmount(uint256,uint256,bytes)\":{\"notice\":\"returns the possible output amount for input share\"},\"swap(uint256,uint256,uint256,address,uint256,bytes)\":{\"notice\":\"swaps token in with token out\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISwapper.sol\":\"ISwapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ISwapper {\\r\\n    /// @notice returns the possible output amount for input share\\r\\n    /// @param tokenInId YieldBox asset id\\r\\n    /// @param shareIn Shares to get the amount for\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    ///     - for Curve, it should contain uint256[] tokenIndexes\\r\\n    function getOutputAmount(\\r\\n        uint256 tokenInId,\\r\\n        uint256 shareIn,\\r\\n        bytes calldata dexData\\r\\n    ) external view returns (uint256 amountOut);\\r\\n\\r\\n    /// @notice returns necessary input amount for a fixed output amount\\r\\n    /// @param tokenOutId YieldBox asset id\\r\\n    /// @param shareOut Shares out to compute the amount for\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    function getInputAmount(\\r\\n        uint256 tokenOutId,\\r\\n        uint256 shareOut,\\r\\n        bytes calldata dexData\\r\\n    ) external view returns (uint256 amountIn);\\r\\n\\r\\n    /// @notice swaps token in with token out\\r\\n    /// @dev returns both amount and shares\\r\\n    /// @param tokenInId YieldBox asset id\\r\\n    /// @param tokenOutId YieldBox asset id\\r\\n    /// @param shareIn Shares to be swapped\\r\\n    /// @param to Receiver address\\r\\n    /// @param amountOutMin Minimum amount to be received\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    ///     - for Curve, it should contain uint256[] tokenIndexes\\r\\n    function swap(\\r\\n        uint256 tokenInId,\\r\\n        uint256 tokenOutId,\\r\\n        uint256 shareIn,\\r\\n        address to,\\r\\n        uint256 amountOutMin,\\r\\n        bytes calldata dexData\\r\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\r\\n}\\r\\n\",\"keccak256\":\"0x732f6f2f5468f60ac354afed655bc603ba7f26eb805166f011d9d985722cd55c\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"getInputAmount(uint256,uint256,bytes)":{"notice":"returns necessary input amount for a fixed output amount"},"getOutputAmount(uint256,uint256,bytes)":{"notice":"returns the possible output amount for input share"},"swap(uint256,uint256,uint256,address,uint256,bytes)":{"notice":"swaps token in with token out"}},"version":1}}},"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol":{"AssetRegister":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"uint256","name":"assetId","type":"uint256"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAsset","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"},{"indexed":false,"internalType":"contract IStrategy","name":"strategy","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"AssetRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256","name":"_id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"_value","type":"string"},{"indexed":true,"internalType":"uint256","name":"_id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[],"name":"assetCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"assets","outputs":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum TokenType","name":"","type":"uint8"},{"internalType":"address","name":"","type":"address"},{"internalType":"contract IStrategy","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"ids","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"isApprovedForAsset","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"registerAsset","outputs":[{"internalType":"uint256","name":"assetId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 CALLVALUE PUSH2 0x130 JUMPI PUSH1 0x80 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR PUSH2 0x11A JUMPI PUSH1 0x40 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 SWAP2 DUP3 DUP2 MSTORE PUSH1 0x40 DUP3 ADD DUP4 DUP2 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 DUP5 DUP4 MSTORE PUSH1 0x5 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x106 JUMPI PUSH1 0x1 DUP2 ADD DUP1 PUSH1 0x5 SSTORE DUP2 LT ISZERO PUSH2 0xF2 JUMPI PUSH1 0x5 DUP7 MSTORE PUSH1 0x3 PUSH1 0x20 DUP8 KECCAK256 SWAP2 MUL ADD SWAP4 MLOAD SWAP1 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0xDE JUMPI DUP5 SLOAD SWAP1 MLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHL AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP2 AND OR OR DUP4 SSTORE MLOAD PUSH1 0x1 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE POP PUSH1 0x40 MLOAD PUSH2 0x1401 SWAP1 DUP2 PUSH2 0x136 DUP3 CODECOPY RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH3 0xFDD58E EQ PUSH2 0xFA0 JUMPI POP DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xF33 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0xE9F JUMPI DUP1 PUSH4 0x2D4E1D52 EQ PUSH2 0xE57 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xC03 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0xAA8 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0xA1E JUMPI DUP1 PUSH4 0xA75FCB1E EQ PUSH2 0x9C5 JUMPI DUP1 PUSH4 0xB061DB94 EQ PUSH2 0x46C JUMPI DUP1 PUSH4 0xB8489FB5 EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0xBD85B039 EQ PUSH2 0x356 JUMPI DUP1 PUSH4 0xCF35BDD0 EQ PUSH2 0x2D5 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0xEAFE7A74 EQ PUSH2 0x265 JUMPI PUSH4 0xF242432A EQ PUSH2 0xC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x261 JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x261 JUMPI PUSH2 0xE0 PUSH2 0xFDD JUMP JUMPDEST DUP4 PUSH2 0xE9 PUSH2 0xFF8 JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD SWAP3 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP7 GT PUSH2 0x25D JUMPI PUSH2 0x131 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP7 CALLDATASIZE SWAP1 DUP10 ADD PUSH2 0x10B0 JUMP JUMPDEST SWAP6 SWAP1 SWAP5 PUSH2 0x13D DUP5 PUSH2 0x12F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP5 PUSH2 0x154 DUP7 ISZERO ISZERO PUSH2 0x128D JUMP JUMPDEST AND SWAP1 DUP2 DUP4 MSTORE DUP5 DUP3 DUP13 PUSH1 0x20 SWAP12 DUP13 SWAP2 PUSH1 0x1 DUP4 MSTORE DUP1 DUP9 KECCAK256 DUP10 DUP10 MSTORE DUP4 MSTORE DUP1 DUP9 KECCAK256 PUSH2 0x17B DUP13 DUP3 SLOAD PUSH2 0x12D9 JUMP JUMPDEST SWAP1 SSTORE DUP5 DUP9 MSTORE PUSH1 0x1 DUP4 MSTORE DUP1 DUP9 KECCAK256 DUP10 DUP10 MSTORE DUP4 MSTORE DUP1 DUP9 KECCAK256 PUSH2 0x19A DUP13 DUP3 SLOAD PUSH2 0x12E6 JUMP JUMPDEST SWAP1 SSTORE DUP11 DUP2 MLOAD SWAP4 DUP11 DUP6 MSTORE DUP5 ADD MSTORE CALLER SWAP3 LOG4 EXTCODESIZE PUSH2 0x1B2 JUMPI POP DUP1 RETURN JUMPDEST PUSH2 0x1F1 DUP9 SWAP7 DUP12 MLOAD SWAP9 DUP10 SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP15 DUP16 DUP9 MSTORE CALLER SWAP1 DUP9 ADD MSTORE PUSH1 0x24 DUP8 ADD MSTORE PUSH1 0x44 DUP7 ADD MSTORE PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP6 ADD MSTORE PUSH1 0xA4 DUP5 ADD SWAP2 PUSH2 0x1220 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x253 JUMPI PUSH2 0x21A SWAP5 POP DUP6 SWAP3 PUSH2 0x226 JUMPI JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0x1241 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP9 DUP1 RETURN JUMPDEST PUSH2 0x245 SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x24C JUMPI JUMPDEST PUSH2 0x23D DUP2 DUP4 PUSH2 0x112F JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1200 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x208 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x233 JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x284 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x284 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x5 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x284 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x284 JUMPI PUSH1 0xFF DUP2 PUSH1 0x20 SWAP4 PUSH2 0x2A8 PUSH2 0xFDD JUMP JUMPDEST PUSH2 0x2B0 PUSH2 0xFF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE DUP3 DUP8 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP6 MSTORE KECCAK256 SLOAD SWAP2 MLOAD SWAP2 AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x284 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x284 JUMPI DUP3 CALLDATALOAD PUSH1 0x5 SLOAD DUP2 LT ISZERO PUSH2 0x261 JUMPI PUSH2 0x2FE SWAP1 PUSH2 0x10DE JUMP JUMPDEST POP DUP1 SLOAD SWAP2 PUSH1 0xFF DUP4 AND SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x2 DUP3 PUSH1 0x1 DUP7 ADD SLOAD AND SWAP5 ADD SLOAD SWAP5 DUP4 MLOAD SWAP7 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x343 JUMPI POP PUSH1 0x80 SWAP8 POP DUP7 MSTORE PUSH1 0x8 SHR AND PUSH1 0x20 DUP6 ADD MSTORE DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x21 DUP10 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x261 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x261 JUMPI PUSH1 0x20 SWAP3 DUP3 SWAP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x2 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x261 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x261 JUMPI PUSH2 0x397 PUSH2 0xFDD JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH1 0x44 CALLDATALOAD DUP1 ISZERO ISZERO SWAP2 DUP3 DUP3 SUB PUSH2 0x468 JUMPI PUSH1 0x5 SLOAD DUP6 LT ISZERO PUSH2 0x425 JUMPI POP SWAP1 PUSH2 0x415 PUSH32 0x6ACEB1B079BEEABDD8C2F30CD221CA27EC52E9D0AEF6BB229CC175CF15DD778B SWAP4 SWAP3 CALLER DUP9 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP10 KECCAK256 SWAP8 AND SWAP7 DUP8 DUP10 MSTORE PUSH1 0x20 MSTORE DUP4 DUP9 KECCAK256 DUP7 DUP10 MSTORE PUSH1 0x20 MSTORE DUP4 DUP9 KECCAK256 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST DUP2 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP3 LOG3 DUP1 RETURN JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP6 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x41737365744D616E616765723A206173736574206E6F742076616C6964000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x284 JUMPI PUSH2 0x47D CALLDATASIZE PUSH2 0x100E JUMP JUMPDEST SWAP2 SWAP1 SWAP5 SWAP3 PUSH1 0x5 SWAP6 DUP7 DUP3 LT ISZERO SWAP5 DUP6 PUSH2 0x343 JUMPI PUSH1 0x1 DUP4 EQ SWAP8 DUP9 ISZERO SWAP9 DUP10 PUSH2 0x9B7 JUMPI JUMPDEST DUP8 DUP2 ISZERO PUSH2 0x994 JUMPI JUMPDEST POP ISZERO PUSH2 0x951 JUMPI PUSH2 0x4B3 DUP5 PUSH2 0x1050 JUMP JUMPDEST SWAP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP8 DUP9 DUP8 AND SWAP7 DUP8 DUP6 MSTORE PUSH1 0x20 SWAP13 DUP14 MSTORE DUP10 DUP12 DUP7 KECCAK256 SWAP7 AND SWAP6 DUP7 DUP7 MSTORE DUP14 MSTORE DUP11 DUP6 KECCAK256 DUP10 DUP7 MSTORE DUP14 MSTORE DUP11 DUP6 KECCAK256 SLOAD SWAP12 DUP13 ISZERO PUSH2 0x4F2 JUMPI JUMPDEST DUP14 DUP14 DUP14 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 SWAP8 SWAP9 DUP1 SWAP11 SWAP13 POP ISZERO SWAP1 DUP4 DUP3 ISZERO PUSH2 0x943 JUMPI JUMPDEST POP POP ISZERO PUSH2 0x900 JUMPI DUP2 PUSH2 0x74F JUMPI DUP7 ISZERO SWAP2 DUP3 DUP1 ISZERO PUSH2 0x7A5 JUMPI JUMPDEST ISZERO PUSH2 0x762 JUMPI PUSH2 0x74F JUMPI DUP2 PUSH2 0x746 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x73B JUMPI JUMPDEST POP ISZERO PUSH2 0x6F8 JUMPI DUP2 SLOAD SWAP9 DUP9 MLOAD SWAP3 PUSH1 0x80 DUP5 ADD DUP5 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x6E5 JUMPI SWAP1 DUP12 SWAP4 SWAP3 SWAP2 DUP12 MSTORE DUP8 DUP6 MSTORE DUP13 DUP6 ADD DUP10 DUP2 MSTORE DUP12 DUP7 ADD SWAP4 DUP9 DUP6 MSTORE PUSH9 0x10000000000000000 PUSH1 0x60 DUP9 ADD SWAP7 DUP14 DUP9 MSTORE LT ISZERO PUSH2 0x6D2 JUMPI PUSH2 0x597 DUP15 PUSH1 0x1 DUP2 ADD DUP6 SSTORE PUSH2 0x10DE JUMP JUMPDEST SWAP8 SWAP1 SWAP8 PUSH2 0x6C0 JUMPI MLOAD SWAP3 DUP4 LT ISZERO PUSH2 0x6AD JUMPI POP SWAP5 PUSH1 0x2 DUP14 SWAP6 PUSH32 0x6BB7FF708619BA0610CBA295A58592E0451DEE2622938C8755667688DAF3529B SWAP6 DUP15 SWAP10 SWAP5 SWAP6 DUP11 SWAP7 PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 SWAP13 SWAP11 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000 PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0xFF DUP10 SLOAD SWAP5 AND SWAP3 DUP4 PUSH1 0xFF NOT DUP7 AND OR DUP11 SSTORE MLOAD PUSH1 0x8 SHL AND SWAP3 AND OR OR DUP6 SSTORE PUSH1 0x1 DUP6 ADD SWAP2 MLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE MLOAD SWAP2 ADD SSTORE PUSH2 0x66D DUP9 PUSH2 0x1050 JUMP JUMPDEST DUP10 DUP3 MSTORE DUP14 MSTORE DUP2 DUP2 KECCAK256 DUP6 DUP3 MSTORE DUP14 MSTORE DUP2 DUP2 KECCAK256 DUP11 DUP3 MSTORE DUP14 MSTORE DUP4 DUP3 DUP3 KECCAK256 SSTORE DUP2 MLOAD SWAP1 DUP14 DUP3 MSTORE DUP14 DUP3 ADD MSTORE LOG2 DUP2 MLOAD SWAP1 DUP2 MSTORE DUP8 DUP10 DUP3 ADD MSTORE LOG4 CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x4E9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x21 SWAP1 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE DUP9 DUP3 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 DUP5 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A204E6F74206120746F6B656E0000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP EXTCODESIZE ISZERO ISZERO CODESIZE PUSH2 0x536 JUMP JUMPDEST DUP8 ISZERO SWAP2 POP PUSH2 0x52F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x21 DUP4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST DUP11 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP6 ADD DUP15 SWAP1 MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A205374726174656779206D69736D617463680000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP POP DUP10 MLOAD PUSH4 0xC3E9CE3 PUSH1 0xE2 SHL DUP2 MSTORE DUP13 DUP2 DUP6 DUP2 DUP11 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x8F6 JUMPI DUP7 SWAP2 PUSH2 0x8BD JUMPI JUMPDEST POP DUP5 DUP2 LT ISZERO PUSH2 0x8AA JUMPI DUP6 SWAP1 DUP9 EQ DUP1 PUSH2 0x842 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x520 JUMPI POP DUP11 MLOAD PUSH4 0x5F5C3DF PUSH1 0xE2 SHL DUP2 MSTORE DUP14 DUP2 DUP7 DUP2 DUP12 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x838 JUMPI DUP8 SWAP2 PUSH2 0x80B JUMPI JUMPDEST POP DUP11 EQ PUSH2 0x520 JUMP JUMPDEST SWAP1 POP DUP14 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x831 JUMPI JUMPDEST PUSH2 0x822 DUP2 DUP4 PUSH2 0x112F JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x468 JUMPI MLOAD CODESIZE PUSH2 0x803 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x818 JUMP JUMPDEST DUP13 MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP DUP11 MLOAD PUSH4 0x3DAD37ED PUSH1 0xE2 SHL DUP2 MSTORE DUP14 DUP2 DUP7 DUP2 DUP12 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x838 JUMPI SWAP1 DUP14 SWAP2 DUP9 SWAP2 PUSH2 0x870 JUMPI JUMPDEST POP AND DUP10 EQ PUSH2 0x7DB JUMP JUMPDEST DUP16 DUP2 SWAP4 POP DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0x8A3 JUMPI JUMPDEST PUSH2 0x889 DUP2 DUP4 PUSH2 0x112F JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x468 JUMPI MLOAD DUP13 DUP2 AND DUP2 SUB PUSH2 0x468 JUMPI DUP13 SWAP1 CODESIZE PUSH2 0x867 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x87F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x21 DUP5 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST SWAP1 POP DUP13 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x8EF JUMPI JUMPDEST PUSH2 0x8D4 DUP2 DUP4 PUSH2 0x112F JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8EB JUMPI MLOAD DUP5 DUP2 LT ISZERO PUSH2 0x8EB JUMPI CODESIZE PUSH2 0x7C8 JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x8CA JUMP JUMPDEST DUP12 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP10 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP5 ADD DUP14 SWAP1 MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A204E6F20746F6B656E496420666F722045524332300000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP PUSH2 0x8AA JUMPI CODESIZE DUP4 PUSH2 0x509 JUMP JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 DUP2 DUP13 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x41737365744D616E616765723A2063616E6E6F7420616464204E617469766500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH2 0x9A4 JUMPI PUSH1 0x3 DUP5 EQ DUP8 PUSH2 0x4A4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x21 DUP11 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST POP SWAP6 POP DUP1 SWAP6 PUSH1 0x2 DUP5 EQ PUSH2 0x49C JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x284 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x284 JUMPI PUSH1 0xFF DUP2 PUSH1 0x20 SWAP4 PUSH2 0x9E6 PUSH2 0xFDD JUMP JUMPDEST PUSH2 0x9EE PUSH2 0xFF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x3 DUP8 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP6 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x44 CALLDATALOAD DUP3 MSTORE DUP6 MSTORE KECCAK256 SLOAD SWAP2 MLOAD SWAP2 AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x284 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x284 JUMPI PUSH2 0xA38 PUSH2 0xFDD JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO SWAP2 DUP3 DUP2 SUB PUSH2 0x25D JUMPI PUSH2 0xA7B SWAP1 CALLER DUP7 MSTORE DUP6 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP8 KECCAK256 SWAP6 AND SWAP5 DUP6 DUP8 MSTORE PUSH1 0x20 MSTORE DUP3 DUP7 KECCAK256 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST MLOAD SWAP1 DUP2 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 CALLER SWAP3 LOG3 DUP1 RETURN JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x284 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x284 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 DUP2 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x284 JUMPI PUSH2 0xADB SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x107F JUMP JUMPDEST SWAP2 SWAP1 SWAP4 PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x261 JUMPI SWAP2 DUP5 DUP7 SWAP3 PUSH2 0xAFC DUP10 SWAP6 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x107F JUMP JUMPDEST SWAP5 SWAP1 SWAP3 PUSH2 0xB0A DUP7 DUP10 EQ PUSH2 0x1167 JUMP JUMPDEST PUSH2 0xB13 DUP9 PUSH2 0x11B3 JUMP JUMPDEST SWAP4 PUSH2 0xB20 DUP9 MLOAD SWAP6 DUP7 PUSH2 0x112F JUMP JUMPDEST DUP9 DUP6 MSTORE PUSH2 0xB2C DUP10 PUSH2 0x11B3 JUMP JUMPDEST PUSH1 0x20 SWAP10 DUP7 DUP12 ADD SWAP9 SWAP2 PUSH1 0x1F NOT ADD CALLDATASIZE DUP11 CALLDATACOPY DUP8 JUMPDEST DUP2 DUP2 LT PUSH2 0xB86 JUMPI POP POP POP POP POP POP POP DUP4 MLOAD SWAP5 DUP6 SWAP5 DUP2 DUP7 ADD SWAP3 DUP3 DUP8 MSTORE MLOAD DUP1 SWAP4 MSTORE DUP6 ADD SWAP4 SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0xB6F JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0xB60 JUMP JUMPDEST PUSH2 0xB97 DUP2 DUP4 DUP9 SWAP15 SWAP12 SWAP11 SWAP13 SWAP14 SWAP15 PUSH2 0x11F0 JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 SWAP2 SUB PUSH2 0xBFF JUMPI DUP9 MSTORE PUSH1 0x1 DUP10 MSTORE DUP12 DUP9 KECCAK256 PUSH2 0xBBD DUP3 DUP6 DUP8 PUSH2 0x11F0 JUMP JUMPDEST CALLDATALOAD DUP10 MSTORE DUP10 MSTORE DUP12 DUP9 KECCAK256 SLOAD DUP11 MLOAD DUP3 LT ISZERO PUSH2 0xBED JUMPI SWAP1 PUSH2 0xBE2 SWAP2 DUP11 DUP3 PUSH1 0x5 SHL DUP14 ADD ADD MSTORE PUSH2 0x11CB JUMP JUMPDEST SWAP11 SWAP10 SWAP9 SWAP7 SWAP8 SWAP11 PUSH2 0xB3D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x32 DUP7 MSTORE DUP8 DUP10 REVERT JUMPDEST DUP9 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x261 JUMPI PUSH1 0x3 NOT PUSH1 0xA0 CALLDATASIZE DUP3 ADD SLT PUSH2 0xE53 JUMPI PUSH2 0xC1E PUSH2 0xFDD JUMP JUMPDEST PUSH2 0xC26 PUSH2 0xFF8 JUMP JUMPDEST SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x44 CALLDATALOAD DUP3 DUP2 GT PUSH2 0xE4F JUMPI PUSH2 0xC48 SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0x107F JUMP JUMPDEST SWAP3 SWAP1 SWAP5 PUSH1 0x64 CALLDATALOAD DUP3 DUP2 GT PUSH2 0xE4B JUMPI PUSH2 0xC62 SWAP1 CALLDATASIZE SWAP1 DUP10 ADD PUSH2 0x107F JUMP JUMPDEST SWAP3 PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0xE47 JUMPI SWAP1 PUSH2 0xC7E DUP9 SWAP8 SWAP5 SWAP3 CALLDATASIZE SWAP1 DUP12 ADD PUSH2 0x10B0 JUMP JUMPDEST SWAP3 SWAP1 SWAP5 PUSH2 0xC8C DUP3 DUP10 EQ PUSH2 0x1167 JUMP JUMPDEST PUSH2 0xC95 DUP8 PUSH2 0x12F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP14 DUP3 DUP5 AND SWAP12 DUP13 SWAP4 PUSH2 0xCB0 DUP6 ISZERO ISZERO PUSH2 0x128D JUMP JUMPDEST DUP4 SWAP12 AND SWAP11 DUP12 SWAP4 JUMPDEST DUP14 DUP1 DUP4 LT PUSH2 0xDD9 JUMPI PUSH2 0xCF6 SWAP3 POP PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB SWAP4 SWAP2 POP DUP5 MLOAD SWAP5 DUP1 DUP7 MSTORE DUP6 ADD SWAP2 PUSH2 0x138E JUMP JUMPDEST SWAP2 DUP1 DUP4 SUB PUSH1 0x20 DUP3 ADD MSTORE DUP1 PUSH2 0xD0C CALLER SWAP5 DUP10 DUP12 PUSH2 0x138E JUMP JUMPDEST SUB SWAP1 LOG4 EXTCODESIZE PUSH2 0xD18 JUMPI DUP12 DUP1 RETURN JUMPDEST DUP11 MLOAD SWAP9 DUP10 SWAP8 DUP9 SWAP8 PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP13 DUP14 DUP11 MSTORE CALLER SWAP1 DUP11 ADD MSTORE PUSH1 0x24 DUP10 ADD MSTORE PUSH1 0x44 DUP9 ADD PUSH1 0xA0 SWAP1 MSTORE PUSH1 0xA4 DUP9 ADD SWAP1 PUSH2 0xD4B SWAP3 PUSH2 0x138E JUMP JUMPDEST SWAP1 DUP5 DUP8 DUP4 SUB ADD PUSH1 0x64 DUP9 ADD MSTORE PUSH2 0xD5F SWAP3 PUSH2 0x138E JUMP JUMPDEST SWAP2 DUP5 DUP4 SUB ADD PUSH1 0x84 DUP6 ADD MSTORE PUSH2 0xD72 SWAP3 PUSH2 0x1220 JUMP JUMPDEST SUB DUP2 DUP8 GAS SWAP5 PUSH1 0x20 SWAP6 CALL SWAP1 DUP2 ISZERO PUSH2 0xDCC JUMPI PUSH2 0xD9F SWAP4 POP DUP5 SWAP2 PUSH2 0xDAE JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0x1241 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP12 DUP1 RETURN JUMPDEST PUSH2 0xDC6 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x24C JUMPI PUSH2 0x23D DUP2 DUP4 PUSH2 0x112F JUMP JUMPDEST CODESIZE PUSH2 0xD8E JUMP JUMPDEST POP POP POP MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP6 PUSH2 0xDEF DUP4 PUSH2 0xE3B SWAP9 PUSH2 0xE34 SWAP7 SWAP9 SWAP8 SWAP6 SWAP9 PUSH2 0x11F0 JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0xDFC DUP8 DUP12 DUP14 PUSH2 0x11F0 JUMP JUMPDEST CALLDATALOAD SWAP6 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP2 DUP2 DUP4 MSTORE DUP6 DUP6 KECCAK256 DUP5 DUP7 MSTORE DUP4 MSTORE DUP6 DUP6 KECCAK256 PUSH2 0xE1E DUP10 DUP3 SLOAD PUSH2 0x12D9 JUMP JUMPDEST SWAP1 SSTORE DUP5 MSTORE DUP2 MSTORE DUP4 DUP4 KECCAK256 SWAP2 DUP4 MSTORE MSTORE KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0x12E6 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x11CB JUMP JUMPDEST DUP8 DUP14 DUP16 DUP13 SWAP4 DUP15 SWAP2 PUSH2 0xCB7 JUMP JUMPDEST DUP11 DUP1 REVERT JUMPDEST DUP10 DUP1 REVERT JUMPDEST DUP8 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x284 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xE76 PUSH2 0xE6E CALLDATASIZE PUSH2 0x100E JUMP JUMPDEST SWAP4 SWAP1 SWAP3 PUSH2 0x1050 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND DUP6 MSTORE DUP8 MSTORE DUP5 DUP5 KECCAK256 SWAP2 AND DUP4 MSTORE DUP6 MSTORE DUP3 DUP3 KECCAK256 SWAP1 DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x261 JUMPI PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xF30 JUMPI DUP3 MLOAD SWAP2 DUP5 DUP4 ADD SWAP1 DUP4 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0xF1D JUMPI POP DUP4 SWAP5 SWAP3 SWAP2 SWAP5 MSTORE DUP4 DUP2 MSTORE DUP3 MLOAD SWAP4 DUP3 DUP6 SWAP4 DUP5 MSTORE DUP3 MLOAD SWAP3 DUP4 DUP3 DUP7 ADD MSTORE DUP3 JUMPDEST DUP5 DUP2 LT PUSH2 0xF07 JUMPI POP POP POP DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 RETURN JUMPDEST DUP2 DUP2 ADD DUP4 ADD MLOAD DUP9 DUP3 ADD DUP9 ADD MSTORE DUP8 SWAP6 POP DUP3 ADD PUSH2 0xEE9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x261 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x261 JUMPI CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP3 AND DUP1 SWAP3 SUB PUSH2 0x261 JUMPI PUSH1 0x20 SWAP3 POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP3 EQ SWAP2 DUP3 ISZERO PUSH2 0xF8F JUMPI JUMPDEST DUP3 ISZERO PUSH2 0xF7E JUMPI JUMPDEST POP MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ SWAP2 POP CODESIZE PUSH2 0xF75 JUMP JUMPDEST PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL DUP2 EQ SWAP3 POP PUSH2 0xF6E JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x261 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x261 JUMPI PUSH1 0x20 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xFC6 PUSH2 0xFDD JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x1 DUP5 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x24 CALLDATALOAD DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xFF3 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xFF3 JUMPI JUMP JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xFF3 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0xFF3 JUMPI SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 DUP2 AND DUP2 SUB PUSH2 0xFF3 JUMPI SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0xFF3 JUMPI SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x1069 JUMPI PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0xFF3 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xFF3 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0xFF3 JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0xFF3 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xFF3 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0xFF3 JUMPI JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 LT ISZERO PUSH2 0x1119 JUMPI PUSH1 0x3 SWAP1 PUSH1 0x5 PUSH1 0x0 MSTORE MUL PUSH32 0x36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1151 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ISZERO PUSH2 0x116E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204C656E677468206D69736D617463680000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1151 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x11DA JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x1119 JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0xFF3 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 SUB PUSH2 0xFF3 JUMPI SWAP1 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1248 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57726F6E672072657475726E2076616C75650000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1294 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F203020616464726573730000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x11DA JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x11DA JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x1385 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x135B JUMPI JUMPDEST POP ISZERO PUSH2 0x1316 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73666572206E6F7420616C6C6F776564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO ISZERO EQ CODESIZE PUSH2 0x130E JUMP JUMPDEST PUSH1 0x0 SWAP2 POP PUSH2 0x1307 JUMP JUMPDEST SWAP1 SWAP2 DUP3 DUP2 MSTORE PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xFF3 JUMPI PUSH1 0x20 SWAP3 PUSH1 0x5 SHL DUP1 SWAP3 DUP5 DUP4 ADD CALLDATACOPY ADD ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT BALANCE SWAP5 0xD9 0x1F DUP2 0xEF SWAP12 PUSH29 0xC7C1020AF01834D39B2609EB1FD8419A4814423F89BAB464736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"349:3480:28:-:0;;;;4022:21:39;;;-1:-1:-1;;;;;4022:21:39;;;;;;;;;;1075:14:28;4022:21:39;;1069:49:28;;;1099:1;;4022:21:39;;;;;1069:49:28;;4022:21:39;;;1069:49:28;;;4022:21:39;;;;1057:6:28;4022:21:39;;;;;;;;;;;1057:6:28;4022:21:39;;;;;;1057:6:28;4022:21:39;;;1069:49:28;4022:21:39;;;;;;;;1057:6:28;4022:21:39;;;;;;;;;-1:-1:-1;;;;;4022:21:39;;;;;;;;;;;-1:-1:-1;;;;;;4022:21:39;;;;;;;;-1:-1:-1;4022:21:39;;;;-1:-1:-1;;;;;349:3480:28;;;-1:-1:-1;;;;;;4022:21:39;;;;;;;;;;;;;;;-1:-1:-1;4022:21:39;349:3480:28;;;;;;;;4022:21:39;-1:-1:-1;;;4022:21:39;;;1075:14:28;4022:21:39;;;;;-1:-1:-1;;;4022:21:39;;;1075:14:28;4022:21:39;;;;;-1:-1:-1;;;4022:21:39;;;1075:14:28;4022:21:39;;;;;;;;1099:1:28;4022:21:39;;;;;1099:1:28;4022:21:39;349:3480:28;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":4088,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_14233":{"entryPoint":4061,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_array_uint256_dyn_calldata":{"entryPoint":4223,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes4_fromMemory":{"entryPoint":4608,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":4272,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_enum_TokenTypet_addresst_contract_IStrategyt_uint256":{"entryPoint":4110,"id":null,"parameterSlots":1,"returnSlots":4},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":5006,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_bytes_calldata":{"entryPoint":4640,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":4531,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_array_index_access_address_dyn_calldata":{"entryPoint":4592,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_uint256":{"entryPoint":4838,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256":{"entryPoint":4825,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":4399,"id":null,"parameterSlots":2,"returnSlots":0},"fun_requireTransferAllowed":{"entryPoint":4851,"id":5402,"parameterSlots":1,"returnSlots":0},"increment_uint256":{"entryPoint":4555,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_enum_TokenType_mapping_address_mapping_contract_IStrategy_mapping_uint256_uint256_of_enum_TokenType":{"entryPoint":4176,"id":null,"parameterSlots":1,"returnSlots":1},"require_helper_stringliteral":{"entryPoint":4455,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_06e7":{"entryPoint":4749,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_ada4":{"entryPoint":4673,"id":null,"parameterSlots":1,"returnSlots":0},"storage_array_index_access_struct_Asset_dyn":{"entryPoint":4318,"id":null,"parameterSlots":1,"returnSlots":2},"update_storage_value_offsett_bool_to_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH3 0xFDD58E EQ PUSH2 0xFA0 JUMPI POP DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xF33 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0xE9F JUMPI DUP1 PUSH4 0x2D4E1D52 EQ PUSH2 0xE57 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xC03 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0xAA8 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0xA1E JUMPI DUP1 PUSH4 0xA75FCB1E EQ PUSH2 0x9C5 JUMPI DUP1 PUSH4 0xB061DB94 EQ PUSH2 0x46C JUMPI DUP1 PUSH4 0xB8489FB5 EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0xBD85B039 EQ PUSH2 0x356 JUMPI DUP1 PUSH4 0xCF35BDD0 EQ PUSH2 0x2D5 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0xEAFE7A74 EQ PUSH2 0x265 JUMPI PUSH4 0xF242432A EQ PUSH2 0xC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x261 JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x261 JUMPI PUSH2 0xE0 PUSH2 0xFDD JUMP JUMPDEST DUP4 PUSH2 0xE9 PUSH2 0xFF8 JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD SWAP3 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP7 GT PUSH2 0x25D JUMPI PUSH2 0x131 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP7 CALLDATASIZE SWAP1 DUP10 ADD PUSH2 0x10B0 JUMP JUMPDEST SWAP6 SWAP1 SWAP5 PUSH2 0x13D DUP5 PUSH2 0x12F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP5 PUSH2 0x154 DUP7 ISZERO ISZERO PUSH2 0x128D JUMP JUMPDEST AND SWAP1 DUP2 DUP4 MSTORE DUP5 DUP3 DUP13 PUSH1 0x20 SWAP12 DUP13 SWAP2 PUSH1 0x1 DUP4 MSTORE DUP1 DUP9 KECCAK256 DUP10 DUP10 MSTORE DUP4 MSTORE DUP1 DUP9 KECCAK256 PUSH2 0x17B DUP13 DUP3 SLOAD PUSH2 0x12D9 JUMP JUMPDEST SWAP1 SSTORE DUP5 DUP9 MSTORE PUSH1 0x1 DUP4 MSTORE DUP1 DUP9 KECCAK256 DUP10 DUP10 MSTORE DUP4 MSTORE DUP1 DUP9 KECCAK256 PUSH2 0x19A DUP13 DUP3 SLOAD PUSH2 0x12E6 JUMP JUMPDEST SWAP1 SSTORE DUP11 DUP2 MLOAD SWAP4 DUP11 DUP6 MSTORE DUP5 ADD MSTORE CALLER SWAP3 LOG4 EXTCODESIZE PUSH2 0x1B2 JUMPI POP DUP1 RETURN JUMPDEST PUSH2 0x1F1 DUP9 SWAP7 DUP12 MLOAD SWAP9 DUP10 SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP15 DUP16 DUP9 MSTORE CALLER SWAP1 DUP9 ADD MSTORE PUSH1 0x24 DUP8 ADD MSTORE PUSH1 0x44 DUP7 ADD MSTORE PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP6 ADD MSTORE PUSH1 0xA4 DUP5 ADD SWAP2 PUSH2 0x1220 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x253 JUMPI PUSH2 0x21A SWAP5 POP DUP6 SWAP3 PUSH2 0x226 JUMPI JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0x1241 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP9 DUP1 RETURN JUMPDEST PUSH2 0x245 SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x24C JUMPI JUMPDEST PUSH2 0x23D DUP2 DUP4 PUSH2 0x112F JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1200 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x208 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x233 JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x284 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x284 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x5 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x284 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x284 JUMPI PUSH1 0xFF DUP2 PUSH1 0x20 SWAP4 PUSH2 0x2A8 PUSH2 0xFDD JUMP JUMPDEST PUSH2 0x2B0 PUSH2 0xFF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE DUP3 DUP8 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP6 MSTORE KECCAK256 SLOAD SWAP2 MLOAD SWAP2 AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x284 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x284 JUMPI DUP3 CALLDATALOAD PUSH1 0x5 SLOAD DUP2 LT ISZERO PUSH2 0x261 JUMPI PUSH2 0x2FE SWAP1 PUSH2 0x10DE JUMP JUMPDEST POP DUP1 SLOAD SWAP2 PUSH1 0xFF DUP4 AND SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x2 DUP3 PUSH1 0x1 DUP7 ADD SLOAD AND SWAP5 ADD SLOAD SWAP5 DUP4 MLOAD SWAP7 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x343 JUMPI POP PUSH1 0x80 SWAP8 POP DUP7 MSTORE PUSH1 0x8 SHR AND PUSH1 0x20 DUP6 ADD MSTORE DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x21 DUP10 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x261 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x261 JUMPI PUSH1 0x20 SWAP3 DUP3 SWAP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x2 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x261 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x261 JUMPI PUSH2 0x397 PUSH2 0xFDD JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH1 0x44 CALLDATALOAD DUP1 ISZERO ISZERO SWAP2 DUP3 DUP3 SUB PUSH2 0x468 JUMPI PUSH1 0x5 SLOAD DUP6 LT ISZERO PUSH2 0x425 JUMPI POP SWAP1 PUSH2 0x415 PUSH32 0x6ACEB1B079BEEABDD8C2F30CD221CA27EC52E9D0AEF6BB229CC175CF15DD778B SWAP4 SWAP3 CALLER DUP9 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP10 KECCAK256 SWAP8 AND SWAP7 DUP8 DUP10 MSTORE PUSH1 0x20 MSTORE DUP4 DUP9 KECCAK256 DUP7 DUP10 MSTORE PUSH1 0x20 MSTORE DUP4 DUP9 KECCAK256 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST DUP2 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP3 LOG3 DUP1 RETURN JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP6 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x41737365744D616E616765723A206173736574206E6F742076616C6964000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x284 JUMPI PUSH2 0x47D CALLDATASIZE PUSH2 0x100E JUMP JUMPDEST SWAP2 SWAP1 SWAP5 SWAP3 PUSH1 0x5 SWAP6 DUP7 DUP3 LT ISZERO SWAP5 DUP6 PUSH2 0x343 JUMPI PUSH1 0x1 DUP4 EQ SWAP8 DUP9 ISZERO SWAP9 DUP10 PUSH2 0x9B7 JUMPI JUMPDEST DUP8 DUP2 ISZERO PUSH2 0x994 JUMPI JUMPDEST POP ISZERO PUSH2 0x951 JUMPI PUSH2 0x4B3 DUP5 PUSH2 0x1050 JUMP JUMPDEST SWAP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP8 DUP9 DUP8 AND SWAP7 DUP8 DUP6 MSTORE PUSH1 0x20 SWAP13 DUP14 MSTORE DUP10 DUP12 DUP7 KECCAK256 SWAP7 AND SWAP6 DUP7 DUP7 MSTORE DUP14 MSTORE DUP11 DUP6 KECCAK256 DUP10 DUP7 MSTORE DUP14 MSTORE DUP11 DUP6 KECCAK256 SLOAD SWAP12 DUP13 ISZERO PUSH2 0x4F2 JUMPI JUMPDEST DUP14 DUP14 DUP14 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 SWAP8 SWAP9 DUP1 SWAP11 SWAP13 POP ISZERO SWAP1 DUP4 DUP3 ISZERO PUSH2 0x943 JUMPI JUMPDEST POP POP ISZERO PUSH2 0x900 JUMPI DUP2 PUSH2 0x74F JUMPI DUP7 ISZERO SWAP2 DUP3 DUP1 ISZERO PUSH2 0x7A5 JUMPI JUMPDEST ISZERO PUSH2 0x762 JUMPI PUSH2 0x74F JUMPI DUP2 PUSH2 0x746 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x73B JUMPI JUMPDEST POP ISZERO PUSH2 0x6F8 JUMPI DUP2 SLOAD SWAP9 DUP9 MLOAD SWAP3 PUSH1 0x80 DUP5 ADD DUP5 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x6E5 JUMPI SWAP1 DUP12 SWAP4 SWAP3 SWAP2 DUP12 MSTORE DUP8 DUP6 MSTORE DUP13 DUP6 ADD DUP10 DUP2 MSTORE DUP12 DUP7 ADD SWAP4 DUP9 DUP6 MSTORE PUSH9 0x10000000000000000 PUSH1 0x60 DUP9 ADD SWAP7 DUP14 DUP9 MSTORE LT ISZERO PUSH2 0x6D2 JUMPI PUSH2 0x597 DUP15 PUSH1 0x1 DUP2 ADD DUP6 SSTORE PUSH2 0x10DE JUMP JUMPDEST SWAP8 SWAP1 SWAP8 PUSH2 0x6C0 JUMPI MLOAD SWAP3 DUP4 LT ISZERO PUSH2 0x6AD JUMPI POP SWAP5 PUSH1 0x2 DUP14 SWAP6 PUSH32 0x6BB7FF708619BA0610CBA295A58592E0451DEE2622938C8755667688DAF3529B SWAP6 DUP15 SWAP10 SWAP5 SWAP6 DUP11 SWAP7 PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 SWAP13 SWAP11 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000 PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0xFF DUP10 SLOAD SWAP5 AND SWAP3 DUP4 PUSH1 0xFF NOT DUP7 AND OR DUP11 SSTORE MLOAD PUSH1 0x8 SHL AND SWAP3 AND OR OR DUP6 SSTORE PUSH1 0x1 DUP6 ADD SWAP2 MLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE MLOAD SWAP2 ADD SSTORE PUSH2 0x66D DUP9 PUSH2 0x1050 JUMP JUMPDEST DUP10 DUP3 MSTORE DUP14 MSTORE DUP2 DUP2 KECCAK256 DUP6 DUP3 MSTORE DUP14 MSTORE DUP2 DUP2 KECCAK256 DUP11 DUP3 MSTORE DUP14 MSTORE DUP4 DUP3 DUP3 KECCAK256 SSTORE DUP2 MLOAD SWAP1 DUP14 DUP3 MSTORE DUP14 DUP3 ADD MSTORE LOG2 DUP2 MLOAD SWAP1 DUP2 MSTORE DUP8 DUP10 DUP3 ADD MSTORE LOG4 CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x4E9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x21 SWAP1 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE DUP9 DUP3 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 DUP5 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A204E6F74206120746F6B656E0000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP EXTCODESIZE ISZERO ISZERO CODESIZE PUSH2 0x536 JUMP JUMPDEST DUP8 ISZERO SWAP2 POP PUSH2 0x52F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x21 DUP4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST DUP11 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP6 ADD DUP15 SWAP1 MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A205374726174656779206D69736D617463680000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP POP DUP10 MLOAD PUSH4 0xC3E9CE3 PUSH1 0xE2 SHL DUP2 MSTORE DUP13 DUP2 DUP6 DUP2 DUP11 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x8F6 JUMPI DUP7 SWAP2 PUSH2 0x8BD JUMPI JUMPDEST POP DUP5 DUP2 LT ISZERO PUSH2 0x8AA JUMPI DUP6 SWAP1 DUP9 EQ DUP1 PUSH2 0x842 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x520 JUMPI POP DUP11 MLOAD PUSH4 0x5F5C3DF PUSH1 0xE2 SHL DUP2 MSTORE DUP14 DUP2 DUP7 DUP2 DUP12 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x838 JUMPI DUP8 SWAP2 PUSH2 0x80B JUMPI JUMPDEST POP DUP11 EQ PUSH2 0x520 JUMP JUMPDEST SWAP1 POP DUP14 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x831 JUMPI JUMPDEST PUSH2 0x822 DUP2 DUP4 PUSH2 0x112F JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x468 JUMPI MLOAD CODESIZE PUSH2 0x803 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x818 JUMP JUMPDEST DUP13 MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP DUP11 MLOAD PUSH4 0x3DAD37ED PUSH1 0xE2 SHL DUP2 MSTORE DUP14 DUP2 DUP7 DUP2 DUP12 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x838 JUMPI SWAP1 DUP14 SWAP2 DUP9 SWAP2 PUSH2 0x870 JUMPI JUMPDEST POP AND DUP10 EQ PUSH2 0x7DB JUMP JUMPDEST DUP16 DUP2 SWAP4 POP DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0x8A3 JUMPI JUMPDEST PUSH2 0x889 DUP2 DUP4 PUSH2 0x112F JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x468 JUMPI MLOAD DUP13 DUP2 AND DUP2 SUB PUSH2 0x468 JUMPI DUP13 SWAP1 CODESIZE PUSH2 0x867 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x87F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x21 DUP5 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST SWAP1 POP DUP13 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x8EF JUMPI JUMPDEST PUSH2 0x8D4 DUP2 DUP4 PUSH2 0x112F JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x8EB JUMPI MLOAD DUP5 DUP2 LT ISZERO PUSH2 0x8EB JUMPI CODESIZE PUSH2 0x7C8 JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x8CA JUMP JUMPDEST DUP12 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP10 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP5 ADD DUP14 SWAP1 MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A204E6F20746F6B656E496420666F722045524332300000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP PUSH2 0x8AA JUMPI CODESIZE DUP4 PUSH2 0x509 JUMP JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 DUP2 DUP13 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x41737365744D616E616765723A2063616E6E6F7420616464204E617469766500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH2 0x9A4 JUMPI PUSH1 0x3 DUP5 EQ DUP8 PUSH2 0x4A4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x21 DUP11 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST POP SWAP6 POP DUP1 SWAP6 PUSH1 0x2 DUP5 EQ PUSH2 0x49C JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x284 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x284 JUMPI PUSH1 0xFF DUP2 PUSH1 0x20 SWAP4 PUSH2 0x9E6 PUSH2 0xFDD JUMP JUMPDEST PUSH2 0x9EE PUSH2 0xFF8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x3 DUP8 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP6 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x44 CALLDATALOAD DUP3 MSTORE DUP6 MSTORE KECCAK256 SLOAD SWAP2 MLOAD SWAP2 AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x284 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x284 JUMPI PUSH2 0xA38 PUSH2 0xFDD JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO SWAP2 DUP3 DUP2 SUB PUSH2 0x25D JUMPI PUSH2 0xA7B SWAP1 CALLER DUP7 MSTORE DUP6 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP8 KECCAK256 SWAP6 AND SWAP5 DUP6 DUP8 MSTORE PUSH1 0x20 MSTORE DUP3 DUP7 KECCAK256 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST MLOAD SWAP1 DUP2 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 CALLER SWAP3 LOG3 DUP1 RETURN JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x284 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x284 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 DUP2 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x284 JUMPI PUSH2 0xADB SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x107F JUMP JUMPDEST SWAP2 SWAP1 SWAP4 PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x261 JUMPI SWAP2 DUP5 DUP7 SWAP3 PUSH2 0xAFC DUP10 SWAP6 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x107F JUMP JUMPDEST SWAP5 SWAP1 SWAP3 PUSH2 0xB0A DUP7 DUP10 EQ PUSH2 0x1167 JUMP JUMPDEST PUSH2 0xB13 DUP9 PUSH2 0x11B3 JUMP JUMPDEST SWAP4 PUSH2 0xB20 DUP9 MLOAD SWAP6 DUP7 PUSH2 0x112F JUMP JUMPDEST DUP9 DUP6 MSTORE PUSH2 0xB2C DUP10 PUSH2 0x11B3 JUMP JUMPDEST PUSH1 0x20 SWAP10 DUP7 DUP12 ADD SWAP9 SWAP2 PUSH1 0x1F NOT ADD CALLDATASIZE DUP11 CALLDATACOPY DUP8 JUMPDEST DUP2 DUP2 LT PUSH2 0xB86 JUMPI POP POP POP POP POP POP POP DUP4 MLOAD SWAP5 DUP6 SWAP5 DUP2 DUP7 ADD SWAP3 DUP3 DUP8 MSTORE MLOAD DUP1 SWAP4 MSTORE DUP6 ADD SWAP4 SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0xB6F JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0xB60 JUMP JUMPDEST PUSH2 0xB97 DUP2 DUP4 DUP9 SWAP15 SWAP12 SWAP11 SWAP13 SWAP14 SWAP15 PUSH2 0x11F0 JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 SWAP2 SUB PUSH2 0xBFF JUMPI DUP9 MSTORE PUSH1 0x1 DUP10 MSTORE DUP12 DUP9 KECCAK256 PUSH2 0xBBD DUP3 DUP6 DUP8 PUSH2 0x11F0 JUMP JUMPDEST CALLDATALOAD DUP10 MSTORE DUP10 MSTORE DUP12 DUP9 KECCAK256 SLOAD DUP11 MLOAD DUP3 LT ISZERO PUSH2 0xBED JUMPI SWAP1 PUSH2 0xBE2 SWAP2 DUP11 DUP3 PUSH1 0x5 SHL DUP14 ADD ADD MSTORE PUSH2 0x11CB JUMP JUMPDEST SWAP11 SWAP10 SWAP9 SWAP7 SWAP8 SWAP11 PUSH2 0xB3D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x32 DUP7 MSTORE DUP8 DUP10 REVERT JUMPDEST DUP9 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x261 JUMPI PUSH1 0x3 NOT PUSH1 0xA0 CALLDATASIZE DUP3 ADD SLT PUSH2 0xE53 JUMPI PUSH2 0xC1E PUSH2 0xFDD JUMP JUMPDEST PUSH2 0xC26 PUSH2 0xFF8 JUMP JUMPDEST SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x44 CALLDATALOAD DUP3 DUP2 GT PUSH2 0xE4F JUMPI PUSH2 0xC48 SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0x107F JUMP JUMPDEST SWAP3 SWAP1 SWAP5 PUSH1 0x64 CALLDATALOAD DUP3 DUP2 GT PUSH2 0xE4B JUMPI PUSH2 0xC62 SWAP1 CALLDATASIZE SWAP1 DUP10 ADD PUSH2 0x107F JUMP JUMPDEST SWAP3 PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0xE47 JUMPI SWAP1 PUSH2 0xC7E DUP9 SWAP8 SWAP5 SWAP3 CALLDATASIZE SWAP1 DUP12 ADD PUSH2 0x10B0 JUMP JUMPDEST SWAP3 SWAP1 SWAP5 PUSH2 0xC8C DUP3 DUP10 EQ PUSH2 0x1167 JUMP JUMPDEST PUSH2 0xC95 DUP8 PUSH2 0x12F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP14 DUP3 DUP5 AND SWAP12 DUP13 SWAP4 PUSH2 0xCB0 DUP6 ISZERO ISZERO PUSH2 0x128D JUMP JUMPDEST DUP4 SWAP12 AND SWAP11 DUP12 SWAP4 JUMPDEST DUP14 DUP1 DUP4 LT PUSH2 0xDD9 JUMPI PUSH2 0xCF6 SWAP3 POP PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB SWAP4 SWAP2 POP DUP5 MLOAD SWAP5 DUP1 DUP7 MSTORE DUP6 ADD SWAP2 PUSH2 0x138E JUMP JUMPDEST SWAP2 DUP1 DUP4 SUB PUSH1 0x20 DUP3 ADD MSTORE DUP1 PUSH2 0xD0C CALLER SWAP5 DUP10 DUP12 PUSH2 0x138E JUMP JUMPDEST SUB SWAP1 LOG4 EXTCODESIZE PUSH2 0xD18 JUMPI DUP12 DUP1 RETURN JUMPDEST DUP11 MLOAD SWAP9 DUP10 SWAP8 DUP9 SWAP8 PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP13 DUP14 DUP11 MSTORE CALLER SWAP1 DUP11 ADD MSTORE PUSH1 0x24 DUP10 ADD MSTORE PUSH1 0x44 DUP9 ADD PUSH1 0xA0 SWAP1 MSTORE PUSH1 0xA4 DUP9 ADD SWAP1 PUSH2 0xD4B SWAP3 PUSH2 0x138E JUMP JUMPDEST SWAP1 DUP5 DUP8 DUP4 SUB ADD PUSH1 0x64 DUP9 ADD MSTORE PUSH2 0xD5F SWAP3 PUSH2 0x138E JUMP JUMPDEST SWAP2 DUP5 DUP4 SUB ADD PUSH1 0x84 DUP6 ADD MSTORE PUSH2 0xD72 SWAP3 PUSH2 0x1220 JUMP JUMPDEST SUB DUP2 DUP8 GAS SWAP5 PUSH1 0x20 SWAP6 CALL SWAP1 DUP2 ISZERO PUSH2 0xDCC JUMPI PUSH2 0xD9F SWAP4 POP DUP5 SWAP2 PUSH2 0xDAE JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0x1241 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP12 DUP1 RETURN JUMPDEST PUSH2 0xDC6 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x24C JUMPI PUSH2 0x23D DUP2 DUP4 PUSH2 0x112F JUMP JUMPDEST CODESIZE PUSH2 0xD8E JUMP JUMPDEST POP POP POP MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP6 PUSH2 0xDEF DUP4 PUSH2 0xE3B SWAP9 PUSH2 0xE34 SWAP7 SWAP9 SWAP8 SWAP6 SWAP9 PUSH2 0x11F0 JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0xDFC DUP8 DUP12 DUP14 PUSH2 0x11F0 JUMP JUMPDEST CALLDATALOAD SWAP6 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP2 DUP2 DUP4 MSTORE DUP6 DUP6 KECCAK256 DUP5 DUP7 MSTORE DUP4 MSTORE DUP6 DUP6 KECCAK256 PUSH2 0xE1E DUP10 DUP3 SLOAD PUSH2 0x12D9 JUMP JUMPDEST SWAP1 SSTORE DUP5 MSTORE DUP2 MSTORE DUP4 DUP4 KECCAK256 SWAP2 DUP4 MSTORE MSTORE KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0x12E6 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x11CB JUMP JUMPDEST DUP8 DUP14 DUP16 DUP13 SWAP4 DUP15 SWAP2 PUSH2 0xCB7 JUMP JUMPDEST DUP11 DUP1 REVERT JUMPDEST DUP10 DUP1 REVERT JUMPDEST DUP8 DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x284 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xE76 PUSH2 0xE6E CALLDATASIZE PUSH2 0x100E JUMP JUMPDEST SWAP4 SWAP1 SWAP3 PUSH2 0x1050 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND DUP6 MSTORE DUP8 MSTORE DUP5 DUP5 KECCAK256 SWAP2 AND DUP4 MSTORE DUP6 MSTORE DUP3 DUP3 KECCAK256 SWAP1 DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x261 JUMPI PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xF30 JUMPI DUP3 MLOAD SWAP2 DUP5 DUP4 ADD SWAP1 DUP4 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0xF1D JUMPI POP DUP4 SWAP5 SWAP3 SWAP2 SWAP5 MSTORE DUP4 DUP2 MSTORE DUP3 MLOAD SWAP4 DUP3 DUP6 SWAP4 DUP5 MSTORE DUP3 MLOAD SWAP3 DUP4 DUP3 DUP7 ADD MSTORE DUP3 JUMPDEST DUP5 DUP2 LT PUSH2 0xF07 JUMPI POP POP POP DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 RETURN JUMPDEST DUP2 DUP2 ADD DUP4 ADD MLOAD DUP9 DUP3 ADD DUP9 ADD MSTORE DUP8 SWAP6 POP DUP3 ADD PUSH2 0xEE9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x261 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x261 JUMPI CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP3 AND DUP1 SWAP3 SUB PUSH2 0x261 JUMPI PUSH1 0x20 SWAP3 POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP3 EQ SWAP2 DUP3 ISZERO PUSH2 0xF8F JUMPI JUMPDEST DUP3 ISZERO PUSH2 0xF7E JUMPI JUMPDEST POP MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ SWAP2 POP CODESIZE PUSH2 0xF75 JUMP JUMPDEST PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL DUP2 EQ SWAP3 POP PUSH2 0xF6E JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x261 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x261 JUMPI PUSH1 0x20 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xFC6 PUSH2 0xFDD JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x1 DUP5 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x24 CALLDATALOAD DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xFF3 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xFF3 JUMPI JUMP JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0xFF3 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0xFF3 JUMPI SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 DUP2 AND DUP2 SUB PUSH2 0xFF3 JUMPI SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0xFF3 JUMPI SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x1069 JUMPI PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0xFF3 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xFF3 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0xFF3 JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0xFF3 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xFF3 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0xFF3 JUMPI JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 LT ISZERO PUSH2 0x1119 JUMPI PUSH1 0x3 SWAP1 PUSH1 0x5 PUSH1 0x0 MSTORE MUL PUSH32 0x36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1151 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ISZERO PUSH2 0x116E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204C656E677468206D69736D617463680000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1151 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x11DA JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x1119 JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0xFF3 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 SUB PUSH2 0xFF3 JUMPI SWAP1 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1248 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57726F6E672072657475726E2076616C75650000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x1294 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F203020616464726573730000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x11DA JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x11DA JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x1385 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x135B JUMPI JUMPDEST POP ISZERO PUSH2 0x1316 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73666572206E6F7420616C6C6F776564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO ISZERO EQ CODESIZE PUSH2 0x130E JUMP JUMPDEST PUSH1 0x0 SWAP2 POP PUSH2 0x1307 JUMP JUMPDEST SWAP1 SWAP2 DUP3 DUP2 MSTORE PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xFF3 JUMPI PUSH1 0x20 SWAP3 PUSH1 0x5 SHL DUP1 SWAP3 DUP5 DUP4 ADD CALLDATACOPY ADD ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT BALANCE SWAP5 0xD9 0x1F DUP2 0xEF SWAP12 PUSH29 0xC7C1020AF01834D39B2609EB1FD8419A4814423F89BAB464736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"349:3480:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;349:3480:28;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;2221:47:30;349:3480:28;;;;;;:::i;:::-;3141:5:30;;;;;;:::i;:::-;-1:-1:-1;;;;;349:3480:28;;;2097:16:30;2089:41;2097:16;;;2089:41;:::i;:::-;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;;;2141:28:30;349:3480:28;;;2141:28:30;:::i;:::-;349:3480:28;;;;;;;;;;;;;;;;;;;2179:26:30;349:3480:28;;;2179:26:30;:::i;:::-;349:3480:28;;;;;;;;;;;;2236:10:30;2221:47;;230:63:11;3205:302:30;;349:3480:28;;;3205:302:30;349:3480:28;;;;;;;;;;;;;;;3265:78:30;;;;2236:10;3265:78;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3265:78:30;;;;;;;;;3240:256;3265:78;;;;;;3205:302;-1:-1:-1;;;;;;;;349:3480:28;3265:179:30;3240:256;:::i;:::-;3205:302;;;;;;;;;349:3480:28;;3265:78:30;;;;;;-1:-1:-1;3265:78:30;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1201:6;349:3480;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;349:3480:28;;;;;;1005:21;349:3480;1005:21;;;;;;;;:::i;:::-;349:3480;;;;;;;;-1:-1:-1;;;;;1005:21:28;;;349:3480;1005:21;;349:3480;;1005:21;;349:3480;;;;;1005:21;349:3480;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;349:3480:28;;;;;;;;;;;;;;;-1:-1:-1;;349:3480:28;;;;;;;;;;;676:46:30;349:3480:28;;;;;;;;;;;;;;;;;-1:-1:-1;;349:3480:28;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1201:6;349:3480;3621:22;;349:3480;;;3706:10;;3687:60;3763:57;3706:10;;;349:3480;;;;;-1:-1:-1;;;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3687:60;349:3480;;;;;;;;;3706:10;3763:57;;349:3480;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;3274:15;3261:28;;:61;;;;;;;349:3480;3261:95;;;;;349:3480;;;;;1445:14;;;:::i;:::-;349:3480;-1:-1:-1;;;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1586:12;;;1582:1417;;349:3480;;;;;;;;;1582:1417;1693:12;;;;;;;;;;;;;;:44;;;;;;1582:1417;349:3480;;;;;;;;1811:29;;:170;;;;;;1582:1417;349:3480;;;;;2411:62;;;1582:1417;2410:96;;;;1582:1417;349:3480;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2619:52;;;349:3480;;;2619:52;;;349:3480;;;;;2619:52;;;349:3480;;;;;;;;;;3274:15;349:3480;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;2882:16;349:3480;;;;;;;2917:71;349:3480;;;;;;;;;;;;;;;;;;;;;;;;;;;;3274:15;349:3480;;;;;-1:-1:-1;;;;;349:3480:28;;;;;;;;;;;2686:14;;;:::i;:::-;349:3480;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2882:16;349:3480;;;;;;;;;;2917:71;1582:1417;;;;;;;;;;;;;349:3480;-1:-1:-1;;;349:3480:28;;;;;;;;;-1:-1:-1;;;349:3480:28;;;;;;;;;-1:-1:-1;;;349:3480:28;;;;;;;;;-1:-1:-1;;;349:3480:28;;;;;;;;;;;-1:-1:-1;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;2410:96;230:63:11;;;310:8;;2410:96:28;;;2411:62;2444:29;;;-1:-1:-1;2411:62:28;;349:3480;-1:-1:-1;;;349:3480:28;;;;;;;;;;;-1:-1:-1;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;1811:170;-1:-1:-1;;349:3480:28;;-1:-1:-1;;;1878:20:28;;;349:3480;1878:20;349:3480;1878:20;;;;;;;;;;;;1811:170;349:3480;;;;;;;;1865:33;;;:82;;;1811:170;1865:115;;1811:170;1865:115;-1:-1:-1;349:3480:28;;-1:-1:-1;;;1962:18:28;;;349:3480;1962:18;349:3480;1962:18;;;;;;;;;;;;1865:115;1951:29;;;1811:170;;1962:18;;;;;;;;;;;;;;;;:::i;:::-;;;349:3480;;;;;1962:18;;;;;;;;;349:3480;;;;;;;;;1865:82;-1:-1:-1;349:3480:28;;-1:-1:-1;;;1921:26:28;;;349:3480;1921:26;349:3480;1921:26;;;;;;;;;;;;;;;1865:82;349:3480;;1902:45;;1865:82;;1921:26;;;;;;;;;;;;;;;;;;:::i;:::-;;;349:3480;;;;;;;;;;;;1921:26;;;;;;;;;;349:3480;-1:-1:-1;;;349:3480:28;;;;;;;;1878:20;;;;;;;;;;;;;;;;:::i;:::-;;;349:3480;;;;;;;;;;;1878:20;;;349:3480;;;;1878:20;;;;;;349:3480;;;;;;;;;;;;-1:-1:-1;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;1693:44;349:3480;;;;;1693:44;;;;349:3480;;;-1:-1:-1;;;349:3480:28;;;;;;;;;;;;;;;;;;;;3261:95;349:3480;;;;3339:17;3326:30;;3261:95;;;349:3480;-1:-1:-1;;;349:3480:28;;;;;;;;3261:61;349:3480;;;;3293:29;3306:16;3293:29;;3261:61;;349:3480;;;;;;;;-1:-1:-1;;349:3480:28;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;4317:49:30;4334:10;;349:3480:28;;;;;-1:-1:-1;;;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4317:49:30;349:3480:28;;;;4382:46:30;349:3480:28;4334:10:30;4382:46;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1240:17:30;;;1232:54;1240:17;;;1232:54;:::i;:::-;349:3480:28;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;349:3480:28;;;;1342:13:30;1357:7;;;;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;349:3480:28;;;;;;;;1399:9:30;349:3480:28;;;1366:3:30;1409:9;;;;;;;;;;;:::i;:::-;349:3480:28;-1:-1:-1;;;;;349:3480:28;;;;;;;;;1399:9:30;349:3480:28;;;;;1420:6:30;;;;;:::i;:::-;349:3480:28;;;;;;;;;;;;;;;;;1366:3:30;349:3480:28;;;;;;;;;1366:3:30;:::i;:::-;1342:13;;;;;;;;349:3480:28;-1:-1:-1;;;349:3480:28;;;;;;;;;;;;;;;;;-1:-1:-1;;349:3480:28;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;3730:27:30;;;3722:64;3730:27;;;3722:64;:::i;:::-;3826:5;;;:::i;:::-;-1:-1:-1;;;;;349:3480:28;;;;;2409:16:30;;;2401:41;2409:16;;;2401:41;:::i;:::-;2492:13;349:3480:28;;2487:199:30;;;2507:7;;;;;;;349:3480:28;;;2701:48:30;349:3480:28;;;;;;;;;;;;;:::i;:::-;;;;;;;;;2715:10:30;349:3480:28;2715:10:30;349:3480:28;;;;:::i;:::-;2701:48:30;;;230:63:11;3891:318:30;;349:3480:28;;;3891:318:30;349:3480:28;;;;;;;;;;3951:85:30;;;;2715:10;3951:85;;;349:3480:28;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;3951:85:30;;;;;349:3480:28;3951:85:30;;;;;;;3926:272;3951:85;;;;;;3891:318;-1:-1:-1;;;;;;;349:3480:28;3951:195:30;3926:272;:::i;:::-;3891:318;;;;;;;;;;;349:3480:28;;;3951:85:30;;;;349:3480:28;3951:85:30;;;;;;;;;:::i;:::-;;;;;349:3480:28;;;;;;;;;;;;2516:3:30;2548:6;;;2516:3;2548:6;2649:26;2548:6;;;;;;:::i;:::-;349:3480:28;2584:9:30;;;;;;:::i;:::-;349:3480:28;;;;;;;;;;;;;;;;;;;;;2607:28:30;349:3480:28;;;2607:28:30;:::i;:::-;349:3480:28;;;;;;;;;;;;;;;;;2649:26:30;:::i;:::-;349:3480:28;;2516:3:30;:::i;:::-;2492:13;;;;;;;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;;897:102;349:3480;;;:::i;:::-;897:102;;;;:::i;:::-;-1:-1:-1;;;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;349:3480:28;;;;;;;;-1:-1:-1;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;349:3480:28;;;;;-1:-1:-1;;;349:3480:28;;;;;;;;;;;;;;;;;;-1:-1:-1;;349:3480:28;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;866:46:30;;;:98;;;;349:3480:28;866:151:30;;;;349:3480:28;;;;;;;;;866:151:30;-1:-1:-1;;;992:25:30;;-1:-1:-1;866:151:30;;;:98;-1:-1:-1;;;939:25:30;;;-1:-1:-1;866:98:30;;349:3480:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;349:3480:28;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;349:3480:28;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;349:3480:28;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;349:3480:28;;;;;-1:-1:-1;349:3480:28;;:::o;:::-;;;;-1:-1:-1;349:3480:28;;;;;-1:-1:-1;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;349:3480:28;;;;;-1:-1:-1;349:3480:28;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;349:3480:28;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;;;;;;349:3480:28;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;349:3480:28;;;;;;;;-1:-1:-1;;349:3480:28;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;2762:215:30:-;-1:-1:-1;;;;;349:3480:28;2875:10:30;2866:19;;:32;;;;;2762:215;2866:79;;;;2762:215;349:3480:28;;;;2762:215:30:o;349:3480:28:-;;;-1:-1:-1;;;349:3480:28;;;;;;;;;;;;;;;;;;;;2866:79:30;349:3480:28;;;;;;;;;;2875:10:30;349:3480:28;;;;2941:4:30;349:3480:28;;;;;;;;2902:43:30;2866:79;;;:32;349:3480:28;;-1:-1:-1;2866:32:30;;349:3480:28;;;;;;;;;;;;;;;;;;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1024200","executionCost":"79178","totalCost":"1103378"},"external":{"assetCount()":"2563","assets(uint256)":"11183","balanceOf(address,uint256)":"2482","balanceOfBatch(address[],uint256[])":"infinite","ids(uint8,address,address,uint256)":"2836","isApprovedForAll(address,address)":"2846","isApprovedForAsset(address,address,uint256)":"2802","registerAsset(uint8,address,address,uint256)":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26589","setApprovalForAsset(address,uint256,bool)":"29126","supportsInterface(bytes4)":"365","totalSupply(uint256)":"2558","uri(uint256)":"422"},"internal":{"_registerAsset(enum TokenType,address,contract IStrategy,uint256)":"infinite"}},"methodIdentifiers":{"assetCount()":"eafe7a74","assets(uint256)":"cf35bdd0","balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","ids(uint8,address,address,uint256)":"2d4e1d52","isApprovedForAll(address,address)":"e985e9c5","isApprovedForAsset(address,address,uint256)":"a75fcb1e","registerAsset(uint8,address,address,uint256)":"b061db94","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","setApprovalForAsset(address,uint256,bool)":"b8489fb5","supportsInterface(bytes4)":"01ffc9a7","totalSupply(uint256)":"bd85b039","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"AssetRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TokenType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isApprovedForAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"registerAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol\":\"AssetRegister\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\ninterface IERC1155 is IERC165 {\\r\\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\\r\\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n    event URI(string _value, uint256 indexed _id);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n\\r\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\r\\n\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x39f388312b08552eb8a5f09cbe6b0c6ea511a6a47c72985e1ab53b777b911771\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC1155TokenReceiver {\\r\\n    function onERC1155Received(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0x5a73c68c2975f8908b96e76fe916a1a39b86fd7acb2d1e463e85e7841225c0cf\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC165 {\\r\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x2929dd1b0483b96a0b59b4b945684705adf252697b404fe7f126816cb78d684c\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\nlibrary BoringAddress {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function sendNative(address to, uint256 amount) internal {\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"BoringAddress: transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdcdf9c08bc41b6091e03d4bb44d6503bd084ae9d990277d0761ed6e1cdeefbb3\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\nimport \\\"./ERC1155.sol\\\";\\n\\n// An asset is a token + a strategy\\nstruct Asset {\\n    TokenType tokenType;\\n    address contractAddress;\\n    IStrategy strategy;\\n    uint256 tokenId;\\n}\\n\\ncontract AssetRegister is ERC1155 {\\n    using BoringAddress for address;\\n\\n    mapping(address => mapping(address => mapping(uint256 => bool))) public isApprovedForAsset;\\n\\n    event AssetRegistered(\\n        TokenType indexed tokenType,\\n        address indexed contractAddress,\\n        IStrategy strategy,\\n        uint256 indexed tokenId,\\n        uint256 assetId\\n    );\\n    event ApprovalForAsset(address indexed sender, address indexed operator, uint256 assetId, bool approved);\\n\\n    // ids start at 1 so that id 0 means it's not yet registered\\n    mapping(TokenType => mapping(address => mapping(IStrategy => mapping(uint256 => uint256)))) public ids;\\n    Asset[] public assets;\\n\\n    constructor() {\\n        assets.push(Asset(TokenType.None, address(0), NO_STRATEGY, 0));\\n    }\\n\\n    function assetCount() public view returns (uint256) {\\n        return assets.length;\\n    }\\n\\n    function _registerAsset(\\n        TokenType tokenType,\\n        address contractAddress,\\n        IStrategy strategy,\\n        uint256 tokenId\\n    ) internal returns (uint256 assetId) {\\n        // Checks\\n        assetId = ids[tokenType][contractAddress][strategy][tokenId];\\n\\n        // If assetId is 0, this is a new asset that needs to be registered\\n        if (assetId == 0) {\\n            // Only do these checks if a new asset needs to be created\\n            require(tokenId == 0 || tokenType != TokenType.ERC20, \\\"YieldBox: No tokenId for ERC20\\\");\\n            require(\\n                tokenType == TokenType.Native ||\\n                    (tokenType == strategy.tokenType() && contractAddress == strategy.contractAddress() && tokenId == strategy.tokenId()),\\n                \\\"YieldBox: Strategy mismatch\\\"\\n            );\\n            // If a new token gets added, the isContract checks that this is a deployed contract. Needed for security.\\n            // Prevents getting shares for a future token whose address is known in advance. For instance a token that will be deployed with CREATE2 in the future or while the contract creation is\\n            // in the mempool\\n            require((tokenType == TokenType.Native && contractAddress == address(0)) || contractAddress.isContract(), \\\"YieldBox: Not a token\\\");\\n\\n            // Effects\\n            assetId = assets.length;\\n            assets.push(Asset(tokenType, contractAddress, strategy, tokenId));\\n            ids[tokenType][contractAddress][strategy][tokenId] = assetId;\\n\\n            // The actual URI isn't emitted here as per EIP1155, because that would make this call super expensive.\\n            emit URI(\\\"\\\", assetId);\\n            emit AssetRegistered(tokenType, contractAddress, strategy, tokenId, assetId);\\n        }\\n    }\\n\\n    function registerAsset(TokenType tokenType, address contractAddress, IStrategy strategy, uint256 tokenId) public returns (uint256 assetId) {\\n        // Native assets can only be added internally by the NativeTokenFactory\\n        require(\\n            tokenType == TokenType.ERC20 || tokenType == TokenType.ERC721 || tokenType == TokenType.ERC1155,\\n            \\\"AssetManager: cannot add Native\\\"\\n        );\\n        assetId = _registerAsset(tokenType, contractAddress, strategy, tokenId);\\n    }\\n\\n    function setApprovalForAsset(address operator, uint256 assetId, bool approved) external virtual {\\n        require(assetId < assetCount(), \\\"AssetManager: asset not valid\\\");\\n        isApprovedForAsset[msg.sender][operator][assetId] = approved;\\n\\n        emit ApprovalForAsset(msg.sender, operator, assetId, approved);\\n    }\\n}\\n\",\"keccak256\":\"0x614d8dd6ef5b414eda33855d3f55091d8669169d8f8ca584153c91111094c72f\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\n\\n// Written by OreNoMochi (https://github.com/OreNoMochii), BoringCrypto\\n\\ncontract ERC1155 is IERC1155 {\\n    using BoringAddress for address;\\n\\n    // mappings\\n\\n    mapping(address => mapping(address => bool)) public override isApprovedForAll; // map of operator approval\\n    mapping(address => mapping(uint256 => uint256)) public override balanceOf; // map of tokens owned by\\n    mapping(uint256 => uint256) public totalSupply; // totalSupply per token\\n\\n    function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\\n        return\\n            interfaceID == this.supportsInterface.selector || // EIP-165\\n            interfaceID == 0xd9b67a26 || // ERC-1155\\n            interfaceID == 0x0e89341c; // EIP-1155 Metadata\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view override returns (uint256[] memory balances) {\\n        uint256 len = owners.length;\\n        require(len == ids.length, \\\"ERC1155: Length mismatch\\\");\\n\\n        balances = new uint256[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            balances[i] = balanceOf[owners[i]][ids[i]];\\n        }\\n    }\\n\\n    function _mint(address to, uint256 id, uint256 value) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[to][id] += value;\\n        totalSupply[id] += value;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, value);\\n    }\\n\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        require(from != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        totalSupply[id] -= value;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, value);\\n    }\\n\\n    function _transferSingle(address from, address to, uint256 id, uint256 value) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        balanceOf[to][id] += value;\\n\\n        emit TransferSingle(msg.sender, from, to, id, value);\\n    }\\n\\n    function _transferBatch(address from, address to, uint256[] calldata ids, uint256[] calldata values) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        uint256 len = ids.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 id = ids[i];\\n            uint256 value = values[i];\\n            balanceOf[from][id] -= value;\\n            balanceOf[to][id] += value;\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, values);\\n    }\\n\\n    function _requireTransferAllowed(address _from, bool _approved) internal view virtual {\\n        require(_from == msg.sender || _approved || isApprovedForAll[_from][msg.sender] == true, \\\"Transfer not allowed\\\");\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external override {\\n        _requireTransferAllowed(from, false);\\n\\n        _transferSingle(from, to, id, value);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, value, data) ==\\n                    bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override {\\n        require(ids.length == values.length, \\\"ERC1155: Length mismatch\\\");\\n        _requireTransferAllowed(from, false);\\n\\n        _transferBatch(from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, values, data) ==\\n                    bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function uri(uint256 /*assetId*/) external view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x946ff1e91845883dc69b26d2547bb8d53b0fabe08dcb6c4f8e4d6c32d585195c\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title TokenType\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The YieldBox can hold different types of tokens:\\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\\nenum TokenType {\\n    Native,\\n    ERC20,\\n    ERC721,\\n    ERC1155,\\n    None\\n}\\n\",\"keccak256\":\"0xc6adb740ff68d4162214dfa9d406422a066ae2197b7f0c8df5daa7c84b4a10aa\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\nimport \\\"./IYieldBox.sol\\\";\\n\\ninterface IStrategy {\\n    /// Each strategy only works with a single asset. This should help make implementations simpler and more readable.\\n    /// To safe gas a proxy pattern (YieldBox factory) could be used to deploy the same strategy for multiple tokens.\\n\\n    /// It is recommended that strategies keep a small amount of funds uninvested (like 5%) to handle small withdrawals\\n    /// and deposits without triggering costly investing/divesting logic.\\n\\n    /// #########################\\n    /// ### Basic Information ###\\n    /// #########################\\n\\n    /// Returns the address of the yieldBox that this strategy is for\\n    function yieldBox() external view returns (IYieldBox yieldBox_);\\n\\n    /// Returns a name for this strategy\\n    function name() external view returns (string memory name_);\\n\\n    /// Returns a description for this strategy\\n    function description() external view returns (string memory description_);\\n\\n    /// #######################\\n    /// ### Supported Token ###\\n    /// #######################\\n\\n    /// Returns the standard that this strategy works with\\n    function tokenType() external view returns (TokenType tokenType_);\\n\\n    /// Returns the contract address that this strategy works with\\n    function contractAddress() external view returns (address contractAddress_);\\n\\n    /// Returns the tokenId that this strategy works with (for EIP1155)\\n    /// This is always 0 for EIP20 tokens\\n    function tokenId() external view returns (uint256 tokenId_);\\n\\n    /// ###########################\\n    /// ### Balance Information ###\\n    /// ###########################\\n\\n    /// Returns the total value the strategy holds (principle + gain) expressed in asset token amount.\\n    /// This should be cheap in gas to retrieve. Can return a bit less than the actual, but MUST NOT return more.\\n    /// The gas cost of this function will be paid on any deposit or withdrawal onto and out of the YieldBox\\n    /// that uses this strategy. Also, anytime a protocol converts between shares and amount, this gets called.\\n    function currentBalance() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn\\n    function withdrawable() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn for a low gas fee\\n    /// When more than this amount is withdrawn it will trigger divesting from the actual strategy\\n    /// which will incur higher gas costs\\n    function cheapWithdrawable() external view returns (uint256 amount);\\n\\n    /// ##########################\\n    /// ### YieldBox Functions ###\\n    /// ##########################\\n\\n    /// Is called by YieldBox to signal funds have been added, the strategy may choose to act on this\\n    /// When a large enough deposit is made, this should trigger the strategy to invest into the actual\\n    /// strategy. This function should normally NOT be used to invest on each call as that would be costly\\n    /// for small deposits.\\n    /// If the strategy handles native tokens (ETH) it will receive it directly (not wrapped). It will be\\n    /// up to the strategy to wrap it if needed.\\n    /// Only accept this call from the YieldBox\\n    function deposited(uint256 amount) external;\\n\\n    /// Is called by the YieldBox to ask the strategy to withdraw to the user\\n    /// When a strategy keeps a little reserve for cheap withdrawals and the requested withdrawal goes over this amount,\\n    /// the strategy should divest enough from the strategy to complete the withdrawal and rebalance the reserve.\\n    /// If the strategy handles native tokens (ETH) it should send this, not a wrapped version.\\n    /// With some strategies it might be hard to withdraw exactly the correct amount.\\n    /// Only accept this call from the YieldBox\\n    function withdraw(address to, uint256 amount) external;\\n}\\n\\nIStrategy constant NO_STRATEGY = IStrategy(address(0));\\n\",\"keccak256\":\"0x637400567ba619671921a58dd2b17c9d1fdacc27f0f021d79bb4f122ead71902\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\n\\ninterface IYieldBox {\\n    function wrappedNative() external view returns (address wrappedNative);\\n\\n    function assets(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            TokenType tokenType,\\n            address contractAddress,\\n            address strategy,\\n            uint256 tokenId\\n        );\\n\\n    function nativeTokens(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            uint8 decimals\\n        );\\n\\n    function owner(uint256 assetId) external view returns (address owner);\\n\\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\\n\\n    function setApprovalForAsset(\\n        address operator,\\n        uint256 assetId,\\n        bool approved\\n    ) external;\\n\\n    function depositAsset(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function withdraw(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 assetId,\\n        uint256 share\\n    ) external;\\n\\n    function batchTransfer(\\n        address from,\\n        address to,\\n        uint256[] calldata assetIds_,\\n        uint256[] calldata shares_\\n    ) external;\\n\\n    function transferMultiple(\\n        address from,\\n        address[] calldata tos,\\n        uint256 assetId,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function toShare(\\n        uint256 assetId,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function toAmount(\\n        uint256 assetId,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x83e4c62b4059bbd59cac87eb714311f9304ce164ead7b45a7562067732fdc5d3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":5063,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol:AssetRegister","label":"isApprovedForAll","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":5070,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol:AssetRegister","label":"balanceOf","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"},{"astId":5074,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol:AssetRegister","label":"totalSupply","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_uint256)"},{"astId":4645,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol:AssetRegister","label":"isApprovedForAsset","offset":0,"slot":"3","type":"t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))"},{"astId":4681,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol:AssetRegister","label":"ids","offset":0,"slot":"4","type":"t_mapping(t_enum(TokenType)8288,t_mapping(t_address,t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256))))"},{"astId":4685,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol:AssetRegister","label":"assets","offset":0,"slot":"5","type":"t_array(t_struct(Asset)4632_storage)dyn_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Asset)4632_storage)dyn_storage":{"base":"t_struct(Asset)4632_storage","encoding":"dynamic_array","label":"struct Asset[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IStrategy)8364":{"encoding":"inplace","label":"contract IStrategy","numberOfBytes":"20"},"t_enum(TokenType)8288":{"encoding":"inplace","label":"enum TokenType","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => mapping(uint256 => bool)))","numberOfBytes":"32","value":"t_mapping(t_address,t_mapping(t_uint256,t_bool))"},"t_mapping(t_address,t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(contract IStrategy => mapping(uint256 => uint256)))","numberOfBytes":"32","value":"t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256))"},"t_mapping(t_address,t_mapping(t_uint256,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => bool))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_bool)"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_contract(IStrategy)8364","label":"mapping(contract IStrategy => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_enum(TokenType)8288,t_mapping(t_address,t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256))))":{"encoding":"mapping","key":"t_enum(TokenType)8288","label":"mapping(enum TokenType => mapping(address => mapping(contract IStrategy => mapping(uint256 => uint256))))","numberOfBytes":"32","value":"t_mapping(t_address,t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256)))"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(Asset)4632_storage":{"encoding":"inplace","label":"struct Asset","members":[{"astId":4624,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol:AssetRegister","label":"tokenType","offset":0,"slot":"0","type":"t_enum(TokenType)8288"},{"astId":4626,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol:AssetRegister","label":"contractAddress","offset":1,"slot":"0","type":"t_address"},{"astId":4629,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol:AssetRegister","label":"strategy","offset":0,"slot":"1","type":"t_contract(IStrategy)8364"},{"astId":4631,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol:AssetRegister","label":"tokenId","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"tapioca-sdk/dist/contracts/YieldBox/contracts/BoringMath.sol":{"BoringMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212203839a1023d313e6092be228943d72e659e05da614980f6283988e9034e1cfa6964736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE CODECOPY LOG1 MUL RETURNDATASIZE BALANCE RETURNDATACOPY PUSH1 0x92 0xBE 0x22 DUP10 NUMBER 0xD7 0x2E PUSH6 0x9E05DA614980 0xF6 0x28 CODECOPY DUP9 0xE9 SUB 0x4E SHR STATICCALL PUSH10 0x64736F6C634300081200 CALLER ","sourceMap":"57:807:29:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212203839a1023d313e6092be228943d72e659e05da614980f6283988e9034e1cfa6964736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE CODECOPY LOG1 MUL RETURNDATASIZE BALANCE RETURNDATACOPY PUSH1 0x92 0xBE 0x22 DUP10 NUMBER 0xD7 0x2E PUSH6 0x9E05DA614980 0xF6 0x28 CODECOPY DUP9 0xE9 SUB 0x4E SHR STATICCALL PUSH10 0x64736F6C634300081200 CALLER ","sourceMap":"57:807:29:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"muldiv(uint256,uint256,uint256,bool)":"infinite","to128(uint256)":"infinite","to32(uint256)":"infinite","to64(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/BoringMath.sol\":\"BoringMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/BoringMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary BoringMath {\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= type(uint128).max, \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= type(uint64).max, \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= type(uint32).max, \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n\\n    function muldiv(\\n        uint256 value,\\n        uint256 mul,\\n        uint256 div,\\n        bool roundUp\\n    ) internal pure returns (uint256 result) {\\n        result = (value * mul) / div;\\n        if (roundUp && (result * div) / mul < value) {\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x72b9e717e3845aa584e81dee9a2f486c42941ebdb552130887b383ce59a7627d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol":{"ERC1155":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256","name":"_id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"_value","type":"string"},{"indexed":true,"internalType":"uint256","name":"_id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523461001657610b81908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c908162fdd58e146107cc5750806301ffc9a71461075f5780630e89341c146106cb5780632eb2c2d61461047b5780634e1273f414610320578063a22cb4651461029b578063bd85b03914610274578063e985e9c5146102235763f242432a1461008557600080fd5b3461021f5760a036600319011261021f5761009e610809565b836100a7610824565b608435926064359060443567ffffffffffffffff861161021b576100ef7fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62963690890161086b565b9590946100fb84610a73565b6001600160a01b0380821694610112861515610a0d565b169081835284828c60209b8c916001835280882089895283528088206101398c8254610a59565b90558488526001835280882089895283528088206101588c8254610a66565b90558a8151938a85528401523392a43b610170575080f35b6101af88968b519889978896879563f23a6e6160e01b9e8f8852339088015260248701526044860152606485015260a0608485015260a48401916109a0565b03925af1918215610211576101d8945085926101e4575b50506001600160e01b031916146109c1565b38808080808080808880f35b6102039250803d1061020a575b6101fb81836108e5565b810190610980565b38806101c6565b503d6101f1565b84513d87823e3d90fd5b8480fd5b8280fd5b50503461027057806003193601126102705760ff81602093610243610809565b61024b610824565b6001600160a01b03918216835282875283832091168252855220549151911615158152f35b5080fd5b503461021f57602036600319011261021f5760209282913581526002845220549051908152f35b5050346102705780600319360112610270576102b5610809565b906024359081151580920361031c57338452836020526001600160a01b0381852093169283855260205280842060ff1981541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b8380fd5b5082903461027057826003193601126102705767ffffffffffffffff91813583811161027057610353903690840161083a565b919093602490813590811161021f579184869261037489953690840161083a565b949092610382868914610899565b61038b8861091d565b93610398885195866108e5565b8885526103a48961091d565b602099868b019891601f1901368a37875b8181106103fe575050505050505083519485948186019282875251809352850193925b8281106103e757505050500390f35b8351855286955093810193928101926001016103d8565b61040f8183889e9b9a9c9d9e61095a565b356001600160a01b038116809103610477578852600189528b882061043582858761095a565b35895289528b8820548a51821015610465579061045a918a8260051b8d010152610935565b9a999896979a6103b5565b634e487b7160e01b8952603286528789fd5b8880fd5b503461021f5760031960a03682011261031c57610496610809565b61049e610824565b9067ffffffffffffffff906044358281116106c7576104c0903690870161083a565b9290946064358281116106c3576104da903690890161083a565b926084359081116106bf57906104f68897949236908b0161086b565b929094610504828914610899565b61050d87610a73565b6001600160a01b038d8d8284169b8c93610528851515610a0d565b839b169a8b935b8d8083106106515761056e92507f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb939150845194808652850191610b0e565b918083036020820152806105843394898b610b0e565b0390a43b610590578b80f35b8a51988997889763bc197c8160e01b9c8d8a5233908a015260248901526044880160a0905260a48801906105c392610b0e565b90848783030160648801526105d792610b0e565b918483030160848501526105ea926109a0565b0381875a94602095f19081156106445761061793508491610626575b506001600160e01b031916146109c1565b38808080808080808080808b80f35b61063e915060203d811161020a576101fb81836108e5565b38610606565b50505051903d90823e3d90fd5b95610667836106b3986106ac969897959861095a565b3590610674878b8d61095a565b3595835260016020918183528585208486528352858520610696898254610a59565b9055845281528383209183525220918254610a66565b9055610935565b878d8f8c938e9161052f565b8a80fd5b8980fd5b8780fd5b503461021f576020928360031936011261075c578251918483019083821067ffffffffffffffff831117610749575083949291945283815282519382859384528251928382860152825b84811061073357505050828201840152601f01601f19168101030190f35b8181018301518882018801528795508201610715565b634e487b7160e01b835260419052602482fd5b80fd5b503461021f57602036600319011261021f57359063ffffffff60e01b821680920361021f57602092506301ffc9a760e01b82149182156107bb575b82156107aa575b50519015158152f35b6303a24d0760e21b149150386107a1565b636cdb3d1360e11b8114925061079a565b8490843461021f578060031936011261021f576020926001600160a01b036107f2610809565b168152600184528181206024358252845220548152f35b600435906001600160a01b038216820361081f57565b600080fd5b602435906001600160a01b038216820361081f57565b9181601f8401121561081f5782359167ffffffffffffffff831161081f576020808501948460051b01011161081f57565b9181601f8401121561081f5782359167ffffffffffffffff831161081f576020838186019501011161081f57565b156108a057565b60405162461bcd60e51b815260206004820152601860248201527f455243313135353a204c656e677468206d69736d6174636800000000000000006044820152606490fd5b90601f8019910116810190811067ffffffffffffffff82111761090757604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116109075760051b60200190565b60001981146109445760010190565b634e487b7160e01b600052601160045260246000fd5b919081101561096a5760051b0190565b634e487b7160e01b600052603260045260246000fd5b9081602091031261081f57516001600160e01b03198116810361081f5790565b908060209392818452848401376000828201840152601f01601f1916010190565b156109c857565b60405162461bcd60e51b815260206004820152601260248201527f57726f6e672072657475726e2076616c756500000000000000000000000000006044820152606490fd5b15610a1457565b60405162461bcd60e51b815260206004820152600c60248201527f4e6f2030206164647265737300000000000000000000000000000000000000006044820152606490fd5b9190820391821161094457565b9190820180921161094457565b6001600160a01b0316338114908115610b05575b8115610adb575b5015610a9657565b60405162461bcd60e51b815260206004820152601460248201527f5472616e73666572206e6f7420616c6c6f7765640000000000000000000000006044820152606490fd5b90506000526000602052604060002033600052602052600160ff6040600020541615151438610a8e565b60009150610a87565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831161081f5760209260051b80928483013701019056fea2646970667358221220dd645783521926c0d6d1619fc3afec1ba8deb5c799bf506907c2ca2bd5964af264736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0xB81 SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH3 0xFDD58E EQ PUSH2 0x7CC JUMPI POP DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x75F JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x6CB JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x47B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x29B JUMPI DUP1 PUSH4 0xBD85B039 EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x223 JUMPI PUSH4 0xF242432A EQ PUSH2 0x85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x21F JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x21F JUMPI PUSH2 0x9E PUSH2 0x809 JUMP JUMPDEST DUP4 PUSH2 0xA7 PUSH2 0x824 JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD SWAP3 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP7 GT PUSH2 0x21B JUMPI PUSH2 0xEF PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP7 CALLDATASIZE SWAP1 DUP10 ADD PUSH2 0x86B JUMP JUMPDEST SWAP6 SWAP1 SWAP5 PUSH2 0xFB DUP5 PUSH2 0xA73 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP5 PUSH2 0x112 DUP7 ISZERO ISZERO PUSH2 0xA0D JUMP JUMPDEST AND SWAP1 DUP2 DUP4 MSTORE DUP5 DUP3 DUP13 PUSH1 0x20 SWAP12 DUP13 SWAP2 PUSH1 0x1 DUP4 MSTORE DUP1 DUP9 KECCAK256 DUP10 DUP10 MSTORE DUP4 MSTORE DUP1 DUP9 KECCAK256 PUSH2 0x139 DUP13 DUP3 SLOAD PUSH2 0xA59 JUMP JUMPDEST SWAP1 SSTORE DUP5 DUP9 MSTORE PUSH1 0x1 DUP4 MSTORE DUP1 DUP9 KECCAK256 DUP10 DUP10 MSTORE DUP4 MSTORE DUP1 DUP9 KECCAK256 PUSH2 0x158 DUP13 DUP3 SLOAD PUSH2 0xA66 JUMP JUMPDEST SWAP1 SSTORE DUP11 DUP2 MLOAD SWAP4 DUP11 DUP6 MSTORE DUP5 ADD MSTORE CALLER SWAP3 LOG4 EXTCODESIZE PUSH2 0x170 JUMPI POP DUP1 RETURN JUMPDEST PUSH2 0x1AF DUP9 SWAP7 DUP12 MLOAD SWAP9 DUP10 SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP15 DUP16 DUP9 MSTORE CALLER SWAP1 DUP9 ADD MSTORE PUSH1 0x24 DUP8 ADD MSTORE PUSH1 0x44 DUP7 ADD MSTORE PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP6 ADD MSTORE PUSH1 0xA4 DUP5 ADD SWAP2 PUSH2 0x9A0 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x211 JUMPI PUSH2 0x1D8 SWAP5 POP DUP6 SWAP3 PUSH2 0x1E4 JUMPI JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0x9C1 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP9 DUP1 RETURN JUMPDEST PUSH2 0x203 SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x20A JUMPI JUMPDEST PUSH2 0x1FB DUP2 DUP4 PUSH2 0x8E5 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x980 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x1C6 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1F1 JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x270 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x270 JUMPI PUSH1 0xFF DUP2 PUSH1 0x20 SWAP4 PUSH2 0x243 PUSH2 0x809 JUMP JUMPDEST PUSH2 0x24B PUSH2 0x824 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE DUP3 DUP8 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP6 MSTORE KECCAK256 SLOAD SWAP2 MLOAD SWAP2 AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x21F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x21F JUMPI PUSH1 0x20 SWAP3 DUP3 SWAP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x2 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x270 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x270 JUMPI PUSH2 0x2B5 PUSH2 0x809 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP1 SWAP3 SUB PUSH2 0x31C JUMPI CALLER DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP6 KECCAK256 SWAP4 AND SWAP3 DUP4 DUP6 MSTORE PUSH1 0x20 MSTORE DUP1 DUP5 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND PUSH1 0xFF DUP5 AND OR SWAP1 SSTORE MLOAD SWAP1 DUP2 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 CALLER SWAP3 LOG3 DUP1 RETURN JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x270 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x270 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 DUP2 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x270 JUMPI PUSH2 0x353 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x83A JUMP JUMPDEST SWAP2 SWAP1 SWAP4 PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x21F JUMPI SWAP2 DUP5 DUP7 SWAP3 PUSH2 0x374 DUP10 SWAP6 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x83A JUMP JUMPDEST SWAP5 SWAP1 SWAP3 PUSH2 0x382 DUP7 DUP10 EQ PUSH2 0x899 JUMP JUMPDEST PUSH2 0x38B DUP9 PUSH2 0x91D JUMP JUMPDEST SWAP4 PUSH2 0x398 DUP9 MLOAD SWAP6 DUP7 PUSH2 0x8E5 JUMP JUMPDEST DUP9 DUP6 MSTORE PUSH2 0x3A4 DUP10 PUSH2 0x91D JUMP JUMPDEST PUSH1 0x20 SWAP10 DUP7 DUP12 ADD SWAP9 SWAP2 PUSH1 0x1F NOT ADD CALLDATASIZE DUP11 CALLDATACOPY DUP8 JUMPDEST DUP2 DUP2 LT PUSH2 0x3FE JUMPI POP POP POP POP POP POP POP DUP4 MLOAD SWAP5 DUP6 SWAP5 DUP2 DUP7 ADD SWAP3 DUP3 DUP8 MSTORE MLOAD DUP1 SWAP4 MSTORE DUP6 ADD SWAP4 SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0x3E7 JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x3D8 JUMP JUMPDEST PUSH2 0x40F DUP2 DUP4 DUP9 SWAP15 SWAP12 SWAP11 SWAP13 SWAP14 SWAP15 PUSH2 0x95A JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 SWAP2 SUB PUSH2 0x477 JUMPI DUP9 MSTORE PUSH1 0x1 DUP10 MSTORE DUP12 DUP9 KECCAK256 PUSH2 0x435 DUP3 DUP6 DUP8 PUSH2 0x95A JUMP JUMPDEST CALLDATALOAD DUP10 MSTORE DUP10 MSTORE DUP12 DUP9 KECCAK256 SLOAD DUP11 MLOAD DUP3 LT ISZERO PUSH2 0x465 JUMPI SWAP1 PUSH2 0x45A SWAP2 DUP11 DUP3 PUSH1 0x5 SHL DUP14 ADD ADD MSTORE PUSH2 0x935 JUMP JUMPDEST SWAP11 SWAP10 SWAP9 SWAP7 SWAP8 SWAP11 PUSH2 0x3B5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x32 DUP7 MSTORE DUP8 DUP10 REVERT JUMPDEST DUP9 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x21F JUMPI PUSH1 0x3 NOT PUSH1 0xA0 CALLDATASIZE DUP3 ADD SLT PUSH2 0x31C JUMPI PUSH2 0x496 PUSH2 0x809 JUMP JUMPDEST PUSH2 0x49E PUSH2 0x824 JUMP JUMPDEST SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x44 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x6C7 JUMPI PUSH2 0x4C0 SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0x83A JUMP JUMPDEST SWAP3 SWAP1 SWAP5 PUSH1 0x64 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x6C3 JUMPI PUSH2 0x4DA SWAP1 CALLDATASIZE SWAP1 DUP10 ADD PUSH2 0x83A JUMP JUMPDEST SWAP3 PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x6BF JUMPI SWAP1 PUSH2 0x4F6 DUP9 SWAP8 SWAP5 SWAP3 CALLDATASIZE SWAP1 DUP12 ADD PUSH2 0x86B JUMP JUMPDEST SWAP3 SWAP1 SWAP5 PUSH2 0x504 DUP3 DUP10 EQ PUSH2 0x899 JUMP JUMPDEST PUSH2 0x50D DUP8 PUSH2 0xA73 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP14 DUP3 DUP5 AND SWAP12 DUP13 SWAP4 PUSH2 0x528 DUP6 ISZERO ISZERO PUSH2 0xA0D JUMP JUMPDEST DUP4 SWAP12 AND SWAP11 DUP12 SWAP4 JUMPDEST DUP14 DUP1 DUP4 LT PUSH2 0x651 JUMPI PUSH2 0x56E SWAP3 POP PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB SWAP4 SWAP2 POP DUP5 MLOAD SWAP5 DUP1 DUP7 MSTORE DUP6 ADD SWAP2 PUSH2 0xB0E JUMP JUMPDEST SWAP2 DUP1 DUP4 SUB PUSH1 0x20 DUP3 ADD MSTORE DUP1 PUSH2 0x584 CALLER SWAP5 DUP10 DUP12 PUSH2 0xB0E JUMP JUMPDEST SUB SWAP1 LOG4 EXTCODESIZE PUSH2 0x590 JUMPI DUP12 DUP1 RETURN JUMPDEST DUP11 MLOAD SWAP9 DUP10 SWAP8 DUP9 SWAP8 PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP13 DUP14 DUP11 MSTORE CALLER SWAP1 DUP11 ADD MSTORE PUSH1 0x24 DUP10 ADD MSTORE PUSH1 0x44 DUP9 ADD PUSH1 0xA0 SWAP1 MSTORE PUSH1 0xA4 DUP9 ADD SWAP1 PUSH2 0x5C3 SWAP3 PUSH2 0xB0E JUMP JUMPDEST SWAP1 DUP5 DUP8 DUP4 SUB ADD PUSH1 0x64 DUP9 ADD MSTORE PUSH2 0x5D7 SWAP3 PUSH2 0xB0E JUMP JUMPDEST SWAP2 DUP5 DUP4 SUB ADD PUSH1 0x84 DUP6 ADD MSTORE PUSH2 0x5EA SWAP3 PUSH2 0x9A0 JUMP JUMPDEST SUB DUP2 DUP8 GAS SWAP5 PUSH1 0x20 SWAP6 CALL SWAP1 DUP2 ISZERO PUSH2 0x644 JUMPI PUSH2 0x617 SWAP4 POP DUP5 SWAP2 PUSH2 0x626 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0x9C1 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP12 DUP1 RETURN JUMPDEST PUSH2 0x63E SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x20A JUMPI PUSH2 0x1FB DUP2 DUP4 PUSH2 0x8E5 JUMP JUMPDEST CODESIZE PUSH2 0x606 JUMP JUMPDEST POP POP POP MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP6 PUSH2 0x667 DUP4 PUSH2 0x6B3 SWAP9 PUSH2 0x6AC SWAP7 SWAP9 SWAP8 SWAP6 SWAP9 PUSH2 0x95A JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0x674 DUP8 DUP12 DUP14 PUSH2 0x95A JUMP JUMPDEST CALLDATALOAD SWAP6 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP2 DUP2 DUP4 MSTORE DUP6 DUP6 KECCAK256 DUP5 DUP7 MSTORE DUP4 MSTORE DUP6 DUP6 KECCAK256 PUSH2 0x696 DUP10 DUP3 SLOAD PUSH2 0xA59 JUMP JUMPDEST SWAP1 SSTORE DUP5 MSTORE DUP2 MSTORE DUP4 DUP4 KECCAK256 SWAP2 DUP4 MSTORE MSTORE KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0xA66 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x935 JUMP JUMPDEST DUP8 DUP14 DUP16 DUP13 SWAP4 DUP15 SWAP2 PUSH2 0x52F JUMP JUMPDEST DUP11 DUP1 REVERT JUMPDEST DUP10 DUP1 REVERT JUMPDEST DUP8 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x21F JUMPI PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x75C JUMPI DUP3 MLOAD SWAP2 DUP5 DUP4 ADD SWAP1 DUP4 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x749 JUMPI POP DUP4 SWAP5 SWAP3 SWAP2 SWAP5 MSTORE DUP4 DUP2 MSTORE DUP3 MLOAD SWAP4 DUP3 DUP6 SWAP4 DUP5 MSTORE DUP3 MLOAD SWAP3 DUP4 DUP3 DUP7 ADD MSTORE DUP3 JUMPDEST DUP5 DUP2 LT PUSH2 0x733 JUMPI POP POP POP DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 RETURN JUMPDEST DUP2 DUP2 ADD DUP4 ADD MLOAD DUP9 DUP3 ADD DUP9 ADD MSTORE DUP8 SWAP6 POP DUP3 ADD PUSH2 0x715 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x21F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x21F JUMPI CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP3 AND DUP1 SWAP3 SUB PUSH2 0x21F JUMPI PUSH1 0x20 SWAP3 POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP3 EQ SWAP2 DUP3 ISZERO PUSH2 0x7BB JUMPI JUMPDEST DUP3 ISZERO PUSH2 0x7AA JUMPI JUMPDEST POP MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ SWAP2 POP CODESIZE PUSH2 0x7A1 JUMP JUMPDEST PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL DUP2 EQ SWAP3 POP PUSH2 0x79A JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x21F JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x21F JUMPI PUSH1 0x20 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x7F2 PUSH2 0x809 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x1 DUP5 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x24 CALLDATALOAD DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x81F JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x81F JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x81F JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x81F JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x81F JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x81F JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x81F JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x81F JUMPI JUMP JUMPDEST ISZERO PUSH2 0x8A0 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204C656E677468206D69736D617463680000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x907 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x907 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x944 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x96A JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x81F JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 SUB PUSH2 0x81F JUMPI SWAP1 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x9C8 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57726F6E672072657475726E2076616C75650000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0xA14 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F203020616464726573730000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x944 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x944 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0xB05 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0xADB JUMPI JUMPDEST POP ISZERO PUSH2 0xA96 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73666572206E6F7420616C6C6F776564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO ISZERO EQ CODESIZE PUSH2 0xA8E JUMP JUMPDEST PUSH1 0x0 SWAP2 POP PUSH2 0xA87 JUMP JUMPDEST SWAP1 SWAP2 DUP3 DUP2 MSTORE PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x81F JUMPI PUSH1 0x20 SWAP3 PUSH1 0x5 SHL DUP1 SWAP3 DUP5 DUP4 ADD CALLDATACOPY ADD ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD PUSH5 0x5783521926 0xC0 0xD6 0xD1 PUSH2 0x9FC3 0xAF 0xEC SHL 0xA8 0xDE 0xB5 0xC7 SWAP10 0xBF POP PUSH10 0x7C2CA2BD5964AF26473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"370:4179:30:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":2084,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_6929":{"entryPoint":2057,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_array_uint256_dyn_calldata":{"entryPoint":2106,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes4_fromMemory":{"entryPoint":2432,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":2155,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":2830,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_bytes_calldata":{"entryPoint":2464,"id":null,"parameterSlots":3,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":2333,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_array_index_access_address_dyn_calldata":{"entryPoint":2394,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_uint256":{"entryPoint":2662,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256":{"entryPoint":2649,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":2277,"id":null,"parameterSlots":2,"returnSlots":0},"fun_requireTransferAllowed":{"entryPoint":2675,"id":5402,"parameterSlots":1,"returnSlots":0},"increment_uint256":{"entryPoint":2357,"id":null,"parameterSlots":1,"returnSlots":1},"require_helper_stringliteral":{"entryPoint":2201,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_06e7":{"entryPoint":2573,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_ada4":{"entryPoint":2497,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604081815260048036101561001557600080fd5b600092833560e01c908162fdd58e146107cc5750806301ffc9a71461075f5780630e89341c146106cb5780632eb2c2d61461047b5780634e1273f414610320578063a22cb4651461029b578063bd85b03914610274578063e985e9c5146102235763f242432a1461008557600080fd5b3461021f5760a036600319011261021f5761009e610809565b836100a7610824565b608435926064359060443567ffffffffffffffff861161021b576100ef7fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62963690890161086b565b9590946100fb84610a73565b6001600160a01b0380821694610112861515610a0d565b169081835284828c60209b8c916001835280882089895283528088206101398c8254610a59565b90558488526001835280882089895283528088206101588c8254610a66565b90558a8151938a85528401523392a43b610170575080f35b6101af88968b519889978896879563f23a6e6160e01b9e8f8852339088015260248701526044860152606485015260a0608485015260a48401916109a0565b03925af1918215610211576101d8945085926101e4575b50506001600160e01b031916146109c1565b38808080808080808880f35b6102039250803d1061020a575b6101fb81836108e5565b810190610980565b38806101c6565b503d6101f1565b84513d87823e3d90fd5b8480fd5b8280fd5b50503461027057806003193601126102705760ff81602093610243610809565b61024b610824565b6001600160a01b03918216835282875283832091168252855220549151911615158152f35b5080fd5b503461021f57602036600319011261021f5760209282913581526002845220549051908152f35b5050346102705780600319360112610270576102b5610809565b906024359081151580920361031c57338452836020526001600160a01b0381852093169283855260205280842060ff1981541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b8380fd5b5082903461027057826003193601126102705767ffffffffffffffff91813583811161027057610353903690840161083a565b919093602490813590811161021f579184869261037489953690840161083a565b949092610382868914610899565b61038b8861091d565b93610398885195866108e5565b8885526103a48961091d565b602099868b019891601f1901368a37875b8181106103fe575050505050505083519485948186019282875251809352850193925b8281106103e757505050500390f35b8351855286955093810193928101926001016103d8565b61040f8183889e9b9a9c9d9e61095a565b356001600160a01b038116809103610477578852600189528b882061043582858761095a565b35895289528b8820548a51821015610465579061045a918a8260051b8d010152610935565b9a999896979a6103b5565b634e487b7160e01b8952603286528789fd5b8880fd5b503461021f5760031960a03682011261031c57610496610809565b61049e610824565b9067ffffffffffffffff906044358281116106c7576104c0903690870161083a565b9290946064358281116106c3576104da903690890161083a565b926084359081116106bf57906104f68897949236908b0161086b565b929094610504828914610899565b61050d87610a73565b6001600160a01b038d8d8284169b8c93610528851515610a0d565b839b169a8b935b8d8083106106515761056e92507f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb939150845194808652850191610b0e565b918083036020820152806105843394898b610b0e565b0390a43b610590578b80f35b8a51988997889763bc197c8160e01b9c8d8a5233908a015260248901526044880160a0905260a48801906105c392610b0e565b90848783030160648801526105d792610b0e565b918483030160848501526105ea926109a0565b0381875a94602095f19081156106445761061793508491610626575b506001600160e01b031916146109c1565b38808080808080808080808b80f35b61063e915060203d811161020a576101fb81836108e5565b38610606565b50505051903d90823e3d90fd5b95610667836106b3986106ac969897959861095a565b3590610674878b8d61095a565b3595835260016020918183528585208486528352858520610696898254610a59565b9055845281528383209183525220918254610a66565b9055610935565b878d8f8c938e9161052f565b8a80fd5b8980fd5b8780fd5b503461021f576020928360031936011261075c578251918483019083821067ffffffffffffffff831117610749575083949291945283815282519382859384528251928382860152825b84811061073357505050828201840152601f01601f19168101030190f35b8181018301518882018801528795508201610715565b634e487b7160e01b835260419052602482fd5b80fd5b503461021f57602036600319011261021f57359063ffffffff60e01b821680920361021f57602092506301ffc9a760e01b82149182156107bb575b82156107aa575b50519015158152f35b6303a24d0760e21b149150386107a1565b636cdb3d1360e11b8114925061079a565b8490843461021f578060031936011261021f576020926001600160a01b036107f2610809565b168152600184528181206024358252845220548152f35b600435906001600160a01b038216820361081f57565b600080fd5b602435906001600160a01b038216820361081f57565b9181601f8401121561081f5782359167ffffffffffffffff831161081f576020808501948460051b01011161081f57565b9181601f8401121561081f5782359167ffffffffffffffff831161081f576020838186019501011161081f57565b156108a057565b60405162461bcd60e51b815260206004820152601860248201527f455243313135353a204c656e677468206d69736d6174636800000000000000006044820152606490fd5b90601f8019910116810190811067ffffffffffffffff82111761090757604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116109075760051b60200190565b60001981146109445760010190565b634e487b7160e01b600052601160045260246000fd5b919081101561096a5760051b0190565b634e487b7160e01b600052603260045260246000fd5b9081602091031261081f57516001600160e01b03198116810361081f5790565b908060209392818452848401376000828201840152601f01601f1916010190565b156109c857565b60405162461bcd60e51b815260206004820152601260248201527f57726f6e672072657475726e2076616c756500000000000000000000000000006044820152606490fd5b15610a1457565b60405162461bcd60e51b815260206004820152600c60248201527f4e6f2030206164647265737300000000000000000000000000000000000000006044820152606490fd5b9190820391821161094457565b9190820180921161094457565b6001600160a01b0316338114908115610b05575b8115610adb575b5015610a9657565b60405162461bcd60e51b815260206004820152601460248201527f5472616e73666572206e6f7420616c6c6f7765640000000000000000000000006044820152606490fd5b90506000526000602052604060002033600052602052600160ff6040600020541615151438610a8e565b60009150610a87565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831161081f5760209260051b80928483013701019056fea2646970667358221220dd645783521926c0d6d1619fc3afec1ba8deb5c799bf506907c2ca2bd5964af264736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH3 0xFDD58E EQ PUSH2 0x7CC JUMPI POP DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x75F JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x6CB JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x47B JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x29B JUMPI DUP1 PUSH4 0xBD85B039 EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x223 JUMPI PUSH4 0xF242432A EQ PUSH2 0x85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x21F JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x21F JUMPI PUSH2 0x9E PUSH2 0x809 JUMP JUMPDEST DUP4 PUSH2 0xA7 PUSH2 0x824 JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD SWAP3 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP7 GT PUSH2 0x21B JUMPI PUSH2 0xEF PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP7 CALLDATASIZE SWAP1 DUP10 ADD PUSH2 0x86B JUMP JUMPDEST SWAP6 SWAP1 SWAP5 PUSH2 0xFB DUP5 PUSH2 0xA73 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP5 PUSH2 0x112 DUP7 ISZERO ISZERO PUSH2 0xA0D JUMP JUMPDEST AND SWAP1 DUP2 DUP4 MSTORE DUP5 DUP3 DUP13 PUSH1 0x20 SWAP12 DUP13 SWAP2 PUSH1 0x1 DUP4 MSTORE DUP1 DUP9 KECCAK256 DUP10 DUP10 MSTORE DUP4 MSTORE DUP1 DUP9 KECCAK256 PUSH2 0x139 DUP13 DUP3 SLOAD PUSH2 0xA59 JUMP JUMPDEST SWAP1 SSTORE DUP5 DUP9 MSTORE PUSH1 0x1 DUP4 MSTORE DUP1 DUP9 KECCAK256 DUP10 DUP10 MSTORE DUP4 MSTORE DUP1 DUP9 KECCAK256 PUSH2 0x158 DUP13 DUP3 SLOAD PUSH2 0xA66 JUMP JUMPDEST SWAP1 SSTORE DUP11 DUP2 MLOAD SWAP4 DUP11 DUP6 MSTORE DUP5 ADD MSTORE CALLER SWAP3 LOG4 EXTCODESIZE PUSH2 0x170 JUMPI POP DUP1 RETURN JUMPDEST PUSH2 0x1AF DUP9 SWAP7 DUP12 MLOAD SWAP9 DUP10 SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP15 DUP16 DUP9 MSTORE CALLER SWAP1 DUP9 ADD MSTORE PUSH1 0x24 DUP8 ADD MSTORE PUSH1 0x44 DUP7 ADD MSTORE PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP6 ADD MSTORE PUSH1 0xA4 DUP5 ADD SWAP2 PUSH2 0x9A0 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x211 JUMPI PUSH2 0x1D8 SWAP5 POP DUP6 SWAP3 PUSH2 0x1E4 JUMPI JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0x9C1 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP9 DUP1 RETURN JUMPDEST PUSH2 0x203 SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x20A JUMPI JUMPDEST PUSH2 0x1FB DUP2 DUP4 PUSH2 0x8E5 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x980 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x1C6 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1F1 JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x270 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x270 JUMPI PUSH1 0xFF DUP2 PUSH1 0x20 SWAP4 PUSH2 0x243 PUSH2 0x809 JUMP JUMPDEST PUSH2 0x24B PUSH2 0x824 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE DUP3 DUP8 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP6 MSTORE KECCAK256 SLOAD SWAP2 MLOAD SWAP2 AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x21F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x21F JUMPI PUSH1 0x20 SWAP3 DUP3 SWAP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x2 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x270 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x270 JUMPI PUSH2 0x2B5 PUSH2 0x809 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP1 SWAP3 SUB PUSH2 0x31C JUMPI CALLER DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP6 KECCAK256 SWAP4 AND SWAP3 DUP4 DUP6 MSTORE PUSH1 0x20 MSTORE DUP1 DUP5 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND PUSH1 0xFF DUP5 AND OR SWAP1 SSTORE MLOAD SWAP1 DUP2 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 CALLER SWAP3 LOG3 DUP1 RETURN JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x270 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x270 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 DUP2 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x270 JUMPI PUSH2 0x353 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x83A JUMP JUMPDEST SWAP2 SWAP1 SWAP4 PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x21F JUMPI SWAP2 DUP5 DUP7 SWAP3 PUSH2 0x374 DUP10 SWAP6 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x83A JUMP JUMPDEST SWAP5 SWAP1 SWAP3 PUSH2 0x382 DUP7 DUP10 EQ PUSH2 0x899 JUMP JUMPDEST PUSH2 0x38B DUP9 PUSH2 0x91D JUMP JUMPDEST SWAP4 PUSH2 0x398 DUP9 MLOAD SWAP6 DUP7 PUSH2 0x8E5 JUMP JUMPDEST DUP9 DUP6 MSTORE PUSH2 0x3A4 DUP10 PUSH2 0x91D JUMP JUMPDEST PUSH1 0x20 SWAP10 DUP7 DUP12 ADD SWAP9 SWAP2 PUSH1 0x1F NOT ADD CALLDATASIZE DUP11 CALLDATACOPY DUP8 JUMPDEST DUP2 DUP2 LT PUSH2 0x3FE JUMPI POP POP POP POP POP POP POP DUP4 MLOAD SWAP5 DUP6 SWAP5 DUP2 DUP7 ADD SWAP3 DUP3 DUP8 MSTORE MLOAD DUP1 SWAP4 MSTORE DUP6 ADD SWAP4 SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0x3E7 JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x3D8 JUMP JUMPDEST PUSH2 0x40F DUP2 DUP4 DUP9 SWAP15 SWAP12 SWAP11 SWAP13 SWAP14 SWAP15 PUSH2 0x95A JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 SWAP2 SUB PUSH2 0x477 JUMPI DUP9 MSTORE PUSH1 0x1 DUP10 MSTORE DUP12 DUP9 KECCAK256 PUSH2 0x435 DUP3 DUP6 DUP8 PUSH2 0x95A JUMP JUMPDEST CALLDATALOAD DUP10 MSTORE DUP10 MSTORE DUP12 DUP9 KECCAK256 SLOAD DUP11 MLOAD DUP3 LT ISZERO PUSH2 0x465 JUMPI SWAP1 PUSH2 0x45A SWAP2 DUP11 DUP3 PUSH1 0x5 SHL DUP14 ADD ADD MSTORE PUSH2 0x935 JUMP JUMPDEST SWAP11 SWAP10 SWAP9 SWAP7 SWAP8 SWAP11 PUSH2 0x3B5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x32 DUP7 MSTORE DUP8 DUP10 REVERT JUMPDEST DUP9 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x21F JUMPI PUSH1 0x3 NOT PUSH1 0xA0 CALLDATASIZE DUP3 ADD SLT PUSH2 0x31C JUMPI PUSH2 0x496 PUSH2 0x809 JUMP JUMPDEST PUSH2 0x49E PUSH2 0x824 JUMP JUMPDEST SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x44 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x6C7 JUMPI PUSH2 0x4C0 SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0x83A JUMP JUMPDEST SWAP3 SWAP1 SWAP5 PUSH1 0x64 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x6C3 JUMPI PUSH2 0x4DA SWAP1 CALLDATASIZE SWAP1 DUP10 ADD PUSH2 0x83A JUMP JUMPDEST SWAP3 PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x6BF JUMPI SWAP1 PUSH2 0x4F6 DUP9 SWAP8 SWAP5 SWAP3 CALLDATASIZE SWAP1 DUP12 ADD PUSH2 0x86B JUMP JUMPDEST SWAP3 SWAP1 SWAP5 PUSH2 0x504 DUP3 DUP10 EQ PUSH2 0x899 JUMP JUMPDEST PUSH2 0x50D DUP8 PUSH2 0xA73 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP14 DUP3 DUP5 AND SWAP12 DUP13 SWAP4 PUSH2 0x528 DUP6 ISZERO ISZERO PUSH2 0xA0D JUMP JUMPDEST DUP4 SWAP12 AND SWAP11 DUP12 SWAP4 JUMPDEST DUP14 DUP1 DUP4 LT PUSH2 0x651 JUMPI PUSH2 0x56E SWAP3 POP PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB SWAP4 SWAP2 POP DUP5 MLOAD SWAP5 DUP1 DUP7 MSTORE DUP6 ADD SWAP2 PUSH2 0xB0E JUMP JUMPDEST SWAP2 DUP1 DUP4 SUB PUSH1 0x20 DUP3 ADD MSTORE DUP1 PUSH2 0x584 CALLER SWAP5 DUP10 DUP12 PUSH2 0xB0E JUMP JUMPDEST SUB SWAP1 LOG4 EXTCODESIZE PUSH2 0x590 JUMPI DUP12 DUP1 RETURN JUMPDEST DUP11 MLOAD SWAP9 DUP10 SWAP8 DUP9 SWAP8 PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP13 DUP14 DUP11 MSTORE CALLER SWAP1 DUP11 ADD MSTORE PUSH1 0x24 DUP10 ADD MSTORE PUSH1 0x44 DUP9 ADD PUSH1 0xA0 SWAP1 MSTORE PUSH1 0xA4 DUP9 ADD SWAP1 PUSH2 0x5C3 SWAP3 PUSH2 0xB0E JUMP JUMPDEST SWAP1 DUP5 DUP8 DUP4 SUB ADD PUSH1 0x64 DUP9 ADD MSTORE PUSH2 0x5D7 SWAP3 PUSH2 0xB0E JUMP JUMPDEST SWAP2 DUP5 DUP4 SUB ADD PUSH1 0x84 DUP6 ADD MSTORE PUSH2 0x5EA SWAP3 PUSH2 0x9A0 JUMP JUMPDEST SUB DUP2 DUP8 GAS SWAP5 PUSH1 0x20 SWAP6 CALL SWAP1 DUP2 ISZERO PUSH2 0x644 JUMPI PUSH2 0x617 SWAP4 POP DUP5 SWAP2 PUSH2 0x626 JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0x9C1 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP12 DUP1 RETURN JUMPDEST PUSH2 0x63E SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x20A JUMPI PUSH2 0x1FB DUP2 DUP4 PUSH2 0x8E5 JUMP JUMPDEST CODESIZE PUSH2 0x606 JUMP JUMPDEST POP POP POP MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP6 PUSH2 0x667 DUP4 PUSH2 0x6B3 SWAP9 PUSH2 0x6AC SWAP7 SWAP9 SWAP8 SWAP6 SWAP9 PUSH2 0x95A JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0x674 DUP8 DUP12 DUP14 PUSH2 0x95A JUMP JUMPDEST CALLDATALOAD SWAP6 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP2 DUP2 DUP4 MSTORE DUP6 DUP6 KECCAK256 DUP5 DUP7 MSTORE DUP4 MSTORE DUP6 DUP6 KECCAK256 PUSH2 0x696 DUP10 DUP3 SLOAD PUSH2 0xA59 JUMP JUMPDEST SWAP1 SSTORE DUP5 MSTORE DUP2 MSTORE DUP4 DUP4 KECCAK256 SWAP2 DUP4 MSTORE MSTORE KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0xA66 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x935 JUMP JUMPDEST DUP8 DUP14 DUP16 DUP13 SWAP4 DUP15 SWAP2 PUSH2 0x52F JUMP JUMPDEST DUP11 DUP1 REVERT JUMPDEST DUP10 DUP1 REVERT JUMPDEST DUP8 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x21F JUMPI PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x75C JUMPI DUP3 MLOAD SWAP2 DUP5 DUP4 ADD SWAP1 DUP4 DUP3 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT OR PUSH2 0x749 JUMPI POP DUP4 SWAP5 SWAP3 SWAP2 SWAP5 MSTORE DUP4 DUP2 MSTORE DUP3 MLOAD SWAP4 DUP3 DUP6 SWAP4 DUP5 MSTORE DUP3 MLOAD SWAP3 DUP4 DUP3 DUP7 ADD MSTORE DUP3 JUMPDEST DUP5 DUP2 LT PUSH2 0x733 JUMPI POP POP POP DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 RETURN JUMPDEST DUP2 DUP2 ADD DUP4 ADD MLOAD DUP9 DUP3 ADD DUP9 ADD MSTORE DUP8 SWAP6 POP DUP3 ADD PUSH2 0x715 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 SWAP1 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x21F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x21F JUMPI CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP3 AND DUP1 SWAP3 SUB PUSH2 0x21F JUMPI PUSH1 0x20 SWAP3 POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP3 EQ SWAP2 DUP3 ISZERO PUSH2 0x7BB JUMPI JUMPDEST DUP3 ISZERO PUSH2 0x7AA JUMPI JUMPDEST POP MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ SWAP2 POP CODESIZE PUSH2 0x7A1 JUMP JUMPDEST PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL DUP2 EQ SWAP3 POP PUSH2 0x79A JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x21F JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x21F JUMPI PUSH1 0x20 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x7F2 PUSH2 0x809 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x1 DUP5 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x24 CALLDATALOAD DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x81F JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x81F JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x81F JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x81F JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x81F JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x81F JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x81F JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x81F JUMPI JUMP JUMPDEST ISZERO PUSH2 0x8A0 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204C656E677468206D69736D617463680000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x907 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x907 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x944 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x96A JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x81F JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 SUB PUSH2 0x81F JUMPI SWAP1 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x9C8 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57726F6E672072657475726E2076616C75650000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0xA14 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F203020616464726573730000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x944 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x944 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0xB05 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0xADB JUMPI JUMPDEST POP ISZERO PUSH2 0xA96 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73666572206E6F7420616C6C6F776564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO ISZERO EQ CODESIZE PUSH2 0xA8E JUMP JUMPDEST PUSH1 0x0 SWAP2 POP PUSH2 0xA87 JUMP JUMPDEST SWAP1 SWAP2 DUP3 DUP2 MSTORE PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x81F JUMPI PUSH1 0x20 SWAP3 PUSH1 0x5 SHL DUP1 SWAP3 DUP5 DUP4 ADD CALLDATACOPY ADD ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD PUSH5 0x5783521926 0xC0 0xD6 0xD1 PUSH2 0x9FC3 0xAF 0xEC SHL 0xA8 0xDE 0xB5 0xC7 SWAP10 0xBF POP PUSH10 0x7C2CA2BD5964AF26473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"370:4179:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;370:4179:30;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;2221:47;370:4179;;;;;;:::i;:::-;3141:5;;;;;;:::i;:::-;-1:-1:-1;;;;;370:4179:30;;;2097:16;2089:41;2097:16;;;2089:41;:::i;:::-;370:4179;;;;;;;;;;;;;;;;;;;;;;;;;;2141:28;370:4179;;;2141:28;:::i;:::-;370:4179;;;;;;;;;;;;;;;;;;;2179:26;370:4179;;;2179:26;:::i;:::-;370:4179;;;;;;;;;;;;2236:10;2221:47;;230:63:11;3205:302:30;;370:4179;;;3205:302;370:4179;;;;;;;;;;;;;;;3265:78;;;;2236:10;3265:78;;;370:4179;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3265:78;;;;;;;;;3240:256;3265:78;;;;;;3205:302;-1:-1:-1;;;;;;;;370:4179:30;3265:179;3240:256;:::i;:::-;3205:302;;;;;;;;;370:4179;;3265:78;;;;;;-1:-1:-1;3265:78:30;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;370:4179;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;370:4179:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;370:4179:30;;;;;;;;;;;676:46;370:4179;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4334:10;370:4179;;;;;-1:-1:-1;;;;;370:4179:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4382:46;370:4179;4334:10;4382:46;;370:4179;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1240:17;;;1232:54;1240:17;;;1232:54;:::i;:::-;370:4179;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;370:4179:30;;;;1342:13;1357:7;;;;;;370:4179;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;370:4179:30;;;;;;;;1399:9;370:4179;;;1366:3;1409:9;;;;;;;;;;;:::i;:::-;370:4179;-1:-1:-1;;;;;370:4179:30;;;;;;;;;1399:9;370:4179;;;;;1420:6;;;;;:::i;:::-;370:4179;;;;;;;;;;;;;;;;;1366:3;370:4179;;;;;;;;;1366:3;:::i;:::-;1342:13;;;;;;;;370:4179;-1:-1:-1;;;370:4179:30;;;;;;;;;;;;;;;;;-1:-1:-1;;370:4179:30;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;3730:27;;;3722:64;3730:27;;;3722:64;:::i;:::-;3826:5;;;:::i;:::-;-1:-1:-1;;;;;370:4179:30;;;;;2409:16;;;2401:41;2409:16;;;2401:41;:::i;:::-;2492:13;370:4179;;2487:199;;;2507:7;;;;;;;370:4179;;;2701:48;370:4179;;;;;;;;;;;;;:::i;:::-;;;;;;;;;2715:10;370:4179;2715:10;370:4179;;;;:::i;:::-;2701:48;;;230:63:11;3891:318:30;;370:4179;;;3891:318;370:4179;;;;;;;;;;3951:85;;;;2715:10;3951:85;;;370:4179;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;3951:85;;;;;370:4179;3951:85;;;;;;;3926:272;3951:85;;;;;;3891:318;-1:-1:-1;;;;;;;370:4179:30;3951:195;3926:272;:::i;:::-;3891:318;;;;;;;;;;;370:4179;;;3951:85;;;;370:4179;3951:85;;;;;;;;;:::i;:::-;;;;;370:4179;;;;;;;;;;;;2516:3;2548:6;;;2516:3;2548:6;2649:26;2548:6;;;;;;:::i;:::-;370:4179;2584:9;;;;;;:::i;:::-;370:4179;;;;;;;;;;;;;;;;;;;;;2607:28;370:4179;;;2607:28;:::i;:::-;370:4179;;;;;;;;;;;;;;;;;2649:26;:::i;:::-;370:4179;;2516:3;:::i;:::-;2492:13;;;;;;;;;370:4179;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;370:4179:30;;;;;;;;-1:-1:-1;;370:4179:30;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;370:4179:30;;;;;-1:-1:-1;;;370:4179:30;;;;;;;;;;;;;;;;;;-1:-1:-1;;370:4179:30;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;866:46:30;;;:98;;;;370:4179;866:151;;;;370:4179;;;;;;;;;866:151;-1:-1:-1;;;992:25:30;;-1:-1:-1;866:151:30;;;:98;-1:-1:-1;;;939:25:30;;;-1:-1:-1;866:98:30;;370:4179;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;370:4179:30;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;370:4179:30;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;370:4179:30;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;370:4179:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;370:4179:30;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;370:4179:30;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;370:4179:30;;;;;;;;-1:-1:-1;;370:4179:30;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;370:4179:30;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;370:4179:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;2762:215::-;-1:-1:-1;;;;;370:4179:30;2875:10;2866:19;;:32;;;;;2762:215;2866:79;;;;2762:215;370:4179;;;;2762:215::o;370:4179::-;;;-1:-1:-1;;;370:4179:30;;;;;;;;;;;;;;;;;;;;2866:79;370:4179;;;;;;;;;;2875:10;370:4179;;;;2941:4;370:4179;;;;;;;;2902:43;2866:79;;;:32;370:4179;;-1:-1:-1;2866:32:30;;370:4179;;;;;;;;;;;;;;;;;;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"589000","executionCost":"633","totalCost":"589633"},"external":{"balanceOf(address,uint256)":"2482","balanceOfBatch(address[],uint256[])":"infinite","isApprovedForAll(address,address)":"2736","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26540","supportsInterface(bytes4)":"365","totalSupply(uint256)":"2470","uri(uint256)":"422"},"internal":{"_burn(address,uint256,uint256)":"infinite","_mint(address,uint256,uint256)":"infinite","_requireTransferAllowed(address,bool)":"infinite","_transferBatch(address,address,uint256[] calldata,uint256[] calldata)":"infinite","_transferSingle(address,address,uint256,uint256)":"infinite"}},"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","totalSupply(uint256)":"bd85b039","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol\":\"ERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\ninterface IERC1155 is IERC165 {\\r\\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\\r\\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n    event URI(string _value, uint256 indexed _id);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n\\r\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\r\\n\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x39f388312b08552eb8a5f09cbe6b0c6ea511a6a47c72985e1ab53b777b911771\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC1155TokenReceiver {\\r\\n    function onERC1155Received(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0x5a73c68c2975f8908b96e76fe916a1a39b86fd7acb2d1e463e85e7841225c0cf\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC165 {\\r\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x2929dd1b0483b96a0b59b4b945684705adf252697b404fe7f126816cb78d684c\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\nlibrary BoringAddress {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function sendNative(address to, uint256 amount) internal {\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"BoringAddress: transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdcdf9c08bc41b6091e03d4bb44d6503bd084ae9d990277d0761ed6e1cdeefbb3\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\n\\n// Written by OreNoMochi (https://github.com/OreNoMochii), BoringCrypto\\n\\ncontract ERC1155 is IERC1155 {\\n    using BoringAddress for address;\\n\\n    // mappings\\n\\n    mapping(address => mapping(address => bool)) public override isApprovedForAll; // map of operator approval\\n    mapping(address => mapping(uint256 => uint256)) public override balanceOf; // map of tokens owned by\\n    mapping(uint256 => uint256) public totalSupply; // totalSupply per token\\n\\n    function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\\n        return\\n            interfaceID == this.supportsInterface.selector || // EIP-165\\n            interfaceID == 0xd9b67a26 || // ERC-1155\\n            interfaceID == 0x0e89341c; // EIP-1155 Metadata\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view override returns (uint256[] memory balances) {\\n        uint256 len = owners.length;\\n        require(len == ids.length, \\\"ERC1155: Length mismatch\\\");\\n\\n        balances = new uint256[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            balances[i] = balanceOf[owners[i]][ids[i]];\\n        }\\n    }\\n\\n    function _mint(address to, uint256 id, uint256 value) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[to][id] += value;\\n        totalSupply[id] += value;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, value);\\n    }\\n\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        require(from != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        totalSupply[id] -= value;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, value);\\n    }\\n\\n    function _transferSingle(address from, address to, uint256 id, uint256 value) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        balanceOf[to][id] += value;\\n\\n        emit TransferSingle(msg.sender, from, to, id, value);\\n    }\\n\\n    function _transferBatch(address from, address to, uint256[] calldata ids, uint256[] calldata values) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        uint256 len = ids.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 id = ids[i];\\n            uint256 value = values[i];\\n            balanceOf[from][id] -= value;\\n            balanceOf[to][id] += value;\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, values);\\n    }\\n\\n    function _requireTransferAllowed(address _from, bool _approved) internal view virtual {\\n        require(_from == msg.sender || _approved || isApprovedForAll[_from][msg.sender] == true, \\\"Transfer not allowed\\\");\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external override {\\n        _requireTransferAllowed(from, false);\\n\\n        _transferSingle(from, to, id, value);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, value, data) ==\\n                    bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override {\\n        require(ids.length == values.length, \\\"ERC1155: Length mismatch\\\");\\n        _requireTransferAllowed(from, false);\\n\\n        _transferBatch(from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, values, data) ==\\n                    bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function uri(uint256 /*assetId*/) external view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x946ff1e91845883dc69b26d2547bb8d53b0fabe08dcb6c4f8e4d6c32d585195c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":5063,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol:ERC1155","label":"isApprovedForAll","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":5070,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol:ERC1155","label":"balanceOf","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"},{"astId":5074,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol:ERC1155","label":"totalSupply","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155TokenReceiver.sol":{"ERC1155TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523461001657610201908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c908163bc197c8114610095575063f23a6e611461003757600080fd5b346100925760a036600319011261009257610050610121565b50610059610149565b5060843567ffffffffffffffff811161008e5761007a90369060040161019d565b505060405163f23a6e6160e01b8152602090f35b5080fd5b80fd5b90503461008e5760a036600319011261008e576100b0610121565b506100b9610149565b5067ffffffffffffffff9160443583811161008e576100dc90369060040161016c565b505060643583811161008e576100f690369060040161016c565b50506084359283116100925750610113602092369060040161019d565b505063bc197c8160e01b8152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361014457565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361014457565b9181601f840112156101445782359167ffffffffffffffff8311610144576020808501948460051b01011161014457565b9181601f840112156101445782359167ffffffffffffffff831161014457602083818601950101116101445756fea264697066735822122031c16511d8b0569a7faa34625a3df59a206d4b65d6f3b6e229c7f56e0f7c614064736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x201 SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0xBC197C81 EQ PUSH2 0x95 JUMPI POP PUSH4 0xF23A6E61 EQ PUSH2 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x92 JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x92 JUMPI PUSH2 0x50 PUSH2 0x121 JUMP JUMPDEST POP PUSH2 0x59 PUSH2 0x149 JUMP JUMPDEST POP PUSH1 0x84 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x8E JUMPI PUSH2 0x7A SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x19D JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x8E JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8E JUMPI PUSH2 0xB0 PUSH2 0x121 JUMP JUMPDEST POP PUSH2 0xB9 PUSH2 0x149 JUMP JUMPDEST POP PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 PUSH1 0x44 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x8E JUMPI PUSH2 0xDC SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x16C JUMP JUMPDEST POP POP PUSH1 0x64 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x8E JUMPI PUSH2 0xF6 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x16C JUMP JUMPDEST POP POP PUSH1 0x84 CALLDATALOAD SWAP3 DUP4 GT PUSH2 0x92 JUMPI POP PUSH2 0x113 PUSH1 0x20 SWAP3 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x19D JUMP JUMPDEST POP POP PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x144 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x144 JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x144 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x144 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x144 JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x144 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x144 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x144 JUMPI JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE 0xC1 PUSH6 0x11D8B0569A7F 0xAA CALLVALUE PUSH3 0x5A3DF5 SWAP11 KECCAK256 PUSH14 0x4B65D6F3B6E229C7F56E0F7C6140 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"145:720:31:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":329,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_831":{"entryPoint":289,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_array_uint256_dyn_calldata":{"entryPoint":364,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":413,"id":null,"parameterSlots":2,"returnSlots":2}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608080604052600436101561001357600080fd5b600090813560e01c908163bc197c8114610095575063f23a6e611461003757600080fd5b346100925760a036600319011261009257610050610121565b50610059610149565b5060843567ffffffffffffffff811161008e5761007a90369060040161019d565b505060405163f23a6e6160e01b8152602090f35b5080fd5b80fd5b90503461008e5760a036600319011261008e576100b0610121565b506100b9610149565b5067ffffffffffffffff9160443583811161008e576100dc90369060040161016c565b505060643583811161008e576100f690369060040161016c565b50506084359283116100925750610113602092369060040161019d565b505063bc197c8160e01b8152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361014457565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361014457565b9181601f840112156101445782359167ffffffffffffffff8311610144576020808501948460051b01011161014457565b9181601f840112156101445782359167ffffffffffffffff831161014457602083818601950101116101445756fea264697066735822122031c16511d8b0569a7faa34625a3df59a206d4b65d6f3b6e229c7f56e0f7c614064736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0xBC197C81 EQ PUSH2 0x95 JUMPI POP PUSH4 0xF23A6E61 EQ PUSH2 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x92 JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x92 JUMPI PUSH2 0x50 PUSH2 0x121 JUMP JUMPDEST POP PUSH2 0x59 PUSH2 0x149 JUMP JUMPDEST POP PUSH1 0x84 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x8E JUMPI PUSH2 0x7A SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x19D JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x8E JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8E JUMPI PUSH2 0xB0 PUSH2 0x121 JUMP JUMPDEST POP PUSH2 0xB9 PUSH2 0x149 JUMP JUMPDEST POP PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 PUSH1 0x44 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x8E JUMPI PUSH2 0xDC SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x16C JUMP JUMPDEST POP POP PUSH1 0x64 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x8E JUMPI PUSH2 0xF6 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x16C JUMP JUMPDEST POP POP PUSH1 0x84 CALLDATALOAD SWAP3 DUP4 GT PUSH2 0x92 JUMPI POP PUSH2 0x113 PUSH1 0x20 SWAP3 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x19D JUMP JUMPDEST POP POP PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x144 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x144 JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x144 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x144 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x144 JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x144 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x144 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x144 JUMPI JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE 0xC1 PUSH6 0x11D8B0569A7F 0xAA CALLVALUE PUSH3 0x5A3DF5 SWAP11 KECCAK256 PUSH14 0x4B65D6F3B6E229C7F56E0F7C6140 PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"145:720:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;145:720:31;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;145:720:31;;-1:-1:-1;;;145:720:31;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;145:720:31;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;145:720:31;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;145:720:31;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"102600","executionCost":"159","totalCost":"102759"},"external":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"490"}},"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155TokenReceiver.sol\":\"ERC1155TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC1155TokenReceiver {\\r\\n    function onERC1155Received(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0x5a73c68c2975f8908b96e76fe916a1a39b86fd7acb2d1e463e85e7841225c0cf\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\n\\ncontract ERC1155TokenReceiver is IERC1155TokenReceiver {\\n    // ERC1155 receivers that simple accept the transfer\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xf23a6e61; //bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xbc197c81; //bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))\\n    }\\n}\\n\",\"keccak256\":\"0xdfcb43caa675d8c9d0864f300257d2cf1b263f2206c862f601abf86863dfde6d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC721TokenReceiver.sol":{"ERC721TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608080604052346100155760e2908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c63150b7a0214602857600080fd5b3460a057608036600319011260a05773ffffffffffffffffffffffffffffffffffffffff6004358181160360a8576024359081160360a05760643567ffffffffffffffff80821160a4573660238301121560a457816004013590811160a4573691016024011160a057630a85bd0160e11b8152602090f35b5080fd5b8380fd5b8280fdfea26469706673582212201091015654997c4f94d083ff305ff3c933c6436dbd16efc2f355df5868015d2f64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x15 JUMPI PUSH1 0xE2 SWAP1 DUP2 PUSH2 0x1B DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0x150B7A02 EQ PUSH1 0x28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH1 0xA0 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH1 0xA0 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND SUB PUSH1 0xA8 JUMPI PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND SUB PUSH1 0xA0 JUMPI PUSH1 0x64 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT PUSH1 0xA4 JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH1 0xA4 JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP1 DUP2 GT PUSH1 0xA4 JUMPI CALLDATASIZE SWAP2 ADD PUSH1 0x24 ADD GT PUSH1 0xA0 JUMPI PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LT SWAP2 ADD JUMP SLOAD SWAP10 PUSH29 0x4F94D083FF305FF3C933C6436DBD16EFC2F355DF5868015D2F64736F6C PUSH4 0x43000812 STOP CALLER ","sourceMap":"144:275:32:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080806040526004361015601257600080fd5b600090813560e01c63150b7a0214602857600080fd5b3460a057608036600319011260a05773ffffffffffffffffffffffffffffffffffffffff6004358181160360a8576024359081160360a05760643567ffffffffffffffff80821160a4573660238301121560a457816004013590811160a4573691016024011160a057630a85bd0160e11b8152602090f35b5080fd5b8380fd5b8280fdfea26469706673582212201091015654997c4f94d083ff305ff3c933c6436dbd16efc2f355df5868015d2f64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0x150B7A02 EQ PUSH1 0x28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH1 0xA0 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH1 0xA0 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 AND SUB PUSH1 0xA8 JUMPI PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 AND SUB PUSH1 0xA0 JUMPI PUSH1 0x64 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT PUSH1 0xA4 JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH1 0xA4 JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP1 DUP2 GT PUSH1 0xA4 JUMPI CALLDATASIZE SWAP2 ADD PUSH1 0x24 ADD GT PUSH1 0xA0 JUMPI PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LT SWAP2 ADD JUMP SLOAD SWAP10 PUSH29 0x4F94D083FF305FF3C933C6436DBD16EFC2F355DF5868015D2F64736F6C PUSH4 0x43000812 STOP CALLER ","sourceMap":"144:275:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;144:275:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;144:275:32;;;;;;;;;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"45200","executionCost":"105","totalCost":"45305"},"external":{"onERC721Received(address,address,uint256,bytes)":"346"}},"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC721TokenReceiver.sol\":\"ERC721TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC721TokenReceiver {\\r\\n    function onERC721Received(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256 _tokenId,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xd466593f91b204a62802f199b0f99869b81f87807db088a52319c60ed7bd6080\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol\\\";\\n\\ncontract ERC721TokenReceiver is IERC721TokenReceiver {\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return 0x150b7a02; //bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\n    }\\n}\\n\",\"keccak256\":\"0x6278868ed51f956038b649b6d4b212e620c1563a31ddfd666c6f1d2fb5aa2f4f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol":{"NativeTokenFactory":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"uint256","name":"assetId","type":"uint256"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAsset","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"},{"indexed":false,"internalType":"contract IStrategy","name":"strategy","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"AssetRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"creator","type":"address"},{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"string","name":"symbol","type":"string"},{"indexed":false,"internalType":"uint8","name":"decimals","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"TokenCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256","name":"_id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"_value","type":"string"},{"indexed":true,"internalType":"uint256","name":"_id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[],"name":"assetCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"assets","outputs":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address[]","name":"froms","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"batchBurn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address[]","name":"tos","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"claimOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"string","name":"uri","type":"string"}],"name":"createToken","outputs":[{"internalType":"uint32","name":"tokenId","type":"uint32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum TokenType","name":"","type":"uint8"},{"internalType":"address","name":"","type":"address"},{"internalType":"contract IStrategy","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"ids","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"isApprovedForAsset","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"nativeTokens","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"string","name":"uri","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"registerAsset","outputs":[{"internalType":"uint256","name":"assetId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"bool","name":"direct","type":"bool"},{"internalType":"bool","name":"renounce","type":"bool"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"BoringCrypto (@Boring_Crypto)","kind":"dev","methods":{"batchBurn(uint256,address[],uint256[])":{"params":{"amounts":"The amounts of tokens to burn.","froms":"The accounts to burn tokens from.","tokenId":"The token to be burned."}},"batchMint(uint256,address[],uint256[])":{"details":"If the tos array is longer than the amounts array there will be an out of bounds error. If the amounts array is longer, the extra amounts are simply ignored.For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.","params":{"amounts":"The amounts of tokens to mint.","tokenId":"The token to be minted.","tos":"The accounts to transfer the minted tokens to."}},"burn(uint256,address,uint256)":{"params":{"amount":"The amount of tokens to burn.","tokenId":"The token to be burned."}},"claimOwnership(uint256)":{"params":{"tokenId":"The `tokenId` of the token that ownership is claimed for."}},"createToken(string,string,uint8,string)":{"params":{"decimals":"The number of decimals of the token (this is just for display purposes). Should be set to 18 in normal cases.","name":"The name of the token.","symbol":"The symbol of the token."}},"mint(uint256,address,uint256)":{"details":"For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.","params":{"amount":"The amount of tokens to mint.","to":"The account to transfer the minted tokens to.","tokenId":"The token to be minted."}},"transferOwnership(uint256,address,bool,bool)":{"params":{"direct":"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.","newOwner":"Address of the new owner.","renounce":"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.","tokenId":"The `tokenId` of the token that ownership whose ownership will be transferred/renounced."}}},"title":"NativeTokenFactory","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60803461013157608081016001600160401b0381118282101761011b57604052600481526020810190600091828152604082018381526060830191848352600554680100000000000000008110156101075760018101806005558110156100f3576005865260036020872091020193519060058210156100df5784549051610100600160a81b0360089190911b1660ff929092166001600160a81b031990911617178355516001830180546001600160a01b039092166001600160a01b031990921691909117905551600290910155506040516124d69081620001378239f35b634e487b7160e01b86526021600452602486fd5b634e487b7160e01b86526032600452602486fd5b634e487b7160e01b86526041600452602486fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c908162fdd58e14611ce25750806301e1e3b114611c0e57806301ffc9a714611b9f5780630e89341c14611b415780631dbeeb4e14611acf5780631f0ee4c314611a425780632482ee27146111f75780632b800e3b146111c45780632d4e1d521461117b5780632eb2c2d614610f305780634e1273f414610dd75780635ba4d64e14610ca0578063836a104014610c675780639eea5f6614610bf1578063a123c33e14610bbe578063a22cb46514610b2e578063a75fcb1e14610ad4578063b061db94146105ac578063b8489fb5146104c2578063bd85b03914610498578063ce7f2714146103c6578063cf35bdd014610341578063e985e9c5146102f2578063eafe7a74146102d45763f242432a1461013357600080fd5b346102d15760a03660031901126102d15761014c611d21565b610154611d3c565b906064359060443560843567ffffffffffffffff81116102cd5761017c903690600401611f31565b9092610187816121e4565b6001600160a01b038087169161019e83151561217e565b16948588528760209760018952604082208683528952604082206101c38482546121ca565b905583825260018952604082208683528952604082206101e48482546121d7565b90558388604051888152858c8201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260403392a43b6102215780f35b87946102626040519788968795869463f23a6e6160e01b9c8d875233600488015260248701526044860152606485015260a0608485015260a4840191612111565b03925af19081156102c25761028a938592610295575b50506001600160e01b03191614612132565b388080808080808780f35b6102b49250803d106102bb575b6102ac8183611e69565b8101906120f1565b3880610278565b503d6102a2565b6040513d86823e3d90fd5b8580fd5b80fd5b50346102d157806003193601126102d1576020600554604051908152f35b50346102d15760403660031901126102d15760ff6040602092610313611d21565b61031b611d3c565b6001600160a01b0391821683528286528383209116825284522054604051911615158152f35b50346102d15760203660031901126102d1576004356005548110156103c25761036990611ff3565b50805460ff8116916001600160a01b03600281600184015416920154926040519460058110156103ae5760809650855260081c16602084015260408301526060820152f35b634e487b7160e01b87526021600452602487fd5b5080fd5b50346102d15760203660031901126102d15760043580825260086020526001600160a01b0390816040842054168033036104535781845260076020528060408520928354948516907f16b85f49bf01212961345d3016c9a531894accf62eb7680f2045d79185cc0ec08780a46001600160a01b031980931617905560086020526040822090815416905580f35b60405162461bcd60e51b815260206004820152601c60248201527f4e54463a2063616c6c657220213d2070656e64696e67206f776e6572000000006044820152606490fd5b50346102d15760203660031901126102d15760406020916004358152600283522054604051908152f35b50346102d15760603660031901126102d1576104dc611d21565b6024356104e7611fba565b6005548210156105675733845260036020526001600160a01b03604085209316928385526020526040842082855260205261053181604086209060ff801983541691151516179055565b604051918252151560208201527f6aceb1b079beeabdd8c2f30cd221ca27ec52e9d0aef6bb229cc175cf15dd778b60403392a380f35b60405162461bcd60e51b815260206004820152601d60248201527f41737365744d616e616765723a206173736574206e6f742076616c69640000006044820152606490fd5b50346102d1576105bb36611f5f565b600594858510159485949293909185610ab4576001831480159788610ac8575b8115610aa4575b5015610a5f576105f183611fa1565b976001600160a01b03968786169586845260209a8b5288604085209516948585528b52604084208885528b526040842054998a15610634575b8b8b604051908152f35b909192939495969780999a5015908115610a53575b5015610a0e5781610851578515918280156108aa575b15610865576108515781610848575b811561083d575b50156107f8578054966040519161068b83611e4d565b85835289830191878352604084019186835260608501938a8552680100000000000000008c10156107e45760018c0182556106c58c611ff3565b9690966107d05751918210156103ae579460028c957f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b9560409994958a967f30605d4cd099421ed12ca1ba642a1ea2659f679b5cdd0ccd032586640eeaff439c9a74ffffffffffffffffffffffffffffffffffffffffff1974ffffffffffffffffffffffffffffffffffffffff0060ff89549416928360ff198616178a555160081b16921617178555600185019151166001600160a01b03198254161790555191015561079188611fa1565b8982528c528181208582528c528181208a82528c5283828220558151908c82528c820152a281519081528688820152a43880808080808080808061062a565b634e487b7160e01b88526004889052602488fd5b634e487b7160e01b87526041600452602487fd5b60405162461bcd60e51b815260048101899052601560248201527f5969656c64426f783a204e6f74206120746f6b656e00000000000000000000006044820152606490fd5b90503b151538610675565b8615915061066e565b634e487b7160e01b84526021600452602484fd5b60405162461bcd60e51b8152600481018c9052601b60248201527f5969656c64426f783a205374726174656779206d69736d6174636800000000006044820152606490fd5b5050604051630c3e9ce360e21b81528a81600481895afa908115610a035785916109ca575b50838110156109b657849087148061094c575b801561065f57506040516305f5c3df60e21b81528b816004818a5afa908115610941578691610914575b50891461065f565b90508b81813d831161093a575b61092b8183611e69565b810103126102cd57513861090c565b503d610921565b6040513d88823e3d90fd5b50604051633dad37ed60e21b81528b816004818a5afa90811561094157908b91879161097c575b501688146108e2565b8092508d8092503d83116109af575b6109958183611e69565b810103126102cd57518a811681036102cd578a9038610973565b503d61098b565b634e487b7160e01b85526021600452602485fd5b90508a81813d83116109fc575b6109e18183611e69565b810103126109f85751838110156109f857386108cf565b8480fd5b503d6109d7565b6040513d87823e3d90fd5b60405162461bcd60e51b8152600481018b9052601e60248201527f5969656c64426f783a204e6f20746f6b656e496420666f7220455243323000006044820152606490fd5b92505060009138610649565b60405162461bcd60e51b815260206004820152601f60248201527f41737365744d616e616765723a2063616e6e6f7420616464204e6174697665006044820152606490fd5b9050610ab45760038314386105e2565b634e487b7160e01b81526021600452602490fd5b505060028314816105db565b50346102d15760603660031901126102d15760ff6040602092610af5611d21565b610afd611d3c565b6001600160a01b03918216835260038652838320911682528452818120604435825284522054604051911615158152f35b50346102d15760403660031901126102d157610b48611d21565b60243580151590818103610bba57610b8b90338552846020526001600160a01b0360408620941693848652602052604085209060ff801983541691151516179055565b6040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b8380fd5b50346102d15760203660031901126102d1576001600160a01b036040602092600435815260078452205416604051908152f35b50346102d157610c0036611fc9565b9092916001600160a01b038416835260036020526040832033845260205260408320818452602052610c3960ff6040852054168561227f565b60ff610c4482611ff3565b50541693600585101561085157610c5f610c64949515612402565b61244e565b80f35b50346102d157610c64610c7936611fc9565b91908185526007602052610c9b6001600160a01b0360408720541633146122e7565b61237a565b50346102d15760803660031901126102d157600435610cbd611d3c565b90610cc6611fba565b9060643580151581036109f85781855260076020526001600160a01b0392610cf58460408820541633146122e7565b15610db757909180931690811590811591610daf575b5015610d6a5781845260076020528060408520928354948516907f16b85f49bf01212961345d3016c9a531894accf62eb7680f2045d79185cc0ec08780a46001600160a01b031980931617905560086020526040822090815416905580f35b60405162461bcd60e51b815260206004820152601160248201527f4e54463a207a65726f20616464726573730000000000000000000000000000006044820152606490fd5b905038610d0b565b50835260086020526040832091166001600160a01b031982541617905580f35b50346102d15760403660031901126102d15767ffffffffffffffff600435818111610f2c57610e0a903690600401611d52565b60249283359081116109f85784610e2685923690600401611d52565b929094610e34848614612044565b610e3d85612090565b95610e4b6040519788611e69565b858752610e5786612090565b6020968888019691601f1901368837855b818110610eb35750505050505060405193838594850191818652518092526040850193925b828110610e9c57505050500390f35b835185528695509381019392810192600101610e8d565b6001600160a01b03610ed3610ece8385899e9c9d9b9e6120cd565b6120dd565b168a526001875260408a20610ee98285876120cd565b358b52875260408a20548851821015610f195790610f0f91888260051b8b0101526120a8565b9895979698610e68565b634e487b7160e01b8b526032600452868bfd5b8280fd5b50346102d15760031960a0368201126103c257610f4b611d21565b610f53611d3c565b67ffffffffffffffff6044358181116102cd57610f74903690600401611d52565b909160643581811161117757610f8e903690600401611d52565b9690916084359081116111735791610fad899796933690600401611f31565b919093610fbb8a8714612044565b610fc4886121e4565b886001600160a01b03988b888a8c86169c8d95610fe287151561217e565b94169d8e935b83861061110857939450507f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb9161103f61102f6040519384936040855260408501916122aa565b828103602084015233958a6122aa565b0390a43b61104b578980f35b604051988996879663bc197c8160e01b9a8b89523360048a015260248901526044880160a0905260a4880190611080926122aa565b9084878303016064880152611094926122aa565b918483030160848501526110a792612111565b0381865a94602095f180156110fd576110d29284916110df575b506001600160e01b03191614612132565b3880808080808080808980f35b6110f7915060203d81116102bb576102ac8183611e69565b386110c1565b6040513d85823e3d90fd5b611167966111288761112081611160986040986120cd565b35938c6120cd565b359583526001602091818352858520848652835285852061114a8982546121ca565b90558452815283832091835252209182546121d7565b90556120a8565b88908a888a8f8f610fe8565b8880fd5b8780fd5b50346102d157604060209161119a61119236611f5f565b939092611fa1565b6001600160a01b038092168552865284842091168352845282822090825283522054604051908152f35b50346102d15760203660031901126102d1576001600160a01b036040602092600435815260088452205416604051908152f35b50346102d15760803660031901126102d15760043567ffffffffffffffff81116103c257611229903690600401611f31565b909160243567ffffffffffffffff81116103c25761124b903690600401611f31565b93906044359060ff82168203610bba5760643567ffffffffffffffff81116109f85761127b903690600401611f31565b9690936005549463ffffffff86116119fd5786878052600460205260408820602052604088206020526040882063ffffffff881689526020526040882054156117b8575b506112fe90604051996112d18b611e4d565b6112dc368b86612333565b8b526112e9368688612333565b60208c015260ff871660408c01523691612333565b606089015263ffffffff8516865260066020526040862097805180519067ffffffffffffffff82116116e85781906113368c54611e13565b601f811161176b575b50602090601f8311600114611707578a926116fc575b50508160011b916000199060031b1c19161789555b602081015180519067ffffffffffffffff82116116e85761138e60018c0154611e13565b601f81116116a4575b50602090601f83116001146116375760609392918a918361162c575b50508160011b916000199060031b1c19161760018b01555b60028a0160ff60408301511660ff19825416179055015197885167ffffffffffffffff8111611618576114016003830154611e13565b601f81116115d0575b506020998a90601f83116001146115355760ff946114ae946003857f0b0bcdebd2813328a89a9ed5971e5863201ed78fc4e0e2b271cceddb9ce905109a968e9f9a9663ffffffff9f966114a1979261152a575b50508160011b9160001990841b1c1916179101555b8a8a168c5260078d5260408c20336001600160a01b031982541617905560405196608088526080880191612111565b918583038c870152612111565b9316604082015284841660608201528033930390a28280604051848416815281878201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260403392a46040519233908383167f16b85f49bf01212961345d3016c9a531894accf62eb7680f2045d79185cc0ec08280a4168152f35b01519050388061145d565b600384018a528b8a209190601f1984168b5b8181106115b9575094600360018663ffffffff9e9f9a966114a19660ff9b967f0b0bcdebd2813328a89a9ed5971e5863201ed78fc4e0e2b271cceddb9ce905109e9a6114ae9c106115a1575b505050811b01910155611472565b015160001983861b60f8161c19169055388080611593565b92938e600181928786015181550195019301611547565b60038301895260208920601f830160051c8101916020841061160e575b601f0160051c01905b818110611603575061140a565b8981556001016115f6565b90915081906115ed565b634e487b7160e01b88526041600452602488fd5b0151905038806113b3565b60018c018a5260208a209190601f1984168b5b81811061168c5750916001939185606097969410611673575b505050811b0160018b01556113cb565b015160001960f88460031b161c19169055388080611663565b9293602060018192878601518155019501930161164a565b60018c018a5260208a20601f840160051c8101602085106116e1575b601f830160051c820181106116d6575050611397565b8b81556001016116c0565b50806116c0565b634e487b7160e01b89526041600452602489fd5b015190503880611355565b8c8b5260208b209250601f1984168b5b818110611753575090846001959493921061173a575b505050811b01895561136a565b015160001960f88460031b161c1916905538808061172d565b92936020600181928786015181550195019301611717565b9091508b8a5260208a20601f840160051c8101602085106117b1575b90849392915b601f830160051c820181106117a357505061133f565b8c815585945060010161178d565b5080611787565b63ffffffff87989298161580156119f3575b156119ae5780610ab4575095604051906117e382611e4d565b60008252600060208301526000604083015263ffffffff8716606083015268010000000000000000871015611998576001870160055561182287611ff3565b61198257825192600584101561196c57815460208083015174ffffffffffffffffffffffffffffffffffffffffff1990921660ff9096169590951760089190911b74ffffffffffffffffffffffffffffffffffffffff001617825560408082015160018401805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055606091909101516002929092019190915563ffffffff881660009081527f3114e88ab8ada1747a04a5f36fe137cd7e638942f4a034da8660043d3e15eeaf84528181208990558151848152938401526112fe9288917f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b91a2604051600081528760208201526000807f30605d4cd099421ed12ca1ba642a1ea2659f679b5cdd0ccd032586640eeaff43604063ffffffff8c1694a4906112bf565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601e60248201527f5969656c64426f783a204e6f20746f6b656e496420666f7220455243323000006044820152606490fd5b50508060016117ca565b60405162461bcd60e51b815260206004820152601b60248201527f426f72696e674d6174683a2075696e743332204f766572666c6f7700000000006044820152606490fd5b50346102d15760203660031901126102d1576040611aaa916004358152600660205220611acb611a7182611e8b565b91611a7e60018201611e8b565b611ab8611a95600360ff6002860154169401611e8b565b91604051968796608088526080880190611dd3565b908682036020880152611dd3565b9160408501528382036060850152611dd3565b0390f35b50346102d157611ade36611d83565b909293918286526007602052611b026001600160a01b0360408820541633146122e7565b855b818110611b0f578680f35b80611b37611b24610ece611b3c94868b6120cd565b86611b3084888b6120cd565b359161237a565b6120a8565b611b04565b50346102d15760203660031901126102d1576040516020810181811067ffffffffffffffff821117611b8b5791611acb926040528152604051918291602083526020830190611dd3565b634e487b7160e01b83526041600452602483fd5b50346102d15760203660031901126102d15760043563ffffffff60e01b81168091036103c2576020906301ffc9a760e01b8114908115611bfd575b8115611bec575b506040519015158152f35b6303a24d0760e21b14905082611be1565b636cdb3d1360e11b81149150611bda565b50346102d157611c1d36611d83565b90929391611c2a83611ff3565b509460ff809654166005811015611cce57611c459015612402565b865b828110611c52578780f35b80611ca5611c67610ece611cc99487876120cd565b6001600160a01b03611c7d610ece8589896120cd565b168b5260206003815260408c20338d52815260408c2090898d52528960408c2054169061227f565b611b37611cb6610ece8387876120cd565b87611cc284898c6120cd565b359161244e565b611c47565b634e487b7160e01b88526021600452602488fd5b9050346103c25760403660031901126103c25760406020926001600160a01b03611d0a611d21565b168152600184528181206024358252845220548152f35b600435906001600160a01b0382168203611d3757565b600080fd5b602435906001600160a01b0382168203611d3757565b9181601f84011215611d375782359167ffffffffffffffff8311611d37576020808501948460051b010111611d3757565b906060600319830112611d37576004359167ffffffffffffffff91602435838111611d375782611db591600401611d52565b93909392604435918211611d3757611dcf91600401611d52565b9091565b919082519283825260005b848110611dff575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611dde565b90600182811c92168015611e43575b6020831014611e2d57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611e22565b6080810190811067ffffffffffffffff82111761199857604052565b90601f8019910116810190811067ffffffffffffffff82111761199857604052565b9060405191826000825492611e9f84611e13565b908184526001948581169081600014611f0e5750600114611ecb575b5050611ec992500383611e69565b565b9093915060005260209081600020936000915b818310611ef6575050611ec993508201013880611ebb565b85548884018501529485019487945091830191611ede565b915050611ec994506020925060ff191682840152151560051b8201013880611ebb565b9181601f84011215611d375782359167ffffffffffffffff8311611d375760208381860195010111611d3757565b6080906003190112611d37576004356005811015611d3757906001600160a01b03906024358281168103611d3757916044359081168103611d37579060643590565b600581101561196c576000526004602052604060002090565b604435908115158203611d3757565b6060906003190112611d3757600435906024356001600160a01b0381168103611d37579060443590565b60055481101561202e576003906005600052027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00190600090565b634e487b7160e01b600052603260045260246000fd5b1561204b57565b60405162461bcd60e51b815260206004820152601860248201527f455243313135353a204c656e677468206d69736d6174636800000000000000006044820152606490fd5b67ffffffffffffffff81116119985760051b60200190565b60001981146120b75760010190565b634e487b7160e01b600052601160045260246000fd5b919081101561202e5760051b0190565b356001600160a01b0381168103611d375790565b90816020910312611d3757516001600160e01b031981168103611d375790565b908060209392818452848401376000828201840152601f01601f1916010190565b1561213957565b60405162461bcd60e51b815260206004820152601260248201527f57726f6e672072657475726e2076616c756500000000000000000000000000006044820152606490fd5b1561218557565b60405162461bcd60e51b815260206004820152600c60248201527f4e6f2030206164647265737300000000000000000000000000000000000000006044820152606490fd5b919082039182116120b757565b919082018092116120b757565b6001600160a01b0316338114908115612276575b811561224c575b501561220757565b60405162461bcd60e51b815260206004820152601460248201527f5472616e73666572206e6f7420616c6c6f7765640000000000000000000000006044820152606490fd5b90506000526000602052604060002033600052602052600160ff60406000205416151514386121ff565b600091506121f8565b6001600160a01b03163381149182156122a2575b50811561224c57501561220757565b915038612293565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311611d375760209260051b809284830137010190565b156122ee57565b60405162461bcd60e51b815260206004820152601c60248201527f4e54463a2063616c6c6572206973206e6f7420746865206f776e6572000000006044820152606490fd5b92919267ffffffffffffffff8211611998576040519161235d601f8201601f191660200184611e69565b829481845281830111611d37578281602093846000960137010152565b6001600160a01b0316919061239083151561217e565b600091838352600160205260408320828452602052604083206123b48282546121d7565b90558183526002602052604083206123cd8282546121d7565b905560405191825260208201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260403392a4565b1561240957565b60405162461bcd60e51b815260206004820152600f60248201527f4e54463a204e6f74206e617469766500000000000000000000000000000000006044820152606490fd5b6001600160a01b03169061246382151561217e565b600092828452600160205260408420828552602052604084206124878282546121ca565b90558184526002602052604084206123cd8282546121ca56fea264697066735822122083dfc39d2c150fef84d7952d509befa2e90581bd2e6dfcbb54302f46f301372c64736f6c63430008120033","opcodes":"PUSH1 0x80 CALLVALUE PUSH2 0x131 JUMPI PUSH1 0x80 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR PUSH2 0x11B JUMPI PUSH1 0x40 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 SWAP2 DUP3 DUP2 MSTORE PUSH1 0x40 DUP3 ADD DUP4 DUP2 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 DUP5 DUP4 MSTORE PUSH1 0x5 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0x107 JUMPI PUSH1 0x1 DUP2 ADD DUP1 PUSH1 0x5 SSTORE DUP2 LT ISZERO PUSH2 0xF3 JUMPI PUSH1 0x5 DUP7 MSTORE PUSH1 0x3 PUSH1 0x20 DUP8 KECCAK256 SWAP2 MUL ADD SWAP4 MLOAD SWAP1 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0xDF JUMPI DUP5 SLOAD SWAP1 MLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHL AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP2 AND OR OR DUP4 SSTORE MLOAD PUSH1 0x1 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE POP PUSH1 0x40 MLOAD PUSH2 0x24D6 SWAP1 DUP2 PUSH3 0x137 DUP3 CODECOPY RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH3 0xFDD58E EQ PUSH2 0x1CE2 JUMPI POP DUP1 PUSH4 0x1E1E3B1 EQ PUSH2 0x1C0E JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1B9F JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x1B41 JUMPI DUP1 PUSH4 0x1DBEEB4E EQ PUSH2 0x1ACF JUMPI DUP1 PUSH4 0x1F0EE4C3 EQ PUSH2 0x1A42 JUMPI DUP1 PUSH4 0x2482EE27 EQ PUSH2 0x11F7 JUMPI DUP1 PUSH4 0x2B800E3B EQ PUSH2 0x11C4 JUMPI DUP1 PUSH4 0x2D4E1D52 EQ PUSH2 0x117B JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xF30 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0xDD7 JUMPI DUP1 PUSH4 0x5BA4D64E EQ PUSH2 0xCA0 JUMPI DUP1 PUSH4 0x836A1040 EQ PUSH2 0xC67 JUMPI DUP1 PUSH4 0x9EEA5F66 EQ PUSH2 0xBF1 JUMPI DUP1 PUSH4 0xA123C33E EQ PUSH2 0xBBE JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0xB2E JUMPI DUP1 PUSH4 0xA75FCB1E EQ PUSH2 0xAD4 JUMPI DUP1 PUSH4 0xB061DB94 EQ PUSH2 0x5AC JUMPI DUP1 PUSH4 0xB8489FB5 EQ PUSH2 0x4C2 JUMPI DUP1 PUSH4 0xBD85B039 EQ PUSH2 0x498 JUMPI DUP1 PUSH4 0xCE7F2714 EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0xCF35BDD0 EQ PUSH2 0x341 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xEAFE7A74 EQ PUSH2 0x2D4 JUMPI PUSH4 0xF242432A EQ PUSH2 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH2 0x14C PUSH2 0x1D21 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x1D3C JUMP JUMPDEST SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD PUSH1 0x84 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2CD JUMPI PUSH2 0x17C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1F31 JUMP JUMPDEST SWAP1 SWAP3 PUSH2 0x187 DUP2 PUSH2 0x21E4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND SWAP2 PUSH2 0x19E DUP4 ISZERO ISZERO PUSH2 0x217E JUMP JUMPDEST AND SWAP5 DUP6 DUP9 MSTORE DUP8 PUSH1 0x20 SWAP8 PUSH1 0x1 DUP10 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP7 DUP4 MSTORE DUP10 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH2 0x1C3 DUP5 DUP3 SLOAD PUSH2 0x21CA JUMP JUMPDEST SWAP1 SSTORE DUP4 DUP3 MSTORE PUSH1 0x1 DUP10 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP7 DUP4 MSTORE DUP10 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH2 0x1E4 DUP5 DUP3 SLOAD PUSH2 0x21D7 JUMP JUMPDEST SWAP1 SSTORE DUP4 DUP9 PUSH1 0x40 MLOAD DUP9 DUP2 MSTORE DUP6 DUP13 DUP3 ADD MSTORE PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 CALLER SWAP3 LOG4 EXTCODESIZE PUSH2 0x221 JUMPI DUP1 RETURN JUMPDEST DUP8 SWAP5 PUSH2 0x262 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP13 DUP14 DUP8 MSTORE CALLER PUSH1 0x4 DUP9 ADD MSTORE PUSH1 0x24 DUP8 ADD MSTORE PUSH1 0x44 DUP7 ADD MSTORE PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP6 ADD MSTORE PUSH1 0xA4 DUP5 ADD SWAP2 PUSH2 0x2111 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x2C2 JUMPI PUSH2 0x28A SWAP4 DUP6 SWAP3 PUSH2 0x295 JUMPI JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0x2132 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP8 DUP1 RETURN JUMPDEST PUSH2 0x2B4 SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x2BB JUMPI JUMPDEST PUSH2 0x2AC DUP2 DUP4 PUSH2 0x1E69 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x20F1 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x278 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2A2 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x20 PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0xFF PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH2 0x313 PUSH2 0x1D21 JUMP JUMPDEST PUSH2 0x31B PUSH2 0x1D3C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE DUP3 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP2 AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x5 SLOAD DUP2 LT ISZERO PUSH2 0x3C2 JUMPI PUSH2 0x369 SWAP1 PUSH2 0x1FF3 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0xFF DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x2 DUP2 PUSH1 0x1 DUP5 ADD SLOAD AND SWAP3 ADD SLOAD SWAP3 PUSH1 0x40 MLOAD SWAP5 PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x3AE JUMPI PUSH1 0x80 SWAP7 POP DUP6 MSTORE PUSH1 0x8 SHR AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x4 CALLDATALOAD DUP1 DUP3 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH1 0x40 DUP5 KECCAK256 SLOAD AND DUP1 CALLER SUB PUSH2 0x453 JUMPI DUP2 DUP5 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 DUP6 KECCAK256 SWAP3 DUP4 SLOAD SWAP5 DUP6 AND SWAP1 PUSH32 0x16B85F49BF01212961345D3016C9A531894ACCF62EB7680F2045D79185CC0EC0 DUP8 DUP1 LOG4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 SWAP4 AND OR SWAP1 SSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP2 SLOAD AND SWAP1 SSTORE DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E54463A2063616C6C657220213D2070656E64696E67206F776E657200000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x40 PUSH1 0x20 SWAP2 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x2 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH2 0x4DC PUSH2 0x1D21 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x4E7 PUSH2 0x1FBA JUMP JUMPDEST PUSH1 0x5 SLOAD DUP3 LT ISZERO PUSH2 0x567 JUMPI CALLER DUP5 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP6 KECCAK256 SWAP4 AND SWAP3 DUP4 DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP3 DUP6 MSTORE PUSH1 0x20 MSTORE PUSH2 0x531 DUP2 PUSH1 0x40 DUP7 KECCAK256 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6ACEB1B079BEEABDD8C2F30CD221CA27EC52E9D0AEF6BB229CC175CF15DD778B PUSH1 0x40 CALLER SWAP3 LOG3 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x41737365744D616E616765723A206173736574206E6F742076616C6964000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH2 0x5BB CALLDATASIZE PUSH2 0x1F5F JUMP JUMPDEST PUSH1 0x5 SWAP5 DUP6 DUP6 LT ISZERO SWAP5 DUP6 SWAP5 SWAP3 SWAP4 SWAP1 SWAP2 DUP6 PUSH2 0xAB4 JUMPI PUSH1 0x1 DUP4 EQ DUP1 ISZERO SWAP8 DUP9 PUSH2 0xAC8 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0xAA4 JUMPI JUMPDEST POP ISZERO PUSH2 0xA5F JUMPI PUSH2 0x5F1 DUP4 PUSH2 0x1FA1 JUMP JUMPDEST SWAP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 DUP7 AND SWAP6 DUP7 DUP5 MSTORE PUSH1 0x20 SWAP11 DUP12 MSTORE DUP9 PUSH1 0x40 DUP6 KECCAK256 SWAP6 AND SWAP5 DUP6 DUP6 MSTORE DUP12 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP9 DUP6 MSTORE DUP12 MSTORE PUSH1 0x40 DUP5 KECCAK256 SLOAD SWAP10 DUP11 ISZERO PUSH2 0x634 JUMPI JUMPDEST DUP12 DUP12 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 SWAP8 DUP1 SWAP10 SWAP11 POP ISZERO SWAP1 DUP2 ISZERO PUSH2 0xA53 JUMPI JUMPDEST POP ISZERO PUSH2 0xA0E JUMPI DUP2 PUSH2 0x851 JUMPI DUP6 ISZERO SWAP2 DUP3 DUP1 ISZERO PUSH2 0x8AA JUMPI JUMPDEST ISZERO PUSH2 0x865 JUMPI PUSH2 0x851 JUMPI DUP2 PUSH2 0x848 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x83D JUMPI JUMPDEST POP ISZERO PUSH2 0x7F8 JUMPI DUP1 SLOAD SWAP7 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x68B DUP4 PUSH2 0x1E4D JUMP JUMPDEST DUP6 DUP4 MSTORE DUP10 DUP4 ADD SWAP2 DUP8 DUP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 DUP7 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP4 DUP11 DUP6 MSTORE PUSH9 0x10000000000000000 DUP13 LT ISZERO PUSH2 0x7E4 JUMPI PUSH1 0x1 DUP13 ADD DUP3 SSTORE PUSH2 0x6C5 DUP13 PUSH2 0x1FF3 JUMP JUMPDEST SWAP7 SWAP1 SWAP7 PUSH2 0x7D0 JUMPI MLOAD SWAP2 DUP3 LT ISZERO PUSH2 0x3AE JUMPI SWAP5 PUSH1 0x2 DUP13 SWAP6 PUSH32 0x6BB7FF708619BA0610CBA295A58592E0451DEE2622938C8755667688DAF3529B SWAP6 PUSH1 0x40 SWAP10 SWAP5 SWAP6 DUP11 SWAP7 PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 SWAP13 SWAP11 PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0xFF DUP10 SLOAD SWAP5 AND SWAP3 DUP4 PUSH1 0xFF NOT DUP7 AND OR DUP11 SSTORE MLOAD PUSH1 0x8 SHL AND SWAP3 AND OR OR DUP6 SSTORE PUSH1 0x1 DUP6 ADD SWAP2 MLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE MLOAD SWAP2 ADD SSTORE PUSH2 0x791 DUP9 PUSH2 0x1FA1 JUMP JUMPDEST DUP10 DUP3 MSTORE DUP13 MSTORE DUP2 DUP2 KECCAK256 DUP6 DUP3 MSTORE DUP13 MSTORE DUP2 DUP2 KECCAK256 DUP11 DUP3 MSTORE DUP13 MSTORE DUP4 DUP3 DUP3 KECCAK256 SSTORE DUP2 MLOAD SWAP1 DUP13 DUP3 MSTORE DUP13 DUP3 ADD MSTORE LOG2 DUP2 MLOAD SWAP1 DUP2 MSTORE DUP7 DUP9 DUP3 ADD MSTORE LOG4 CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x62A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x4 DUP9 SWAP1 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A204E6F74206120746F6B656E0000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP EXTCODESIZE ISZERO ISZERO CODESIZE PUSH2 0x675 JUMP JUMPDEST DUP7 ISZERO SWAP2 POP PUSH2 0x66E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP13 SWAP1 MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A205374726174656779206D69736D617463680000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xC3E9CE3 PUSH1 0xE2 SHL DUP2 MSTORE DUP11 DUP2 PUSH1 0x4 DUP2 DUP10 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA03 JUMPI DUP6 SWAP2 PUSH2 0x9CA JUMPI JUMPDEST POP DUP4 DUP2 LT ISZERO PUSH2 0x9B6 JUMPI DUP5 SWAP1 DUP8 EQ DUP1 PUSH2 0x94C JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x65F JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x5F5C3DF PUSH1 0xE2 SHL DUP2 MSTORE DUP12 DUP2 PUSH1 0x4 DUP2 DUP11 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x941 JUMPI DUP7 SWAP2 PUSH2 0x914 JUMPI JUMPDEST POP DUP10 EQ PUSH2 0x65F JUMP JUMPDEST SWAP1 POP DUP12 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x93A JUMPI JUMPDEST PUSH2 0x92B DUP2 DUP4 PUSH2 0x1E69 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x2CD JUMPI MLOAD CODESIZE PUSH2 0x90C JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x921 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x3DAD37ED PUSH1 0xE2 SHL DUP2 MSTORE DUP12 DUP2 PUSH1 0x4 DUP2 DUP11 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x941 JUMPI SWAP1 DUP12 SWAP2 DUP8 SWAP2 PUSH2 0x97C JUMPI JUMPDEST POP AND DUP9 EQ PUSH2 0x8E2 JUMP JUMPDEST DUP1 SWAP3 POP DUP14 DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0x9AF JUMPI JUMPDEST PUSH2 0x995 DUP2 DUP4 PUSH2 0x1E69 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x2CD JUMPI MLOAD DUP11 DUP2 AND DUP2 SUB PUSH2 0x2CD JUMPI DUP11 SWAP1 CODESIZE PUSH2 0x973 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x98B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST SWAP1 POP DUP11 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x9FC JUMPI JUMPDEST PUSH2 0x9E1 DUP2 DUP4 PUSH2 0x1E69 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9F8 JUMPI MLOAD DUP4 DUP2 LT ISZERO PUSH2 0x9F8 JUMPI CODESIZE PUSH2 0x8CF JUMP JUMPDEST DUP5 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x9D7 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A204E6F20746F6B656E496420666F722045524332300000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP3 POP POP PUSH1 0x0 SWAP2 CODESIZE PUSH2 0x649 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x41737365744D616E616765723A2063616E6E6F7420616464204E617469766500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH2 0xAB4 JUMPI PUSH1 0x3 DUP4 EQ CODESIZE PUSH2 0x5E2 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP POP PUSH1 0x2 DUP4 EQ DUP2 PUSH2 0x5DB JUMP JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0xFF PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH2 0xAF5 PUSH2 0x1D21 JUMP JUMPDEST PUSH2 0xAFD PUSH2 0x1D3C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x3 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x44 CALLDATALOAD DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP2 AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH2 0xB48 PUSH2 0x1D21 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO SWAP1 DUP2 DUP2 SUB PUSH2 0xBBA JUMPI PUSH2 0xB8B SWAP1 CALLER DUP6 MSTORE DUP5 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP7 KECCAK256 SWAP5 AND SWAP4 DUP5 DUP7 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP6 KECCAK256 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 CALLER SWAP3 LOG3 DUP1 RETURN JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x7 DUP5 MSTORE KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH2 0xC00 CALLDATASIZE PUSH2 0x1FC9 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP4 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP2 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH2 0xC39 PUSH1 0xFF PUSH1 0x40 DUP6 KECCAK256 SLOAD AND DUP6 PUSH2 0x227F JUMP JUMPDEST PUSH1 0xFF PUSH2 0xC44 DUP3 PUSH2 0x1FF3 JUMP JUMPDEST POP SLOAD AND SWAP4 PUSH1 0x5 DUP6 LT ISZERO PUSH2 0x851 JUMPI PUSH2 0xC5F PUSH2 0xC64 SWAP5 SWAP6 ISZERO PUSH2 0x2402 JUMP JUMPDEST PUSH2 0x244E JUMP JUMPDEST DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH2 0xC64 PUSH2 0xC79 CALLDATASIZE PUSH2 0x1FC9 JUMP JUMPDEST SWAP2 SWAP1 DUP2 DUP6 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH2 0xC9B PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP8 KECCAK256 SLOAD AND CALLER EQ PUSH2 0x22E7 JUMP JUMPDEST PUSH2 0x237A JUMP JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xCBD PUSH2 0x1D3C JUMP JUMPDEST SWAP1 PUSH2 0xCC6 PUSH2 0x1FBA JUMP JUMPDEST SWAP1 PUSH1 0x64 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x9F8 JUMPI DUP2 DUP6 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 PUSH2 0xCF5 DUP5 PUSH1 0x40 DUP9 KECCAK256 SLOAD AND CALLER EQ PUSH2 0x22E7 JUMP JUMPDEST ISZERO PUSH2 0xDB7 JUMPI SWAP1 SWAP2 DUP1 SWAP4 AND SWAP1 DUP2 ISZERO SWAP1 DUP2 ISZERO SWAP2 PUSH2 0xDAF JUMPI JUMPDEST POP ISZERO PUSH2 0xD6A JUMPI DUP2 DUP5 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 DUP6 KECCAK256 SWAP3 DUP4 SLOAD SWAP5 DUP6 AND SWAP1 PUSH32 0x16B85F49BF01212961345D3016C9A531894ACCF62EB7680F2045D79185CC0EC0 DUP8 DUP1 LOG4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 SWAP4 AND OR SWAP1 SSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP2 SLOAD AND SWAP1 SSTORE DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E54463A207A65726F2061646472657373000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP CODESIZE PUSH2 0xD0B JUMP JUMPDEST POP DUP4 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0xF2C JUMPI PUSH2 0xE0A SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D52 JUMP JUMPDEST PUSH1 0x24 SWAP3 DUP4 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x9F8 JUMPI DUP5 PUSH2 0xE26 DUP6 SWAP3 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D52 JUMP JUMPDEST SWAP3 SWAP1 SWAP5 PUSH2 0xE34 DUP5 DUP7 EQ PUSH2 0x2044 JUMP JUMPDEST PUSH2 0xE3D DUP6 PUSH2 0x2090 JUMP JUMPDEST SWAP6 PUSH2 0xE4B PUSH1 0x40 MLOAD SWAP8 DUP9 PUSH2 0x1E69 JUMP JUMPDEST DUP6 DUP8 MSTORE PUSH2 0xE57 DUP7 PUSH2 0x2090 JUMP JUMPDEST PUSH1 0x20 SWAP7 DUP9 DUP9 ADD SWAP7 SWAP2 PUSH1 0x1F NOT ADD CALLDATASIZE DUP9 CALLDATACOPY DUP6 JUMPDEST DUP2 DUP2 LT PUSH2 0xEB3 JUMPI POP POP POP POP POP POP PUSH1 0x40 MLOAD SWAP4 DUP4 DUP6 SWAP5 DUP6 ADD SWAP2 DUP2 DUP7 MSTORE MLOAD DUP1 SWAP3 MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0xE9C JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xED3 PUSH2 0xECE DUP4 DUP6 DUP10 SWAP15 SWAP13 SWAP14 SWAP12 SWAP15 PUSH2 0x20CD JUMP JUMPDEST PUSH2 0x20DD JUMP JUMPDEST AND DUP11 MSTORE PUSH1 0x1 DUP8 MSTORE PUSH1 0x40 DUP11 KECCAK256 PUSH2 0xEE9 DUP3 DUP6 DUP8 PUSH2 0x20CD JUMP JUMPDEST CALLDATALOAD DUP12 MSTORE DUP8 MSTORE PUSH1 0x40 DUP11 KECCAK256 SLOAD DUP9 MLOAD DUP3 LT ISZERO PUSH2 0xF19 JUMPI SWAP1 PUSH2 0xF0F SWAP2 DUP9 DUP3 PUSH1 0x5 SHL DUP12 ADD ADD MSTORE PUSH2 0x20A8 JUMP JUMPDEST SWAP9 SWAP6 SWAP8 SWAP7 SWAP9 PUSH2 0xE68 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE DUP7 DUP12 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x3 NOT PUSH1 0xA0 CALLDATASIZE DUP3 ADD SLT PUSH2 0x3C2 JUMPI PUSH2 0xF4B PUSH2 0x1D21 JUMP JUMPDEST PUSH2 0xF53 PUSH2 0x1D3C JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x44 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x2CD JUMPI PUSH2 0xF74 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D52 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x64 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x1177 JUMPI PUSH2 0xF8E SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D52 JUMP JUMPDEST SWAP7 SWAP1 SWAP2 PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x1173 JUMPI SWAP2 PUSH2 0xFAD DUP10 SWAP8 SWAP7 SWAP4 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1F31 JUMP JUMPDEST SWAP2 SWAP1 SWAP4 PUSH2 0xFBB DUP11 DUP8 EQ PUSH2 0x2044 JUMP JUMPDEST PUSH2 0xFC4 DUP9 PUSH2 0x21E4 JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 DUP12 DUP9 DUP11 DUP13 DUP7 AND SWAP13 DUP14 SWAP6 PUSH2 0xFE2 DUP8 ISZERO ISZERO PUSH2 0x217E JUMP JUMPDEST SWAP5 AND SWAP14 DUP15 SWAP4 JUMPDEST DUP4 DUP7 LT PUSH2 0x1108 JUMPI SWAP4 SWAP5 POP POP PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB SWAP2 PUSH2 0x103F PUSH2 0x102F PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0x40 DUP6 MSTORE PUSH1 0x40 DUP6 ADD SWAP2 PUSH2 0x22AA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP6 DUP11 PUSH2 0x22AA JUMP JUMPDEST SUB SWAP1 LOG4 EXTCODESIZE PUSH2 0x104B JUMPI DUP10 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP7 DUP8 SWAP7 PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP11 DUP12 DUP10 MSTORE CALLER PUSH1 0x4 DUP11 ADD MSTORE PUSH1 0x24 DUP10 ADD MSTORE PUSH1 0x44 DUP9 ADD PUSH1 0xA0 SWAP1 MSTORE PUSH1 0xA4 DUP9 ADD SWAP1 PUSH2 0x1080 SWAP3 PUSH2 0x22AA JUMP JUMPDEST SWAP1 DUP5 DUP8 DUP4 SUB ADD PUSH1 0x64 DUP9 ADD MSTORE PUSH2 0x1094 SWAP3 PUSH2 0x22AA JUMP JUMPDEST SWAP2 DUP5 DUP4 SUB ADD PUSH1 0x84 DUP6 ADD MSTORE PUSH2 0x10A7 SWAP3 PUSH2 0x2111 JUMP JUMPDEST SUB DUP2 DUP7 GAS SWAP5 PUSH1 0x20 SWAP6 CALL DUP1 ISZERO PUSH2 0x10FD JUMPI PUSH2 0x10D2 SWAP3 DUP5 SWAP2 PUSH2 0x10DF JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0x2132 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP10 DUP1 RETURN JUMPDEST PUSH2 0x10F7 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x2BB JUMPI PUSH2 0x2AC DUP2 DUP4 PUSH2 0x1E69 JUMP JUMPDEST CODESIZE PUSH2 0x10C1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x1167 SWAP7 PUSH2 0x1128 DUP8 PUSH2 0x1120 DUP2 PUSH2 0x1160 SWAP9 PUSH1 0x40 SWAP9 PUSH2 0x20CD JUMP JUMPDEST CALLDATALOAD SWAP4 DUP13 PUSH2 0x20CD JUMP JUMPDEST CALLDATALOAD SWAP6 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP2 DUP2 DUP4 MSTORE DUP6 DUP6 KECCAK256 DUP5 DUP7 MSTORE DUP4 MSTORE DUP6 DUP6 KECCAK256 PUSH2 0x114A DUP10 DUP3 SLOAD PUSH2 0x21CA JUMP JUMPDEST SWAP1 SSTORE DUP5 MSTORE DUP2 MSTORE DUP4 DUP4 KECCAK256 SWAP2 DUP4 MSTORE MSTORE KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0x21D7 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x20A8 JUMP JUMPDEST DUP9 SWAP1 DUP11 DUP9 DUP11 DUP16 DUP16 PUSH2 0xFE8 JUMP JUMPDEST DUP9 DUP1 REVERT JUMPDEST DUP8 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x40 PUSH1 0x20 SWAP2 PUSH2 0x119A PUSH2 0x1192 CALLDATASIZE PUSH2 0x1F5F JUMP JUMPDEST SWAP4 SWAP1 SWAP3 PUSH2 0x1FA1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND DUP6 MSTORE DUP7 MSTORE DUP5 DUP5 KECCAK256 SWAP2 AND DUP4 MSTORE DUP5 MSTORE DUP3 DUP3 KECCAK256 SWAP1 DUP3 MSTORE DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x8 DUP5 MSTORE KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3C2 JUMPI PUSH2 0x1229 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1F31 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3C2 JUMPI PUSH2 0x124B SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1F31 JUMP JUMPDEST SWAP4 SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0xFF DUP3 AND DUP3 SUB PUSH2 0xBBA JUMPI PUSH1 0x64 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x9F8 JUMPI PUSH2 0x127B SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1F31 JUMP JUMPDEST SWAP7 SWAP1 SWAP4 PUSH1 0x5 SLOAD SWAP5 PUSH4 0xFFFFFFFF DUP7 GT PUSH2 0x19FD JUMPI DUP7 DUP8 DUP1 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP9 KECCAK256 PUSH1 0x20 MSTORE PUSH1 0x40 DUP9 KECCAK256 PUSH1 0x20 MSTORE PUSH1 0x40 DUP9 KECCAK256 PUSH4 0xFFFFFFFF DUP9 AND DUP10 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP9 KECCAK256 SLOAD ISZERO PUSH2 0x17B8 JUMPI JUMPDEST POP PUSH2 0x12FE SWAP1 PUSH1 0x40 MLOAD SWAP10 PUSH2 0x12D1 DUP12 PUSH2 0x1E4D JUMP JUMPDEST PUSH2 0x12DC CALLDATASIZE DUP12 DUP7 PUSH2 0x2333 JUMP JUMPDEST DUP12 MSTORE PUSH2 0x12E9 CALLDATASIZE DUP7 DUP9 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x20 DUP13 ADD MSTORE PUSH1 0xFF DUP8 AND PUSH1 0x40 DUP13 ADD MSTORE CALLDATASIZE SWAP2 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MSTORE PUSH4 0xFFFFFFFF DUP6 AND DUP7 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP7 KECCAK256 SWAP8 DUP1 MLOAD DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x16E8 JUMPI DUP2 SWAP1 PUSH2 0x1336 DUP13 SLOAD PUSH2 0x1E13 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x176B JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1707 JUMPI DUP11 SWAP3 PUSH2 0x16FC JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR DUP10 SSTORE JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x16E8 JUMPI PUSH2 0x138E PUSH1 0x1 DUP13 ADD SLOAD PUSH2 0x1E13 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x16A4 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1637 JUMPI PUSH1 0x60 SWAP4 SWAP3 SWAP2 DUP11 SWAP2 DUP4 PUSH2 0x162C JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1 DUP12 ADD SSTORE JUMPDEST PUSH1 0x2 DUP11 ADD PUSH1 0xFF PUSH1 0x40 DUP4 ADD MLOAD AND PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE ADD MLOAD SWAP8 DUP9 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1618 JUMPI PUSH2 0x1401 PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0x1E13 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x15D0 JUMPI JUMPDEST POP PUSH1 0x20 SWAP10 DUP11 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1535 JUMPI PUSH1 0xFF SWAP5 PUSH2 0x14AE SWAP5 PUSH1 0x3 DUP6 PUSH32 0xB0BCDEBD2813328A89A9ED5971E5863201ED78FC4E0E2B271CCEDDB9CE90510 SWAP11 SWAP7 DUP15 SWAP16 SWAP11 SWAP7 PUSH4 0xFFFFFFFF SWAP16 SWAP7 PUSH2 0x14A1 SWAP8 SWAP3 PUSH2 0x152A JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 DUP5 SHL SHR NOT AND OR SWAP2 ADD SSTORE JUMPDEST DUP11 DUP11 AND DUP13 MSTORE PUSH1 0x7 DUP14 MSTORE PUSH1 0x40 DUP13 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP7 PUSH1 0x80 DUP9 MSTORE PUSH1 0x80 DUP9 ADD SWAP2 PUSH2 0x2111 JUMP JUMPDEST SWAP2 DUP6 DUP4 SUB DUP13 DUP8 ADD MSTORE PUSH2 0x2111 JUMP JUMPDEST SWAP4 AND PUSH1 0x40 DUP3 ADD MSTORE DUP5 DUP5 AND PUSH1 0x60 DUP3 ADD MSTORE DUP1 CALLER SWAP4 SUB SWAP1 LOG2 DUP3 DUP1 PUSH1 0x40 MLOAD DUP5 DUP5 AND DUP2 MSTORE DUP2 DUP8 DUP3 ADD MSTORE PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 CALLER SWAP3 LOG4 PUSH1 0x40 MLOAD SWAP3 CALLER SWAP1 DUP4 DUP4 AND PUSH32 0x16B85F49BF01212961345D3016C9A531894ACCF62EB7680F2045D79185CC0EC0 DUP3 DUP1 LOG4 AND DUP2 MSTORE RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x145D JUMP JUMPDEST PUSH1 0x3 DUP5 ADD DUP11 MSTORE DUP12 DUP11 KECCAK256 SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND DUP12 JUMPDEST DUP2 DUP2 LT PUSH2 0x15B9 JUMPI POP SWAP5 PUSH1 0x3 PUSH1 0x1 DUP7 PUSH4 0xFFFFFFFF SWAP15 SWAP16 SWAP11 SWAP7 PUSH2 0x14A1 SWAP7 PUSH1 0xFF SWAP12 SWAP7 PUSH32 0xB0BCDEBD2813328A89A9ED5971E5863201ED78FC4E0E2B271CCEDDB9CE90510 SWAP15 SWAP11 PUSH2 0x14AE SWAP13 LT PUSH2 0x15A1 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP2 ADD SSTORE PUSH2 0x1472 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP7 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x1593 JUMP JUMPDEST SWAP3 SWAP4 DUP15 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x1547 JUMP JUMPDEST PUSH1 0x3 DUP4 ADD DUP10 MSTORE PUSH1 0x20 DUP10 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP5 LT PUSH2 0x160E JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x1603 JUMPI POP PUSH2 0x140A JUMP JUMPDEST DUP10 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x15F6 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x15ED JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x13B3 JUMP JUMPDEST PUSH1 0x1 DUP13 ADD DUP11 MSTORE PUSH1 0x20 DUP11 KECCAK256 SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND DUP12 JUMPDEST DUP2 DUP2 LT PUSH2 0x168C JUMPI POP SWAP2 PUSH1 0x1 SWAP4 SWAP2 DUP6 PUSH1 0x60 SWAP8 SWAP7 SWAP5 LT PUSH2 0x1673 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1 DUP12 ADD SSTORE PUSH2 0x13CB JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x1663 JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x164A JUMP JUMPDEST PUSH1 0x1 DUP13 ADD DUP11 MSTORE PUSH1 0x20 DUP11 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT PUSH2 0x16E1 JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x16D6 JUMPI POP POP PUSH2 0x1397 JUMP JUMPDEST DUP12 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x16C0 JUMP JUMPDEST POP DUP1 PUSH2 0x16C0 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x1355 JUMP JUMPDEST DUP13 DUP12 MSTORE PUSH1 0x20 DUP12 KECCAK256 SWAP3 POP PUSH1 0x1F NOT DUP5 AND DUP12 JUMPDEST DUP2 DUP2 LT PUSH2 0x1753 JUMPI POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x173A JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP10 SSTORE PUSH2 0x136A JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x172D JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x1717 JUMP JUMPDEST SWAP1 SWAP2 POP DUP12 DUP11 MSTORE PUSH1 0x20 DUP11 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT PUSH2 0x17B1 JUMPI JUMPDEST SWAP1 DUP5 SWAP4 SWAP3 SWAP2 JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x17A3 JUMPI POP POP PUSH2 0x133F JUMP JUMPDEST DUP13 DUP2 SSTORE DUP6 SWAP5 POP PUSH1 0x1 ADD PUSH2 0x178D JUMP JUMPDEST POP DUP1 PUSH2 0x1787 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP8 SWAP9 SWAP3 SWAP9 AND ISZERO DUP1 ISZERO PUSH2 0x19F3 JUMPI JUMPDEST ISZERO PUSH2 0x19AE JUMPI DUP1 PUSH2 0xAB4 JUMPI POP SWAP6 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x17E3 DUP3 PUSH2 0x1E4D JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP4 ADD MSTORE PUSH4 0xFFFFFFFF DUP8 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH9 0x10000000000000000 DUP8 LT ISZERO PUSH2 0x1998 JUMPI PUSH1 0x1 DUP8 ADD PUSH1 0x5 SSTORE PUSH2 0x1822 DUP8 PUSH2 0x1FF3 JUMP JUMPDEST PUSH2 0x1982 JUMPI DUP3 MLOAD SWAP3 PUSH1 0x5 DUP5 LT ISZERO PUSH2 0x196C JUMPI DUP2 SLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP3 AND PUSH1 0xFF SWAP1 SWAP7 AND SWAP6 SWAP1 SWAP6 OR PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHL PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND OR DUP3 SSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD PUSH1 0x1 DUP5 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x60 SWAP2 SWAP1 SWAP2 ADD MLOAD PUSH1 0x2 SWAP3 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH4 0xFFFFFFFF DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x3114E88AB8ADA1747A04A5F36FE137CD7E638942F4A034DA8660043D3E15EEAF DUP5 MSTORE DUP2 DUP2 KECCAK256 DUP10 SWAP1 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP4 DUP5 ADD MSTORE PUSH2 0x12FE SWAP3 DUP9 SWAP2 PUSH32 0x6BB7FF708619BA0610CBA295A58592E0451DEE2622938C8755667688DAF3529B SWAP2 LOG2 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE DUP8 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP1 PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 PUSH1 0x40 PUSH4 0xFFFFFFFF DUP13 AND SWAP5 LOG4 SWAP1 PUSH2 0x12BF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A204E6F20746F6B656E496420666F722045524332300000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP POP DUP1 PUSH1 0x1 PUSH2 0x17CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E674D6174683A2075696E743332204F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x40 PUSH2 0x1AAA SWAP2 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE KECCAK256 PUSH2 0x1ACB PUSH2 0x1A71 DUP3 PUSH2 0x1E8B JUMP JUMPDEST SWAP2 PUSH2 0x1A7E PUSH1 0x1 DUP3 ADD PUSH2 0x1E8B JUMP JUMPDEST PUSH2 0x1AB8 PUSH2 0x1A95 PUSH1 0x3 PUSH1 0xFF PUSH1 0x2 DUP7 ADD SLOAD AND SWAP5 ADD PUSH2 0x1E8B JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 PUSH1 0x80 DUP9 MSTORE PUSH1 0x80 DUP9 ADD SWAP1 PUSH2 0x1DD3 JUMP JUMPDEST SWAP1 DUP7 DUP3 SUB PUSH1 0x20 DUP9 ADD MSTORE PUSH2 0x1DD3 JUMP JUMPDEST SWAP2 PUSH1 0x40 DUP6 ADD MSTORE DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x1DD3 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH2 0x1ADE CALLDATASIZE PUSH2 0x1D83 JUMP JUMPDEST SWAP1 SWAP3 SWAP4 SWAP2 DUP3 DUP7 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH2 0x1B02 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP9 KECCAK256 SLOAD AND CALLER EQ PUSH2 0x22E7 JUMP JUMPDEST DUP6 JUMPDEST DUP2 DUP2 LT PUSH2 0x1B0F JUMPI DUP7 DUP1 RETURN JUMPDEST DUP1 PUSH2 0x1B37 PUSH2 0x1B24 PUSH2 0xECE PUSH2 0x1B3C SWAP5 DUP7 DUP12 PUSH2 0x20CD JUMP JUMPDEST DUP7 PUSH2 0x1B30 DUP5 DUP9 DUP12 PUSH2 0x20CD JUMP JUMPDEST CALLDATALOAD SWAP2 PUSH2 0x237A JUMP JUMPDEST PUSH2 0x20A8 JUMP JUMPDEST PUSH2 0x1B04 JUMP JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1B8B JUMPI SWAP2 PUSH2 0x1ACB SWAP3 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x1DD3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 AND DUP1 SWAP2 SUB PUSH2 0x3C2 JUMPI PUSH1 0x20 SWAP1 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x1BFD JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x1BEC JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ SWAP1 POP DUP3 PUSH2 0x1BE1 JUMP JUMPDEST PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL DUP2 EQ SWAP2 POP PUSH2 0x1BDA JUMP JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH2 0x1C1D CALLDATASIZE PUSH2 0x1D83 JUMP JUMPDEST SWAP1 SWAP3 SWAP4 SWAP2 PUSH2 0x1C2A DUP4 PUSH2 0x1FF3 JUMP JUMPDEST POP SWAP5 PUSH1 0xFF DUP1 SWAP7 SLOAD AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x1CCE JUMPI PUSH2 0x1C45 SWAP1 ISZERO PUSH2 0x2402 JUMP JUMPDEST DUP7 JUMPDEST DUP3 DUP2 LT PUSH2 0x1C52 JUMPI DUP8 DUP1 RETURN JUMPDEST DUP1 PUSH2 0x1CA5 PUSH2 0x1C67 PUSH2 0xECE PUSH2 0x1CC9 SWAP5 DUP8 DUP8 PUSH2 0x20CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1C7D PUSH2 0xECE DUP6 DUP10 DUP10 PUSH2 0x20CD JUMP JUMPDEST AND DUP12 MSTORE PUSH1 0x20 PUSH1 0x3 DUP2 MSTORE PUSH1 0x40 DUP13 KECCAK256 CALLER DUP14 MSTORE DUP2 MSTORE PUSH1 0x40 DUP13 KECCAK256 SWAP1 DUP10 DUP14 MSTORE MSTORE DUP10 PUSH1 0x40 DUP13 KECCAK256 SLOAD AND SWAP1 PUSH2 0x227F JUMP JUMPDEST PUSH2 0x1B37 PUSH2 0x1CB6 PUSH2 0xECE DUP4 DUP8 DUP8 PUSH2 0x20CD JUMP JUMPDEST DUP8 PUSH2 0x1CC2 DUP5 DUP10 DUP13 PUSH2 0x20CD JUMP JUMPDEST CALLDATALOAD SWAP2 PUSH2 0x244E JUMP JUMPDEST PUSH2 0x1C47 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x3C2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C2 JUMPI PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1D0A PUSH2 0x1D21 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x1 DUP5 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x24 CALLDATALOAD DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1D37 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1D37 JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x1D37 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x1D37 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x1D37 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x60 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x1D37 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 PUSH1 0x24 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x1D37 JUMPI DUP3 PUSH2 0x1DB5 SWAP2 PUSH1 0x4 ADD PUSH2 0x1D52 JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SWAP3 PUSH1 0x44 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x1D37 JUMPI PUSH2 0x1DCF SWAP2 PUSH1 0x4 ADD PUSH2 0x1D52 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x1DFF JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1DDE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x1E43 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x1E2D JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1E22 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1998 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1998 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x1E9F DUP5 PUSH2 0x1E13 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x1F0E JUMPI POP PUSH1 0x1 EQ PUSH2 0x1ECB JUMPI JUMPDEST POP POP PUSH2 0x1EC9 SWAP3 POP SUB DUP4 PUSH2 0x1E69 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x1EF6 JUMPI POP POP PUSH2 0x1EC9 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x1EBB JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x1EDE JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1EC9 SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x1EBB JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x1D37 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x1D37 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x1D37 JUMPI JUMP JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x1D37 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x1D37 JUMPI SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 DUP2 AND DUP2 SUB PUSH2 0x1D37 JUMPI SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x1D37 JUMPI SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x196C JUMPI PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x1D37 JUMPI JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x1D37 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1D37 JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 LT ISZERO PUSH2 0x202E JUMPI PUSH1 0x3 SWAP1 PUSH1 0x5 PUSH1 0x0 MSTORE MUL PUSH32 0x36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ISZERO PUSH2 0x204B JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204C656E677468206D69736D617463680000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1998 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x20B7 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x202E JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1D37 JUMPI SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x1D37 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 SUB PUSH2 0x1D37 JUMPI SWAP1 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2139 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57726F6E672072657475726E2076616C75650000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2185 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F203020616464726573730000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x20B7 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x20B7 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x2276 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x224C JUMPI JUMPDEST POP ISZERO PUSH2 0x2207 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73666572206E6F7420616C6C6F776564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO ISZERO EQ CODESIZE PUSH2 0x21FF JUMP JUMPDEST PUSH1 0x0 SWAP2 POP PUSH2 0x21F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ SWAP2 DUP3 ISZERO PUSH2 0x22A2 JUMPI JUMPDEST POP DUP2 ISZERO PUSH2 0x224C JUMPI POP ISZERO PUSH2 0x2207 JUMPI JUMP JUMPDEST SWAP2 POP CODESIZE PUSH2 0x2293 JUMP JUMPDEST SWAP1 SWAP2 DUP3 DUP2 MSTORE PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x1D37 JUMPI PUSH1 0x20 SWAP3 PUSH1 0x5 SHL DUP1 SWAP3 DUP5 DUP4 ADD CALLDATACOPY ADD ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x22EE JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E54463A2063616C6C6572206973206E6F7420746865206F776E657200000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP3 SWAP2 SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1998 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x235D PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0x1E69 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x1D37 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH2 0x2390 DUP4 ISZERO ISZERO PUSH2 0x217E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP4 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH2 0x23B4 DUP3 DUP3 SLOAD PUSH2 0x21D7 JUMP JUMPDEST SWAP1 SSTORE DUP2 DUP4 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH2 0x23CD DUP3 DUP3 SLOAD PUSH2 0x21D7 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 CALLER SWAP3 LOG4 JUMP JUMPDEST ISZERO PUSH2 0x2409 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E54463A204E6F74206E61746976650000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x2463 DUP3 ISZERO ISZERO PUSH2 0x217E JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP3 DUP5 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP3 DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH2 0x2487 DUP3 DUP3 SLOAD PUSH2 0x21CA JUMP JUMPDEST SWAP1 SSTORE DUP2 DUP5 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH2 0x23CD DUP3 DUP3 SLOAD PUSH2 0x21CA JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP4 0xDF 0xC3 SWAP14 0x2C ISZERO 0xF 0xEF DUP5 0xD7 SWAP6 0x2D POP SWAP12 0xEF LOG2 0xE9 SDIV DUP2 0xBD 0x2E PUSH14 0xFCBB54302F46F301372C64736F6C PUSH4 0x43000812 STOP CALLER ","sourceMap":"576:6782:33:-:0;;;;4022:21:39;;;-1:-1:-1;;;;;4022:21:39;;;;;;;;;;1075:14:28;4022:21:39;;1069:49:28;;;1099:1;;4022:21:39;;;;;1069:49:28;;4022:21:39;;;1069:49:28;;;4022:21:39;;;;1057:6:28;4022:21:39;;;;;;;;;;;1057:6:28;4022:21:39;;;;;;1057:6:28;4022:21:39;;;1069:49:28;4022:21:39;;;;;;;;1057:6:28;4022:21:39;;;;;;;;;-1:-1:-1;;;;;4022:21:39;;;;;;;;;;;-1:-1:-1;;;;;;4022:21:39;;;;;;;;-1:-1:-1;4022:21:39;;;;-1:-1:-1;;;;;576:6782:33;;;-1:-1:-1;;;;;;4022:21:39;;;;;;;;;;;;;;;-1:-1:-1;4022:21:39;576:6782:33;;;;;;;;4022:21:39;-1:-1:-1;;;4022:21:39;;;1075:14:28;4022:21:39;;;;;-1:-1:-1;;;4022:21:39;;;1075:14:28;4022:21:39;;;;;-1:-1:-1;;;4022:21:39;;;1075:14:28;4022:21:39;;;;;;;;1099:1:28;4022:21:39;;;;;1099:1:28;4022:21:39;576:6782:33;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":7484,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_21572":{"entryPoint":7457,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_array_address_dyn_calldata":{"entryPoint":7506,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_available_length_string":{"entryPoint":9011,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_bool":{"entryPoint":8122,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_bytes4_fromMemory":{"entryPoint":8433,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_enum_TokenTypet_addresst_contract_IStrategyt_uint256":{"entryPoint":8031,"id":null,"parameterSlots":1,"returnSlots":4},"abi_decode_string_calldata":{"entryPoint":7985,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_uint256t_addresst_uint256":{"entryPoint":8137,"id":null,"parameterSlots":1,"returnSlots":3},"abi_decode_uint256t_array_address_dyn_calldatat_array_uint256_dyn_calldata":{"entryPoint":7555,"id":null,"parameterSlots":1,"returnSlots":5},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":8874,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_bytes_calldata":{"entryPoint":8465,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_string":{"entryPoint":7635,"id":null,"parameterSlots":2,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":8336,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_array_index_access_address_dyn_calldata":{"entryPoint":8397,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_uint256":{"entryPoint":8663,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256":{"entryPoint":8650,"id":null,"parameterSlots":2,"returnSlots":1},"copy_array_from_storage_to_memory_string":{"entryPoint":7819,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":7699,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":7785,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_21578":{"entryPoint":7757,"id":null,"parameterSlots":1,"returnSlots":0},"fun_burn":{"entryPoint":9294,"id":5250,"parameterSlots":3,"returnSlots":0},"fun_mint":{"entryPoint":9082,"id":5204,"parameterSlots":3,"returnSlots":0},"fun_requireTransferAllowed":{"entryPoint":8831,"id":5402,"parameterSlots":2,"returnSlots":0},"fun_requireTransferAllowed_21583":{"entryPoint":8676,"id":5402,"parameterSlots":1,"returnSlots":0},"increment_uint256":{"entryPoint":8360,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_enum_TokenType_mapping_address_mapping_contract_IStrategy_mapping_uint256_uint256_of_enum_TokenType":{"entryPoint":8097,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_calldatat_address":{"entryPoint":8413,"id":null,"parameterSlots":1,"returnSlots":1},"require_helper_stringliteral":{"entryPoint":9218,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_06e7":{"entryPoint":8574,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_6330":{"entryPoint":8260,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_ada4":{"entryPoint":8498,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_dda4":{"entryPoint":8935,"id":null,"parameterSlots":1,"returnSlots":0},"storage_array_index_access_struct_Asset_dyn":{"entryPoint":8179,"id":null,"parameterSlots":1,"returnSlots":2},"update_storage_value_offsett_bool_to_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608080604052600436101561001357600080fd5b600090813560e01c908162fdd58e14611ce25750806301e1e3b114611c0e57806301ffc9a714611b9f5780630e89341c14611b415780631dbeeb4e14611acf5780631f0ee4c314611a425780632482ee27146111f75780632b800e3b146111c45780632d4e1d521461117b5780632eb2c2d614610f305780634e1273f414610dd75780635ba4d64e14610ca0578063836a104014610c675780639eea5f6614610bf1578063a123c33e14610bbe578063a22cb46514610b2e578063a75fcb1e14610ad4578063b061db94146105ac578063b8489fb5146104c2578063bd85b03914610498578063ce7f2714146103c6578063cf35bdd014610341578063e985e9c5146102f2578063eafe7a74146102d45763f242432a1461013357600080fd5b346102d15760a03660031901126102d15761014c611d21565b610154611d3c565b906064359060443560843567ffffffffffffffff81116102cd5761017c903690600401611f31565b9092610187816121e4565b6001600160a01b038087169161019e83151561217e565b16948588528760209760018952604082208683528952604082206101c38482546121ca565b905583825260018952604082208683528952604082206101e48482546121d7565b90558388604051888152858c8201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260403392a43b6102215780f35b87946102626040519788968795869463f23a6e6160e01b9c8d875233600488015260248701526044860152606485015260a0608485015260a4840191612111565b03925af19081156102c25761028a938592610295575b50506001600160e01b03191614612132565b388080808080808780f35b6102b49250803d106102bb575b6102ac8183611e69565b8101906120f1565b3880610278565b503d6102a2565b6040513d86823e3d90fd5b8580fd5b80fd5b50346102d157806003193601126102d1576020600554604051908152f35b50346102d15760403660031901126102d15760ff6040602092610313611d21565b61031b611d3c565b6001600160a01b0391821683528286528383209116825284522054604051911615158152f35b50346102d15760203660031901126102d1576004356005548110156103c25761036990611ff3565b50805460ff8116916001600160a01b03600281600184015416920154926040519460058110156103ae5760809650855260081c16602084015260408301526060820152f35b634e487b7160e01b87526021600452602487fd5b5080fd5b50346102d15760203660031901126102d15760043580825260086020526001600160a01b0390816040842054168033036104535781845260076020528060408520928354948516907f16b85f49bf01212961345d3016c9a531894accf62eb7680f2045d79185cc0ec08780a46001600160a01b031980931617905560086020526040822090815416905580f35b60405162461bcd60e51b815260206004820152601c60248201527f4e54463a2063616c6c657220213d2070656e64696e67206f776e6572000000006044820152606490fd5b50346102d15760203660031901126102d15760406020916004358152600283522054604051908152f35b50346102d15760603660031901126102d1576104dc611d21565b6024356104e7611fba565b6005548210156105675733845260036020526001600160a01b03604085209316928385526020526040842082855260205261053181604086209060ff801983541691151516179055565b604051918252151560208201527f6aceb1b079beeabdd8c2f30cd221ca27ec52e9d0aef6bb229cc175cf15dd778b60403392a380f35b60405162461bcd60e51b815260206004820152601d60248201527f41737365744d616e616765723a206173736574206e6f742076616c69640000006044820152606490fd5b50346102d1576105bb36611f5f565b600594858510159485949293909185610ab4576001831480159788610ac8575b8115610aa4575b5015610a5f576105f183611fa1565b976001600160a01b03968786169586845260209a8b5288604085209516948585528b52604084208885528b526040842054998a15610634575b8b8b604051908152f35b909192939495969780999a5015908115610a53575b5015610a0e5781610851578515918280156108aa575b15610865576108515781610848575b811561083d575b50156107f8578054966040519161068b83611e4d565b85835289830191878352604084019186835260608501938a8552680100000000000000008c10156107e45760018c0182556106c58c611ff3565b9690966107d05751918210156103ae579460028c957f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b9560409994958a967f30605d4cd099421ed12ca1ba642a1ea2659f679b5cdd0ccd032586640eeaff439c9a74ffffffffffffffffffffffffffffffffffffffffff1974ffffffffffffffffffffffffffffffffffffffff0060ff89549416928360ff198616178a555160081b16921617178555600185019151166001600160a01b03198254161790555191015561079188611fa1565b8982528c528181208582528c528181208a82528c5283828220558151908c82528c820152a281519081528688820152a43880808080808080808061062a565b634e487b7160e01b88526004889052602488fd5b634e487b7160e01b87526041600452602487fd5b60405162461bcd60e51b815260048101899052601560248201527f5969656c64426f783a204e6f74206120746f6b656e00000000000000000000006044820152606490fd5b90503b151538610675565b8615915061066e565b634e487b7160e01b84526021600452602484fd5b60405162461bcd60e51b8152600481018c9052601b60248201527f5969656c64426f783a205374726174656779206d69736d6174636800000000006044820152606490fd5b5050604051630c3e9ce360e21b81528a81600481895afa908115610a035785916109ca575b50838110156109b657849087148061094c575b801561065f57506040516305f5c3df60e21b81528b816004818a5afa908115610941578691610914575b50891461065f565b90508b81813d831161093a575b61092b8183611e69565b810103126102cd57513861090c565b503d610921565b6040513d88823e3d90fd5b50604051633dad37ed60e21b81528b816004818a5afa90811561094157908b91879161097c575b501688146108e2565b8092508d8092503d83116109af575b6109958183611e69565b810103126102cd57518a811681036102cd578a9038610973565b503d61098b565b634e487b7160e01b85526021600452602485fd5b90508a81813d83116109fc575b6109e18183611e69565b810103126109f85751838110156109f857386108cf565b8480fd5b503d6109d7565b6040513d87823e3d90fd5b60405162461bcd60e51b8152600481018b9052601e60248201527f5969656c64426f783a204e6f20746f6b656e496420666f7220455243323000006044820152606490fd5b92505060009138610649565b60405162461bcd60e51b815260206004820152601f60248201527f41737365744d616e616765723a2063616e6e6f7420616464204e6174697665006044820152606490fd5b9050610ab45760038314386105e2565b634e487b7160e01b81526021600452602490fd5b505060028314816105db565b50346102d15760603660031901126102d15760ff6040602092610af5611d21565b610afd611d3c565b6001600160a01b03918216835260038652838320911682528452818120604435825284522054604051911615158152f35b50346102d15760403660031901126102d157610b48611d21565b60243580151590818103610bba57610b8b90338552846020526001600160a01b0360408620941693848652602052604085209060ff801983541691151516179055565b6040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b8380fd5b50346102d15760203660031901126102d1576001600160a01b036040602092600435815260078452205416604051908152f35b50346102d157610c0036611fc9565b9092916001600160a01b038416835260036020526040832033845260205260408320818452602052610c3960ff6040852054168561227f565b60ff610c4482611ff3565b50541693600585101561085157610c5f610c64949515612402565b61244e565b80f35b50346102d157610c64610c7936611fc9565b91908185526007602052610c9b6001600160a01b0360408720541633146122e7565b61237a565b50346102d15760803660031901126102d157600435610cbd611d3c565b90610cc6611fba565b9060643580151581036109f85781855260076020526001600160a01b0392610cf58460408820541633146122e7565b15610db757909180931690811590811591610daf575b5015610d6a5781845260076020528060408520928354948516907f16b85f49bf01212961345d3016c9a531894accf62eb7680f2045d79185cc0ec08780a46001600160a01b031980931617905560086020526040822090815416905580f35b60405162461bcd60e51b815260206004820152601160248201527f4e54463a207a65726f20616464726573730000000000000000000000000000006044820152606490fd5b905038610d0b565b50835260086020526040832091166001600160a01b031982541617905580f35b50346102d15760403660031901126102d15767ffffffffffffffff600435818111610f2c57610e0a903690600401611d52565b60249283359081116109f85784610e2685923690600401611d52565b929094610e34848614612044565b610e3d85612090565b95610e4b6040519788611e69565b858752610e5786612090565b6020968888019691601f1901368837855b818110610eb35750505050505060405193838594850191818652518092526040850193925b828110610e9c57505050500390f35b835185528695509381019392810192600101610e8d565b6001600160a01b03610ed3610ece8385899e9c9d9b9e6120cd565b6120dd565b168a526001875260408a20610ee98285876120cd565b358b52875260408a20548851821015610f195790610f0f91888260051b8b0101526120a8565b9895979698610e68565b634e487b7160e01b8b526032600452868bfd5b8280fd5b50346102d15760031960a0368201126103c257610f4b611d21565b610f53611d3c565b67ffffffffffffffff6044358181116102cd57610f74903690600401611d52565b909160643581811161117757610f8e903690600401611d52565b9690916084359081116111735791610fad899796933690600401611f31565b919093610fbb8a8714612044565b610fc4886121e4565b886001600160a01b03988b888a8c86169c8d95610fe287151561217e565b94169d8e935b83861061110857939450507f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb9161103f61102f6040519384936040855260408501916122aa565b828103602084015233958a6122aa565b0390a43b61104b578980f35b604051988996879663bc197c8160e01b9a8b89523360048a015260248901526044880160a0905260a4880190611080926122aa565b9084878303016064880152611094926122aa565b918483030160848501526110a792612111565b0381865a94602095f180156110fd576110d29284916110df575b506001600160e01b03191614612132565b3880808080808080808980f35b6110f7915060203d81116102bb576102ac8183611e69565b386110c1565b6040513d85823e3d90fd5b611167966111288761112081611160986040986120cd565b35938c6120cd565b359583526001602091818352858520848652835285852061114a8982546121ca565b90558452815283832091835252209182546121d7565b90556120a8565b88908a888a8f8f610fe8565b8880fd5b8780fd5b50346102d157604060209161119a61119236611f5f565b939092611fa1565b6001600160a01b038092168552865284842091168352845282822090825283522054604051908152f35b50346102d15760203660031901126102d1576001600160a01b036040602092600435815260088452205416604051908152f35b50346102d15760803660031901126102d15760043567ffffffffffffffff81116103c257611229903690600401611f31565b909160243567ffffffffffffffff81116103c25761124b903690600401611f31565b93906044359060ff82168203610bba5760643567ffffffffffffffff81116109f85761127b903690600401611f31565b9690936005549463ffffffff86116119fd5786878052600460205260408820602052604088206020526040882063ffffffff881689526020526040882054156117b8575b506112fe90604051996112d18b611e4d565b6112dc368b86612333565b8b526112e9368688612333565b60208c015260ff871660408c01523691612333565b606089015263ffffffff8516865260066020526040862097805180519067ffffffffffffffff82116116e85781906113368c54611e13565b601f811161176b575b50602090601f8311600114611707578a926116fc575b50508160011b916000199060031b1c19161789555b602081015180519067ffffffffffffffff82116116e85761138e60018c0154611e13565b601f81116116a4575b50602090601f83116001146116375760609392918a918361162c575b50508160011b916000199060031b1c19161760018b01555b60028a0160ff60408301511660ff19825416179055015197885167ffffffffffffffff8111611618576114016003830154611e13565b601f81116115d0575b506020998a90601f83116001146115355760ff946114ae946003857f0b0bcdebd2813328a89a9ed5971e5863201ed78fc4e0e2b271cceddb9ce905109a968e9f9a9663ffffffff9f966114a1979261152a575b50508160011b9160001990841b1c1916179101555b8a8a168c5260078d5260408c20336001600160a01b031982541617905560405196608088526080880191612111565b918583038c870152612111565b9316604082015284841660608201528033930390a28280604051848416815281878201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260403392a46040519233908383167f16b85f49bf01212961345d3016c9a531894accf62eb7680f2045d79185cc0ec08280a4168152f35b01519050388061145d565b600384018a528b8a209190601f1984168b5b8181106115b9575094600360018663ffffffff9e9f9a966114a19660ff9b967f0b0bcdebd2813328a89a9ed5971e5863201ed78fc4e0e2b271cceddb9ce905109e9a6114ae9c106115a1575b505050811b01910155611472565b015160001983861b60f8161c19169055388080611593565b92938e600181928786015181550195019301611547565b60038301895260208920601f830160051c8101916020841061160e575b601f0160051c01905b818110611603575061140a565b8981556001016115f6565b90915081906115ed565b634e487b7160e01b88526041600452602488fd5b0151905038806113b3565b60018c018a5260208a209190601f1984168b5b81811061168c5750916001939185606097969410611673575b505050811b0160018b01556113cb565b015160001960f88460031b161c19169055388080611663565b9293602060018192878601518155019501930161164a565b60018c018a5260208a20601f840160051c8101602085106116e1575b601f830160051c820181106116d6575050611397565b8b81556001016116c0565b50806116c0565b634e487b7160e01b89526041600452602489fd5b015190503880611355565b8c8b5260208b209250601f1984168b5b818110611753575090846001959493921061173a575b505050811b01895561136a565b015160001960f88460031b161c1916905538808061172d565b92936020600181928786015181550195019301611717565b9091508b8a5260208a20601f840160051c8101602085106117b1575b90849392915b601f830160051c820181106117a357505061133f565b8c815585945060010161178d565b5080611787565b63ffffffff87989298161580156119f3575b156119ae5780610ab4575095604051906117e382611e4d565b60008252600060208301526000604083015263ffffffff8716606083015268010000000000000000871015611998576001870160055561182287611ff3565b61198257825192600584101561196c57815460208083015174ffffffffffffffffffffffffffffffffffffffffff1990921660ff9096169590951760089190911b74ffffffffffffffffffffffffffffffffffffffff001617825560408082015160018401805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055606091909101516002929092019190915563ffffffff881660009081527f3114e88ab8ada1747a04a5f36fe137cd7e638942f4a034da8660043d3e15eeaf84528181208990558151848152938401526112fe9288917f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b91a2604051600081528760208201526000807f30605d4cd099421ed12ca1ba642a1ea2659f679b5cdd0ccd032586640eeaff43604063ffffffff8c1694a4906112bf565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601e60248201527f5969656c64426f783a204e6f20746f6b656e496420666f7220455243323000006044820152606490fd5b50508060016117ca565b60405162461bcd60e51b815260206004820152601b60248201527f426f72696e674d6174683a2075696e743332204f766572666c6f7700000000006044820152606490fd5b50346102d15760203660031901126102d1576040611aaa916004358152600660205220611acb611a7182611e8b565b91611a7e60018201611e8b565b611ab8611a95600360ff6002860154169401611e8b565b91604051968796608088526080880190611dd3565b908682036020880152611dd3565b9160408501528382036060850152611dd3565b0390f35b50346102d157611ade36611d83565b909293918286526007602052611b026001600160a01b0360408820541633146122e7565b855b818110611b0f578680f35b80611b37611b24610ece611b3c94868b6120cd565b86611b3084888b6120cd565b359161237a565b6120a8565b611b04565b50346102d15760203660031901126102d1576040516020810181811067ffffffffffffffff821117611b8b5791611acb926040528152604051918291602083526020830190611dd3565b634e487b7160e01b83526041600452602483fd5b50346102d15760203660031901126102d15760043563ffffffff60e01b81168091036103c2576020906301ffc9a760e01b8114908115611bfd575b8115611bec575b506040519015158152f35b6303a24d0760e21b14905082611be1565b636cdb3d1360e11b81149150611bda565b50346102d157611c1d36611d83565b90929391611c2a83611ff3565b509460ff809654166005811015611cce57611c459015612402565b865b828110611c52578780f35b80611ca5611c67610ece611cc99487876120cd565b6001600160a01b03611c7d610ece8589896120cd565b168b5260206003815260408c20338d52815260408c2090898d52528960408c2054169061227f565b611b37611cb6610ece8387876120cd565b87611cc284898c6120cd565b359161244e565b611c47565b634e487b7160e01b88526021600452602488fd5b9050346103c25760403660031901126103c25760406020926001600160a01b03611d0a611d21565b168152600184528181206024358252845220548152f35b600435906001600160a01b0382168203611d3757565b600080fd5b602435906001600160a01b0382168203611d3757565b9181601f84011215611d375782359167ffffffffffffffff8311611d37576020808501948460051b010111611d3757565b906060600319830112611d37576004359167ffffffffffffffff91602435838111611d375782611db591600401611d52565b93909392604435918211611d3757611dcf91600401611d52565b9091565b919082519283825260005b848110611dff575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611dde565b90600182811c92168015611e43575b6020831014611e2d57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611e22565b6080810190811067ffffffffffffffff82111761199857604052565b90601f8019910116810190811067ffffffffffffffff82111761199857604052565b9060405191826000825492611e9f84611e13565b908184526001948581169081600014611f0e5750600114611ecb575b5050611ec992500383611e69565b565b9093915060005260209081600020936000915b818310611ef6575050611ec993508201013880611ebb565b85548884018501529485019487945091830191611ede565b915050611ec994506020925060ff191682840152151560051b8201013880611ebb565b9181601f84011215611d375782359167ffffffffffffffff8311611d375760208381860195010111611d3757565b6080906003190112611d37576004356005811015611d3757906001600160a01b03906024358281168103611d3757916044359081168103611d37579060643590565b600581101561196c576000526004602052604060002090565b604435908115158203611d3757565b6060906003190112611d3757600435906024356001600160a01b0381168103611d37579060443590565b60055481101561202e576003906005600052027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00190600090565b634e487b7160e01b600052603260045260246000fd5b1561204b57565b60405162461bcd60e51b815260206004820152601860248201527f455243313135353a204c656e677468206d69736d6174636800000000000000006044820152606490fd5b67ffffffffffffffff81116119985760051b60200190565b60001981146120b75760010190565b634e487b7160e01b600052601160045260246000fd5b919081101561202e5760051b0190565b356001600160a01b0381168103611d375790565b90816020910312611d3757516001600160e01b031981168103611d375790565b908060209392818452848401376000828201840152601f01601f1916010190565b1561213957565b60405162461bcd60e51b815260206004820152601260248201527f57726f6e672072657475726e2076616c756500000000000000000000000000006044820152606490fd5b1561218557565b60405162461bcd60e51b815260206004820152600c60248201527f4e6f2030206164647265737300000000000000000000000000000000000000006044820152606490fd5b919082039182116120b757565b919082018092116120b757565b6001600160a01b0316338114908115612276575b811561224c575b501561220757565b60405162461bcd60e51b815260206004820152601460248201527f5472616e73666572206e6f7420616c6c6f7765640000000000000000000000006044820152606490fd5b90506000526000602052604060002033600052602052600160ff60406000205416151514386121ff565b600091506121f8565b6001600160a01b03163381149182156122a2575b50811561224c57501561220757565b915038612293565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311611d375760209260051b809284830137010190565b156122ee57565b60405162461bcd60e51b815260206004820152601c60248201527f4e54463a2063616c6c6572206973206e6f7420746865206f776e6572000000006044820152606490fd5b92919267ffffffffffffffff8211611998576040519161235d601f8201601f191660200184611e69565b829481845281830111611d37578281602093846000960137010152565b6001600160a01b0316919061239083151561217e565b600091838352600160205260408320828452602052604083206123b48282546121d7565b90558183526002602052604083206123cd8282546121d7565b905560405191825260208201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260403392a4565b1561240957565b60405162461bcd60e51b815260206004820152600f60248201527f4e54463a204e6f74206e617469766500000000000000000000000000000000006044820152606490fd5b6001600160a01b03169061246382151561217e565b600092828452600160205260408420828552602052604084206124878282546121ca565b90558184526002602052604084206123cd8282546121ca56fea264697066735822122083dfc39d2c150fef84d7952d509befa2e90581bd2e6dfcbb54302f46f301372c64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH3 0xFDD58E EQ PUSH2 0x1CE2 JUMPI POP DUP1 PUSH4 0x1E1E3B1 EQ PUSH2 0x1C0E JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1B9F JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x1B41 JUMPI DUP1 PUSH4 0x1DBEEB4E EQ PUSH2 0x1ACF JUMPI DUP1 PUSH4 0x1F0EE4C3 EQ PUSH2 0x1A42 JUMPI DUP1 PUSH4 0x2482EE27 EQ PUSH2 0x11F7 JUMPI DUP1 PUSH4 0x2B800E3B EQ PUSH2 0x11C4 JUMPI DUP1 PUSH4 0x2D4E1D52 EQ PUSH2 0x117B JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0xF30 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0xDD7 JUMPI DUP1 PUSH4 0x5BA4D64E EQ PUSH2 0xCA0 JUMPI DUP1 PUSH4 0x836A1040 EQ PUSH2 0xC67 JUMPI DUP1 PUSH4 0x9EEA5F66 EQ PUSH2 0xBF1 JUMPI DUP1 PUSH4 0xA123C33E EQ PUSH2 0xBBE JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0xB2E JUMPI DUP1 PUSH4 0xA75FCB1E EQ PUSH2 0xAD4 JUMPI DUP1 PUSH4 0xB061DB94 EQ PUSH2 0x5AC JUMPI DUP1 PUSH4 0xB8489FB5 EQ PUSH2 0x4C2 JUMPI DUP1 PUSH4 0xBD85B039 EQ PUSH2 0x498 JUMPI DUP1 PUSH4 0xCE7F2714 EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0xCF35BDD0 EQ PUSH2 0x341 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0xEAFE7A74 EQ PUSH2 0x2D4 JUMPI PUSH4 0xF242432A EQ PUSH2 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH2 0x14C PUSH2 0x1D21 JUMP JUMPDEST PUSH2 0x154 PUSH2 0x1D3C JUMP JUMPDEST SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD PUSH1 0x84 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2CD JUMPI PUSH2 0x17C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1F31 JUMP JUMPDEST SWAP1 SWAP3 PUSH2 0x187 DUP2 PUSH2 0x21E4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND SWAP2 PUSH2 0x19E DUP4 ISZERO ISZERO PUSH2 0x217E JUMP JUMPDEST AND SWAP5 DUP6 DUP9 MSTORE DUP8 PUSH1 0x20 SWAP8 PUSH1 0x1 DUP10 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP7 DUP4 MSTORE DUP10 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH2 0x1C3 DUP5 DUP3 SLOAD PUSH2 0x21CA JUMP JUMPDEST SWAP1 SSTORE DUP4 DUP3 MSTORE PUSH1 0x1 DUP10 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP7 DUP4 MSTORE DUP10 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH2 0x1E4 DUP5 DUP3 SLOAD PUSH2 0x21D7 JUMP JUMPDEST SWAP1 SSTORE DUP4 DUP9 PUSH1 0x40 MLOAD DUP9 DUP2 MSTORE DUP6 DUP13 DUP3 ADD MSTORE PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 CALLER SWAP3 LOG4 EXTCODESIZE PUSH2 0x221 JUMPI DUP1 RETURN JUMPDEST DUP8 SWAP5 PUSH2 0x262 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP13 DUP14 DUP8 MSTORE CALLER PUSH1 0x4 DUP9 ADD MSTORE PUSH1 0x24 DUP8 ADD MSTORE PUSH1 0x44 DUP7 ADD MSTORE PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP6 ADD MSTORE PUSH1 0xA4 DUP5 ADD SWAP2 PUSH2 0x2111 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x2C2 JUMPI PUSH2 0x28A SWAP4 DUP6 SWAP3 PUSH2 0x295 JUMPI JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0x2132 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP8 DUP1 RETURN JUMPDEST PUSH2 0x2B4 SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x2BB JUMPI JUMPDEST PUSH2 0x2AC DUP2 DUP4 PUSH2 0x1E69 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x20F1 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x278 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2A2 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP6 DUP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x20 PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0xFF PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH2 0x313 PUSH2 0x1D21 JUMP JUMPDEST PUSH2 0x31B PUSH2 0x1D3C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE DUP3 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP2 AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x5 SLOAD DUP2 LT ISZERO PUSH2 0x3C2 JUMPI PUSH2 0x369 SWAP1 PUSH2 0x1FF3 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0xFF DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x2 DUP2 PUSH1 0x1 DUP5 ADD SLOAD AND SWAP3 ADD SLOAD SWAP3 PUSH1 0x40 MLOAD SWAP5 PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x3AE JUMPI PUSH1 0x80 SWAP7 POP DUP6 MSTORE PUSH1 0x8 SHR AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x4 CALLDATALOAD DUP1 DUP3 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH1 0x40 DUP5 KECCAK256 SLOAD AND DUP1 CALLER SUB PUSH2 0x453 JUMPI DUP2 DUP5 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 DUP6 KECCAK256 SWAP3 DUP4 SLOAD SWAP5 DUP6 AND SWAP1 PUSH32 0x16B85F49BF01212961345D3016C9A531894ACCF62EB7680F2045D79185CC0EC0 DUP8 DUP1 LOG4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 SWAP4 AND OR SWAP1 SSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP2 SLOAD AND SWAP1 SSTORE DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E54463A2063616C6C657220213D2070656E64696E67206F776E657200000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x40 PUSH1 0x20 SWAP2 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x2 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH2 0x4DC PUSH2 0x1D21 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x4E7 PUSH2 0x1FBA JUMP JUMPDEST PUSH1 0x5 SLOAD DUP3 LT ISZERO PUSH2 0x567 JUMPI CALLER DUP5 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP6 KECCAK256 SWAP4 AND SWAP3 DUP4 DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP3 DUP6 MSTORE PUSH1 0x20 MSTORE PUSH2 0x531 DUP2 PUSH1 0x40 DUP7 KECCAK256 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6ACEB1B079BEEABDD8C2F30CD221CA27EC52E9D0AEF6BB229CC175CF15DD778B PUSH1 0x40 CALLER SWAP3 LOG3 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x41737365744D616E616765723A206173736574206E6F742076616C6964000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH2 0x5BB CALLDATASIZE PUSH2 0x1F5F JUMP JUMPDEST PUSH1 0x5 SWAP5 DUP6 DUP6 LT ISZERO SWAP5 DUP6 SWAP5 SWAP3 SWAP4 SWAP1 SWAP2 DUP6 PUSH2 0xAB4 JUMPI PUSH1 0x1 DUP4 EQ DUP1 ISZERO SWAP8 DUP9 PUSH2 0xAC8 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0xAA4 JUMPI JUMPDEST POP ISZERO PUSH2 0xA5F JUMPI PUSH2 0x5F1 DUP4 PUSH2 0x1FA1 JUMP JUMPDEST SWAP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 DUP7 AND SWAP6 DUP7 DUP5 MSTORE PUSH1 0x20 SWAP11 DUP12 MSTORE DUP9 PUSH1 0x40 DUP6 KECCAK256 SWAP6 AND SWAP5 DUP6 DUP6 MSTORE DUP12 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP9 DUP6 MSTORE DUP12 MSTORE PUSH1 0x40 DUP5 KECCAK256 SLOAD SWAP10 DUP11 ISZERO PUSH2 0x634 JUMPI JUMPDEST DUP12 DUP12 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 SWAP8 DUP1 SWAP10 SWAP11 POP ISZERO SWAP1 DUP2 ISZERO PUSH2 0xA53 JUMPI JUMPDEST POP ISZERO PUSH2 0xA0E JUMPI DUP2 PUSH2 0x851 JUMPI DUP6 ISZERO SWAP2 DUP3 DUP1 ISZERO PUSH2 0x8AA JUMPI JUMPDEST ISZERO PUSH2 0x865 JUMPI PUSH2 0x851 JUMPI DUP2 PUSH2 0x848 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x83D JUMPI JUMPDEST POP ISZERO PUSH2 0x7F8 JUMPI DUP1 SLOAD SWAP7 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x68B DUP4 PUSH2 0x1E4D JUMP JUMPDEST DUP6 DUP4 MSTORE DUP10 DUP4 ADD SWAP2 DUP8 DUP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 DUP7 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP4 DUP11 DUP6 MSTORE PUSH9 0x10000000000000000 DUP13 LT ISZERO PUSH2 0x7E4 JUMPI PUSH1 0x1 DUP13 ADD DUP3 SSTORE PUSH2 0x6C5 DUP13 PUSH2 0x1FF3 JUMP JUMPDEST SWAP7 SWAP1 SWAP7 PUSH2 0x7D0 JUMPI MLOAD SWAP2 DUP3 LT ISZERO PUSH2 0x3AE JUMPI SWAP5 PUSH1 0x2 DUP13 SWAP6 PUSH32 0x6BB7FF708619BA0610CBA295A58592E0451DEE2622938C8755667688DAF3529B SWAP6 PUSH1 0x40 SWAP10 SWAP5 SWAP6 DUP11 SWAP7 PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 SWAP13 SWAP11 PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0xFF DUP10 SLOAD SWAP5 AND SWAP3 DUP4 PUSH1 0xFF NOT DUP7 AND OR DUP11 SSTORE MLOAD PUSH1 0x8 SHL AND SWAP3 AND OR OR DUP6 SSTORE PUSH1 0x1 DUP6 ADD SWAP2 MLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE MLOAD SWAP2 ADD SSTORE PUSH2 0x791 DUP9 PUSH2 0x1FA1 JUMP JUMPDEST DUP10 DUP3 MSTORE DUP13 MSTORE DUP2 DUP2 KECCAK256 DUP6 DUP3 MSTORE DUP13 MSTORE DUP2 DUP2 KECCAK256 DUP11 DUP3 MSTORE DUP13 MSTORE DUP4 DUP3 DUP3 KECCAK256 SSTORE DUP2 MLOAD SWAP1 DUP13 DUP3 MSTORE DUP13 DUP3 ADD MSTORE LOG2 DUP2 MLOAD SWAP1 DUP2 MSTORE DUP7 DUP9 DUP3 ADD MSTORE LOG4 CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x62A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x4 DUP9 SWAP1 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A204E6F74206120746F6B656E0000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP EXTCODESIZE ISZERO ISZERO CODESIZE PUSH2 0x675 JUMP JUMPDEST DUP7 ISZERO SWAP2 POP PUSH2 0x66E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP13 SWAP1 MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A205374726174656779206D69736D617463680000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xC3E9CE3 PUSH1 0xE2 SHL DUP2 MSTORE DUP11 DUP2 PUSH1 0x4 DUP2 DUP10 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA03 JUMPI DUP6 SWAP2 PUSH2 0x9CA JUMPI JUMPDEST POP DUP4 DUP2 LT ISZERO PUSH2 0x9B6 JUMPI DUP5 SWAP1 DUP8 EQ DUP1 PUSH2 0x94C JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x65F JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x5F5C3DF PUSH1 0xE2 SHL DUP2 MSTORE DUP12 DUP2 PUSH1 0x4 DUP2 DUP11 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x941 JUMPI DUP7 SWAP2 PUSH2 0x914 JUMPI JUMPDEST POP DUP10 EQ PUSH2 0x65F JUMP JUMPDEST SWAP1 POP DUP12 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x93A JUMPI JUMPDEST PUSH2 0x92B DUP2 DUP4 PUSH2 0x1E69 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x2CD JUMPI MLOAD CODESIZE PUSH2 0x90C JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x921 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x3DAD37ED PUSH1 0xE2 SHL DUP2 MSTORE DUP12 DUP2 PUSH1 0x4 DUP2 DUP11 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x941 JUMPI SWAP1 DUP12 SWAP2 DUP8 SWAP2 PUSH2 0x97C JUMPI JUMPDEST POP AND DUP9 EQ PUSH2 0x8E2 JUMP JUMPDEST DUP1 SWAP3 POP DUP14 DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0x9AF JUMPI JUMPDEST PUSH2 0x995 DUP2 DUP4 PUSH2 0x1E69 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x2CD JUMPI MLOAD DUP11 DUP2 AND DUP2 SUB PUSH2 0x2CD JUMPI DUP11 SWAP1 CODESIZE PUSH2 0x973 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x98B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST SWAP1 POP DUP11 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x9FC JUMPI JUMPDEST PUSH2 0x9E1 DUP2 DUP4 PUSH2 0x1E69 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9F8 JUMPI MLOAD DUP4 DUP2 LT ISZERO PUSH2 0x9F8 JUMPI CODESIZE PUSH2 0x8CF JUMP JUMPDEST DUP5 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x9D7 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A204E6F20746F6B656E496420666F722045524332300000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP3 POP POP PUSH1 0x0 SWAP2 CODESIZE PUSH2 0x649 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x41737365744D616E616765723A2063616E6E6F7420616464204E617469766500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH2 0xAB4 JUMPI PUSH1 0x3 DUP4 EQ CODESIZE PUSH2 0x5E2 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP POP PUSH1 0x2 DUP4 EQ DUP2 PUSH2 0x5DB JUMP JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0xFF PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH2 0xAF5 PUSH2 0x1D21 JUMP JUMPDEST PUSH2 0xAFD PUSH2 0x1D3C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x3 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x44 CALLDATALOAD DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP2 AND ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH2 0xB48 PUSH2 0x1D21 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP1 ISZERO ISZERO SWAP1 DUP2 DUP2 SUB PUSH2 0xBBA JUMPI PUSH2 0xB8B SWAP1 CALLER DUP6 MSTORE DUP5 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP7 KECCAK256 SWAP5 AND SWAP4 DUP5 DUP7 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP6 KECCAK256 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 CALLER SWAP3 LOG3 DUP1 RETURN JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x7 DUP5 MSTORE KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH2 0xC00 CALLDATASIZE PUSH2 0x1FC9 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP4 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP2 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH2 0xC39 PUSH1 0xFF PUSH1 0x40 DUP6 KECCAK256 SLOAD AND DUP6 PUSH2 0x227F JUMP JUMPDEST PUSH1 0xFF PUSH2 0xC44 DUP3 PUSH2 0x1FF3 JUMP JUMPDEST POP SLOAD AND SWAP4 PUSH1 0x5 DUP6 LT ISZERO PUSH2 0x851 JUMPI PUSH2 0xC5F PUSH2 0xC64 SWAP5 SWAP6 ISZERO PUSH2 0x2402 JUMP JUMPDEST PUSH2 0x244E JUMP JUMPDEST DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH2 0xC64 PUSH2 0xC79 CALLDATASIZE PUSH2 0x1FC9 JUMP JUMPDEST SWAP2 SWAP1 DUP2 DUP6 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH2 0xC9B PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP8 KECCAK256 SLOAD AND CALLER EQ PUSH2 0x22E7 JUMP JUMPDEST PUSH2 0x237A JUMP JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xCBD PUSH2 0x1D3C JUMP JUMPDEST SWAP1 PUSH2 0xCC6 PUSH2 0x1FBA JUMP JUMPDEST SWAP1 PUSH1 0x64 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x9F8 JUMPI DUP2 DUP6 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 PUSH2 0xCF5 DUP5 PUSH1 0x40 DUP9 KECCAK256 SLOAD AND CALLER EQ PUSH2 0x22E7 JUMP JUMPDEST ISZERO PUSH2 0xDB7 JUMPI SWAP1 SWAP2 DUP1 SWAP4 AND SWAP1 DUP2 ISZERO SWAP1 DUP2 ISZERO SWAP2 PUSH2 0xDAF JUMPI JUMPDEST POP ISZERO PUSH2 0xD6A JUMPI DUP2 DUP5 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 DUP6 KECCAK256 SWAP3 DUP4 SLOAD SWAP5 DUP6 AND SWAP1 PUSH32 0x16B85F49BF01212961345D3016C9A531894ACCF62EB7680F2045D79185CC0EC0 DUP8 DUP1 LOG4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 SWAP4 AND OR SWAP1 SSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP2 SLOAD AND SWAP1 SSTORE DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E54463A207A65726F2061646472657373000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP CODESIZE PUSH2 0xD0B JUMP JUMPDEST POP DUP4 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0xF2C JUMPI PUSH2 0xE0A SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D52 JUMP JUMPDEST PUSH1 0x24 SWAP3 DUP4 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x9F8 JUMPI DUP5 PUSH2 0xE26 DUP6 SWAP3 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D52 JUMP JUMPDEST SWAP3 SWAP1 SWAP5 PUSH2 0xE34 DUP5 DUP7 EQ PUSH2 0x2044 JUMP JUMPDEST PUSH2 0xE3D DUP6 PUSH2 0x2090 JUMP JUMPDEST SWAP6 PUSH2 0xE4B PUSH1 0x40 MLOAD SWAP8 DUP9 PUSH2 0x1E69 JUMP JUMPDEST DUP6 DUP8 MSTORE PUSH2 0xE57 DUP7 PUSH2 0x2090 JUMP JUMPDEST PUSH1 0x20 SWAP7 DUP9 DUP9 ADD SWAP7 SWAP2 PUSH1 0x1F NOT ADD CALLDATASIZE DUP9 CALLDATACOPY DUP6 JUMPDEST DUP2 DUP2 LT PUSH2 0xEB3 JUMPI POP POP POP POP POP POP PUSH1 0x40 MLOAD SWAP4 DUP4 DUP6 SWAP5 DUP6 ADD SWAP2 DUP2 DUP7 MSTORE MLOAD DUP1 SWAP3 MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0xE9C JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xED3 PUSH2 0xECE DUP4 DUP6 DUP10 SWAP15 SWAP13 SWAP14 SWAP12 SWAP15 PUSH2 0x20CD JUMP JUMPDEST PUSH2 0x20DD JUMP JUMPDEST AND DUP11 MSTORE PUSH1 0x1 DUP8 MSTORE PUSH1 0x40 DUP11 KECCAK256 PUSH2 0xEE9 DUP3 DUP6 DUP8 PUSH2 0x20CD JUMP JUMPDEST CALLDATALOAD DUP12 MSTORE DUP8 MSTORE PUSH1 0x40 DUP11 KECCAK256 SLOAD DUP9 MLOAD DUP3 LT ISZERO PUSH2 0xF19 JUMPI SWAP1 PUSH2 0xF0F SWAP2 DUP9 DUP3 PUSH1 0x5 SHL DUP12 ADD ADD MSTORE PUSH2 0x20A8 JUMP JUMPDEST SWAP9 SWAP6 SWAP8 SWAP7 SWAP9 PUSH2 0xE68 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE DUP7 DUP12 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x3 NOT PUSH1 0xA0 CALLDATASIZE DUP3 ADD SLT PUSH2 0x3C2 JUMPI PUSH2 0xF4B PUSH2 0x1D21 JUMP JUMPDEST PUSH2 0xF53 PUSH2 0x1D3C JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x44 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x2CD JUMPI PUSH2 0xF74 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D52 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x64 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x1177 JUMPI PUSH2 0xF8E SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1D52 JUMP JUMPDEST SWAP7 SWAP1 SWAP2 PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x1173 JUMPI SWAP2 PUSH2 0xFAD DUP10 SWAP8 SWAP7 SWAP4 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1F31 JUMP JUMPDEST SWAP2 SWAP1 SWAP4 PUSH2 0xFBB DUP11 DUP8 EQ PUSH2 0x2044 JUMP JUMPDEST PUSH2 0xFC4 DUP9 PUSH2 0x21E4 JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 DUP12 DUP9 DUP11 DUP13 DUP7 AND SWAP13 DUP14 SWAP6 PUSH2 0xFE2 DUP8 ISZERO ISZERO PUSH2 0x217E JUMP JUMPDEST SWAP5 AND SWAP14 DUP15 SWAP4 JUMPDEST DUP4 DUP7 LT PUSH2 0x1108 JUMPI SWAP4 SWAP5 POP POP PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB SWAP2 PUSH2 0x103F PUSH2 0x102F PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0x40 DUP6 MSTORE PUSH1 0x40 DUP6 ADD SWAP2 PUSH2 0x22AA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE CALLER SWAP6 DUP11 PUSH2 0x22AA JUMP JUMPDEST SUB SWAP1 LOG4 EXTCODESIZE PUSH2 0x104B JUMPI DUP10 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP7 DUP8 SWAP7 PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP11 DUP12 DUP10 MSTORE CALLER PUSH1 0x4 DUP11 ADD MSTORE PUSH1 0x24 DUP10 ADD MSTORE PUSH1 0x44 DUP9 ADD PUSH1 0xA0 SWAP1 MSTORE PUSH1 0xA4 DUP9 ADD SWAP1 PUSH2 0x1080 SWAP3 PUSH2 0x22AA JUMP JUMPDEST SWAP1 DUP5 DUP8 DUP4 SUB ADD PUSH1 0x64 DUP9 ADD MSTORE PUSH2 0x1094 SWAP3 PUSH2 0x22AA JUMP JUMPDEST SWAP2 DUP5 DUP4 SUB ADD PUSH1 0x84 DUP6 ADD MSTORE PUSH2 0x10A7 SWAP3 PUSH2 0x2111 JUMP JUMPDEST SUB DUP2 DUP7 GAS SWAP5 PUSH1 0x20 SWAP6 CALL DUP1 ISZERO PUSH2 0x10FD JUMPI PUSH2 0x10D2 SWAP3 DUP5 SWAP2 PUSH2 0x10DF JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND EQ PUSH2 0x2132 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP10 DUP1 RETURN JUMPDEST PUSH2 0x10F7 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x2BB JUMPI PUSH2 0x2AC DUP2 DUP4 PUSH2 0x1E69 JUMP JUMPDEST CODESIZE PUSH2 0x10C1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x1167 SWAP7 PUSH2 0x1128 DUP8 PUSH2 0x1120 DUP2 PUSH2 0x1160 SWAP9 PUSH1 0x40 SWAP9 PUSH2 0x20CD JUMP JUMPDEST CALLDATALOAD SWAP4 DUP13 PUSH2 0x20CD JUMP JUMPDEST CALLDATALOAD SWAP6 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP2 DUP2 DUP4 MSTORE DUP6 DUP6 KECCAK256 DUP5 DUP7 MSTORE DUP4 MSTORE DUP6 DUP6 KECCAK256 PUSH2 0x114A DUP10 DUP3 SLOAD PUSH2 0x21CA JUMP JUMPDEST SWAP1 SSTORE DUP5 MSTORE DUP2 MSTORE DUP4 DUP4 KECCAK256 SWAP2 DUP4 MSTORE MSTORE KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0x21D7 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x20A8 JUMP JUMPDEST DUP9 SWAP1 DUP11 DUP9 DUP11 DUP16 DUP16 PUSH2 0xFE8 JUMP JUMPDEST DUP9 DUP1 REVERT JUMPDEST DUP8 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x40 PUSH1 0x20 SWAP2 PUSH2 0x119A PUSH2 0x1192 CALLDATASIZE PUSH2 0x1F5F JUMP JUMPDEST SWAP4 SWAP1 SWAP3 PUSH2 0x1FA1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND DUP6 MSTORE DUP7 MSTORE DUP5 DUP5 KECCAK256 SWAP2 AND DUP4 MSTORE DUP5 MSTORE DUP3 DUP3 KECCAK256 SWAP1 DUP3 MSTORE DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x8 DUP5 MSTORE KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3C2 JUMPI PUSH2 0x1229 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1F31 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3C2 JUMPI PUSH2 0x124B SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1F31 JUMP JUMPDEST SWAP4 SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0xFF DUP3 AND DUP3 SUB PUSH2 0xBBA JUMPI PUSH1 0x64 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x9F8 JUMPI PUSH2 0x127B SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x1F31 JUMP JUMPDEST SWAP7 SWAP1 SWAP4 PUSH1 0x5 SLOAD SWAP5 PUSH4 0xFFFFFFFF DUP7 GT PUSH2 0x19FD JUMPI DUP7 DUP8 DUP1 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP9 KECCAK256 PUSH1 0x20 MSTORE PUSH1 0x40 DUP9 KECCAK256 PUSH1 0x20 MSTORE PUSH1 0x40 DUP9 KECCAK256 PUSH4 0xFFFFFFFF DUP9 AND DUP10 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP9 KECCAK256 SLOAD ISZERO PUSH2 0x17B8 JUMPI JUMPDEST POP PUSH2 0x12FE SWAP1 PUSH1 0x40 MLOAD SWAP10 PUSH2 0x12D1 DUP12 PUSH2 0x1E4D JUMP JUMPDEST PUSH2 0x12DC CALLDATASIZE DUP12 DUP7 PUSH2 0x2333 JUMP JUMPDEST DUP12 MSTORE PUSH2 0x12E9 CALLDATASIZE DUP7 DUP9 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x20 DUP13 ADD MSTORE PUSH1 0xFF DUP8 AND PUSH1 0x40 DUP13 ADD MSTORE CALLDATASIZE SWAP2 PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MSTORE PUSH4 0xFFFFFFFF DUP6 AND DUP7 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP7 KECCAK256 SWAP8 DUP1 MLOAD DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x16E8 JUMPI DUP2 SWAP1 PUSH2 0x1336 DUP13 SLOAD PUSH2 0x1E13 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x176B JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1707 JUMPI DUP11 SWAP3 PUSH2 0x16FC JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR DUP10 SSTORE JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x16E8 JUMPI PUSH2 0x138E PUSH1 0x1 DUP13 ADD SLOAD PUSH2 0x1E13 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x16A4 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1637 JUMPI PUSH1 0x60 SWAP4 SWAP3 SWAP2 DUP11 SWAP2 DUP4 PUSH2 0x162C JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1 DUP12 ADD SSTORE JUMPDEST PUSH1 0x2 DUP11 ADD PUSH1 0xFF PUSH1 0x40 DUP4 ADD MLOAD AND PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE ADD MLOAD SWAP8 DUP9 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1618 JUMPI PUSH2 0x1401 PUSH1 0x3 DUP4 ADD SLOAD PUSH2 0x1E13 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x15D0 JUMPI JUMPDEST POP PUSH1 0x20 SWAP10 DUP11 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1535 JUMPI PUSH1 0xFF SWAP5 PUSH2 0x14AE SWAP5 PUSH1 0x3 DUP6 PUSH32 0xB0BCDEBD2813328A89A9ED5971E5863201ED78FC4E0E2B271CCEDDB9CE90510 SWAP11 SWAP7 DUP15 SWAP16 SWAP11 SWAP7 PUSH4 0xFFFFFFFF SWAP16 SWAP7 PUSH2 0x14A1 SWAP8 SWAP3 PUSH2 0x152A JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 DUP5 SHL SHR NOT AND OR SWAP2 ADD SSTORE JUMPDEST DUP11 DUP11 AND DUP13 MSTORE PUSH1 0x7 DUP14 MSTORE PUSH1 0x40 DUP13 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP7 PUSH1 0x80 DUP9 MSTORE PUSH1 0x80 DUP9 ADD SWAP2 PUSH2 0x2111 JUMP JUMPDEST SWAP2 DUP6 DUP4 SUB DUP13 DUP8 ADD MSTORE PUSH2 0x2111 JUMP JUMPDEST SWAP4 AND PUSH1 0x40 DUP3 ADD MSTORE DUP5 DUP5 AND PUSH1 0x60 DUP3 ADD MSTORE DUP1 CALLER SWAP4 SUB SWAP1 LOG2 DUP3 DUP1 PUSH1 0x40 MLOAD DUP5 DUP5 AND DUP2 MSTORE DUP2 DUP8 DUP3 ADD MSTORE PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 CALLER SWAP3 LOG4 PUSH1 0x40 MLOAD SWAP3 CALLER SWAP1 DUP4 DUP4 AND PUSH32 0x16B85F49BF01212961345D3016C9A531894ACCF62EB7680F2045D79185CC0EC0 DUP3 DUP1 LOG4 AND DUP2 MSTORE RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x145D JUMP JUMPDEST PUSH1 0x3 DUP5 ADD DUP11 MSTORE DUP12 DUP11 KECCAK256 SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND DUP12 JUMPDEST DUP2 DUP2 LT PUSH2 0x15B9 JUMPI POP SWAP5 PUSH1 0x3 PUSH1 0x1 DUP7 PUSH4 0xFFFFFFFF SWAP15 SWAP16 SWAP11 SWAP7 PUSH2 0x14A1 SWAP7 PUSH1 0xFF SWAP12 SWAP7 PUSH32 0xB0BCDEBD2813328A89A9ED5971E5863201ED78FC4E0E2B271CCEDDB9CE90510 SWAP15 SWAP11 PUSH2 0x14AE SWAP13 LT PUSH2 0x15A1 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP2 ADD SSTORE PUSH2 0x1472 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP7 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x1593 JUMP JUMPDEST SWAP3 SWAP4 DUP15 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x1547 JUMP JUMPDEST PUSH1 0x3 DUP4 ADD DUP10 MSTORE PUSH1 0x20 DUP10 KECCAK256 PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP5 LT PUSH2 0x160E JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x1603 JUMPI POP PUSH2 0x140A JUMP JUMPDEST DUP10 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x15F6 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x15ED JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x13B3 JUMP JUMPDEST PUSH1 0x1 DUP13 ADD DUP11 MSTORE PUSH1 0x20 DUP11 KECCAK256 SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND DUP12 JUMPDEST DUP2 DUP2 LT PUSH2 0x168C JUMPI POP SWAP2 PUSH1 0x1 SWAP4 SWAP2 DUP6 PUSH1 0x60 SWAP8 SWAP7 SWAP5 LT PUSH2 0x1673 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1 DUP12 ADD SSTORE PUSH2 0x13CB JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x1663 JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x164A JUMP JUMPDEST PUSH1 0x1 DUP13 ADD DUP11 MSTORE PUSH1 0x20 DUP11 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT PUSH2 0x16E1 JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x16D6 JUMPI POP POP PUSH2 0x1397 JUMP JUMPDEST DUP12 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x16C0 JUMP JUMPDEST POP DUP1 PUSH2 0x16C0 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x1355 JUMP JUMPDEST DUP13 DUP12 MSTORE PUSH1 0x20 DUP12 KECCAK256 SWAP3 POP PUSH1 0x1F NOT DUP5 AND DUP12 JUMPDEST DUP2 DUP2 LT PUSH2 0x1753 JUMPI POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x173A JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP10 SSTORE PUSH2 0x136A JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x172D JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x1717 JUMP JUMPDEST SWAP1 SWAP2 POP DUP12 DUP11 MSTORE PUSH1 0x20 DUP11 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT PUSH2 0x17B1 JUMPI JUMPDEST SWAP1 DUP5 SWAP4 SWAP3 SWAP2 JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x17A3 JUMPI POP POP PUSH2 0x133F JUMP JUMPDEST DUP13 DUP2 SSTORE DUP6 SWAP5 POP PUSH1 0x1 ADD PUSH2 0x178D JUMP JUMPDEST POP DUP1 PUSH2 0x1787 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP8 SWAP9 SWAP3 SWAP9 AND ISZERO DUP1 ISZERO PUSH2 0x19F3 JUMPI JUMPDEST ISZERO PUSH2 0x19AE JUMPI DUP1 PUSH2 0xAB4 JUMPI POP SWAP6 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x17E3 DUP3 PUSH2 0x1E4D JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP4 ADD MSTORE PUSH4 0xFFFFFFFF DUP8 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH9 0x10000000000000000 DUP8 LT ISZERO PUSH2 0x1998 JUMPI PUSH1 0x1 DUP8 ADD PUSH1 0x5 SSTORE PUSH2 0x1822 DUP8 PUSH2 0x1FF3 JUMP JUMPDEST PUSH2 0x1982 JUMPI DUP3 MLOAD SWAP3 PUSH1 0x5 DUP5 LT ISZERO PUSH2 0x196C JUMPI DUP2 SLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 SWAP3 AND PUSH1 0xFF SWAP1 SWAP7 AND SWAP6 SWAP1 SWAP6 OR PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHL PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND OR DUP3 SSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD PUSH1 0x1 DUP5 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x60 SWAP2 SWAP1 SWAP2 ADD MLOAD PUSH1 0x2 SWAP3 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH4 0xFFFFFFFF DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x3114E88AB8ADA1747A04A5F36FE137CD7E638942F4A034DA8660043D3E15EEAF DUP5 MSTORE DUP2 DUP2 KECCAK256 DUP10 SWAP1 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP4 DUP5 ADD MSTORE PUSH2 0x12FE SWAP3 DUP9 SWAP2 PUSH32 0x6BB7FF708619BA0610CBA295A58592E0451DEE2622938C8755667688DAF3529B SWAP2 LOG2 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE DUP8 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP1 PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 PUSH1 0x40 PUSH4 0xFFFFFFFF DUP13 AND SWAP5 LOG4 SWAP1 PUSH2 0x12BF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A204E6F20746F6B656E496420666F722045524332300000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP POP DUP1 PUSH1 0x1 PUSH2 0x17CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E674D6174683A2075696E743332204F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x40 PUSH2 0x1AAA SWAP2 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE KECCAK256 PUSH2 0x1ACB PUSH2 0x1A71 DUP3 PUSH2 0x1E8B JUMP JUMPDEST SWAP2 PUSH2 0x1A7E PUSH1 0x1 DUP3 ADD PUSH2 0x1E8B JUMP JUMPDEST PUSH2 0x1AB8 PUSH2 0x1A95 PUSH1 0x3 PUSH1 0xFF PUSH1 0x2 DUP7 ADD SLOAD AND SWAP5 ADD PUSH2 0x1E8B JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP7 PUSH1 0x80 DUP9 MSTORE PUSH1 0x80 DUP9 ADD SWAP1 PUSH2 0x1DD3 JUMP JUMPDEST SWAP1 DUP7 DUP3 SUB PUSH1 0x20 DUP9 ADD MSTORE PUSH2 0x1DD3 JUMP JUMPDEST SWAP2 PUSH1 0x40 DUP6 ADD MSTORE DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x1DD3 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH2 0x1ADE CALLDATASIZE PUSH2 0x1D83 JUMP JUMPDEST SWAP1 SWAP3 SWAP4 SWAP2 DUP3 DUP7 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH2 0x1B02 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP9 KECCAK256 SLOAD AND CALLER EQ PUSH2 0x22E7 JUMP JUMPDEST DUP6 JUMPDEST DUP2 DUP2 LT PUSH2 0x1B0F JUMPI DUP7 DUP1 RETURN JUMPDEST DUP1 PUSH2 0x1B37 PUSH2 0x1B24 PUSH2 0xECE PUSH2 0x1B3C SWAP5 DUP7 DUP12 PUSH2 0x20CD JUMP JUMPDEST DUP7 PUSH2 0x1B30 DUP5 DUP9 DUP12 PUSH2 0x20CD JUMP JUMPDEST CALLDATALOAD SWAP2 PUSH2 0x237A JUMP JUMPDEST PUSH2 0x20A8 JUMP JUMPDEST PUSH2 0x1B04 JUMP JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1B8B JUMPI SWAP2 PUSH2 0x1ACB SWAP3 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x1DD3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2D1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 AND DUP1 SWAP2 SUB PUSH2 0x3C2 JUMPI PUSH1 0x20 SWAP1 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x1BFD JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x1BEC JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ SWAP1 POP DUP3 PUSH2 0x1BE1 JUMP JUMPDEST PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL DUP2 EQ SWAP2 POP PUSH2 0x1BDA JUMP JUMPDEST POP CALLVALUE PUSH2 0x2D1 JUMPI PUSH2 0x1C1D CALLDATASIZE PUSH2 0x1D83 JUMP JUMPDEST SWAP1 SWAP3 SWAP4 SWAP2 PUSH2 0x1C2A DUP4 PUSH2 0x1FF3 JUMP JUMPDEST POP SWAP5 PUSH1 0xFF DUP1 SWAP7 SLOAD AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x1CCE JUMPI PUSH2 0x1C45 SWAP1 ISZERO PUSH2 0x2402 JUMP JUMPDEST DUP7 JUMPDEST DUP3 DUP2 LT PUSH2 0x1C52 JUMPI DUP8 DUP1 RETURN JUMPDEST DUP1 PUSH2 0x1CA5 PUSH2 0x1C67 PUSH2 0xECE PUSH2 0x1CC9 SWAP5 DUP8 DUP8 PUSH2 0x20CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1C7D PUSH2 0xECE DUP6 DUP10 DUP10 PUSH2 0x20CD JUMP JUMPDEST AND DUP12 MSTORE PUSH1 0x20 PUSH1 0x3 DUP2 MSTORE PUSH1 0x40 DUP13 KECCAK256 CALLER DUP14 MSTORE DUP2 MSTORE PUSH1 0x40 DUP13 KECCAK256 SWAP1 DUP10 DUP14 MSTORE MSTORE DUP10 PUSH1 0x40 DUP13 KECCAK256 SLOAD AND SWAP1 PUSH2 0x227F JUMP JUMPDEST PUSH2 0x1B37 PUSH2 0x1CB6 PUSH2 0xECE DUP4 DUP8 DUP8 PUSH2 0x20CD JUMP JUMPDEST DUP8 PUSH2 0x1CC2 DUP5 DUP10 DUP13 PUSH2 0x20CD JUMP JUMPDEST CALLDATALOAD SWAP2 PUSH2 0x244E JUMP JUMPDEST PUSH2 0x1C47 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP9 REVERT JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x3C2 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C2 JUMPI PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1D0A PUSH2 0x1D21 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x1 DUP5 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x24 CALLDATALOAD DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1D37 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1D37 JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x1D37 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x1D37 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x1D37 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x60 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x1D37 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 PUSH1 0x24 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x1D37 JUMPI DUP3 PUSH2 0x1DB5 SWAP2 PUSH1 0x4 ADD PUSH2 0x1D52 JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SWAP3 PUSH1 0x44 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x1D37 JUMPI PUSH2 0x1DCF SWAP2 PUSH1 0x4 ADD PUSH2 0x1D52 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x1DFF JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1DDE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x1E43 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x1E2D JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1E22 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1998 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1998 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x1E9F DUP5 PUSH2 0x1E13 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x1F0E JUMPI POP PUSH1 0x1 EQ PUSH2 0x1ECB JUMPI JUMPDEST POP POP PUSH2 0x1EC9 SWAP3 POP SUB DUP4 PUSH2 0x1E69 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x1EF6 JUMPI POP POP PUSH2 0x1EC9 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x1EBB JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x1EDE JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1EC9 SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x1EBB JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x1D37 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x1D37 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x1D37 JUMPI JUMP JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x1D37 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x1D37 JUMPI SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 DUP2 AND DUP2 SUB PUSH2 0x1D37 JUMPI SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x1D37 JUMPI SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x196C JUMPI PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x1D37 JUMPI JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x1D37 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1D37 JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 LT ISZERO PUSH2 0x202E JUMPI PUSH1 0x3 SWAP1 PUSH1 0x5 PUSH1 0x0 MSTORE MUL PUSH32 0x36B6384B5ECA791C62761152D0C79BB0604C104A5FB6F4EB0703F3154BB3DB0 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ISZERO PUSH2 0x204B JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204C656E677468206D69736D617463680000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1998 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x20B7 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x202E JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x1D37 JUMPI SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x1D37 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 SUB PUSH2 0x1D37 JUMPI SWAP1 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2139 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57726F6E672072657475726E2076616C75650000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2185 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F203020616464726573730000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x20B7 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x20B7 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x2276 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x224C JUMPI JUMPDEST POP ISZERO PUSH2 0x2207 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73666572206E6F7420616C6C6F776564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO ISZERO EQ CODESIZE PUSH2 0x21FF JUMP JUMPDEST PUSH1 0x0 SWAP2 POP PUSH2 0x21F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ SWAP2 DUP3 ISZERO PUSH2 0x22A2 JUMPI JUMPDEST POP DUP2 ISZERO PUSH2 0x224C JUMPI POP ISZERO PUSH2 0x2207 JUMPI JUMP JUMPDEST SWAP2 POP CODESIZE PUSH2 0x2293 JUMP JUMPDEST SWAP1 SWAP2 DUP3 DUP2 MSTORE PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x1D37 JUMPI PUSH1 0x20 SWAP3 PUSH1 0x5 SHL DUP1 SWAP3 DUP5 DUP4 ADD CALLDATACOPY ADD ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x22EE JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E54463A2063616C6C6572206973206E6F7420746865206F776E657200000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP3 SWAP2 SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1998 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x235D PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0x1E69 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x1D37 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH2 0x2390 DUP4 ISZERO ISZERO PUSH2 0x217E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP4 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH2 0x23B4 DUP3 DUP3 SLOAD PUSH2 0x21D7 JUMP JUMPDEST SWAP1 SSTORE DUP2 DUP4 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH2 0x23CD DUP3 DUP3 SLOAD PUSH2 0x21D7 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 CALLER SWAP3 LOG4 JUMP JUMPDEST ISZERO PUSH2 0x2409 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E54463A204E6F74206E61746976650000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x2463 DUP3 ISZERO ISZERO PUSH2 0x217E JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP3 DUP5 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP3 DUP6 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH2 0x2487 DUP3 DUP3 SLOAD PUSH2 0x21CA JUMP JUMPDEST SWAP1 SSTORE DUP2 DUP5 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 PUSH2 0x23CD DUP3 DUP3 SLOAD PUSH2 0x21CA JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP4 0xDF 0xC3 SWAP14 0x2C ISZERO 0xF 0xEF DUP5 0xD7 SWAP6 0x2D POP SWAP12 0xEF LOG2 0xE9 SDIV DUP2 0xBD 0x2E PUSH14 0xFCBB54302F46F301372C64736F6C PUSH4 0x43000812 STOP CALLER ","sourceMap":"576:6782:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;576:6782:33;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3141:5:30;;;;;:::i;:::-;-1:-1:-1;;;;;576:6782:33;;;2097:16:30;2089:41;2097:16;;;2089:41;:::i;:::-;576:6782:33;;;;;;;;;;;;;;;;;;;;;;2141:28:30;576:6782:33;;;2141:28:30;:::i;:::-;576:6782:33;;;;;;;;;;;;;;;;;;;2179:26:30;576:6782:33;;;2179:26:30;:::i;:::-;576:6782:33;;;;;;;;;;;;;;2221:47:30;576:6782:33;2236:10:30;2221:47;;230:63:11;3205:302:30;;576:6782:33;;3205:302:30;576:6782:33;;;;;;;;;;;;;;;3265:78:30;;;;2236:10;576:6782:33;3265:78:30;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3265:78:30;;;;;;;;;3240:256;3265:78;;;;;3205:302;-1:-1:-1;;;;;;;;576:6782:33;3265:179:30;3240:256;:::i;:::-;3205:302;;;;;;;;576:6782:33;;3265:78:30;;;;;;-1:-1:-1;3265:78:30;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1201:6:28;576:6782:33;;;;;;;;;;;;;;-1:-1:-1;;576:6782:33;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;576:6782:33;;;;;;1005:21:28;576:6782:33;1005:21:28;;;;;;;;:::i;:::-;576:6782:33;;;;;;;-1:-1:-1;;;;;1005:21:28;;576:6782:33;1005:21:28;;576:6782:33;;1005:21:28;;576:6782:33;;;;;1005:21:28;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;576:6782:33;;;;;;;;1005:21:28;;;;576:6782:33;;;;;;;-1:-1:-1;;576:6782:33;;;;;;;;;3134:12;576:6782;;-1:-1:-1;;;;;576:6782:33;;;;;;;3192:10;;:27;576:6782;;;;;3317:5;576:6782;;;;;;;;;;;;3287:60;;;;;-1:-1:-1;;;;;576:6782:33;;;;;;;3134:12;576:6782;;;;;;;;;;;;;;;;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;576:6782:33;;;;;;;;;;;676:46:30;576:6782:33;;;;;;;;;;;;;;;;;-1:-1:-1;;576:6782:33;;;;;;:::i;:::-;;;;;:::i;:::-;1201:6:28;576:6782:33;3621:22:28;;576:6782:33;;;3706:10:28;576:6782:33;;;;;-1:-1:-1;;;;;576:6782:33;;;;;;;;;;;;;;;;;;;3687:60:28;576:6782:33;;;;;;;;;;;;;;;;;;;3687:60:28;576:6782:33;;;;;;;;;;;3763:57:28;576:6782:33;3706:10:28;3763:57;;576:6782:33;;;;;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;3274:15:28;3261:28;;:61;;;;;;576:6782:33;3261:95:28;;;;576:6782:33;;;;;1445:14:28;;;:::i;:::-;576:6782:33;-1:-1:-1;;;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1586:12:28;;;1582:1417;;576:6782:33;;;;;;;;;1582:1417:28;1693:12;;;;;;;;;;;;;:44;;;;;1582:1417;576:6782:33;;;;;;;1811:29:28;;:170;;;;;;1582:1417;576:6782:33;;;;;2411:62:28;;;1582:1417;2410:96;;;;1582:1417;576:6782:33;;;;;;;;;;;;;:::i;:::-;;;;2619:52:28;;;576:6782:33;;;;;2619:52:28;;576:6782:33;;;;2619:52:28;;;576:6782:33;;;;;;;;;;3274:15:28;576:6782:33;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2882:16:28;576:6782:33;;;;;;;2917:71:28;576:6782:33;;-1:-1:-1;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;3274:15:28;576:6782:33;;;;;-1:-1:-1;;;;;576:6782:33;;;;;;;;;;;2686:14:28;;;:::i;:::-;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2882:16:28;576:6782:33;;;;;;;;;;2917:71:28;1582:1417;;;;;;;;;;;;576:6782:33;-1:-1:-1;;;576:6782:33;;;;;;;;;;-1:-1:-1;;;576:6782:33;;;;;;;;;;;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;2410:96:28;230:63:11;;;310:8;;2410:96:28;;;2411:62;2444:29;;;-1:-1:-1;2411:62:28;;576:6782:33;-1:-1:-1;;;576:6782:33;;;;;;;;;;;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;1811:170:28;-1:-1:-1;;576:6782:33;;-1:-1:-1;;;1878:20:28;;;576:6782:33;;;1878:20:28;;;;;;;;;;;;1811:170;576:6782:33;;;;;;;;1865:33:28;;;:82;;;1811:170;1865:115;;1811:170;1865:115;-1:-1:-1;576:6782:33;;-1:-1:-1;;;1962:18:28;;;576:6782:33;;;1962:18:28;;;;;;;;;;;;1865:115;1951:29;;;1811:170;;1962:18;;;;;;;;;;;;;;;;:::i;:::-;;;576:6782:33;;;;;1962:18:28;;;;;;;;;576:6782:33;;;;;;;;;1865:82:28;-1:-1:-1;576:6782:33;;-1:-1:-1;;;1921:26:28;;;576:6782:33;;;1921:26:28;;;;;;;;;;;;;;;1865:82;576:6782:33;;1902:45:28;;1865:82;;1921:26;;;;;;;;;;;;;;;;;;:::i;:::-;;;576:6782:33;;;;;;;;;;;;1921:26:28;;;;;;;;;;576:6782:33;-1:-1:-1;;;576:6782:33;;;;;;;;1878:20:28;;;;;;;;;;;;;;;;:::i;:::-;;;576:6782:33;;;;;;;;;;;1878:20:28;;;576:6782:33;;;;1878:20:28;;;;;;576:6782:33;;;;;;;;;;;;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;1693:44:28;576:6782:33;;;;1693:44:28;;;;576:6782:33;;;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;;;;;3261:95:28;576:6782:33;;;;3339:17:28;3326:30;;3261:95;;;576:6782:33;-1:-1:-1;;;576:6782:33;;;;;;;;3261:61:28;-1:-1:-1;;3306:16:28;3293:29;;576:6782:33;3261:61:28;;576:6782:33;;;;;;;-1:-1:-1;;576:6782:33;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;576:6782:33;;;;;;:::i;:::-;;;;;;;;;;;;4317:49:30;4334:10;;576:6782:33;;;;;-1:-1:-1;;;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4317:49:30;576:6782:33;;;;;4382:46:30;576:6782:33;4334:10:30;4382:46;;576:6782:33;;;;;;;;;;;;;-1:-1:-1;;576:6782:33;;;;-1:-1:-1;;;;;576:6782:33;;;;;;;719:40;576:6782;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;576:6782:33;;;;1457:18;576:6782;;;;;1483:10;576:6782;;;;;;;;;;;;1457:42;576:6782;;;;;;1457:42;;:::i;:::-;576:6782;5699:15;;;:::i;:::-;576:6782;;;;5699:6;576:6782;;;;;5691:73;5795:6;5699:45;;;5691:73;:::i;:::-;5795:6;:::i;:::-;576:6782;;;;;;;5376:6;576:6782;;;:::i;:::-;;;;;;1730:5;576:6782;;1708:69;-1:-1:-1;;;;;576:6782:33;;;;;1716:10;:28;1708:69;:::i;:::-;5376:6;:::i;576:6782::-;;;;;;;-1:-1:-1;;576:6782:33;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;1730:5;576:6782;;-1:-1:-1;;;;;576:6782:33;1708:69;576:6782;;;;;;1716:10;:28;1708:69;:::i;:::-;2492:394;;;576:6782;;;;;2548:22;;;;;;:34;;;2492:394;576:6782;;;;;;;1730:5;576:6782;;;;;;;;;;;;2647:55;;;;;-1:-1:-1;;;;;576:6782:33;;;;;;;2755:12;576:6782;;;;;;;;;;;;;;;;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;;;;;2548:34;;;;;;2492:394;576:6782;;;2843:12;576:6782;;;;;;;-1:-1:-1;;;;;576:6782:33;;;;;;;;;;;;;;;;-1:-1:-1;;576:6782:33;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;1240:17:30;;;1232:54;1240:17;;;1232:54;:::i;:::-;576:6782:33;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;576:6782:33;;;;1342:13:30;1357:7;;;;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;576:6782:33;;;;;;;;1399:9:30;576:6782:33;;;1366:3:30;-1:-1:-1;;;;;1409:9:30;;;;;;;;;;;:::i;:::-;;:::i;:::-;576:6782:33;;;1399:9:30;576:6782:33;;;;;1420:6:30;;;;;:::i;:::-;576:6782:33;;;;;;;;;;;;;;;;;1366:3:30;576:6782:33;;;;;;;;;1366:3:30;:::i;:::-;1342:13;;;;;;;576:6782:33;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;;-1:-1:-1;;576:6782:33;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3730:27:30;;;3722:64;3730:27;;;3722:64;:::i;:::-;3826:5;;;:::i;:::-;576:6782:33;-1:-1:-1;;;;;576:6782:33;;;;;;;2409:16:30;;;2401:41;2409:16;;;2401:41;:::i;:::-;576:6782:33;;2487:199:30;;;2507:7;;;;;;576:6782:33;;;;2701:48:30;576:6782:33;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;2715:10:30;576:6782:33;;;:::i;:::-;2701:48:30;;;230:63:11;3891:318:30;;576:6782:33;;;3891:318:30;576:6782:33;;;;;;;;;;3951:85:30;;;;2715:10;576:6782:33;3951:85:30;;576:6782:33;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;3951:85:30;;;;;576:6782:33;3951:85:30;;;;;;3926:272;3951:85;;;;;3891:318;-1:-1:-1;;;;;;;576:6782:33;3951:195:30;3926:272;:::i;:::-;3891:318;;;;;;;;;576:6782:33;;;3951:85:30;;;;576:6782:33;3951:85:30;;;;;;;;;:::i;:::-;;;;;576:6782:33;;;;;;;;;2516:3:30;;2548:6;2584:9;2548:6;;;2649:26;2548:6;576:6782:33;2548:6:30;;:::i;:::-;576:6782:33;2584:9:30;;;:::i;:::-;576:6782:33;;;;;;;;;;;;;;;;;;;;;2607:28:30;576:6782:33;;;2607:28:30;:::i;:::-;576:6782:33;;;;;;;;;;;;;;;;;2649:26:30;:::i;:::-;576:6782:33;;2516:3:30;:::i;:::-;2492:13;;;;;;;;;576:6782:33;;;;;;;;;;;;;;;;897:102:28;576:6782:33;;;:::i;:::-;897:102:28;;;;:::i;:::-;-1:-1:-1;;;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;576:6782:33;;;;-1:-1:-1;;;;;576:6782:33;;;;;;;765:47;576:6782;;;;;;;;;;;;;;;;;;-1:-1:-1;;576:6782:33;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;4197:6;576:6782;493:21:29;576:6782:33;493:21:29;;576:6782:33;;1227:1778:28;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1586:12:28;1582:1417;;576:6782:33;;4022:21:39;576:6782:33;;;;;;;:::i;:::-;4022:21:39;576:6782:33;4022:21:39;;;:::i;:::-;576:6782:33;;4022:21:39;576:6782:33;4022:21:39;;;:::i;:::-;576:6782:33;4509:40;;576:6782;;;;;4509:40;;4022:21:39;576:6782:33;4022:21:39;;:::i;:::-;576:6782:33;4509:40;;576:6782;;;;4022:21:39;;4485:12:33;576:6782;4022:21:39;576:6782:33;4022:21:39;;576:6782:33;;;;;4022:21:39;576:6782:33;4022:21:39;;;;;;;;;;:::i;:::-;;;;;;576:6782:33;4022:21:39;576:6782:33;4022:21:39;;;;;;;;;;;;;;;;;;;;;;576:6782:33;4022:21:39;576:6782:33;4022:21:39;;;;;;576:6782:33;4509:40;;576:6782;;;4022:21:39;576:6782:33;4022:21:39;;;;;;;;;;:::i;:::-;;;;;;;;576:6782:33;4022:21:39;;;;;;;;576:6782:33;;4022:21:39;;;;;;;;;;;;;;;;;576:6782:33;4022:21:39;576:6782:33;4022:21:39;;;;;;;;;;;576:6782:33;;4509:40;;4022:21:39;576:6782:33;;;4022:21:39;;576:6782:33;;4022:21:39;;4509:40:33;576:6782;;;;;4022:21:39;;;;;576:6782:33;4022:21:39;;;;:::i;:::-;;;;;;;;576:6782:33;4022:21:39;;;;;;;;;;576:6782:33;4022:21:39;;;576:6782:33;4022:21:39;4602:57:33;4022:21:39;;;;;;576:6782:33;4022:21:39;;;;;;;;;;;;;;;;;;;576:6782:33;4022:21:39;;;;;;;576:6782:33;;;4022:21:39;;4559:5:33;4022:21:39;;576:6782:33;4022:21:39;;4576:10:33;-1:-1:-1;;;;;576:6782:33;;;;;;;;;4022:21:39;576:6782:33;4022:21:39;;576:6782:33;4022:21:39;;;;:::i;:::-;;;;;;;;;;:::i;:::-;576:6782:33;;;4022:21:39;;576:6782:33;;;;;4022:21:39;;576:6782:33;4576:10;;4602:57;;;;576:6782;;;;;;;;;4022:21:39;;;;576:6782:33;4674:62;576:6782;4576:10;4674:62;;576:6782;;4576:10;;576:6782;;;;4751:53;;;;576:6782;;;;4022:21:39;;;;-1:-1:-1;4022:21:39;;;;;576:6782:33;4022:21:39;;576:6782:33;;;;;;4022:21:39;-1:-1:-1;;4022:21:39;;576:6782:33;4022:21:39;;;;;;;;576:6782:33;4022:21:39;;576:6782:33;4022:21:39;;;;;;576:6782:33;4022:21:39;;4602:57:33;4022:21:39;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4022:21:39;;;;;576:6782:33;4022:21:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;576:6782:33;4022:21:39;;576:6782:33;;;;;4022:21:39;;;4197:6:33;4022:21:39;;;;576:6782:33;4022:21:39;;;;;;;4197:6:33;4022:21:39;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4022:21:39;;;;;-1:-1:-1;;;576:6782:33;;;;;;;;4022:21:39;;;;-1:-1:-1;4022:21:39;;;;;;;;576:6782:33;;;;;;4022:21:39;-1:-1:-1;;4022:21:39;;576:6782:33;4022:21:39;;;;;;;;;;;;576:6782:33;4022:21:39;;;;;;;;;;;;;;;;;;;;;;;;;;576:6782:33;4022:21:39;;576:6782:33;4022:21:39;;;;;;;;;;;;576:6782:33;4022:21:39;;;;;;;;;;;;;;;;;;;;576:6782:33;;;;;4022:21:39;;;4197:6:33;4022:21:39;;;576:6782:33;4022:21:39;;;;;;;;4197:6:33;4022:21:39;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4022:21:39;;;;-1:-1:-1;;;576:6782:33;;;;;;;;4022:21:39;;;;-1:-1:-1;4022:21:39;;;;;576:6782:33;;;;;;;-1:-1:-1;;;4022:21:39;;576:6782:33;4022:21:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;576:6782:33;4022:21:39;;576:6782:33;4022:21:39;;;;;;;;;;;;576:6782:33;4022:21:39;;;;;;;;;;;;;;;;;576:6782:33;;;;;;;;;4022:21:39;;;4197:6:33;4022:21:39;;;576:6782:33;4022:21:39;;;;;;;;;;;;;;4197:6:33;4022:21:39;;;;;;;;;;;;;;;;;-1:-1:-1;4022:21:39;;;;;-1:-1:-1;4022:21:39;;;1582:1417:28;576:6782:33;;;;;;1693:12:28;:44;;;;1582:1417;576:6782:33;;;;;;;;;;;;;;:::i;:::-;;;;;;2619:52:28;;576:6782:33;;;2619:52:28;;576:6782:33;;;;2619:52:28;;;576:6782:33;;;;;;;;;;4197:6;576:6782;;;;:::i;:::-;;;;;;4197:6;576:6782;;;;;;;;2619:52:28;;;576:6782:33;-1:-1:-1;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;2619:52:28;;;576:6782:33;-1:-1:-1;576:6782:33;;;;-1:-1:-1;;576:6782:33;-1:-1:-1;;;;;576:6782:33;;;;;;;;;;2619:52:28;;;;;576:6782:33;;;;;;;;;;;;;-1:-1:-1;576:6782:33;;;;;;;;;;;;;;;;;;;;;4022:21:39;;576:6782:33;;2882:16:28;;;576:6782:33;;;;;;;;;;;;2917:71:28;576:6782:33;;;;2917:71:28;;1582:1417;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;;;;;1693:44:28;576:6782:33;;;1722:15:28;1693:44;;576:6782:33;;;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;576:6782:33;;;;;;;;;;;662:51;576:6782;;;;662:51;;;:::i;:::-;;;576:6782;662:51;;;:::i;:::-;576:6782;662:51;576:6782;;662:51;;;576:6782;;662:51;;;:::i;:::-;576:6782;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;1730:5;576:6782;;1708:69;-1:-1:-1;;;;;576:6782:33;;;;;1716:10;:28;1708:69;:::i;:::-;6598:13;6613:7;;;;;;576:6782;;;6622:3;6647:6;6664:10;6647:6;;6622:3;6647:6;;;;:::i;:::-;6664:10;;;;;;:::i;:::-;576:6782;6664:10;;:::i;:::-;6622:3;:::i;:::-;6598:13;;576:6782;;;;;;;-1:-1:-1;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;-1:-1:-1;;576:6782:33;;;;;;;;;;;;;;;;;;-1:-1:-1;;;866:46:30;;;:98;;;;576:6782:33;866:151:30;;;;576:6782:33;;;;;;;;;;866:151:30;-1:-1:-1;;;992:25:30;;-1:-1:-1;866:151:30;;;:98;-1:-1:-1;;;939:25:30;;;-1:-1:-1;866:98:30;;576:6782:33;;;;;;;;:::i;:::-;7046:15;;;;;;;:::i;:::-;576:6782;;;;;;;7046:6;576:6782;;;;;7038:73;7046:45;;7038:73;:::i;:::-;7162:13;7177:7;;;;;;576:6782;;;7186:3;7229:8;7239:49;7229:8;;7186:3;7229:8;;;;:::i;:::-;-1:-1:-1;;;;;7258:8:33;;;;;;:::i;:::-;576:6782;;;;7239:18;576:6782;;;;;7268:10;576:6782;;;;;;;;;;;;;;;;;;7239:49;;:::i;:::-;7328:10;7309:8;;;;;;:::i;:::-;7328:10;;;;;;:::i;:::-;576:6782;7328:10;;:::i;7186:3::-;7162:13;;576:6782;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;-1:-1:-1;;576:6782:33;;;;;;;-1:-1:-1;;;;;576:6782:33;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;576:6782:33;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;576:6782:33;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;-1:-1:-1;576:6782:33;;;;;;;;;-1:-1:-1;576:6782:33;;;;;;;;4022:21:39;;;576:6782:33;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;4022:21:39;;;576:6782:33;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;576:6782:33;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;-1:-1:-1;576:6782:33;;;;-1:-1:-1;576:6782:33;;-1:-1:-1;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;576:6782:33;;;;;-1:-1:-1;576:6782:33;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;576:6782:33;;;;;;;;;;:::o;:::-;7046:6;576:6782;;;;;;;;7046:6;-1:-1:-1;576:6782:33;;;;;-1:-1:-1;576:6782:33;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;576:6782:33;;;;;;;:::o;:::-;;;;4022:21:39;576:6782:33;;;;;4022:21:39;576:6782:33;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;;;;576:6782:33;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;;;;;;576:6782:33;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;576:6782:33;;;;;;4022:21:39;576:6782:33;-1:-1:-1;;576:6782:33;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;2762:215:30:-;-1:-1:-1;;;;;576:6782:33;2875:10:30;2866:19;;:32;;;;;2762:215;2866:79;;;;2762:215;576:6782:33;;;;2762:215:30:o;576:6782:33:-;;;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;;;;;2866:79:30;576:6782:33;;;;;;;;;;2875:10:30;576:6782:33;;;;2941:4:30;576:6782:33;;;;;;;;2902:43:30;2866:79;;;:32;576:6782:33;;-1:-1:-1;2866:32:30;;2762:215;-1:-1:-1;;;;;576:6782:33;2875:10:30;2866:19;;:32;;;;;2762:215;2866:79;;;;;576:6782:33;;;;2762:215:30:o;2866:32::-;;-1:-1:-1;2866:32:30;;;576:6782:33;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;;;;;4022:21:39;;;;576:6782:33;;;;;;;;;4022:21:39;576:6782:33;;-1:-1:-1;;576:6782:33;;;;;:::i;:::-;4022:21:39;;;;;;;;;;;;;576:6782:33;4022:21:39;;-1:-1:-1;4022:21:39;;576:6782:33;;;;4022:21:39:o;1450:261:30:-;-1:-1:-1;;;;;576:6782:33;;1450:261:30;1523:41;1531:16;;;1523:41;:::i;:::-;1545:1;576:6782:33;;;;1575:9:30;576:6782:33;;;;;;;;;;;;;1575:26:30;576:6782:33;;;1575:26:30;:::i;:::-;576:6782:33;;;;;1611:11:30;576:6782:33;;;;;1611:24:30;576:6782:33;;;1611:24:30;:::i;:::-;576:6782:33;;;;;;;;;;;1651:53:30;576:6782:33;1666:10:30;1651:53;;1450:261::o;576:6782:33:-;;;;:::o;:::-;;;-1:-1:-1;;;576:6782:33;;;;;;;;;;;;;;;;;;;;1717:269:30;-1:-1:-1;;;;;576:6782:33;1800:18:30;1792:43;1800:18;;;1792:43;:::i;:::-;1816:1;576:6782:33;;;;1846:9:30;576:6782:33;;;;;;;;;;;;;1846:28:30;576:6782:33;;;1846:28:30;:::i;:::-;576:6782:33;;;;;1884:11:30;576:6782:33;;;;;1884:24:30;576:6782:33;;;1884:24:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1886000","executionCost":"80106","totalCost":"1966106"},"external":{"assetCount()":"2772","assets(uint256)":"11386","balanceOf(address,uint256)":"2475","balanceOfBatch(address[],uint256[])":"infinite","batchBurn(uint256,address[],uint256[])":"infinite","batchMint(uint256,address[],uint256[])":"infinite","burn(uint256,address,uint256)":"infinite","claimOwnership(uint256)":"53272","createToken(string,string,uint8,string)":"infinite","ids(uint8,address,address,uint256)":"2938","isApprovedForAll(address,address)":"3058","isApprovedForAsset(address,address,uint256)":"2992","mint(uint256,address,uint256)":"infinite","nativeTokens(uint256)":"infinite","owner(uint256)":"2658","pendingOwner(uint256)":"2504","registerAsset(uint8,address,address,uint256)":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26776","setApprovalForAsset(address,uint256,bool)":"29334","supportsInterface(bytes4)":"383","totalSupply(uint256)":"2750","transferOwnership(uint256,address,bool,bool)":"53375","uri(uint256)":"464"}},"methodIdentifiers":{"assetCount()":"eafe7a74","assets(uint256)":"cf35bdd0","balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","batchBurn(uint256,address[],uint256[])":"01e1e3b1","batchMint(uint256,address[],uint256[])":"1dbeeb4e","burn(uint256,address,uint256)":"9eea5f66","claimOwnership(uint256)":"ce7f2714","createToken(string,string,uint8,string)":"2482ee27","ids(uint8,address,address,uint256)":"2d4e1d52","isApprovedForAll(address,address)":"e985e9c5","isApprovedForAsset(address,address,uint256)":"a75fcb1e","mint(uint256,address,uint256)":"836a1040","nativeTokens(uint256)":"1f0ee4c3","owner(uint256)":"a123c33e","pendingOwner(uint256)":"2b800e3b","registerAsset(uint8,address,address,uint256)":"b061db94","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","setApprovalForAsset(address,uint256,bool)":"b8489fb5","supportsInterface(bytes4)":"01ffc9a7","totalSupply(uint256)":"bd85b039","transferOwnership(uint256,address,bool,bool)":"5ba4d64e","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"AssetRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"froms\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TokenType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isApprovedForAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nativeTokens\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"registerAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BoringCrypto (@Boring_Crypto)\",\"kind\":\"dev\",\"methods\":{\"batchBurn(uint256,address[],uint256[])\":{\"params\":{\"amounts\":\"The amounts of tokens to burn.\",\"froms\":\"The accounts to burn tokens from.\",\"tokenId\":\"The token to be burned.\"}},\"batchMint(uint256,address[],uint256[])\":{\"details\":\"If the tos array is longer than the amounts array there will be an out of bounds error. If the amounts array is longer, the extra amounts are simply ignored.For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.\",\"params\":{\"amounts\":\"The amounts of tokens to mint.\",\"tokenId\":\"The token to be minted.\",\"tos\":\"The accounts to transfer the minted tokens to.\"}},\"burn(uint256,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to burn.\",\"tokenId\":\"The token to be burned.\"}},\"claimOwnership(uint256)\":{\"params\":{\"tokenId\":\"The `tokenId` of the token that ownership is claimed for.\"}},\"createToken(string,string,uint8,string)\":{\"params\":{\"decimals\":\"The number of decimals of the token (this is just for display purposes). Should be set to 18 in normal cases.\",\"name\":\"The name of the token.\",\"symbol\":\"The symbol of the token.\"}},\"mint(uint256,address,uint256)\":{\"details\":\"For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.\",\"params\":{\"amount\":\"The amount of tokens to mint.\",\"to\":\"The account to transfer the minted tokens to.\",\"tokenId\":\"The token to be minted.\"}},\"transferOwnership(uint256,address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\",\"tokenId\":\"The `tokenId` of the token that ownership whose ownership will be transferred/renounced.\"}}},\"title\":\"NativeTokenFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurn(uint256,address[],uint256[])\":{\"notice\":\"Burns tokens. This is only useful to be used by an operator.\"},\"batchMint(uint256,address[],uint256[])\":{\"notice\":\"The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\"},\"burn(uint256,address,uint256)\":{\"notice\":\"Burns tokens. Only the holder of tokens can burn them or an approved operator.\"},\"claimOwnership(uint256)\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"createToken(string,string,uint8,string)\":{\"notice\":\"Create a new native token. This will be an ERC1155 token. If later it's needed as an ERC20 token it can be wrapped into an ERC20 token. Native support for ERC1155 tokens is growing though.\"},\"mint(uint256,address,uint256)\":{\"notice\":\"The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\"},\"transferOwnership(uint256,address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"}},\"notice\":\"The NativeTokenFactory is a token factory to create ERC1155 tokens. This is used by YieldBox to create native tokens in YieldBox. These have many benefits: - low and predictable gas usage - simplified approval - no hidden features, all these tokens behave the same\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol\":\"NativeTokenFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\ninterface IERC1155 is IERC165 {\\r\\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\\r\\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n    event URI(string _value, uint256 indexed _id);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n\\r\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\r\\n\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x39f388312b08552eb8a5f09cbe6b0c6ea511a6a47c72985e1ab53b777b911771\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC1155TokenReceiver {\\r\\n    function onERC1155Received(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0x5a73c68c2975f8908b96e76fe916a1a39b86fd7acb2d1e463e85e7841225c0cf\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC165 {\\r\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x2929dd1b0483b96a0b59b4b945684705adf252697b404fe7f126816cb78d684c\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\nlibrary BoringAddress {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function sendNative(address to, uint256 amount) internal {\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"BoringAddress: transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdcdf9c08bc41b6091e03d4bb44d6503bd084ae9d990277d0761ed6e1cdeefbb3\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\nimport \\\"./ERC1155.sol\\\";\\n\\n// An asset is a token + a strategy\\nstruct Asset {\\n    TokenType tokenType;\\n    address contractAddress;\\n    IStrategy strategy;\\n    uint256 tokenId;\\n}\\n\\ncontract AssetRegister is ERC1155 {\\n    using BoringAddress for address;\\n\\n    mapping(address => mapping(address => mapping(uint256 => bool))) public isApprovedForAsset;\\n\\n    event AssetRegistered(\\n        TokenType indexed tokenType,\\n        address indexed contractAddress,\\n        IStrategy strategy,\\n        uint256 indexed tokenId,\\n        uint256 assetId\\n    );\\n    event ApprovalForAsset(address indexed sender, address indexed operator, uint256 assetId, bool approved);\\n\\n    // ids start at 1 so that id 0 means it's not yet registered\\n    mapping(TokenType => mapping(address => mapping(IStrategy => mapping(uint256 => uint256)))) public ids;\\n    Asset[] public assets;\\n\\n    constructor() {\\n        assets.push(Asset(TokenType.None, address(0), NO_STRATEGY, 0));\\n    }\\n\\n    function assetCount() public view returns (uint256) {\\n        return assets.length;\\n    }\\n\\n    function _registerAsset(\\n        TokenType tokenType,\\n        address contractAddress,\\n        IStrategy strategy,\\n        uint256 tokenId\\n    ) internal returns (uint256 assetId) {\\n        // Checks\\n        assetId = ids[tokenType][contractAddress][strategy][tokenId];\\n\\n        // If assetId is 0, this is a new asset that needs to be registered\\n        if (assetId == 0) {\\n            // Only do these checks if a new asset needs to be created\\n            require(tokenId == 0 || tokenType != TokenType.ERC20, \\\"YieldBox: No tokenId for ERC20\\\");\\n            require(\\n                tokenType == TokenType.Native ||\\n                    (tokenType == strategy.tokenType() && contractAddress == strategy.contractAddress() && tokenId == strategy.tokenId()),\\n                \\\"YieldBox: Strategy mismatch\\\"\\n            );\\n            // If a new token gets added, the isContract checks that this is a deployed contract. Needed for security.\\n            // Prevents getting shares for a future token whose address is known in advance. For instance a token that will be deployed with CREATE2 in the future or while the contract creation is\\n            // in the mempool\\n            require((tokenType == TokenType.Native && contractAddress == address(0)) || contractAddress.isContract(), \\\"YieldBox: Not a token\\\");\\n\\n            // Effects\\n            assetId = assets.length;\\n            assets.push(Asset(tokenType, contractAddress, strategy, tokenId));\\n            ids[tokenType][contractAddress][strategy][tokenId] = assetId;\\n\\n            // The actual URI isn't emitted here as per EIP1155, because that would make this call super expensive.\\n            emit URI(\\\"\\\", assetId);\\n            emit AssetRegistered(tokenType, contractAddress, strategy, tokenId, assetId);\\n        }\\n    }\\n\\n    function registerAsset(TokenType tokenType, address contractAddress, IStrategy strategy, uint256 tokenId) public returns (uint256 assetId) {\\n        // Native assets can only be added internally by the NativeTokenFactory\\n        require(\\n            tokenType == TokenType.ERC20 || tokenType == TokenType.ERC721 || tokenType == TokenType.ERC1155,\\n            \\\"AssetManager: cannot add Native\\\"\\n        );\\n        assetId = _registerAsset(tokenType, contractAddress, strategy, tokenId);\\n    }\\n\\n    function setApprovalForAsset(address operator, uint256 assetId, bool approved) external virtual {\\n        require(assetId < assetCount(), \\\"AssetManager: asset not valid\\\");\\n        isApprovedForAsset[msg.sender][operator][assetId] = approved;\\n\\n        emit ApprovalForAsset(msg.sender, operator, assetId, approved);\\n    }\\n}\\n\",\"keccak256\":\"0x614d8dd6ef5b414eda33855d3f55091d8669169d8f8ca584153c91111094c72f\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/BoringMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary BoringMath {\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= type(uint128).max, \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= type(uint64).max, \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= type(uint32).max, \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n\\n    function muldiv(\\n        uint256 value,\\n        uint256 mul,\\n        uint256 div,\\n        bool roundUp\\n    ) internal pure returns (uint256 result) {\\n        result = (value * mul) / div;\\n        if (roundUp && (result * div) / mul < value) {\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x72b9e717e3845aa584e81dee9a2f486c42941ebdb552130887b383ce59a7627d\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\n\\n// Written by OreNoMochi (https://github.com/OreNoMochii), BoringCrypto\\n\\ncontract ERC1155 is IERC1155 {\\n    using BoringAddress for address;\\n\\n    // mappings\\n\\n    mapping(address => mapping(address => bool)) public override isApprovedForAll; // map of operator approval\\n    mapping(address => mapping(uint256 => uint256)) public override balanceOf; // map of tokens owned by\\n    mapping(uint256 => uint256) public totalSupply; // totalSupply per token\\n\\n    function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\\n        return\\n            interfaceID == this.supportsInterface.selector || // EIP-165\\n            interfaceID == 0xd9b67a26 || // ERC-1155\\n            interfaceID == 0x0e89341c; // EIP-1155 Metadata\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view override returns (uint256[] memory balances) {\\n        uint256 len = owners.length;\\n        require(len == ids.length, \\\"ERC1155: Length mismatch\\\");\\n\\n        balances = new uint256[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            balances[i] = balanceOf[owners[i]][ids[i]];\\n        }\\n    }\\n\\n    function _mint(address to, uint256 id, uint256 value) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[to][id] += value;\\n        totalSupply[id] += value;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, value);\\n    }\\n\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        require(from != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        totalSupply[id] -= value;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, value);\\n    }\\n\\n    function _transferSingle(address from, address to, uint256 id, uint256 value) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        balanceOf[to][id] += value;\\n\\n        emit TransferSingle(msg.sender, from, to, id, value);\\n    }\\n\\n    function _transferBatch(address from, address to, uint256[] calldata ids, uint256[] calldata values) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        uint256 len = ids.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 id = ids[i];\\n            uint256 value = values[i];\\n            balanceOf[from][id] -= value;\\n            balanceOf[to][id] += value;\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, values);\\n    }\\n\\n    function _requireTransferAllowed(address _from, bool _approved) internal view virtual {\\n        require(_from == msg.sender || _approved || isApprovedForAll[_from][msg.sender] == true, \\\"Transfer not allowed\\\");\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external override {\\n        _requireTransferAllowed(from, false);\\n\\n        _transferSingle(from, to, id, value);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, value, data) ==\\n                    bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override {\\n        require(ids.length == values.length, \\\"ERC1155: Length mismatch\\\");\\n        _requireTransferAllowed(from, false);\\n\\n        _transferBatch(from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, values, data) ==\\n                    bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function uri(uint256 /*assetId*/) external view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x946ff1e91845883dc69b26d2547bb8d53b0fabe08dcb6c4f8e4d6c32d585195c\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"./AssetRegister.sol\\\";\\nimport \\\"./BoringMath.sol\\\";\\n\\nstruct NativeToken {\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n    string uri;\\n}\\n\\n/// @title NativeTokenFactory\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The NativeTokenFactory is a token factory to create ERC1155 tokens. This is used by YieldBox to create\\n/// native tokens in YieldBox. These have many benefits:\\n/// - low and predictable gas usage\\n/// - simplified approval\\n/// - no hidden features, all these tokens behave the same\\n\\ncontract NativeTokenFactory is AssetRegister {\\n    using BoringMath for uint256;\\n\\n    mapping(uint256 => NativeToken) public nativeTokens;\\n    mapping(uint256 => address) public owner;\\n    mapping(uint256 => address) public pendingOwner;\\n\\n    event TokenCreated(address indexed creator, string name, string symbol, uint8 decimals, uint256 tokenId);\\n    event OwnershipTransferred(uint256 indexed tokenId, address indexed previousOwner, address indexed newOwner);\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'msg.sender' is an address (an operator) that is approved by 'from', it's allowed.\\n    modifier allowed(address _from, uint256 _id) {\\n        _requireTransferAllowed(_from, isApprovedForAsset[_from][msg.sender][_id]);\\n        _;\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    /// @param tokenId The `tokenId` that the sender has to be owner of.\\n    modifier onlyOwner(uint256 tokenId) {\\n        require(msg.sender == owner[tokenId], \\\"NTF: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param tokenId The `tokenId` of the token that ownership whose ownership will be transferred/renounced.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(uint256 tokenId, address newOwner, bool direct, bool renounce) public onlyOwner(tokenId) {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"NTF: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(tokenId, owner[tokenId], newOwner);\\n            owner[tokenId] = newOwner;\\n            pendingOwner[tokenId] = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner[tokenId] = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    /// @param tokenId The `tokenId` of the token that ownership is claimed for.\\n    function claimOwnership(uint256 tokenId) public {\\n        address _pendingOwner = pendingOwner[tokenId];\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"NTF: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(tokenId, owner[tokenId], _pendingOwner);\\n        owner[tokenId] = _pendingOwner;\\n        pendingOwner[tokenId] = address(0);\\n    }\\n\\n    /// @notice Create a new native token. This will be an ERC1155 token. If later it's needed as an ERC20 token it can\\n    /// be wrapped into an ERC20 token. Native support for ERC1155 tokens is growing though.\\n    /// @param name The name of the token.\\n    /// @param symbol The symbol of the token.\\n    /// @param decimals The number of decimals of the token (this is just for display purposes). Should be set to 18 in normal cases.\\n    function createToken(string calldata name, string calldata symbol, uint8 decimals, string calldata uri) public returns (uint32 tokenId) {\\n        // To keep each Token unique in the AssetRegister, we use the assetId as the tokenId. So for native assets, the tokenId is always equal to the assetId.\\n        tokenId = assets.length.to32();\\n        _registerAsset(TokenType.Native, address(0), NO_STRATEGY, tokenId);\\n        // Initial supply is 0, use owner can mint. For a fixed supply the owner can mint and revoke ownership.\\n        // The msg.sender is the initial owner, can be changed after.\\n        nativeTokens[tokenId] = NativeToken(name, symbol, decimals, uri);\\n        owner[tokenId] = msg.sender;\\n\\n        emit TokenCreated(msg.sender, name, symbol, decimals, tokenId);\\n        emit TransferSingle(msg.sender, address(0), address(0), tokenId, 0);\\n        emit OwnershipTransferred(tokenId, address(0), msg.sender);\\n    }\\n\\n    /// @notice The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\\n    /// @param tokenId The token to be minted.\\n    /// @param to The account to transfer the minted tokens to.\\n    /// @param amount The amount of tokens to mint.\\n    /// @dev For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.\\n    function mint(uint256 tokenId, address to, uint256 amount) public onlyOwner(tokenId) {\\n        _mint(to, tokenId, amount);\\n    }\\n\\n    /// @notice Burns tokens. Only the holder of tokens can burn them or an approved operator.\\n    /// @param tokenId The token to be burned.\\n    /// @param amount The amount of tokens to burn.\\n    function burn(uint256 tokenId, address from, uint256 amount) public allowed(from, tokenId) {\\n        require(assets[tokenId].tokenType == TokenType.Native, \\\"NTF: Not native\\\");\\n        _burn(from, tokenId, amount);\\n    }\\n\\n    /// @notice The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\\n    /// @param tokenId The token to be minted.\\n    /// @param tos The accounts to transfer the minted tokens to.\\n    /// @param amounts The amounts of tokens to mint.\\n    /// @dev If the tos array is longer than the amounts array there will be an out of bounds error. If the amounts array is longer, the extra amounts are simply ignored.\\n    /// @dev For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.\\n    function batchMint(uint256 tokenId, address[] calldata tos, uint256[] calldata amounts) public onlyOwner(tokenId) {\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            _mint(tos[i], tokenId, amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Burns tokens. This is only useful to be used by an operator.\\n    /// @param tokenId The token to be burned.\\n    /// @param froms The accounts to burn tokens from.\\n    /// @param amounts The amounts of tokens to burn.\\n    function batchBurn(uint256 tokenId, address[] calldata froms, uint256[] calldata amounts) public {\\n        require(assets[tokenId].tokenType == TokenType.Native, \\\"NTF: Not native\\\");\\n        uint256 len = froms.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            _requireTransferAllowed(froms[i], isApprovedForAsset[froms[i]][msg.sender][tokenId]);\\n            _burn(froms[i], tokenId, amounts[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x12cfa2a50322ae33b741b6bd0bc63feff775d4ba034c9937bbc49f1c33190a96\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title TokenType\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The YieldBox can hold different types of tokens:\\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\\nenum TokenType {\\n    Native,\\n    ERC20,\\n    ERC721,\\n    ERC1155,\\n    None\\n}\\n\",\"keccak256\":\"0xc6adb740ff68d4162214dfa9d406422a066ae2197b7f0c8df5daa7c84b4a10aa\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\nimport \\\"./IYieldBox.sol\\\";\\n\\ninterface IStrategy {\\n    /// Each strategy only works with a single asset. This should help make implementations simpler and more readable.\\n    /// To safe gas a proxy pattern (YieldBox factory) could be used to deploy the same strategy for multiple tokens.\\n\\n    /// It is recommended that strategies keep a small amount of funds uninvested (like 5%) to handle small withdrawals\\n    /// and deposits without triggering costly investing/divesting logic.\\n\\n    /// #########################\\n    /// ### Basic Information ###\\n    /// #########################\\n\\n    /// Returns the address of the yieldBox that this strategy is for\\n    function yieldBox() external view returns (IYieldBox yieldBox_);\\n\\n    /// Returns a name for this strategy\\n    function name() external view returns (string memory name_);\\n\\n    /// Returns a description for this strategy\\n    function description() external view returns (string memory description_);\\n\\n    /// #######################\\n    /// ### Supported Token ###\\n    /// #######################\\n\\n    /// Returns the standard that this strategy works with\\n    function tokenType() external view returns (TokenType tokenType_);\\n\\n    /// Returns the contract address that this strategy works with\\n    function contractAddress() external view returns (address contractAddress_);\\n\\n    /// Returns the tokenId that this strategy works with (for EIP1155)\\n    /// This is always 0 for EIP20 tokens\\n    function tokenId() external view returns (uint256 tokenId_);\\n\\n    /// ###########################\\n    /// ### Balance Information ###\\n    /// ###########################\\n\\n    /// Returns the total value the strategy holds (principle + gain) expressed in asset token amount.\\n    /// This should be cheap in gas to retrieve. Can return a bit less than the actual, but MUST NOT return more.\\n    /// The gas cost of this function will be paid on any deposit or withdrawal onto and out of the YieldBox\\n    /// that uses this strategy. Also, anytime a protocol converts between shares and amount, this gets called.\\n    function currentBalance() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn\\n    function withdrawable() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn for a low gas fee\\n    /// When more than this amount is withdrawn it will trigger divesting from the actual strategy\\n    /// which will incur higher gas costs\\n    function cheapWithdrawable() external view returns (uint256 amount);\\n\\n    /// ##########################\\n    /// ### YieldBox Functions ###\\n    /// ##########################\\n\\n    /// Is called by YieldBox to signal funds have been added, the strategy may choose to act on this\\n    /// When a large enough deposit is made, this should trigger the strategy to invest into the actual\\n    /// strategy. This function should normally NOT be used to invest on each call as that would be costly\\n    /// for small deposits.\\n    /// If the strategy handles native tokens (ETH) it will receive it directly (not wrapped). It will be\\n    /// up to the strategy to wrap it if needed.\\n    /// Only accept this call from the YieldBox\\n    function deposited(uint256 amount) external;\\n\\n    /// Is called by the YieldBox to ask the strategy to withdraw to the user\\n    /// When a strategy keeps a little reserve for cheap withdrawals and the requested withdrawal goes over this amount,\\n    /// the strategy should divest enough from the strategy to complete the withdrawal and rebalance the reserve.\\n    /// If the strategy handles native tokens (ETH) it should send this, not a wrapped version.\\n    /// With some strategies it might be hard to withdraw exactly the correct amount.\\n    /// Only accept this call from the YieldBox\\n    function withdraw(address to, uint256 amount) external;\\n}\\n\\nIStrategy constant NO_STRATEGY = IStrategy(address(0));\\n\",\"keccak256\":\"0x637400567ba619671921a58dd2b17c9d1fdacc27f0f021d79bb4f122ead71902\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\n\\ninterface IYieldBox {\\n    function wrappedNative() external view returns (address wrappedNative);\\n\\n    function assets(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            TokenType tokenType,\\n            address contractAddress,\\n            address strategy,\\n            uint256 tokenId\\n        );\\n\\n    function nativeTokens(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            uint8 decimals\\n        );\\n\\n    function owner(uint256 assetId) external view returns (address owner);\\n\\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\\n\\n    function setApprovalForAsset(\\n        address operator,\\n        uint256 assetId,\\n        bool approved\\n    ) external;\\n\\n    function depositAsset(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function withdraw(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 assetId,\\n        uint256 share\\n    ) external;\\n\\n    function batchTransfer(\\n        address from,\\n        address to,\\n        uint256[] calldata assetIds_,\\n        uint256[] calldata shares_\\n    ) external;\\n\\n    function transferMultiple(\\n        address from,\\n        address[] calldata tos,\\n        uint256 assetId,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function toShare(\\n        uint256 assetId,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function toAmount(\\n        uint256 assetId,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x83e4c62b4059bbd59cac87eb714311f9304ce164ead7b45a7562067732fdc5d3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":5063,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"isApprovedForAll","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":5070,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"balanceOf","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"},{"astId":5074,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"totalSupply","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_uint256)"},{"astId":4645,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"isApprovedForAsset","offset":0,"slot":"3","type":"t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))"},{"astId":4681,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"ids","offset":0,"slot":"4","type":"t_mapping(t_enum(TokenType)8288,t_mapping(t_address,t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256))))"},{"astId":4685,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"assets","offset":0,"slot":"5","type":"t_array(t_struct(Asset)4632_storage)dyn_storage"},{"astId":5650,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"nativeTokens","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_struct(NativeToken)5639_storage)"},{"astId":5654,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"owner","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_address)"},{"astId":5658,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"pendingOwner","offset":0,"slot":"8","type":"t_mapping(t_uint256,t_address)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Asset)4632_storage)dyn_storage":{"base":"t_struct(Asset)4632_storage","encoding":"dynamic_array","label":"struct Asset[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IStrategy)8364":{"encoding":"inplace","label":"contract IStrategy","numberOfBytes":"20"},"t_enum(TokenType)8288":{"encoding":"inplace","label":"enum TokenType","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => mapping(uint256 => bool)))","numberOfBytes":"32","value":"t_mapping(t_address,t_mapping(t_uint256,t_bool))"},"t_mapping(t_address,t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(contract IStrategy => mapping(uint256 => uint256)))","numberOfBytes":"32","value":"t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256))"},"t_mapping(t_address,t_mapping(t_uint256,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => bool))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_bool)"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_contract(IStrategy)8364","label":"mapping(contract IStrategy => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_enum(TokenType)8288,t_mapping(t_address,t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256))))":{"encoding":"mapping","key":"t_enum(TokenType)8288","label":"mapping(enum TokenType => mapping(address => mapping(contract IStrategy => mapping(uint256 => uint256))))","numberOfBytes":"32","value":"t_mapping(t_address,t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256)))"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_struct(NativeToken)5639_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct NativeToken)","numberOfBytes":"32","value":"t_struct(NativeToken)5639_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Asset)4632_storage":{"encoding":"inplace","label":"struct Asset","members":[{"astId":4624,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"tokenType","offset":0,"slot":"0","type":"t_enum(TokenType)8288"},{"astId":4626,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"contractAddress","offset":1,"slot":"0","type":"t_address"},{"astId":4629,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"strategy","offset":0,"slot":"1","type":"t_contract(IStrategy)8364"},{"astId":4631,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"tokenId","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_struct(NativeToken)5639_storage":{"encoding":"inplace","label":"struct NativeToken","members":[{"astId":5632,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":5634,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":5636,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"decimals","offset":0,"slot":"2","type":"t_uint8"},{"astId":5638,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol:NativeTokenFactory","label":"uri","offset":0,"slot":"3","type":"t_string_storage"}],"numberOfBytes":"128"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"batchBurn(uint256,address[],uint256[])":{"notice":"Burns tokens. This is only useful to be used by an operator."},"batchMint(uint256,address[],uint256[])":{"notice":"The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership."},"burn(uint256,address,uint256)":{"notice":"Burns tokens. Only the holder of tokens can burn them or an approved operator."},"claimOwnership(uint256)":{"notice":"Needs to be called by `pendingOwner` to claim ownership."},"createToken(string,string,uint8,string)":{"notice":"Create a new native token. This will be an ERC1155 token. If later it's needed as an ERC20 token it can be wrapped into an ERC20 token. Native support for ERC1155 tokens is growing though."},"mint(uint256,address,uint256)":{"notice":"The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership."},"transferOwnership(uint256,address,bool,bool)":{"notice":"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."}},"notice":"The NativeTokenFactory is a token factory to create ERC1155 tokens. This is used by YieldBox to create native tokens in YieldBox. These have many benefits: - low and predictable gas usage - simplified approval - no hidden features, all these tokens behave the same","version":1}}},"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol":{"YieldBox":{"abi":[{"inputs":[{"internalType":"contract IWrappedNative","name":"wrappedNative_","type":"address"},{"internalType":"contract YieldBoxURIBuilder","name":"uriBuilder_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"uint256","name":"assetId","type":"uint256"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAsset","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"},{"indexed":false,"internalType":"contract IStrategy","name":"strategy","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"AssetRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"assetId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shareIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shareOut","type":"uint256"},{"indexed":false,"internalType":"bool","name":"isNFT","type":"bool"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"creator","type":"address"},{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"string","name":"symbol","type":"string"},{"indexed":false,"internalType":"uint8","name":"decimals","type":"uint8"},{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"TokenCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"_ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"_values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":false,"internalType":"uint256","name":"_id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"_value","type":"string"},{"indexed":true,"internalType":"uint256","name":"_id","type":"uint256"}],"name":"URI","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"assetId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shareIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shareOut","type":"uint256"}],"name":"Withdraw","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"amountOf","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"assetCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"assetTotals","outputs":[{"internalType":"uint256","name":"totalShare","type":"uint256"},{"internalType":"uint256","name":"totalAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"assets","outputs":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"calls","type":"bytes[]"},{"internalType":"bool","name":"revertOnFail","type":"bool"}],"name":"batch","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address[]","name":"froms","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"batchBurn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address[]","name":"tos","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"assetIds_","type":"uint256[]"},{"internalType":"uint256[]","name":"shares_","type":"uint256[]"}],"name":"batchTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"claimOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"string","name":"uri","type":"string"}],"name":"createToken","outputs":[{"internalType":"uint32","name":"tokenId","type":"uint32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"}],"name":"depositAsset","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositETH","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositETHAsset","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"}],"name":"depositNFTAsset","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum TokenType","name":"","type":"uint8"},{"internalType":"address","name":"","type":"address"},{"internalType":"contract IStrategy","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"ids","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"isApprovedForAsset","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"nativeTokens","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"string","name":"uri","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"registerAsset","outputs":[{"internalType":"uint256","name":"assetId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"},{"internalType":"bool","name":"roundUp","type":"bool"}],"name":"toAmount","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"roundUp","type":"bool"}],"name":"toShare","outputs":[{"internalType":"uint256","name":"share","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address[]","name":"tos","type":"address[]"},{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"uint256[]","name":"shares","type":"uint256[]"}],"name":"transferMultiple","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"bool","name":"direct","type":"bool"},{"internalType":"bool","name":"renounce","type":"bool"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"uriBuilder","outputs":[{"internalType":"contract YieldBoxURIBuilder","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"wrappedNative","outputs":[{"internalType":"contract IWrappedNative","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"BoringCrypto, Keno","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"See {IERC20Permit-DOMAIN_SEPARATOR}."},"amountOf(address,uint256)":{"details":"Helper function represent the balance in `token` amount for a `user` for an `asset`.","params":{"assetId":"The id of the asset.","user":"The `user` to get the amount for."}},"assetTotals(uint256)":{"params":{"assetId":"The regierestered asset id"},"returns":{"totalAmount":"The total amount for asset","totalShare":"The total amount for asset represented in shares"}},"batch(bytes[],bool)":{"params":{"calls":"An array of inputs for each call.","revertOnFail":"If True then reverts after a failed call and stops doing further calls."}},"batchBurn(uint256,address[],uint256[])":{"params":{"amounts":"The amounts of tokens to burn.","froms":"The accounts to burn tokens from.","tokenId":"The token to be burned."}},"batchMint(uint256,address[],uint256[])":{"details":"If the tos array is longer than the amounts array there will be an out of bounds error. If the amounts array is longer, the extra amounts are simply ignored.For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.","params":{"amounts":"The amounts of tokens to mint.","tokenId":"The token to be minted.","tos":"The accounts to transfer the minted tokens to."}},"burn(uint256,address,uint256)":{"params":{"amount":"The amount of tokens to burn.","tokenId":"The token to be burned."}},"claimOwnership(uint256)":{"params":{"tokenId":"The `tokenId` of the token that ownership is claimed for."}},"createToken(string,string,uint8,string)":{"params":{"decimals":"The number of decimals of the token (this is just for display purposes). Should be set to 18 in normal cases.","name":"The name of the token.","symbol":"The symbol of the token."}},"deposit(uint8,address,address,uint256,address,address,uint256,uint256)":{"params":{"amount":"amount to deposit.","contractAddress":"Token address.","from":"which user to pull the tokens.","share":"amount to deposit represented in shares.","strategy":"Asset's strategy address.","to":"which account to push the tokens.","tokenId":"Registration token id.","tokenType":"Registration token type."},"returns":{"amountOut":"The amount deposited.","shareOut":"The deposited amount repesented in shares."}},"depositAsset(uint256,address,address,uint256,uint256)":{"params":{"amount":"Token amount in native representation to deposit.","assetId":"The id of the asset.","from":"which account to pull the tokens.","share":"Token amount represented in shares to deposit. Takes precedence over `amount`.","to":"which account to push the tokens."},"returns":{"amountOut":"The amount deposited.","shareOut":"The deposited amount repesented in shares."}},"depositETH(address,address,uint256)":{"params":{"amount":"amount to deposit.","strategy":"Asset's strategy address."},"returns":{"amountOut":"The amount deposited.","shareOut":"The deposited amount repesented in shares."}},"depositETHAsset(uint256,address,uint256)":{"params":{"amount":"ETH amount to deposit.","assetId":"The id of the asset.","to":"which account to push the tokens."},"returns":{"amountOut":"The amount deposited.","shareOut":"The deposited amount repesented in shares."}},"depositNFTAsset(uint256,address,address)":{"params":{"assetId":"The id of the asset.","from":"which account to pull the tokens.","to":"which account to push the tokens."},"returns":{"amountOut":"The amount deposited.","shareOut":"The deposited amount repesented in shares."}},"mint(uint256,address,uint256)":{"details":"For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.","params":{"amount":"The amount of tokens to mint.","to":"The account to transfer the minted tokens to.","tokenId":"The token to be minted."}},"nonces(address)":{"details":"See {IERC20Permit-nonces}."},"setApprovalForAll(address,bool)":{"params":{"approved":"True/False","operator":"The address approved to perform actions on your behalf"}},"setApprovalForAsset(address,uint256,bool)":{"params":{"approved":"True/False","assetId":"The asset id  to update approval status for","operator":"The address approved to perform actions on your behalf"}},"toAmount(uint256,uint256,bool)":{"details":"Helper function represent shares back into the `token` amount.","params":{"assetId":"The id of the asset.","roundUp":"If the result should be rounded up.","share":"The amount of shares."},"returns":{"amount":"The share amount back into native representation."}},"toShare(uint256,uint256,bool)":{"details":"Helper function to represent an `amount` of `token` in shares.","params":{"amount":"The `token` amount.","assetId":"The id of the asset.","roundUp":"If the result `share` should be rounded up."},"returns":{"share":"The token amount represented in shares."}},"transfer(address,address,uint256,uint256)":{"params":{"assetId":"The id of the asset.","from":"which user to pull the tokens.","share":"The amount of `token` in shares.","to":"which user to push the tokens."}},"transferMultiple(address,address[],uint256,uint256[])":{"params":{"assetId":"The id of the asset.","from":"which user to pull the tokens.","shares":"The amount of `token` in shares for each receiver in `tos`.","tos":"The receivers of the tokens."}},"transferOwnership(uint256,address,bool,bool)":{"params":{"direct":"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.","newOwner":"Address of the new owner.","renounce":"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.","tokenId":"The `tokenId` of the token that ownership whose ownership will be transferred/renounced."}},"withdraw(uint256,address,address,uint256,uint256)":{"params":{"amount":"of tokens. Either one of `amount` or `share` needs to be supplied.","assetId":"The id of the asset.","from":"which user to pull the tokens.","share":"Like above, but `share` takes precedence over `amount`.","to":"which user to push the tokens."}}},"title":"YieldBox","version":1},"evm":{"bytecode":{"functionDebugData":{"finalize_allocation":{"entryPoint":705,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"linkReferences":{},"object":"61018034620002bc576001600160401b036200586a601f38829003908101601f191684019083821185831017620002a65780859160409485948552833981010312620002bc5782516001600160a01b03939092908484168403620002bc5760200151918483168303620002bc578051936200007a85620002c1565b60088552600160208601670b2d2cad8c884def60c31b815260208451620000a181620002c1565b8381520196603160f81b885251902095208560e052610100968188524660a052835160208101927f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f988985528683015260608201524660808201523060a082015260a0815260c081019281841087851117620002a657838652815190206080523060c0526101209788526101409586820190811184821017620002a65785526004835260e08101916000808452898b840193828552019381855260065468010000000000000000811015620002925760018101806006558110156200027e576006835260036020842091020195519160058310156200026a575085549051610100600160a81b0360089190911b1660ff929092166001600160a81b0319909116171784559051600184018054919092166001600160a01b03199091161790555160029091015582526101609283525161558c9490939085620002de863960805185615384015260a05185615439015260c05185615355015260e051856153d3015251846153f9015251836153b00152518281816120d401528181612b080152818161479501526148d101525181818161040d015281816107f6015281816111060152612c1d0152f35b634e487b7160e01b81526021600452602490fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b83526041600452602483fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b604081019081106001600160401b03821117620002a65760405256fe6080604052600436101561001257600080fd5b60003560e01c8062ad800c14610355578062fdd58e1461035057806301e1e3b11461034b57806301ffc9a7146103465780630411b252146103415780630e89341c1461033c578063150b7a02146103375780631dbeeb4e146103325780631f0ee4c31461032d578063215b595a146103285780632482ee27146103235780632b800e3b1461031e5780632d4e1d52146103195780632eb2c2d6146103145780633644e5151461030f5780633f47e6621461030a578063442c1599146103055780634956d158146103005780634e1273f4146102fb5780634e41a1fb146102f657806354317d16146102f15780635ba4d64e146102ec5780636cd57031146102e757806370400fbe146102e257806375338079146102dd5780637c516e94146102d85780637ecebe00146102d3578063836a1040146102ce5780638d2e63b8146102c95780638eb22cdd146102c45780639a9af97a146102bf5780639eea5f66146102ba578063a123c33e146102b5578063a22cb465146102b0578063a3823ac0146102ab578063a75fcb1e146102a6578063aba07847146102a1578063b061db941461029c578063b8489fb514610297578063bc197c8114610292578063bd85b0391461028d578063ce7f271414610288578063cf35bdd014610283578063d2423b511461027e578063d505accf14610279578063daf210b114610274578063e985e9c51461026f578063eafe7a741461026a578063eb6d3a1114610265578063f23a6e6114610260578063f242432a1461025b5763fd330d431461025657600080fd5b612bfd565b612b9e565b612b79565b612ae8565b612aca565b612a60565b6129a3565b6128b0565b6127d2565b612768565b612673565b612647565b612620565b61257b565b61255f565b612469565b6123f0565b61209a565b611fe1565b611fac565b611f3b565b611c1c565b611b7c565b611b18565b611aaa565b611a6c565b6119ad565b61178c565b61177a565b6116f3565b61155b565b61146c565b61141e565b61131d565b6112a1565b6111a7565b6110a7565b611084565b610f9a565b610ea9565b610df8565b610d5d565b610b78565b610ac4565b6108dc565b610881565b61076e565b6106e8565b61067a565b61055b565b61048e565b6103b6565b60005b83811061036d5750506000910152565b818101518382015260200161035d565b906020916103968151809281855285808601910161035a565b601f01601f1916010190565b9060206103b392818152019061037d565b90565b346104785760203660031901126104785761040160006004356103d881612728565b5090825260076020526040808320905163aa1163b960e01b815293849283929060048401614fff565b03816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156104735761044e91600091610452575b50604051918291826103a2565b0390f35b61046d913d8091833e6104658183610aa2565b810190612ccf565b38610441565b612d98565b600080fd5b6001600160a01b0381160361047857565b34610478576040366003190112610478576001600160a01b036004356104b38161047d565b16600052600260205260406000206024356000526020526020604060002054604051908152f35b9181601f840112156104785782359167ffffffffffffffff8311610478576020808501948460051b01011161047857565b906060600319830112610478576004359167ffffffffffffffff91602435838111610478578261053d916004016104da565b9390939260443591821161047857610557916004016104da565b9091565b34610478576105693661050b565b919361058b60ff61057983612728565b50541661058581610e70565b156141a2565b60005b85811061059757005b8061061d6105a961064b93898961375c565b356105b38161047d565b6001600160a01b036105c6848b8b61375c565b356105d08161047d565b16600052600460205261061761061086610601336040600020906001600160a01b0316600052602052604060002090565b90600052602052604060002090565b5460ff1690565b90613a08565b61064661063361062e838a8a61375c565b61376c565b8461063f84898961375c565b35916141ee565b612c57565b61058e565b7fffffffff0000000000000000000000000000000000000000000000000000000081160361047857565b3461047857602036600319011261047857602060043561069981610650565b63ffffffff60e01b166301ffc9a760e01b81149081156106d7575b81156106c6575b506040519015158152f35b6303a24d0760e21b149050386106bb565b636cdb3d1360e11b811491506106b4565b34610478576080366003190112610478576004356107058161047d565b61076b602435916107158361047d565b6044356000936001600160a01b0383168552600460205261074b60408620336001600160a01b0316600052602052604060002090565b82865260205261076260ff60408720541684613a08565b606435926138a7565b80f35b346104785760203660031901126104785760043561078b81612728565b5090600080928282526007602052604082209060036020526107ea6107cf6107c26040862054966000526008602052604060002090565b546001600160a01b031690565b604051635c6d843560e01b8152958694859460048601614f7f565b03816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa908115610473578261044e9392610838575b5050604051918291826103a2565b61084c92503d8091833e6104658183610aa2565b388061082a565b9181601f840112156104785782359167ffffffffffffffff8311610478576020838186019501011161047857565b346104785760803660031901126104785761089d60043561047d565b6108a860243561047d565b60643567ffffffffffffffff8111610478576108c8903690600401610853565b5050604051630a85bd0160e11b8152602090f35b34610478576108ea3661050b565b91929380600052600860205261090f6001600160a01b03604060002054163314613bc7565b60005b84811061091b57005b8061064661092d61094a93888a61375c565b356109378161047d565b8461094384898961375c565b3591614103565b610912565b90600182811c9216801561097f575b602083101461096957565b634e487b7160e01b600052602260045260246000fd5b91607f169161095e565b906000929180549161099a8361094f565b9182825260019384811690816000146109fc57506001146109bc575b50505050565b90919394506000526020928360002092846000945b8386106109e85750505050010190388080806109b6565b8054858701830152940193859082016109d1565b9294505050602093945060ff191683830152151560051b010190388080806109b6565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610a4957604052565b610a1f565b60c0810190811067ffffffffffffffff821117610a4957604052565b60e0810190811067ffffffffffffffff821117610a4957604052565b6080810190811067ffffffffffffffff821117610a4957604052565b90601f8019910116810190811067ffffffffffffffff821117610a4957604052565b34610478576020366003190112610478576004356000526007602052610b59604061044e81600020916003815193610b0785610b008184610989565b0386610aa2565b610b678351610b2481610b1d8160018701610989565b0382610aa2565b610b4660ff60028501541693610b3f87518097819301610989565b0385610aa2565b845197889760808952608089019061037d565b90878203602089015261037d565b92850152838203606085015261037d565b3461047857608036600319011261047857600435610b958161047d565b67ffffffffffffffff60243581811161047857610bb69036906004016104da565b9190926044359160643590811161047857610bd59036906004016104da565b94906001600160a01b03808416916000978389526004602052604090610c0f828b20336001600160a01b0316600052602052604060002090565b6000198b52602052610c2760ff838c20541688613a08565b888a5b818110610d2157505089988a5b818110610c71578b8b610c6c610c648d6106018e6001600160a01b03166000526002602052604060002090565b91825461388d565b905580f35b89878188610c8085878e61375c565b610c899061376c565b9e8f610c96878a8d61375c565b3593610cb685926001600160a01b03166000526002602052604060002090565b60009182526020526040902081815490610ccf9161389a565b9055610cda9161389a565b88519485526020850192909252909d169133907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6290604090a4610d1c90612c57565b610c37565b610646610d44610d3861062e84610d4b968d61375c565b6001600160a01b031690565b1515614ce3565b8990610c2a565b60ff81160361047857565b346104785760803660031901126104785767ffffffffffffffff60043581811161047857610d8f903690600401610853565b60249291923582811161047857610daa903690600401610853565b60449491943590610dba82610d52565b6064359485116104785761044e95610dd9610de1963690600401610853565b959094613ed2565b60405163ffffffff90911681529081906020820190565b3461047857602036600319011261047857600435600052600960205260206001600160a01b0360406000205416604051908152f35b6005111561047857565b608090600319011261047857600435610e4f81610e2d565b90602435610e5c8161047d565b90604435610e698161047d565b9060643590565b60051115610e7a57565b634e487b7160e01b600052602160045260246000fd5b610e9981610e70565b6000526005602052604060002090565b3461047857610eef610f07610ebd36610e37565b94919092610eca81610e70565b60005260056020526040600020906001600160a01b0316600052602052604060002090565b906001600160a01b0316600052602052604060002090565b906000526020526020604060002054604051908152f35b9060a060031983011261047857600435610f378161047d565b91602435610f448161047d565b9167ffffffffffffffff6044358181116104785783610f65916004016104da565b939093926064358381116104785782610f80916004016104da565b939093926084359182116104785761055791600401610853565b3461047857610fa836610f1e565b610fb883869499989596146136f8565b610fc18761395d565b610fcf88868589888c613ae8565b833b610fd757005b6020956110096001600160a01b03926000946040519b8c998a98899663bc197c8160e01b9e8f89523360048a01613a70565b0393165af18015610473576110499260009161104b575b507fffffffff0000000000000000000000000000000000000000000000000000000016146137f5565b005b61106c915060203d8111611072575b6110648183610aa2565b81019061378a565b38611020565b503d61105a565b600091031261047857565b3461047857600036600319011261047857602061109f61534b565b604051908152f35b34610478576020366003190112610478576110fa60206004356110c981612728565b50906000526007825260ff60026040600020015416906040519384928392636d7cd03760e01b845260048401615032565b03816001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa80156104735761044e9160009161114f575b5060405160ff90911681529081906020820190565b611170915060203d8111611176575b6111688183610aa2565b81019061501d565b3861113a565b503d61115e565b8015150361047857565b60609060031901126104785760043590602435906044356103b38161117d565b34610478576111b536611187565b600092919260ff6111c584612728565b5054166111d181610e70565b158015611281575b156111f65750505061044e905b6040519081529081906020820190565b808361122092526003602052611219611213604083205495612728565b5061463d565b9050612c57565b926305f5e100830180931161127c57836112468461124161044e978561545f565b615472565b9383611263575b505050156111e65761125e90612c57565b6111e6565b611273929350611241908561545f565b1038808061124d565b612c41565b50600260ff61128f85612728565b50541661129b81610e70565b146111d9565b34610478576020366003190112610478576004358060005260036020526112d061121360406000205492612728565b60408051928352602083019190915290f35b6020908160408183019282815285518094520193019160005b828110611309575050505090565b8351855293810193928101926001016112fb565b34610478576040806003193601126104785767ffffffffffffffff90600435828111610478576113519036906004016104da565b9190926024359081116104785761136c9036906004016104da565b93906113798585146136f8565b61138284613744565b9361138f84519586610aa2565b808552601f1961139e82613744565b016020903682880137600091825b8181106113c05786518061044e8a826112e2565b806001600160a01b036113d761141993858a61375c565b356113e18161047d565b168552600284526114088886206113f9838d8a61375c565b35600052602052604060002090565b54611413828b613776565b52612c57565b6113ac565b3461047857602036600319011261047857610401600060043561144081612728565b509082526007602052604080832090516384b1017d60e01b815293849283926001019060048401614fff565b346104785760403660031901126104785761044e60043561148c8161047d565b602435600060ff61149c83612728565b5054166114a881610e70565b15801561153b575b156114e757506106016114d6926001600160a01b03166000526002602052604060002090565b546040519081529081906020820190565b816040611512926001600160a01b0361125e9616815260026020522090600052602052604060002090565b549061153561121361152e836000526003602052604060002090565b5492612728565b91615501565b50600260ff61154984612728565b50541661155581610e70565b146114b0565b346104785760803660031901126104785760043560243561157b8161047d565b604435916115888361117d565b606435906115958261117d565b60009381855260086020526001600160a01b03906115ba826040882054163314613bc7565b156116c657808416928315908115916116be575b50156116795761076b9361165c9361164c926115f76107c2866000526008602052604060002090565b16847f16b85f49bf01212961345d3016c9a531894accf62eb7680f2045d79185cc0ec08980a4611631836000526008602052604060002090565b906001600160a01b03166001600160a01b0319825416179055565b6000526009602052604060002090565b805473ffffffffffffffffffffffffffffffffffffffff19169055565b60405162461bcd60e51b815260206004820152601160248201527f4e54463a207a65726f20616464726573730000000000000000000000000000006044820152606490fd5b9050386115ce565b5061076b9291508352600960205260408320906001600160a01b03166001600160a01b0319825416179055565b3461047857610100366003190112610478576112d060043561171481610e2d565b6024356117208161047d565b6044359161172d8361047d565b6084356117398161047d565b60a435916117468361047d565b60e4359460c435946064359261504e565b606090600319011261047857600435906024356117738161047d565b9060443590565b6112d061178636611757565b91614724565b34610478576060366003190112610478576024356004356117ac8261047d565b604435906117b98261047d565b6001600160a01b03908184169160009083825260046020526040956117f2878420336001600160a01b0316600052602052604060002090565b84845260205261180860ff888520541682613a08565b61181184612728565b50906118326002611823845460ff1690565b61182c81610e70565b1461468c565b61183c858861406a565b611857610d38610d3884546001600160a01b039060081c1690565b60018301926002611872610d3886546001600160a01b031690565b91015492823b156119a9578a51632142170760e11b81526001600160a01b03918216600482015291166024820152604481019290925290919084908390606490829084905af1908115610473576118da92610d3892611996575b50546001600160a01b031690565b91823b156119935786516357d48e6360e11b815260016004820152928390602490829084905af1918215610473577f1ad178ff1b5d2c6dc0f3e4e2578b3d445e601c5beae2f63a73f237e480df2fd09261197a575b5085519416938061196733948260a060019193929360c081019481528260208201528260408201528260608201528260808201520152565b0390a45160018082526020820152604090f35b8061198761198d92610a35565b80611079565b3861192f565b80fd5b806119876119a392610a35565b386118cc565b8680fd5b3461047857610100366003190112610478576004356119cb8161047d565b6024356119d78161047d565b604435916119e48361047d565b60a435916119f183610d52565b6001600160a01b0380921690813b1561047857600060e49260ff829686604051998a98899763d505accf60e01b89521660048801521660248601526064356044860152608435606486015216608484015260c43560a4840152833560c48401525af1801561047357611a5f57005b8061198761104992610a35565b34610478576020366003190112610478576001600160a01b03600435611a918161047d565b1660005260006020526020604060002054604051908152f35b3461047857611049611abb36611757565b9190816000526008602052611adf6001600160a01b03604060002054163314613bc7565b614103565b60a09060031901126104785760043590602435611b008161047d565b90604435611b0d8161047d565b906064359060843590565b34610478576112d0611b2936611ae4565b936001600160a01b03849294166000526004602052611b5e6040600020336001600160a01b0316600052602052604060002090565b81600052602052611b7760ff6040600020541683613a08565b6149cd565b3461047857611b8a36611187565b600060ff611b9785612728565b505416611ba381610e70565b158015611bfc575b15611bbe57505060405190815260209150f35b8084611bdb92526003602052611219611213604083205496612728565b916305f5e100840180941161127c57836112468461124161044e978561545f565b50600260ff611c0a86612728565b505416611c1681610e70565b14611bab565b3461047857611c2a36611ae4565b9293916001600160a01b0392838616906000948286526004602052604094611c66868820336001600160a01b0316600052602052604060002090565b838852602052611c7c60ff87892054168a613a08565b9680611c8784612728565b5091611cb0611c97845460ff1690565b611ca081610e70565b8015159081611f26575b506144fc565b611cb98361463d565b9180611efc575050611ce18991611cda866000526003602052604060002090565b5483615492565b995b611cee8b8689614103565b838354600160ff8216611d0081610e70565b03611e1557505082611d4a610d3893600193611d2d610d38611d5898546001600160a01b039060081c1690565b90611d44610d38878701546001600160a01b031690565b9161455d565b01546001600160a01b031690565b95863b156119935785516357d48e6360e11b815260048101899052968790602490829084905af19081156104735761044e967f1ad178ff1b5d2c6dc0f3e4e2578b3d445e601c5beae2f63a73f237e480df2fd092611e02575b50855194169380611de98a8a33968460a091949360009360c08301968352602083015260408201528260608201528260808201520152565b0390a45191825260208201929092529081906040820190565b80611987611e0f92610a35565b38611db1565b60081c16308103611e55575082611e50610d3893600193611e45610d3886611d589901546001600160a01b031690565b6002850154916138a7565b611d4a565b909150611e6f610d3860018501546001600160a01b031690565b600284015492823b15611ef8578951637921219560e11b81526001600160a01b039182166004820152911660248201526044810192909252606482018a905260a06084830152600060a48301528890829060c490829084905af1801561047357611d5892610d3892600192611ee5575b50611d4a565b80611987611ef292610a35565b38611edf565b8a80fd5b611f1f92919b9a50611f18866000526003602052604060002090565b5490615527565b8098611ce3565b60029150611f3381610e70565b141538611caa565b346104785761076b611f4c36611757565b9092916000936001600160a01b03811685526004602052611f8260408620336001600160a01b0316600052602052604060002090565b828652602052611f9960ff60408720541682613a08565b611fa760ff61057984612728565b6141ee565b3461047857602036600319011261047857600435600052600860205260206001600160a01b0360406000205416604051908152f35b3461047857604036600319011261047857600435611ffe8161047d565b60243561200a8161117d565b61206a816120596001600160a01b03851694612027861515614d2f565b61203330871415614d7b565b3360005260016020526040600020906001600160a01b0316600052602052604060002090565b9060ff801983541691151516179055565b60405190151581527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b6060366003190112610478576004356120b28161047d565b602435906120bf8261047d565b600160005260056020526001600160a01b03917f0000000000000000000000000000000000000000000000000000000000000000831661213361212484610eef847f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b82565b60008052602052604060002090565b54928315612149575b6112d06044358486614724565b9091925083811693604090815195630c3e9ce360e21b87526020968781600481855afa908115610473576000916123c3575b5061218581610e70565b6001149182612364575b50816122c3575b507f30605d4cd099421ed12ca1ba642a1ea2659f679b5cdd0ccd032586640eeaff436112d0966000946122b96122209897956121d3600196613175565b6121df873b15156131c1565b600654998a94612207896121f1612c74565b60018152925b8301906001600160a01b03169052565b6001600160a01b03851681840152896060820152613219565b600160005260056020528361225a61212485610eef8b7f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b82565b55837f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b8251806122968160409060208152600060208201520190565b0390a25192839283602090939291936001600160a01b0360408201951681520152565b0390a4388061213c565b82516305f5c3df60e21b81529395949291508690849060049082905afa928315610473576112d096612220966122b96001946121d36000987f30605d4cd099421ed12ca1ba642a1ea2659f679b5cdd0ccd032586640eeaff43968a91612337575b5015965050959798505094509650612196565b6123579150863d881161235d575b61234f8183610aa2565b810190613166565b38612324565b503d612345565b8351633dad37ed60e21b8152919250908781600481865afa90811561047357600091612396575b50168414903861218f565b6123b69150883d8a116123bc575b6123ae8183610aa2565b810190613151565b3861238b565b503d6123a4565b6123e39150883d8a116123e9575b6123db8183610aa2565b81019061313c565b3861217b565b503d6123d1565b346104785760603660031901126104785761244b6004356124108161047d565b6001600160a01b03602435916124258361047d565b1660005260046020526040600020906001600160a01b0316600052602052604060002090565b604435600052602052602060ff604060002054166040519015158152f35b346104785760c0366003190112610478576110496004356124898161047d565b602435906124968261047d565b61255a6064356044356124a882610d52565b6124b4814211156150bf565b6125536124dd856001600160a01b03166000526000602052604060002090815491600183019055565b9260405160208101917f8b2a9c07938b6d62909dc00103ea4e71485caf5019e7fa95b0a87e13825663b083526001600160a01b039485891696876040850152868b166060850152608084015260a083015260a0825261253b82610a4e565b61254e60a4359360843593519020615314565b615160565b161461510a565b614dc6565b3461047857602061109f61257236610e37565b92919091612da4565b34610478576060366003190112610478576004356125988161047d565b6044356024356125a78261117d565b6125c76001600160a01b0384166125bf811515614d2f565b301415614d7b565b6006548110156125db576110499233614eb6565b60405162461bcd60e51b815260206004820152601960248201527f5969656c64426f783a206173736574206e6f742076616c6964000000000000006044820152606490fd5b346104785761262e36610f1e565b5050505050505050602060405163bc197c8160e01b8152f35b346104785760203660031901126104785760043560005260036020526020604060002054604051908152f35b346104785760203660031901126104785760043560009080825260096020526001600160a01b039081604084205416908133036126cd5761164c8261165c9361076b956115f76107c2866000526008602052604060002090565b60405162461bcd60e51b815260206004820152601c60248201527f4e54463a2063616c6c657220213d2070656e64696e67206f776e6572000000006044820152606490fd5b634e487b7160e01b600052603260045260246000fd5b600654811015612763576003906006600052027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b612712565b346104785760203660031901126104785760043560065481101561047857612791608091612728565b50805460ff8116916001600160a01b0360028160018401541692015492604051946127bb81610e70565b855260081c16602084015260408301526060820152f35b6040806003193601126104785767ffffffffffffffff600480358281116104785761280090369083016104da565b926024359161280e8361117d565b60005b85811061281a57005b8060051b820135601e198336030181121561047857820180359084821161047857602001813603811361047857600091829161285a8b5180938193612c66565b0390305af4612867612c9f565b9015806128a9575b612882575061287d90612c57565b612811565b856128a56128908a93612d2e565b925162461bcd60e51b815292839283016103a2565b0390fd5b508461286f565b346104785760e0366003190112610478576110496004356128d08161047d565b6024356128dc8161047d565b6044359161299e6084356064356128f282610d52565b6128fe814211156150bf565b612553612927856001600160a01b03166000526000602052604060002090815491600183019055565b9260405160208101917f54a3a030f29b87fffaacb4fafc4220ef9c3eba67ec74140bd9e716826be356b183526001600160a01b039485891696876040850152868b1660608501528b608085015260a084015260c083015260c0825261298b82610a6a565b61254e60c4359360a43593519020615314565b614e36565b34610478576080366003190112610478576004356129c08161047d565b6024356129cc8161047d565b67ffffffffffffffff90604435828111610478576129ee9036906004016104da565b60649291923593841161047857612a0c61076b9436906004016104da565b9390926000966001600160a01b03811688526004602052612a4260408920336001600160a01b0316600052602052604060002090565b6000198952602052612a5b60ff60408a20541682613a08565b613ae8565b3461047857604036600319011261047857602060ff612abe600435612a848161047d565b6001600160a01b0360243591612a998361047d565b16600052600184526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b34610478576000366003190112610478576020600654604051908152f35b346104785760003660031901126104785760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b60a060031982011261047857600435612b448161047d565b91602435612b518161047d565b9160443591606435916084359067ffffffffffffffff82116104785761055791600401610853565b3461047857612b8736612b2c565b505050505050602060405163f23a6e6160e01b8152f35b3461047857612bac36612b2c565b94939091612bb98561395d565b612bc5818584886138a7565b813b612bcd57005b60006001600160a01b03602095611009604051998a978896879463f23a6e6160e01b9c8d875233600488016137c0565b346104785760003660031901126104785760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b634e487b7160e01b600052601160045260246000fd5b600019811461127c5760010190565b908092918237016000815290565b60405190612c8182610a86565b565b67ffffffffffffffff8111610a4957601f01601f191660200190565b3d15612cca573d90612cb082612c83565b91612cbe6040519384610aa2565b82523d6000602084013e565b606090565b6020818303126104785780519067ffffffffffffffff8211610478570181601f82011215610478578051612d0281612c83565b92612d106040519485610aa2565b81845260208284010111610478576103b3916020808501910161035a565b6044815110612d4d578060248060046103b39401518301019101612ccf565b506040516040810181811067ffffffffffffffff821117610a4957604052601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b6040513d6000823e3d90fd5b929091612db084610e70565b6001841493841594856130dd575b80156130ca575b1561308557612ddf8361060184610eef88610eef87610e90565b54948515612df0575b505050505090565b83612e0992939495965015908115613074575b506130f0565b612e1281610e70565b8015808015612f50575b612e2590613175565b612e2e82610e70565b80612f3f575b8015612f35575b612e44906131c1565b7f30605d4cd099421ed12ca1ba642a1ea2659f679b5cdd0ccd032586640eeaff436001600160a01b0360065495612eaf612e7c612c74565b612e86868261320d565b6001600160a01b03831660208201526001600160a01b0387166040820152876060820152613219565b86612ec58761060188610eef86610eef8b610e90565b55867f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b60405180612f028160409060208152600060208201520190565b0390a2612f0e84610e70565b604080516001600160a01b0396909616865260208601889052911693a43880808080612de8565b50833b1515612e3b565b506001600160a01b03841615612e34565b50604051630c3e9ce360e21b81526020906001600160a01b0390858216908381600481855afa90811561047357600091613057575b50612f8f81610e70565b612f9886610e70565b85149182613004575b5081612fb0575b509050612e1c565b6040516305f5c3df60e21b815291508290829060049082905afa90811561047357612e2592600092612fe7575b5050851438612fa8565b612ffd9250803d1061235d5761234f8183610aa2565b3880612fdd565b604051633dad37ed60e21b8152919250908381600481865afa801561047357829160009161303a575b5016908816149038612fa1565b6130519150853d87116123bc576123ae8183610aa2565b3861302d565b61306e9150843d86116123e9576123db8183610aa2565b38612f85565b905061307f83610e70565b38612e03565b60405162461bcd60e51b815260206004820152601f60248201527f41737365744d616e616765723a2063616e6e6f7420616464204e6174697665006044820152606490fd5b506130d481610e70565b60038114612dc5565b506130e781610e70565b60028114612dbe565b156130f757565b60405162461bcd60e51b815260206004820152601e60248201527f5969656c64426f783a204e6f20746f6b656e496420666f7220455243323000006044820152606490fd5b9081602091031261047857516103b381610e2d565b9081602091031261047857516103b38161047d565b90816020910312610478575190565b1561317c57565b60405162461bcd60e51b815260206004820152601b60248201527f5969656c64426f783a205374726174656779206d69736d6174636800000000006044820152606490fd5b156131c857565b60405162461bcd60e51b815260206004820152601560248201527f5969656c64426f783a204e6f74206120746f6b656e00000000000000000000006044820152606490fd5b61321682610e70565b52565b60065468010000000000000000811015610a495780600161323d9201600655612728565b9190916132e9576060816002925161325481610e70565b61325d81610e70565b60ff855491168060ff1983161786557fffffffffffffffffffffff00000000000000000000000000000000000000000074ffffffffffffffffffffffffffffffffffffffff00602085015160081b169216171784556132e26001600160a01b0360408301511660018601906001600160a01b03166001600160a01b0319825416179055565b0151910155565b634e487b7160e01b600052600060045260246000fd5b60008181527f5baca6d381f98bdad74684704e9a88f2c190f7e9f75e6b88e5b7882fdf888198602052604081205492918315613339575050565b80919350158015613430575b61334e906130f0565b6006549261337761335d612c74565b828152826020820152826040820152836060820152613219565b600080526005602052836133af836106016121247f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc81565b55837f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b604051806133ec8160409060208152600060208201520190565b0390a2807f30605d4cd099421ed12ca1ba642a1ea2659f679b5cdd0ccd032586640eeaff436040518061342b8882919060206040840193600081520152565b0390a4565b506001613345565b600360005260056020529092916134758161060186610eef867fa9bc9a3a348c357ba16b37005d7e6b3236198c0e939f4af8c5f19b8deeb8ebc082565b5493841561348257505050565b90809294501580156136f0575b613498906130f0565b60408051630c3e9ce360e21b81526001600160a01b039591602091848816908381600481855afa908115610473576000916136d3575b506134d881610e70565b6003149081613683575b816135fa575b509261342b7f30605d4cd099421ed12ca1ba642a1ea2659f679b5cdd0ccd032586640eeaff4393613560999361351f600397613175565b61352b843b15156131c1565b6006549a8b926135478661353d612c74565b60038152926121f7565b6001600160a01b038a16818401528a6060820152613219565b600360005260056020528161359b8a6106018b610eef897fa9bc9a3a348c357ba16b37005d7e6b3236198c0e939f4af8c5f19b8deeb8ebc082565b55817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b8251806135d78160409060208152600060208201520190565b0390a2516001600160a01b03909716875260208701529116939081906040820190565b82516305f5c3df60e21b81529398929491508890849060049082905afa8015610473576135609860039561351f61342b937f30605d4cd099421ed12ca1ba642a1ea2659f679b5cdd0ccd032586640eeaff4397600091613666575b508a149497505093995093506134e8565b61367d9150843d861161235d5761234f8183610aa2565b38613655565b8251633dad37ed60e21b81529091508381600481855afa80156104735789916000916136b6575b501688851614906134e2565b6136cd9150853d87116123bc576123ae8183610aa2565b386136aa565b6136ea9150843d86116123e9576123db8183610aa2565b386134ce565b50600161348f565b156136ff57565b60405162461bcd60e51b815260206004820152601860248201527f455243313135353a204c656e677468206d69736d6174636800000000000000006044820152606490fd5b67ffffffffffffffff8111610a495760051b60200190565b91908110156127635760051b0190565b356103b38161047d565b80518210156127635760209160051b010190565b9081602091031261047857516103b381610650565b908060209392818452848401376000828201840152601f01601f1916010190565b91926103b396949160a0946001600160a01b03809216855216602084015260408301526060820152816080820152019161379f565b156137fc57565b60405162461bcd60e51b815260206004820152601260248201527f57726f6e672072657475726e2076616c756500000000000000000000000000006044820152606490fd5b1561384857565b60405162461bcd60e51b815260206004820152600c60248201527f4e6f2030206164647265737300000000000000000000000000000000000000006044820152606490fd5b9190820391821161127c57565b9190820180921161127c57565b929190916001600160a01b03808416946138c2861515613841565b169260008481526002602052604081208482526020526040812080549284840393841161127c5760409361390a92556001600160a01b03166000526002602052604060002090565b8482526020522080549180830180931161127c5791905560408051928352602083019190915233917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62918190810161342b565b6001600160a01b03163381149081156139ff575b81156139c5575b501561398057565b60405162461bcd60e51b815260206004820152601460248201527f5472616e73666572206e6f7420616c6c6f7765640000000000000000000000006044820152606490fd5b90506000526001602052600160ff6139f4336040600020906001600160a01b0316600052602052604060002090565b541615151438613978565b60009150613971565b6001600160a01b0316338114918215613a2b575b5081156139c557501561398057565b915038613a1c565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116104785760209260051b809284830137010190565b969492613ab394613aa5926103b39a98946001600160a01b038092168b521660208a015260a060408a015260a0890191613a33565b918683036060880152613a33565b92608081850391015261379f565b9290613ada906103b39593604086526040860191613a33565b926020818503910152613a33565b9094939192936001600160a01b039283871696613b06881515613841565b60005b878110613b4a5750507f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb93929161342b916040519485941697339785613ac1565b80613b59613bc2928a8a61375c565b35613bbb613bb3613b6b84898961375c565b35928a8a1660005260206002815260409081600020908360005252600020613b9485825461388d565b9055610601876001600160a01b03166000526002602052604060002090565b91825461389a565b9055612c57565b613b09565b15613bce57565b60405162461bcd60e51b815260206004820152601c60248201527f4e54463a2063616c6c6572206973206e6f7420746865206f776e6572000000006044820152606490fd5b929192613c1f82612c83565b91613c2d6040519384610aa2565b829481845281830111610478578281602093846000960137010152565b90601f8111613c5857505050565b600091825260208220906020601f850160051c83019410613c94575b601f0160051c01915b828110613c8957505050565b818155600101613c7d565b9092508290613c74565b919091825167ffffffffffffffff8111610a4957613cc681613cc0845461094f565b84613c4a565b602080601f8311600114613d02575081929394600092613cf7575b50508160011b916000199060031b1c1916179055565b015190503880613ce1565b90601f19831695613d1885600052602060002090565b926000905b888210613d5557505083600195969710613d3c575b505050811b019055565b015160001960f88460031b161c19169055388080613d32565b80600185968294968601518155019501930190613d1d565b919091825192835167ffffffffffffffff8111610a4957613d9881613d92855461094f565b85613c4a565b6020948590601f8311600114613e1957612c8195968360609460039694613de194600092613e0e575b50508160011b9160001990881b1c19161786555b82015160018601613c9e565b613e05613df2604083015160ff1690565b600286019060ff1660ff19825416179055565b01519101613c9e565b015190503880613dc1565b90601f19831691613e2f86600052602060002090565b9260005b818110613e7b57508460039694613de194612c819a9b9460609860019510613e63575b505050811b018655613dd5565b0151600019838a1b60f8161c19169055388080613e56565b929389600181928786015181550195019301613e33565b9496959163ffffffff93606095613eb760ff94613ec59460808b5260808b019161379f565b9188830360208a015261379f565b9616604085015216910152565b9496959396929091926006549763ffffffff92838a1161402557613f817f0b0bcdebd2813328a89a9ed5971e5863201ed78fc4e0e2b271cceddb9ce9051097613fad95613f5d9c169b8c95613f26876132ff565b50613f2f612c74565b92613f3b368b8f613c13565b8452613f4836878d613c13565b602085015260ff871660408501523691613c13565b6060820152613f7c8563ffffffff166000526007602052604060002090565b613d6d565b613f9f336116318563ffffffff166000526008602052604060002090565b604051958695339987613e92565b0390a26000806040517fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62339180613ff88882602060009193929363ffffffff60408201951681520152565b0390a4336000837f16b85f49bf01212961345d3016c9a531894accf62eb7680f2045d79185cc0ec08280a4565b60405162461bcd60e51b815260206004820152601b60248201527f426f72696e674d6174683a2075696e743332204f766572666c6f7700000000006044820152606490fd5b6001600160a01b03169061407f821515613841565b81600052600260205260406000208160005260205260406000208054906001820180921161127c57556140bc816000526003602052604060002090565b9081546001810180911161127c5760009255604051908152600160208201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260403392a4565b6001600160a01b03169190614119831515613841565b826000526002602052604060002081600052602052604060002080549083820180921161127c5755614155816000526003602052604060002090565b80549083820180921161127c575560408051918252602082019290925260009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62918190810161342b565b156141a957565b60405162461bcd60e51b815260206004820152600f60248201527f4e54463a204e6f74206e617469766500000000000000000000000000000000006044820152606490fd5b6001600160a01b031690614203821515613841565b816000526002602052604060002081600052602052604060002080549084820391821161127c575561423f816000526003602052604060002090565b80549084820391821161127c575560408051918252602082019390935260009233917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62918190810161342b565b94939290946001600160a01b03918287169260009184835260046020526142c860408420336001600160a01b0316600052602052604060002090565b8484526020526142df60ff6040852054168a613a08565b95806142ea85612728565b50916142fa611c97845460ff1690565b6143038361463d565b91806144d95750506143248891611cda876000526003602052604060002090565b995b6143318b878a614103565b838354600160ff821661434381610e70565b0361441957505082611d4a610d3893600193611d2d610d3861437098546001600160a01b039060081c1690565b91823b15611993576040516357d48e6360e11b815260048101889052928390602490829084905af1918215610473577f1ad178ff1b5d2c6dc0f3e4e2578b3d445e601c5beae2f63a73f237e480df2fd092614406575b50604051941693806143ff898833968460a091949360009360c08301968352602083015260408201528260608201528260808201520152565b0390a49190565b8061198761441392610a35565b386143c6565b60081c16308103614449575082611e50610d3893600193611e45610d38866143709901546001600160a01b031690565b909150614463610d3860018501546001600160a01b031690565b600284015492823b156119a957604051637921219560e11b81526001600160a01b0391821660048201529116602482015260448101929092526064820189905260a06084830152600060a48301528490829060c490829084905af180156104735761437092610d3892600192611ee55750611d4a565b6144f592919b9950611f18876000526003602052604060002090565b8097614326565b1561450357565b60405162461bcd60e51b815260206004820152601c60248201527f5969656c64426f783a2063616e2774206465706f7369742074797065000000006044820152606490fd5b9081602091031261047857516103b38161117d565b6040516323b872dd60e01b602082019081526001600160a01b039384166024830152938316604482015260648101949094526000938493919284916145af81608481015b03601f198101835282610aa2565b5193165af16145bc612c9f565b8161460e575b50156145ca57565b606460405162461bcd60e51b815260206004820152602060248201527f426f72696e6745524332303a205472616e7366657246726f6d206661696c65646044820152fd5b8051801592508215614623575b5050386145c2565b6146369250602080918301019101614548565b388061461b565b60206001600160a01b0360016004930154166040519283809263ce845d1d60e01b82525afa90811561047357600091614674575090565b6103b3915060203d811161235d5761234f8183610aa2565b1561469357565b60405162461bcd60e51b815260206004820152601460248201527f5969656c64426f783a206e6f74204552433732310000000000000000000000006044820152606490fd5b156146df57565b60405162461bcd60e51b815260206004820152601b60248201527f5969656c64426f783a206e6f7420777261707065644e617469766500000000006044820152606490fd5b9291909261473181612728565b50936147558554600160ff821661474781610e70565b1490816148c4575b506146d8565b61477d61476c836000526003602052604060002090565b546147768761463d565b9085615492565b94614789868484614103565b6001600160a01b0390817f00000000000000000000000000000000000000000000000000000000000000001690813b1561047857604051630d0e30db60e41b8152916000836004818a855af1918215610473578760016107c29261480d96610d38966148b1575b500192614807610d3885546001600160a01b031690565b906148fd565b803b15610478576040516357d48e6360e11b815260048101869052906000908290602490829084905af180156104735761489e575b506040519116917f1ad178ff1b5d2c6dc0f3e4e2578b3d445e601c5beae2f63a73f237e480df2fd03392806143ff898833968460a091949360009360c08301968352602083015260408201528260608201528260808201520152565b806119876148ab92610a35565b38614842565b806119876148be92610a35565b386147f0565b90506001600160a01b03807f0000000000000000000000000000000000000000000000000000000000000000169160081c16143861474f565b60405163a9059cbb60e01b602082019081526001600160a01b03938416602483015260448201949094526000938493909184919061493e81606481016145a1565b5193165af161494b612c9f565b8161499e575b501561495957565b60405162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c6564000000006044820152606490fd5b80518015925082156149b3575b505038614951565b6149c69250602080918301019101614548565b38806149ab565b939291906149da85612728565b509460ff8654166149ea81610e70565b8015614b6e57806149fc600292610e70565b14614a0a5761055795614bb3565b92509250926001600160a01b0380931692614a26841515613841565b600091848352600260205260409081842085855260205281842080546000199182820191821161127c5755614a65866000526003602052604060002090565b805491820191821161127c57614abc92859260019255868986518a81528460208201527fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62883392a40154166001600160a01b031690565b92833b1561199357815163f3fef3a360e01b81526001600160a01b038816600482015260016024820152938490604490829084905af1928315610473577fd4594021cdd03e2c0abc8108cba8d75a347eaf64acaddede25df63f6ef9e242093614b5b575b505194169380614b51339482608060019193929360a081019481528260208201528260408201528260608201520152565b0390a46001908190565b80611987614b6892610a35565b38614b20565b60405162461bcd60e51b815260206004820152601f60248201527f5969656c64426f783a2063616e2774207769746864726177204e6174697665006044820152606490fd5b9594929192614bc18761463d565b9080614cb35750610d386001614bef614bfc93614be8866000526003602052604060002090565b54896154b9565b985b611d4a8a86896141ee565b803b156104785760405163f3fef3a360e01b81526001600160a01b038416600482015260248101869052906000908290604490829084905af1801561047357614ca0575b507fd4594021cdd03e2c0abc8108cba8d75a347eaf64acaddede25df63f6ef9e2420604051926001600160a01b03809116941692806143ff8988339684608091949360009360a08301968352602083015260408201528260608201520152565b80611987614cad92610a35565b38614c40565b969450610d386001614cdd614bfc93614cd6866000526003602052604060002090565b548b615501565b96614bf1565b15614cea57565b60405162461bcd60e51b815260206004820152601460248201527f5969656c64426f783a20746f206e6f74207365740000000000000000000000006044820152606490fd5b15614d3657565b60405162461bcd60e51b815260206004820152601a60248201527f5969656c64426f783a206f70657261746f72206e6f74207365740000000000006044820152606490fd5b15614d8257565b606460405162461bcd60e51b815260206004820152602060248201527f5969656c64426f783a2063616e277420617070726f7665207969656c64426f786044820152fd5b7f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160206001600160a01b03809316928360005260018252614e1e856040600020906001600160a01b0316600052602052604060002090565b600160ff1982541617905560405194600186521693a3565b60407f6aceb1b079beeabdd8c2f30cd221ca27ec52e9d0aef6bb229cc175cf15dd778b916001600160a01b0380911693846000526004602052614e8f8184600020906001600160a01b0316600052602052604060002090565b8660005260205282600020600160ff198254161790558251958652600160208701521693a3565b6040907f6aceb1b079beeabdd8c2f30cd221ca27ec52e9d0aef6bb229cc175cf15dd778b929493946001600160a01b0380921694856000526004602052614f138285600020906001600160a01b0316600052602052604060002090565b87600052602052614f3381856000209060ff801983541691151516179055565b8351968752151560208701521693a3565b6002606091805460ff8116614f5881610e70565b85526001600160a01b03809160081c16602086015260018201541660408501520154910152565b929493614ff360c093614f9a866001600160a01b0395614f44565b60e06080870152608060e08701526003614fb8610160880183610989565b91614fd460df1993848a8203016101008b015260018301610989565b9260ff6002830154166101208a01528884030161014089015201610989565b9560a085015216910152565b8061501060a0926103b39594614f44565b8160808201520190610989565b9081602091031261047857516103b381610d52565b90929160ff6080916150488460a0810197614f44565b16910152565b979695949392919061505f89610e70565b8861507b5750610557969750906150769130613438565b61428c565b6150889398959495612da4565b6001600160a01b03918287169260009184835260046020526142c860408420336001600160a01b0316600052602052604060002090565b156150c657565b606460405162461bcd60e51b815260206004820152602060248201527f5969656c64426f785065726d69743a206578706972656420646561646c696e656044820152fd5b1561511157565b60405162461bcd60e51b815260206004820152602160248201527f5969656c64426f785065726d69743a20696e76616c6964207369676e617475726044820152606560f81b6064820152608490fd5b916103b3939161516f93615292565b91909161517b81610e70565b806151835750565b61518c81610e70565b600181036151d95760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b6151e281610e70565b6002810361522f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b8061523b600392610e70565b1461524257565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608490fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116153085791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa156104735781516001600160a01b03811615615302579190565b50600190565b50505050600090600390565b61531c61534b565b9060405190602082019261190160f01b8452602283015260428201526042815261534581610a86565b51902090565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016301480615436575b156153a6577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f000000000000000000000000000000000000000000000000000000000000000082527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815261534581610a4e565b507f0000000000000000000000000000000000000000000000000000000000000000461461537d565b8181029291811591840414171561127c57565b811561547c570490565b634e487b7160e01b600052601260045260246000fd5b909161549d90612c57565b906305f5e100830180931161127c576103b3926112419161545f565b9092916154c590612c57565b926305f5e100810180911161127c57806112416154e9866112416154f0958761545f565b958661545f565b106154f757565b906103b390612c57565b9161550b90612c57565b916305f5e100820180921161127c576103b3926112419161545f565b90929161553390612c57565b6305f5e100840180941161127c57806112416154e9866112416154f0958761545f56fea2646970667358221220d5b14b8a9b3b81c5990126dd3e0781898c191cd37e3e2e5ed2b5647e2802cc7d64736f6c63430008120033","opcodes":"PUSH2 0x180 CALLVALUE PUSH3 0x2BC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH3 0x586A PUSH1 0x1F CODESIZE DUP3 SWAP1 SUB SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP5 ADD SWAP1 DUP4 DUP3 GT DUP6 DUP4 LT OR PUSH3 0x2A6 JUMPI DUP1 DUP6 SWAP2 PUSH1 0x40 SWAP5 DUP6 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0x2BC JUMPI DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP3 SWAP1 DUP5 DUP5 AND DUP5 SUB PUSH3 0x2BC JUMPI PUSH1 0x20 ADD MLOAD SWAP2 DUP5 DUP4 AND DUP4 SUB PUSH3 0x2BC JUMPI DUP1 MLOAD SWAP4 PUSH3 0x7A DUP6 PUSH3 0x2C1 JUMP JUMPDEST PUSH1 0x8 DUP6 MSTORE PUSH1 0x1 PUSH1 0x20 DUP7 ADD PUSH8 0xB2D2CAD8C884DEF PUSH1 0xC3 SHL DUP2 MSTORE PUSH1 0x20 DUP5 MLOAD PUSH3 0xA1 DUP2 PUSH3 0x2C1 JUMP JUMPDEST DUP4 DUP2 MSTORE ADD SWAP7 PUSH1 0x31 PUSH1 0xF8 SHL DUP9 MSTORE MLOAD SWAP1 KECCAK256 SWAP6 KECCAK256 DUP6 PUSH1 0xE0 MSTORE PUSH2 0x100 SWAP7 DUP2 DUP9 MSTORE CHAINID PUSH1 0xA0 MSTORE DUP4 MLOAD PUSH1 0x20 DUP2 ADD SWAP3 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F SWAP9 DUP10 DUP6 MSTORE DUP7 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH1 0xC0 DUP2 ADD SWAP3 DUP2 DUP5 LT DUP8 DUP6 GT OR PUSH3 0x2A6 JUMPI DUP4 DUP7 MSTORE DUP2 MLOAD SWAP1 KECCAK256 PUSH1 0x80 MSTORE ADDRESS PUSH1 0xC0 MSTORE PUSH2 0x120 SWAP8 DUP9 MSTORE PUSH2 0x140 SWAP6 DUP7 DUP3 ADD SWAP1 DUP2 GT DUP5 DUP3 LT OR PUSH3 0x2A6 JUMPI DUP6 MSTORE PUSH1 0x4 DUP4 MSTORE PUSH1 0xE0 DUP2 ADD SWAP2 PUSH1 0x0 DUP1 DUP5 MSTORE DUP10 DUP12 DUP5 ADD SWAP4 DUP3 DUP6 MSTORE ADD SWAP4 DUP2 DUP6 MSTORE PUSH1 0x6 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH3 0x292 JUMPI PUSH1 0x1 DUP2 ADD DUP1 PUSH1 0x6 SSTORE DUP2 LT ISZERO PUSH3 0x27E JUMPI PUSH1 0x6 DUP4 MSTORE PUSH1 0x3 PUSH1 0x20 DUP5 KECCAK256 SWAP2 MUL ADD SWAP6 MLOAD SWAP2 PUSH1 0x5 DUP4 LT ISZERO PUSH3 0x26A JUMPI POP DUP6 SLOAD SWAP1 MLOAD PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHL AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP2 AND OR OR DUP5 SSTORE SWAP1 MLOAD PUSH1 0x1 DUP5 ADD DUP1 SLOAD SWAP2 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE DUP3 MSTORE PUSH2 0x160 SWAP3 DUP4 MSTORE MLOAD PUSH2 0x558C SWAP5 SWAP1 SWAP4 SWAP1 DUP6 PUSH3 0x2DE DUP7 CODECOPY PUSH1 0x80 MLOAD DUP6 PUSH2 0x5384 ADD MSTORE PUSH1 0xA0 MLOAD DUP6 PUSH2 0x5439 ADD MSTORE PUSH1 0xC0 MLOAD DUP6 PUSH2 0x5355 ADD MSTORE PUSH1 0xE0 MLOAD DUP6 PUSH2 0x53D3 ADD MSTORE MLOAD DUP5 PUSH2 0x53F9 ADD MSTORE MLOAD DUP4 PUSH2 0x53B0 ADD MSTORE MLOAD DUP3 DUP2 DUP2 PUSH2 0x20D4 ADD MSTORE DUP2 DUP2 PUSH2 0x2B08 ADD MSTORE DUP2 DUP2 PUSH2 0x4795 ADD MSTORE PUSH2 0x48D1 ADD MSTORE MLOAD DUP2 DUP2 DUP2 PUSH2 0x40D ADD MSTORE DUP2 DUP2 PUSH2 0x7F6 ADD MSTORE DUP2 DUP2 PUSH2 0x1106 ADD MSTORE PUSH2 0x2C1D ADD MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH3 0x2A6 JUMPI PUSH1 0x40 MSTORE JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xAD800C EQ PUSH2 0x355 JUMPI DUP1 PUSH3 0xFDD58E EQ PUSH2 0x350 JUMPI DUP1 PUSH4 0x1E1E3B1 EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x411B252 EQ PUSH2 0x341 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x337 JUMPI DUP1 PUSH4 0x1DBEEB4E EQ PUSH2 0x332 JUMPI DUP1 PUSH4 0x1F0EE4C3 EQ PUSH2 0x32D JUMPI DUP1 PUSH4 0x215B595A EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0x2482EE27 EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0x2B800E3B EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0x2D4E1D52 EQ PUSH2 0x319 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x30F JUMPI DUP1 PUSH4 0x3F47E662 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x442C1599 EQ PUSH2 0x305 JUMPI DUP1 PUSH4 0x4956D158 EQ PUSH2 0x300 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x2FB JUMPI DUP1 PUSH4 0x4E41A1FB EQ PUSH2 0x2F6 JUMPI DUP1 PUSH4 0x54317D16 EQ PUSH2 0x2F1 JUMPI DUP1 PUSH4 0x5BA4D64E EQ PUSH2 0x2EC JUMPI DUP1 PUSH4 0x6CD57031 EQ PUSH2 0x2E7 JUMPI DUP1 PUSH4 0x70400FBE EQ PUSH2 0x2E2 JUMPI DUP1 PUSH4 0x75338079 EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x7C516E94 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x2D3 JUMPI DUP1 PUSH4 0x836A1040 EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0x8D2E63B8 EQ PUSH2 0x2C9 JUMPI DUP1 PUSH4 0x8EB22CDD EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x9A9AF97A EQ PUSH2 0x2BF JUMPI DUP1 PUSH4 0x9EEA5F66 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0xA123C33E EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x2B0 JUMPI DUP1 PUSH4 0xA3823AC0 EQ PUSH2 0x2AB JUMPI DUP1 PUSH4 0xA75FCB1E EQ PUSH2 0x2A6 JUMPI DUP1 PUSH4 0xABA07847 EQ PUSH2 0x2A1 JUMPI DUP1 PUSH4 0xB061DB94 EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0xB8489FB5 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xBD85B039 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0xCE7F2714 EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0xCF35BDD0 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0xD2423B51 EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0xDAF210B1 EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x26F JUMPI DUP1 PUSH4 0xEAFE7A74 EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0xEB6D3A11 EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x25B JUMPI PUSH4 0xFD330D43 EQ PUSH2 0x256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2BFD JUMP JUMPDEST PUSH2 0x2B9E JUMP JUMPDEST PUSH2 0x2B79 JUMP JUMPDEST PUSH2 0x2AE8 JUMP JUMPDEST PUSH2 0x2ACA JUMP JUMPDEST PUSH2 0x2A60 JUMP JUMPDEST PUSH2 0x29A3 JUMP JUMPDEST PUSH2 0x28B0 JUMP JUMPDEST PUSH2 0x27D2 JUMP JUMPDEST PUSH2 0x2768 JUMP JUMPDEST PUSH2 0x2673 JUMP JUMPDEST PUSH2 0x2647 JUMP JUMPDEST PUSH2 0x2620 JUMP JUMPDEST PUSH2 0x257B JUMP JUMPDEST PUSH2 0x255F JUMP JUMPDEST PUSH2 0x2469 JUMP JUMPDEST PUSH2 0x23F0 JUMP JUMPDEST PUSH2 0x209A JUMP JUMPDEST PUSH2 0x1FE1 JUMP JUMPDEST PUSH2 0x1FAC JUMP JUMPDEST PUSH2 0x1F3B JUMP JUMPDEST PUSH2 0x1C1C JUMP JUMPDEST PUSH2 0x1B7C JUMP JUMPDEST PUSH2 0x1B18 JUMP JUMPDEST PUSH2 0x1AAA JUMP JUMPDEST PUSH2 0x1A6C JUMP JUMPDEST PUSH2 0x19AD JUMP JUMPDEST PUSH2 0x178C JUMP JUMPDEST PUSH2 0x177A JUMP JUMPDEST PUSH2 0x16F3 JUMP JUMPDEST PUSH2 0x155B JUMP JUMPDEST PUSH2 0x146C JUMP JUMPDEST PUSH2 0x141E JUMP JUMPDEST PUSH2 0x131D JUMP JUMPDEST PUSH2 0x12A1 JUMP JUMPDEST PUSH2 0x11A7 JUMP JUMPDEST PUSH2 0x10A7 JUMP JUMPDEST PUSH2 0x1084 JUMP JUMPDEST PUSH2 0xF9A JUMP JUMPDEST PUSH2 0xEA9 JUMP JUMPDEST PUSH2 0xDF8 JUMP JUMPDEST PUSH2 0xD5D JUMP JUMPDEST PUSH2 0xB78 JUMP JUMPDEST PUSH2 0xAC4 JUMP JUMPDEST PUSH2 0x8DC JUMP JUMPDEST PUSH2 0x881 JUMP JUMPDEST PUSH2 0x76E JUMP JUMPDEST PUSH2 0x6E8 JUMP JUMPDEST PUSH2 0x67A JUMP JUMPDEST PUSH2 0x55B JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH2 0x3B6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x36D JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x35D JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x396 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x35A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x3B3 SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x37D JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x401 PUSH1 0x0 PUSH1 0x4 CALLDATALOAD PUSH2 0x3D8 DUP2 PUSH2 0x2728 JUMP JUMPDEST POP SWAP1 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP1 MLOAD PUSH4 0xAA1163B9 PUSH1 0xE0 SHL DUP2 MSTORE SWAP4 DUP5 SWAP3 DUP4 SWAP3 SWAP1 PUSH1 0x4 DUP5 ADD PUSH2 0x4FFF JUMP JUMPDEST SUB DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x44E SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x452 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3A2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x46D SWAP2 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x465 DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2CCF JUMP JUMPDEST CODESIZE PUSH2 0x441 JUMP JUMPDEST PUSH2 0x2D98 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0x478 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD PUSH2 0x4B3 DUP2 PUSH2 0x47D JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x24 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x478 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x478 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x478 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x60 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 PUSH1 0x24 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x478 JUMPI DUP3 PUSH2 0x53D SWAP2 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SWAP3 PUSH1 0x44 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x478 JUMPI PUSH2 0x557 SWAP2 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x569 CALLDATASIZE PUSH2 0x50B JUMP JUMPDEST SWAP2 SWAP4 PUSH2 0x58B PUSH1 0xFF PUSH2 0x579 DUP4 PUSH2 0x2728 JUMP JUMPDEST POP SLOAD AND PUSH2 0x585 DUP2 PUSH2 0xE70 JUMP JUMPDEST ISZERO PUSH2 0x41A2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT PUSH2 0x597 JUMPI STOP JUMPDEST DUP1 PUSH2 0x61D PUSH2 0x5A9 PUSH2 0x64B SWAP4 DUP10 DUP10 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD PUSH2 0x5B3 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x5C6 DUP5 DUP12 DUP12 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD PUSH2 0x5D0 DUP2 PUSH2 0x47D JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x617 PUSH2 0x610 DUP7 PUSH2 0x601 CALLER PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3A08 JUMP JUMPDEST PUSH2 0x646 PUSH2 0x633 PUSH2 0x62E DUP4 DUP11 DUP11 PUSH2 0x375C JUMP JUMPDEST PUSH2 0x376C JUMP JUMPDEST DUP5 PUSH2 0x63F DUP5 DUP10 DUP10 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD SWAP2 PUSH2 0x41EE JUMP JUMPDEST PUSH2 0x2C57 JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND SUB PUSH2 0x478 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x699 DUP2 PUSH2 0x650 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x6D7 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x6C6 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ SWAP1 POP CODESIZE PUSH2 0x6BB JUMP JUMPDEST PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL DUP2 EQ SWAP2 POP PUSH2 0x6B4 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x705 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH2 0x76B PUSH1 0x24 CALLDATALOAD SWAP2 PUSH2 0x715 DUP4 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x0 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP6 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x74B PUSH1 0x40 DUP7 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP3 DUP7 MSTORE PUSH1 0x20 MSTORE PUSH2 0x762 PUSH1 0xFF PUSH1 0x40 DUP8 KECCAK256 SLOAD AND DUP5 PUSH2 0x3A08 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP3 PUSH2 0x38A7 JUMP JUMPDEST DUP1 RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x78B DUP2 PUSH2 0x2728 JUMP JUMPDEST POP SWAP1 PUSH1 0x0 DUP1 SWAP3 DUP3 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x7EA PUSH2 0x7CF PUSH2 0x7C2 PUSH1 0x40 DUP7 KECCAK256 SLOAD SWAP7 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5C6D8435 PUSH1 0xE0 SHL DUP2 MSTORE SWAP6 DUP7 SWAP5 DUP6 SWAP5 PUSH1 0x4 DUP7 ADD PUSH2 0x4F7F JUMP JUMPDEST SUB DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI DUP3 PUSH2 0x44E SWAP4 SWAP3 PUSH2 0x838 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3A2 JUMP JUMPDEST PUSH2 0x84C SWAP3 POP RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x465 DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x82A JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x478 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x478 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x478 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x89D PUSH1 0x4 CALLDATALOAD PUSH2 0x47D JUMP JUMPDEST PUSH2 0x8A8 PUSH1 0x24 CALLDATALOAD PUSH2 0x47D JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x478 JUMPI PUSH2 0x8C8 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x853 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x8EA CALLDATASIZE PUSH2 0x50B JUMP JUMPDEST SWAP2 SWAP3 SWAP4 DUP1 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x90F PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND CALLER EQ PUSH2 0x3BC7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x91B JUMPI STOP JUMPDEST DUP1 PUSH2 0x646 PUSH2 0x92D PUSH2 0x94A SWAP4 DUP9 DUP11 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD PUSH2 0x937 DUP2 PUSH2 0x47D JUMP JUMPDEST DUP5 PUSH2 0x943 DUP5 DUP10 DUP10 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD SWAP2 PUSH2 0x4103 JUMP JUMPDEST PUSH2 0x912 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x97F JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x969 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x95E JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP2 PUSH2 0x99A DUP4 PUSH2 0x94F JUMP JUMPDEST SWAP2 DUP3 DUP3 MSTORE PUSH1 0x1 SWAP4 DUP5 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x9FC JUMPI POP PUSH1 0x1 EQ PUSH2 0x9BC JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST SWAP1 SWAP2 SWAP4 SWAP5 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP3 DUP4 PUSH1 0x0 KECCAK256 SWAP3 DUP5 PUSH1 0x0 SWAP5 JUMPDEST DUP4 DUP7 LT PUSH2 0x9E8 JUMPI POP POP POP POP ADD ADD SWAP1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x9B6 JUMP JUMPDEST DUP1 SLOAD DUP6 DUP8 ADD DUP4 ADD MSTORE SWAP5 ADD SWAP4 DUP6 SWAP1 DUP3 ADD PUSH2 0x9D1 JUMP JUMPDEST SWAP3 SWAP5 POP POP POP PUSH1 0x20 SWAP4 SWAP5 POP PUSH1 0xFF NOT AND DUP4 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL ADD ADD SWAP1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x9B6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA49 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xA1F JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA49 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA49 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA49 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA49 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH2 0xB59 PUSH1 0x40 PUSH2 0x44E DUP2 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x3 DUP2 MLOAD SWAP4 PUSH2 0xB07 DUP6 PUSH2 0xB00 DUP2 DUP5 PUSH2 0x989 JUMP JUMPDEST SUB DUP7 PUSH2 0xAA2 JUMP JUMPDEST PUSH2 0xB67 DUP4 MLOAD PUSH2 0xB24 DUP2 PUSH2 0xB1D DUP2 PUSH1 0x1 DUP8 ADD PUSH2 0x989 JUMP JUMPDEST SUB DUP3 PUSH2 0xAA2 JUMP JUMPDEST PUSH2 0xB46 PUSH1 0xFF PUSH1 0x2 DUP6 ADD SLOAD AND SWAP4 PUSH2 0xB3F DUP8 MLOAD DUP1 SWAP8 DUP2 SWAP4 ADD PUSH2 0x989 JUMP JUMPDEST SUB DUP6 PUSH2 0xAA2 JUMP JUMPDEST DUP5 MLOAD SWAP8 DUP9 SWAP8 PUSH1 0x80 DUP10 MSTORE PUSH1 0x80 DUP10 ADD SWAP1 PUSH2 0x37D JUMP JUMPDEST SWAP1 DUP8 DUP3 SUB PUSH1 0x20 DUP10 ADD MSTORE PUSH2 0x37D JUMP JUMPDEST SWAP3 DUP6 ADD MSTORE DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x37D JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xB95 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x478 JUMPI PUSH2 0xBB6 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP2 SWAP1 SWAP3 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0x64 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x478 JUMPI PUSH2 0xBD5 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP2 PUSH1 0x0 SWAP8 DUP4 DUP10 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 PUSH2 0xC0F DUP3 DUP12 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP12 MSTORE PUSH1 0x20 MSTORE PUSH2 0xC27 PUSH1 0xFF DUP4 DUP13 KECCAK256 SLOAD AND DUP9 PUSH2 0x3A08 JUMP JUMPDEST DUP9 DUP11 JUMPDEST DUP2 DUP2 LT PUSH2 0xD21 JUMPI POP POP DUP10 SWAP9 DUP11 JUMPDEST DUP2 DUP2 LT PUSH2 0xC71 JUMPI DUP12 DUP12 PUSH2 0xC6C PUSH2 0xC64 DUP14 PUSH2 0x601 DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP2 DUP3 SLOAD PUSH2 0x388D JUMP JUMPDEST SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP10 DUP8 DUP2 DUP9 PUSH2 0xC80 DUP6 DUP8 DUP15 PUSH2 0x375C JUMP JUMPDEST PUSH2 0xC89 SWAP1 PUSH2 0x376C JUMP JUMPDEST SWAP15 DUP16 PUSH2 0xC96 DUP8 DUP11 DUP14 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD SWAP4 PUSH2 0xCB6 DUP6 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 DUP2 SLOAD SWAP1 PUSH2 0xCCF SWAP2 PUSH2 0x389A JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xCDA SWAP2 PUSH2 0x389A JUMP JUMPDEST DUP9 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP14 AND SWAP2 CALLER SWAP1 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP1 PUSH1 0x40 SWAP1 LOG4 PUSH2 0xD1C SWAP1 PUSH2 0x2C57 JUMP JUMPDEST PUSH2 0xC37 JUMP JUMPDEST PUSH2 0x646 PUSH2 0xD44 PUSH2 0xD38 PUSH2 0x62E DUP5 PUSH2 0xD4B SWAP7 DUP14 PUSH2 0x375C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x4CE3 JUMP JUMPDEST DUP10 SWAP1 PUSH2 0xC2A JUMP JUMPDEST PUSH1 0xFF DUP2 AND SUB PUSH2 0x478 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x478 JUMPI PUSH2 0xD8F SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x853 JUMP JUMPDEST PUSH1 0x24 SWAP3 SWAP2 SWAP3 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x478 JUMPI PUSH2 0xDAA SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x853 JUMP JUMPDEST PUSH1 0x44 SWAP5 SWAP2 SWAP5 CALLDATALOAD SWAP1 PUSH2 0xDBA DUP3 PUSH2 0xD52 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP5 DUP6 GT PUSH2 0x478 JUMPI PUSH2 0x44E SWAP6 PUSH2 0xDD9 PUSH2 0xDE1 SWAP7 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x853 JUMP JUMPDEST SWAP6 SWAP1 SWAP5 PUSH2 0x3ED2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x5 GT ISZERO PUSH2 0x478 JUMPI JUMP JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xE4F DUP2 PUSH2 0xE2D JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD PUSH2 0xE5C DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD PUSH2 0xE69 DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x5 GT ISZERO PUSH2 0xE7A JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xE99 DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0xEEF PUSH2 0xF07 PUSH2 0xEBD CALLDATASIZE PUSH2 0xE37 JUMP JUMPDEST SWAP5 SWAP2 SWAP1 SWAP3 PUSH2 0xECA DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 PUSH1 0xA0 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xF37 DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD PUSH2 0xF44 DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x44 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x478 JUMPI DUP4 PUSH2 0xF65 SWAP2 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SWAP3 PUSH1 0x64 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x478 JUMPI DUP3 PUSH2 0xF80 SWAP2 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SWAP3 PUSH1 0x84 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x478 JUMPI PUSH2 0x557 SWAP2 PUSH1 0x4 ADD PUSH2 0x853 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0xFA8 CALLDATASIZE PUSH2 0xF1E JUMP JUMPDEST PUSH2 0xFB8 DUP4 DUP7 SWAP5 SWAP10 SWAP9 SWAP6 SWAP7 EQ PUSH2 0x36F8 JUMP JUMPDEST PUSH2 0xFC1 DUP8 PUSH2 0x395D JUMP JUMPDEST PUSH2 0xFCF DUP9 DUP7 DUP6 DUP10 DUP9 DUP13 PUSH2 0x3AE8 JUMP JUMPDEST DUP4 EXTCODESIZE PUSH2 0xFD7 JUMPI STOP JUMPDEST PUSH1 0x20 SWAP6 PUSH2 0x1009 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 PUSH1 0x0 SWAP5 PUSH1 0x40 MLOAD SWAP12 DUP13 SWAP10 DUP11 SWAP9 DUP10 SWAP7 PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP15 DUP16 DUP10 MSTORE CALLER PUSH1 0x4 DUP11 ADD PUSH2 0x3A70 JUMP JUMPDEST SUB SWAP4 AND GAS CALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x1049 SWAP3 PUSH1 0x0 SWAP2 PUSH2 0x104B JUMPI JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ PUSH2 0x37F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x106C SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1072 JUMPI JUMPDEST PUSH2 0x1064 DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x378A JUMP JUMPDEST CODESIZE PUSH2 0x1020 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x105A JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x478 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x20 PUSH2 0x109F PUSH2 0x534B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x10FA PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x10C9 DUP2 PUSH2 0x2728 JUMP JUMPDEST POP SWAP1 PUSH1 0x0 MSTORE PUSH1 0x7 DUP3 MSTORE PUSH1 0xFF PUSH1 0x2 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD AND SWAP1 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP3 DUP4 SWAP3 PUSH4 0x6D7CD037 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH2 0x5032 JUMP JUMPDEST SUB DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x44E SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x114F JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1170 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1176 JUMPI JUMPDEST PUSH2 0x1168 DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x501D JUMP JUMPDEST CODESIZE PUSH2 0x113A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x115E JUMP JUMPDEST DUP1 ISZERO ISZERO SUB PUSH2 0x478 JUMPI JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD PUSH2 0x3B3 DUP2 PUSH2 0x117D JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x11B5 CALLDATASIZE PUSH2 0x1187 JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 SWAP3 PUSH1 0xFF PUSH2 0x11C5 DUP5 PUSH2 0x2728 JUMP JUMPDEST POP SLOAD AND PUSH2 0x11D1 DUP2 PUSH2 0xE70 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1281 JUMPI JUMPDEST ISZERO PUSH2 0x11F6 JUMPI POP POP POP PUSH2 0x44E SWAP1 JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST DUP1 DUP4 PUSH2 0x1220 SWAP3 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x1219 PUSH2 0x1213 PUSH1 0x40 DUP4 KECCAK256 SLOAD SWAP6 PUSH2 0x2728 JUMP JUMPDEST POP PUSH2 0x463D JUMP JUMPDEST SWAP1 POP PUSH2 0x2C57 JUMP JUMPDEST SWAP3 PUSH4 0x5F5E100 DUP4 ADD DUP1 SWAP4 GT PUSH2 0x127C JUMPI DUP4 PUSH2 0x1246 DUP5 PUSH2 0x1241 PUSH2 0x44E SWAP8 DUP6 PUSH2 0x545F JUMP JUMPDEST PUSH2 0x5472 JUMP JUMPDEST SWAP4 DUP4 PUSH2 0x1263 JUMPI JUMPDEST POP POP POP ISZERO PUSH2 0x11E6 JUMPI PUSH2 0x125E SWAP1 PUSH2 0x2C57 JUMP JUMPDEST PUSH2 0x11E6 JUMP JUMPDEST PUSH2 0x1273 SWAP3 SWAP4 POP PUSH2 0x1241 SWAP1 DUP6 PUSH2 0x545F JUMP JUMPDEST LT CODESIZE DUP1 DUP1 PUSH2 0x124D JUMP JUMPDEST PUSH2 0x2C41 JUMP JUMPDEST POP PUSH1 0x2 PUSH1 0xFF PUSH2 0x128F DUP6 PUSH2 0x2728 JUMP JUMPDEST POP SLOAD AND PUSH2 0x129B DUP2 PUSH2 0xE70 JUMP JUMPDEST EQ PUSH2 0x11D9 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD DUP1 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x12D0 PUSH2 0x1213 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP3 PUSH2 0x2728 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 RETURN JUMPDEST PUSH1 0x20 SWAP1 DUP2 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP6 MLOAD DUP1 SWAP5 MSTORE ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x1309 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x12FB JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x40 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x478 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x478 JUMPI PUSH2 0x1351 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP2 SWAP1 SWAP3 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x478 JUMPI PUSH2 0x136C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP4 SWAP1 PUSH2 0x1379 DUP6 DUP6 EQ PUSH2 0x36F8 JUMP JUMPDEST PUSH2 0x1382 DUP5 PUSH2 0x3744 JUMP JUMPDEST SWAP4 PUSH2 0x138F DUP5 MLOAD SWAP6 DUP7 PUSH2 0xAA2 JUMP JUMPDEST DUP1 DUP6 MSTORE PUSH1 0x1F NOT PUSH2 0x139E DUP3 PUSH2 0x3744 JUMP JUMPDEST ADD PUSH1 0x20 SWAP1 CALLDATASIZE DUP3 DUP9 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP3 JUMPDEST DUP2 DUP2 LT PUSH2 0x13C0 JUMPI DUP7 MLOAD DUP1 PUSH2 0x44E DUP11 DUP3 PUSH2 0x12E2 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x13D7 PUSH2 0x1419 SWAP4 DUP6 DUP11 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD PUSH2 0x13E1 DUP2 PUSH2 0x47D JUMP JUMPDEST AND DUP6 MSTORE PUSH1 0x2 DUP5 MSTORE PUSH2 0x1408 DUP9 DUP7 KECCAK256 PUSH2 0x13F9 DUP4 DUP14 DUP11 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH2 0x1413 DUP3 DUP12 PUSH2 0x3776 JUMP JUMPDEST MSTORE PUSH2 0x2C57 JUMP JUMPDEST PUSH2 0x13AC JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x401 PUSH1 0x0 PUSH1 0x4 CALLDATALOAD PUSH2 0x1440 DUP2 PUSH2 0x2728 JUMP JUMPDEST POP SWAP1 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP1 MLOAD PUSH4 0x84B1017D PUSH1 0xE0 SHL DUP2 MSTORE SWAP4 DUP5 SWAP3 DUP4 SWAP3 PUSH1 0x1 ADD SWAP1 PUSH1 0x4 DUP5 ADD PUSH2 0x4FFF JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x44E PUSH1 0x4 CALLDATALOAD PUSH2 0x148C DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x0 PUSH1 0xFF PUSH2 0x149C DUP4 PUSH2 0x2728 JUMP JUMPDEST POP SLOAD AND PUSH2 0x14A8 DUP2 PUSH2 0xE70 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x153B JUMPI JUMPDEST ISZERO PUSH2 0x14E7 JUMPI POP PUSH2 0x601 PUSH2 0x14D6 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x40 PUSH2 0x1512 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x125E SWAP7 AND DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE KECCAK256 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP1 PUSH2 0x1535 PUSH2 0x1213 PUSH2 0x152E DUP4 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP3 PUSH2 0x2728 JUMP JUMPDEST SWAP2 PUSH2 0x5501 JUMP JUMPDEST POP PUSH1 0x2 PUSH1 0xFF PUSH2 0x1549 DUP5 PUSH2 0x2728 JUMP JUMPDEST POP SLOAD AND PUSH2 0x1555 DUP2 PUSH2 0xE70 JUMP JUMPDEST EQ PUSH2 0x14B0 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH2 0x157B DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x1588 DUP4 PUSH2 0x117D JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP1 PUSH2 0x1595 DUP3 PUSH2 0x117D JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 DUP6 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x15BA DUP3 PUSH1 0x40 DUP9 KECCAK256 SLOAD AND CALLER EQ PUSH2 0x3BC7 JUMP JUMPDEST ISZERO PUSH2 0x16C6 JUMPI DUP1 DUP5 AND SWAP3 DUP4 ISZERO SWAP1 DUP2 ISZERO SWAP2 PUSH2 0x16BE JUMPI JUMPDEST POP ISZERO PUSH2 0x1679 JUMPI PUSH2 0x76B SWAP4 PUSH2 0x165C SWAP4 PUSH2 0x164C SWAP3 PUSH2 0x15F7 PUSH2 0x7C2 DUP7 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST AND DUP5 PUSH32 0x16B85F49BF01212961345D3016C9A531894ACCF62EB7680F2045D79185CC0EC0 DUP10 DUP1 LOG4 PUSH2 0x1631 DUP4 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E54463A207A65726F2061646472657373000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP CODESIZE PUSH2 0x15CE JUMP JUMPDEST POP PUSH2 0x76B SWAP3 SWAP2 POP DUP4 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x12D0 PUSH1 0x4 CALLDATALOAD PUSH2 0x1714 DUP2 PUSH2 0xE2D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x1720 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x172D DUP4 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD PUSH2 0x1739 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD SWAP2 PUSH2 0x1746 DUP4 PUSH2 0x47D JUMP JUMPDEST PUSH1 0xE4 CALLDATALOAD SWAP5 PUSH1 0xC4 CALLDATALOAD SWAP5 PUSH1 0x64 CALLDATALOAD SWAP3 PUSH2 0x504E JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH2 0x1773 DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH2 0x12D0 PUSH2 0x1786 CALLDATASIZE PUSH2 0x1757 JUMP JUMPDEST SWAP2 PUSH2 0x4724 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x17AC DUP3 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH2 0x17B9 DUP3 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP5 AND SWAP2 PUSH1 0x0 SWAP1 DUP4 DUP3 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP6 PUSH2 0x17F2 DUP8 DUP5 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP5 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1808 PUSH1 0xFF DUP9 DUP6 KECCAK256 SLOAD AND DUP3 PUSH2 0x3A08 JUMP JUMPDEST PUSH2 0x1811 DUP5 PUSH2 0x2728 JUMP JUMPDEST POP SWAP1 PUSH2 0x1832 PUSH1 0x2 PUSH2 0x1823 DUP5 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x182C DUP2 PUSH2 0xE70 JUMP JUMPDEST EQ PUSH2 0x468C JUMP JUMPDEST PUSH2 0x183C DUP6 DUP9 PUSH2 0x406A JUMP JUMPDEST PUSH2 0x1857 PUSH2 0xD38 PUSH2 0xD38 DUP5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x8 SHR AND SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SWAP3 PUSH1 0x2 PUSH2 0x1872 PUSH2 0xD38 DUP7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP2 ADD SLOAD SWAP3 DUP3 EXTCODESIZE ISZERO PUSH2 0x19A9 JUMPI DUP11 MLOAD PUSH4 0x21421707 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SWAP1 DUP5 SWAP1 DUP4 SWAP1 PUSH1 0x64 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI PUSH2 0x18DA SWAP3 PUSH2 0xD38 SWAP3 PUSH2 0x1996 JUMPI JUMPDEST POP SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x1993 JUMPI DUP7 MLOAD PUSH4 0x57D48E63 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x473 JUMPI PUSH32 0x1AD178FF1B5D2C6DC0F3E4E2578B3D445E601C5BEAE2F63A73F237E480DF2FD0 SWAP3 PUSH2 0x197A JUMPI JUMPDEST POP DUP6 MLOAD SWAP5 AND SWAP4 DUP1 PUSH2 0x1967 CALLER SWAP5 DUP3 PUSH1 0xA0 PUSH1 0x1 SWAP2 SWAP4 SWAP3 SWAP4 PUSH1 0xC0 DUP2 ADD SWAP5 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 SWAP1 RETURN JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x198D SWAP3 PUSH2 0xA35 JUMP JUMPDEST DUP1 PUSH2 0x1079 JUMP JUMPDEST CODESIZE PUSH2 0x192F JUMP JUMPDEST DUP1 REVERT JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x19A3 SWAP3 PUSH2 0xA35 JUMP JUMPDEST CODESIZE PUSH2 0x18CC JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x19CB DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x19D7 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x19E4 DUP4 PUSH2 0x47D JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD SWAP2 PUSH2 0x19F1 DUP4 PUSH2 0xD52 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 PUSH1 0xE4 SWAP3 PUSH1 0xFF DUP3 SWAP7 DUP7 PUSH1 0x40 MLOAD SWAP10 DUP11 SWAP9 DUP10 SWAP8 PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP10 MSTORE AND PUSH1 0x4 DUP9 ADD MSTORE AND PUSH1 0x24 DUP7 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x44 DUP7 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x64 DUP7 ADD MSTORE AND PUSH1 0x84 DUP5 ADD MSTORE PUSH1 0xC4 CALLDATALOAD PUSH1 0xA4 DUP5 ADD MSTORE DUP4 CALLDATALOAD PUSH1 0xC4 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x1A5F JUMPI STOP JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x1049 SWAP3 PUSH2 0xA35 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD PUSH2 0x1A91 DUP2 PUSH2 0x47D JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x1049 PUSH2 0x1ABB CALLDATASIZE PUSH2 0x1757 JUMP JUMPDEST SWAP2 SWAP1 DUP2 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x1ADF PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND CALLER EQ PUSH2 0x3BC7 JUMP JUMPDEST PUSH2 0x4103 JUMP JUMPDEST PUSH1 0xA0 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH2 0x1B00 DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD PUSH2 0x1B0D DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x84 CALLDATALOAD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x12D0 PUSH2 0x1B29 CALLDATASIZE PUSH2 0x1AE4 JUMP JUMPDEST SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 SWAP3 SWAP5 AND PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x1B5E PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1B77 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP4 PUSH2 0x3A08 JUMP JUMPDEST PUSH2 0x49CD JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x1B8A CALLDATASIZE PUSH2 0x1187 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF PUSH2 0x1B97 DUP6 PUSH2 0x2728 JUMP JUMPDEST POP SLOAD AND PUSH2 0x1BA3 DUP2 PUSH2 0xE70 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1BFC JUMPI JUMPDEST ISZERO PUSH2 0x1BBE JUMPI POP POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 POP RETURN JUMPDEST DUP1 DUP5 PUSH2 0x1BDB SWAP3 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x1219 PUSH2 0x1213 PUSH1 0x40 DUP4 KECCAK256 SLOAD SWAP7 PUSH2 0x2728 JUMP JUMPDEST SWAP2 PUSH4 0x5F5E100 DUP5 ADD DUP1 SWAP5 GT PUSH2 0x127C JUMPI DUP4 PUSH2 0x1246 DUP5 PUSH2 0x1241 PUSH2 0x44E SWAP8 DUP6 PUSH2 0x545F JUMP JUMPDEST POP PUSH1 0x2 PUSH1 0xFF PUSH2 0x1C0A DUP7 PUSH2 0x2728 JUMP JUMPDEST POP SLOAD AND PUSH2 0x1C16 DUP2 PUSH2 0xE70 JUMP JUMPDEST EQ PUSH2 0x1BAB JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x1C2A CALLDATASIZE PUSH2 0x1AE4 JUMP JUMPDEST SWAP3 SWAP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 DUP7 AND SWAP1 PUSH1 0x0 SWAP5 DUP3 DUP7 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP5 PUSH2 0x1C66 DUP7 DUP9 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP4 DUP9 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1C7C PUSH1 0xFF DUP8 DUP10 KECCAK256 SLOAD AND DUP11 PUSH2 0x3A08 JUMP JUMPDEST SWAP7 DUP1 PUSH2 0x1C87 DUP5 PUSH2 0x2728 JUMP JUMPDEST POP SWAP2 PUSH2 0x1CB0 PUSH2 0x1C97 DUP5 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1CA0 DUP2 PUSH2 0xE70 JUMP JUMPDEST DUP1 ISZERO ISZERO SWAP1 DUP2 PUSH2 0x1F26 JUMPI JUMPDEST POP PUSH2 0x44FC JUMP JUMPDEST PUSH2 0x1CB9 DUP4 PUSH2 0x463D JUMP JUMPDEST SWAP2 DUP1 PUSH2 0x1EFC JUMPI POP POP PUSH2 0x1CE1 DUP10 SWAP2 PUSH2 0x1CDA DUP7 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD DUP4 PUSH2 0x5492 JUMP JUMPDEST SWAP10 JUMPDEST PUSH2 0x1CEE DUP12 DUP7 DUP10 PUSH2 0x4103 JUMP JUMPDEST DUP4 DUP4 SLOAD PUSH1 0x1 PUSH1 0xFF DUP3 AND PUSH2 0x1D00 DUP2 PUSH2 0xE70 JUMP JUMPDEST SUB PUSH2 0x1E15 JUMPI POP POP DUP3 PUSH2 0x1D4A PUSH2 0xD38 SWAP4 PUSH1 0x1 SWAP4 PUSH2 0x1D2D PUSH2 0xD38 PUSH2 0x1D58 SWAP9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x8 SHR AND SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1D44 PUSH2 0xD38 DUP8 DUP8 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x455D JUMP JUMPDEST ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP6 DUP7 EXTCODESIZE ISZERO PUSH2 0x1993 JUMPI DUP6 MLOAD PUSH4 0x57D48E63 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE SWAP7 DUP8 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI PUSH2 0x44E SWAP7 PUSH32 0x1AD178FF1B5D2C6DC0F3E4E2578B3D445E601C5BEAE2F63A73F237E480DF2FD0 SWAP3 PUSH2 0x1E02 JUMPI JUMPDEST POP DUP6 MLOAD SWAP5 AND SWAP4 DUP1 PUSH2 0x1DE9 DUP11 DUP11 CALLER SWAP7 DUP5 PUSH1 0xA0 SWAP2 SWAP5 SWAP4 PUSH1 0x0 SWAP4 PUSH1 0xC0 DUP4 ADD SWAP7 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x40 DUP3 ADD SWAP1 JUMP JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x1E0F SWAP3 PUSH2 0xA35 JUMP JUMPDEST CODESIZE PUSH2 0x1DB1 JUMP JUMPDEST PUSH1 0x8 SHR AND ADDRESS DUP2 SUB PUSH2 0x1E55 JUMPI POP DUP3 PUSH2 0x1E50 PUSH2 0xD38 SWAP4 PUSH1 0x1 SWAP4 PUSH2 0x1E45 PUSH2 0xD38 DUP7 PUSH2 0x1D58 SWAP10 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP6 ADD SLOAD SWAP2 PUSH2 0x38A7 JUMP JUMPDEST PUSH2 0x1D4A JUMP JUMPDEST SWAP1 SWAP2 POP PUSH2 0x1E6F PUSH2 0xD38 PUSH1 0x1 DUP6 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP5 ADD SLOAD SWAP3 DUP3 EXTCODESIZE ISZERO PUSH2 0x1EF8 JUMPI DUP10 MLOAD PUSH4 0x79212195 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x64 DUP3 ADD DUP11 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x84 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0xA4 DUP4 ADD MSTORE DUP9 SWAP1 DUP3 SWAP1 PUSH1 0xC4 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x1D58 SWAP3 PUSH2 0xD38 SWAP3 PUSH1 0x1 SWAP3 PUSH2 0x1EE5 JUMPI JUMPDEST POP PUSH2 0x1D4A JUMP JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x1EF2 SWAP3 PUSH2 0xA35 JUMP JUMPDEST CODESIZE PUSH2 0x1EDF JUMP JUMPDEST DUP11 DUP1 REVERT JUMPDEST PUSH2 0x1F1F SWAP3 SWAP2 SWAP12 SWAP11 POP PUSH2 0x1F18 DUP7 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP1 PUSH2 0x5527 JUMP JUMPDEST DUP1 SWAP9 PUSH2 0x1CE3 JUMP JUMPDEST PUSH1 0x2 SWAP2 POP PUSH2 0x1F33 DUP2 PUSH2 0xE70 JUMP JUMPDEST EQ ISZERO CODESIZE PUSH2 0x1CAA JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x76B PUSH2 0x1F4C CALLDATASIZE PUSH2 0x1757 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 PUSH1 0x0 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP6 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x1F82 PUSH1 0x40 DUP7 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP3 DUP7 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1F99 PUSH1 0xFF PUSH1 0x40 DUP8 KECCAK256 SLOAD AND DUP3 PUSH2 0x3A08 JUMP JUMPDEST PUSH2 0x1FA7 PUSH1 0xFF PUSH2 0x579 DUP5 PUSH2 0x2728 JUMP JUMPDEST PUSH2 0x41EE JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1FFE DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x200A DUP2 PUSH2 0x117D JUMP JUMPDEST PUSH2 0x206A DUP2 PUSH2 0x2059 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP5 PUSH2 0x2027 DUP7 ISZERO ISZERO PUSH2 0x4D2F JUMP JUMPDEST PUSH2 0x2033 ADDRESS DUP8 EQ ISZERO PUSH2 0x4D7B JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 CALLER SWAP3 LOG3 STOP JUMPDEST PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x20B2 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x20BF DUP3 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH32 0x0 DUP4 AND PUSH2 0x2133 PUSH2 0x2124 DUP5 PUSH2 0xEEF DUP5 PUSH32 0x1471EB6EB2C5E789FC3DE43F8CE62938C7D1836EC861730447E2ADA8FD81017B DUP3 JUMP JUMPDEST PUSH1 0x0 DUP1 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP3 DUP4 ISZERO PUSH2 0x2149 JUMPI JUMPDEST PUSH2 0x12D0 PUSH1 0x44 CALLDATALOAD DUP5 DUP7 PUSH2 0x4724 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 POP DUP4 DUP2 AND SWAP4 PUSH1 0x40 SWAP1 DUP2 MLOAD SWAP6 PUSH4 0xC3E9CE3 PUSH1 0xE2 SHL DUP8 MSTORE PUSH1 0x20 SWAP7 DUP8 DUP2 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x23C3 JUMPI JUMPDEST POP PUSH2 0x2185 DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x1 EQ SWAP2 DUP3 PUSH2 0x2364 JUMPI JUMPDEST POP DUP2 PUSH2 0x22C3 JUMPI JUMPDEST POP PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 PUSH2 0x12D0 SWAP7 PUSH1 0x0 SWAP5 PUSH2 0x22B9 PUSH2 0x2220 SWAP9 SWAP8 SWAP6 PUSH2 0x21D3 PUSH1 0x1 SWAP7 PUSH2 0x3175 JUMP JUMPDEST PUSH2 0x21DF DUP8 EXTCODESIZE ISZERO ISZERO PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP10 DUP11 SWAP5 PUSH2 0x2207 DUP10 PUSH2 0x21F1 PUSH2 0x2C74 JUMP JUMPDEST PUSH1 0x1 DUP2 MSTORE SWAP3 JUMPDEST DUP4 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 DUP5 ADD MSTORE DUP10 PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x3219 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP4 PUSH2 0x225A PUSH2 0x2124 DUP6 PUSH2 0xEEF DUP12 PUSH32 0x1471EB6EB2C5E789FC3DE43F8CE62938C7D1836EC861730447E2ADA8FD81017B DUP3 JUMP JUMPDEST SSTORE DUP4 PUSH32 0x6BB7FF708619BA0610CBA295A58592E0451DEE2622938C8755667688DAF3529B DUP3 MLOAD DUP1 PUSH2 0x2296 DUP2 PUSH1 0x40 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG2 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP3 ADD SWAP6 AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x213C JUMP JUMPDEST DUP3 MLOAD PUSH4 0x5F5C3DF PUSH1 0xE2 SHL DUP2 MSTORE SWAP4 SWAP6 SWAP5 SWAP3 SWAP2 POP DUP7 SWAP1 DUP5 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x473 JUMPI PUSH2 0x12D0 SWAP7 PUSH2 0x2220 SWAP7 PUSH2 0x22B9 PUSH1 0x1 SWAP5 PUSH2 0x21D3 PUSH1 0x0 SWAP9 PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 SWAP7 DUP11 SWAP2 PUSH2 0x2337 JUMPI JUMPDEST POP ISZERO SWAP7 POP POP SWAP6 SWAP8 SWAP9 POP POP SWAP5 POP SWAP7 POP PUSH2 0x2196 JUMP JUMPDEST PUSH2 0x2357 SWAP2 POP DUP7 RETURNDATASIZE DUP9 GT PUSH2 0x235D JUMPI JUMPDEST PUSH2 0x234F DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3166 JUMP JUMPDEST CODESIZE PUSH2 0x2324 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2345 JUMP JUMPDEST DUP4 MLOAD PUSH4 0x3DAD37ED PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 SWAP3 POP SWAP1 DUP8 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x2396 JUMPI JUMPDEST POP AND DUP5 EQ SWAP1 CODESIZE PUSH2 0x218F JUMP JUMPDEST PUSH2 0x23B6 SWAP2 POP DUP9 RETURNDATASIZE DUP11 GT PUSH2 0x23BC JUMPI JUMPDEST PUSH2 0x23AE DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3151 JUMP JUMPDEST CODESIZE PUSH2 0x238B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x23A4 JUMP JUMPDEST PUSH2 0x23E3 SWAP2 POP DUP9 RETURNDATASIZE DUP11 GT PUSH2 0x23E9 JUMPI JUMPDEST PUSH2 0x23DB DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x313C JUMP JUMPDEST CODESIZE PUSH2 0x217B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x23D1 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x244B PUSH1 0x4 CALLDATALOAD PUSH2 0x2410 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD SWAP2 PUSH2 0x2425 DUP4 PUSH2 0x47D JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x1049 PUSH1 0x4 CALLDATALOAD PUSH2 0x2489 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x2496 DUP3 PUSH2 0x47D JUMP JUMPDEST PUSH2 0x255A PUSH1 0x64 CALLDATALOAD PUSH1 0x44 CALLDATALOAD PUSH2 0x24A8 DUP3 PUSH2 0xD52 JUMP JUMPDEST PUSH2 0x24B4 DUP2 TIMESTAMP GT ISZERO PUSH2 0x50BF JUMP JUMPDEST PUSH2 0x2553 PUSH2 0x24DD DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD SWAP2 PUSH1 0x1 DUP4 ADD SWAP1 SSTORE JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 PUSH32 0x8B2A9C07938B6D62909DC00103EA4E71485CAF5019E7FA95B0A87E13825663B0 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 DUP10 AND SWAP7 DUP8 PUSH1 0x40 DUP6 ADD MSTORE DUP7 DUP12 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 MSTORE PUSH2 0x253B DUP3 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x254E PUSH1 0xA4 CALLDATALOAD SWAP4 PUSH1 0x84 CALLDATALOAD SWAP4 MLOAD SWAP1 KECCAK256 PUSH2 0x5314 JUMP JUMPDEST PUSH2 0x5160 JUMP JUMPDEST AND EQ PUSH2 0x510A JUMP JUMPDEST PUSH2 0x4DC6 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 PUSH2 0x109F PUSH2 0x2572 CALLDATASIZE PUSH2 0xE37 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x2DA4 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x2598 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH2 0x25A7 DUP3 PUSH2 0x117D JUMP JUMPDEST PUSH2 0x25C7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x25BF DUP2 ISZERO ISZERO PUSH2 0x4D2F JUMP JUMPDEST ADDRESS EQ ISZERO PUSH2 0x4D7B JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x25DB JUMPI PUSH2 0x1049 SWAP3 CALLER PUSH2 0x4EB6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A206173736574206E6F742076616C696400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x262E CALLDATASIZE PUSH2 0xF1E JUMP JUMPDEST POP POP POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH1 0x40 DUP5 KECCAK256 SLOAD AND SWAP1 DUP2 CALLER SUB PUSH2 0x26CD JUMPI PUSH2 0x164C DUP3 PUSH2 0x165C SWAP4 PUSH2 0x76B SWAP6 PUSH2 0x15F7 PUSH2 0x7C2 DUP7 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E54463A2063616C6C657220213D2070656E64696E67206F776E657200000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x2763 JUMPI PUSH1 0x3 SWAP1 PUSH1 0x6 PUSH1 0x0 MSTORE MUL PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2712 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x478 JUMPI PUSH2 0x2791 PUSH1 0x80 SWAP2 PUSH2 0x2728 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0xFF DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x2 DUP2 PUSH1 0x1 DUP5 ADD SLOAD AND SWAP3 ADD SLOAD SWAP3 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x27BB DUP2 PUSH2 0xE70 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x8 SHR AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST PUSH1 0x40 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x478 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 DUP1 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x478 JUMPI PUSH2 0x2800 SWAP1 CALLDATASIZE SWAP1 DUP4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP3 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH2 0x280E DUP4 PUSH2 0x117D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT PUSH2 0x281A JUMPI STOP JUMPDEST DUP1 PUSH1 0x5 SHL DUP3 ADD CALLDATALOAD PUSH1 0x1E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x478 JUMPI DUP3 ADD DUP1 CALLDATALOAD SWAP1 DUP5 DUP3 GT PUSH2 0x478 JUMPI PUSH1 0x20 ADD DUP2 CALLDATASIZE SUB DUP2 SGT PUSH2 0x478 JUMPI PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH2 0x285A DUP12 MLOAD DUP1 SWAP4 DUP2 SWAP4 PUSH2 0x2C66 JUMP JUMPDEST SUB SWAP1 ADDRESS GAS DELEGATECALL PUSH2 0x2867 PUSH2 0x2C9F JUMP JUMPDEST SWAP1 ISZERO DUP1 PUSH2 0x28A9 JUMPI JUMPDEST PUSH2 0x2882 JUMPI POP PUSH2 0x287D SWAP1 PUSH2 0x2C57 JUMP JUMPDEST PUSH2 0x2811 JUMP JUMPDEST DUP6 PUSH2 0x28A5 PUSH2 0x2890 DUP11 SWAP4 PUSH2 0x2D2E JUMP JUMPDEST SWAP3 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP3 DUP4 SWAP3 DUP4 ADD PUSH2 0x3A2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP DUP5 PUSH2 0x286F JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x1049 PUSH1 0x4 CALLDATALOAD PUSH2 0x28D0 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x28DC DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x299E PUSH1 0x84 CALLDATALOAD PUSH1 0x64 CALLDATALOAD PUSH2 0x28F2 DUP3 PUSH2 0xD52 JUMP JUMPDEST PUSH2 0x28FE DUP2 TIMESTAMP GT ISZERO PUSH2 0x50BF JUMP JUMPDEST PUSH2 0x2553 PUSH2 0x2927 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD SWAP2 PUSH1 0x1 DUP4 ADD SWAP1 SSTORE JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 PUSH32 0x54A3A030F29B87FFFAACB4FAFC4220EF9C3EBA67EC74140BD9E716826BE356B1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 DUP10 AND SWAP7 DUP8 PUSH1 0x40 DUP6 ADD MSTORE DUP7 DUP12 AND PUSH1 0x60 DUP6 ADD MSTORE DUP12 PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 MSTORE PUSH2 0x298B DUP3 PUSH2 0xA6A JUMP JUMPDEST PUSH2 0x254E PUSH1 0xC4 CALLDATALOAD SWAP4 PUSH1 0xA4 CALLDATALOAD SWAP4 MLOAD SWAP1 KECCAK256 PUSH2 0x5314 JUMP JUMPDEST PUSH2 0x4E36 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x29C0 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x29CC DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x44 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x478 JUMPI PUSH2 0x29EE SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST PUSH1 0x64 SWAP3 SWAP2 SWAP3 CALLDATALOAD SWAP4 DUP5 GT PUSH2 0x478 JUMPI PUSH2 0x2A0C PUSH2 0x76B SWAP5 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP4 SWAP1 SWAP3 PUSH1 0x0 SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP9 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x2A42 PUSH1 0x40 DUP10 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP10 MSTORE PUSH1 0x20 MSTORE PUSH2 0x2A5B PUSH1 0xFF PUSH1 0x40 DUP11 KECCAK256 SLOAD AND DUP3 PUSH2 0x3A08 JUMP JUMPDEST PUSH2 0x3AE8 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH2 0x2ABE PUSH1 0x4 CALLDATALOAD PUSH2 0x2A84 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD SWAP2 PUSH2 0x2A99 DUP4 PUSH2 0x47D JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x1 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x20 PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0xA0 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x2B44 DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD PUSH2 0x2B51 DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP2 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0x64 CALLDATALOAD SWAP2 PUSH1 0x84 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x478 JUMPI PUSH2 0x557 SWAP2 PUSH1 0x4 ADD PUSH2 0x853 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x2B87 CALLDATASIZE PUSH2 0x2B2C JUMP JUMPDEST POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x2BAC CALLDATASIZE PUSH2 0x2B2C JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP2 PUSH2 0x2BB9 DUP6 PUSH2 0x395D JUMP JUMPDEST PUSH2 0x2BC5 DUP2 DUP6 DUP5 DUP9 PUSH2 0x38A7 JUMP JUMPDEST DUP2 EXTCODESIZE PUSH2 0x2BCD JUMPI STOP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 SWAP6 PUSH2 0x1009 PUSH1 0x40 MLOAD SWAP10 DUP11 SWAP8 DUP9 SWAP7 DUP8 SWAP5 PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP13 DUP14 DUP8 MSTORE CALLER PUSH1 0x4 DUP9 ADD PUSH2 0x37C0 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x127C JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP1 SWAP3 SWAP2 DUP3 CALLDATACOPY ADD PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x2C81 DUP3 PUSH2 0xA86 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA49 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x2CCA JUMPI RETURNDATASIZE SWAP1 PUSH2 0x2CB0 DUP3 PUSH2 0x2C83 JUMP JUMPDEST SWAP2 PUSH2 0x2CBE PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xAA2 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0x478 JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x478 JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x478 JUMPI DUP1 MLOAD PUSH2 0x2D02 DUP2 PUSH2 0x2C83 JUMP JUMPDEST SWAP3 PUSH2 0x2D10 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0xAA2 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x478 JUMPI PUSH2 0x3B3 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x35A JUMP JUMPDEST PUSH1 0x44 DUP2 MLOAD LT PUSH2 0x2D4D JUMPI DUP1 PUSH1 0x24 DUP1 PUSH1 0x4 PUSH2 0x3B3 SWAP5 ADD MLOAD DUP4 ADD ADD SWAP2 ADD PUSH2 0x2CCF JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA49 JUMPI PUSH1 0x40 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH32 0x5472616E73616374696F6E2072657665727465642073696C656E746C79000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP3 SWAP1 SWAP2 PUSH2 0x2DB0 DUP5 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x1 DUP5 EQ SWAP4 DUP5 ISZERO SWAP5 DUP6 PUSH2 0x30DD JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x30CA JUMPI JUMPDEST ISZERO PUSH2 0x3085 JUMPI PUSH2 0x2DDF DUP4 PUSH2 0x601 DUP5 PUSH2 0xEEF DUP9 PUSH2 0xEEF DUP8 PUSH2 0xE90 JUMP JUMPDEST SLOAD SWAP5 DUP6 ISZERO PUSH2 0x2DF0 JUMPI JUMPDEST POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 PUSH2 0x2E09 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 POP ISZERO SWAP1 DUP2 ISZERO PUSH2 0x3074 JUMPI JUMPDEST POP PUSH2 0x30F0 JUMP JUMPDEST PUSH2 0x2E12 DUP2 PUSH2 0xE70 JUMP JUMPDEST DUP1 ISZERO DUP1 DUP1 ISZERO PUSH2 0x2F50 JUMPI JUMPDEST PUSH2 0x2E25 SWAP1 PUSH2 0x3175 JUMP JUMPDEST PUSH2 0x2E2E DUP3 PUSH2 0xE70 JUMP JUMPDEST DUP1 PUSH2 0x2F3F JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x2F35 JUMPI JUMPDEST PUSH2 0x2E44 SWAP1 PUSH2 0x31C1 JUMP JUMPDEST PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x6 SLOAD SWAP6 PUSH2 0x2EAF PUSH2 0x2E7C PUSH2 0x2C74 JUMP JUMPDEST PUSH2 0x2E86 DUP7 DUP3 PUSH2 0x320D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x40 DUP3 ADD MSTORE DUP8 PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x3219 JUMP JUMPDEST DUP7 PUSH2 0x2EC5 DUP8 PUSH2 0x601 DUP9 PUSH2 0xEEF DUP7 PUSH2 0xEEF DUP12 PUSH2 0xE90 JUMP JUMPDEST SSTORE DUP7 PUSH32 0x6BB7FF708619BA0610CBA295A58592E0451DEE2622938C8755667688DAF3529B PUSH1 0x40 MLOAD DUP1 PUSH2 0x2F02 DUP2 PUSH1 0x40 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x2F0E DUP5 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 SWAP1 SWAP7 AND DUP7 MSTORE PUSH1 0x20 DUP7 ADD DUP9 SWAP1 MSTORE SWAP2 AND SWAP4 LOG4 CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0x2DE8 JUMP JUMPDEST POP DUP4 EXTCODESIZE ISZERO ISZERO PUSH2 0x2E3B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x2E34 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xC3E9CE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP6 DUP3 AND SWAP1 DUP4 DUP2 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3057 JUMPI JUMPDEST POP PUSH2 0x2F8F DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH2 0x2F98 DUP7 PUSH2 0xE70 JUMP JUMPDEST DUP6 EQ SWAP2 DUP3 PUSH2 0x3004 JUMPI JUMPDEST POP DUP2 PUSH2 0x2FB0 JUMPI JUMPDEST POP SWAP1 POP PUSH2 0x2E1C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5F5C3DF PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 POP DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI PUSH2 0x2E25 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0x2FE7 JUMPI JUMPDEST POP POP DUP6 EQ CODESIZE PUSH2 0x2FA8 JUMP JUMPDEST PUSH2 0x2FFD SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x235D JUMPI PUSH2 0x234F DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x2FDD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3DAD37ED PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 SWAP3 POP SWAP1 DUP4 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL DUP1 ISZERO PUSH2 0x473 JUMPI DUP3 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x303A JUMPI JUMPDEST POP AND SWAP1 DUP9 AND EQ SWAP1 CODESIZE PUSH2 0x2FA1 JUMP JUMPDEST PUSH2 0x3051 SWAP2 POP DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x23BC JUMPI PUSH2 0x23AE DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST CODESIZE PUSH2 0x302D JUMP JUMPDEST PUSH2 0x306E SWAP2 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x23E9 JUMPI PUSH2 0x23DB DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST CODESIZE PUSH2 0x2F85 JUMP JUMPDEST SWAP1 POP PUSH2 0x307F DUP4 PUSH2 0xE70 JUMP JUMPDEST CODESIZE PUSH2 0x2E03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x41737365744D616E616765723A2063616E6E6F7420616464204E617469766500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH2 0x30D4 DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x3 DUP2 EQ PUSH2 0x2DC5 JUMP JUMPDEST POP PUSH2 0x30E7 DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x2 DUP2 EQ PUSH2 0x2DBE JUMP JUMPDEST ISZERO PUSH2 0x30F7 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A204E6F20746F6B656E496420666F722045524332300000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x478 JUMPI MLOAD PUSH2 0x3B3 DUP2 PUSH2 0xE2D JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x478 JUMPI MLOAD PUSH2 0x3B3 DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x478 JUMPI MLOAD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x317C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A205374726174656779206D69736D617463680000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x31C8 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A204E6F74206120746F6B656E0000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x3216 DUP3 PUSH2 0xE70 JUMP JUMPDEST MSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0xA49 JUMPI DUP1 PUSH1 0x1 PUSH2 0x323D SWAP3 ADD PUSH1 0x6 SSTORE PUSH2 0x2728 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x32E9 JUMPI PUSH1 0x60 DUP2 PUSH1 0x2 SWAP3 MLOAD PUSH2 0x3254 DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH2 0x325D DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0xFF DUP6 SLOAD SWAP2 AND DUP1 PUSH1 0xFF NOT DUP4 AND OR DUP7 SSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000 PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x8 SHL AND SWAP3 AND OR OR DUP5 SSTORE PUSH2 0x32E2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP4 ADD MLOAD AND PUSH1 0x1 DUP7 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP2 ADD SSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x5BACA6D381F98BDAD74684704E9A88F2C190F7E9F75E6B88E5B7882FDF888198 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP3 SWAP2 DUP4 ISZERO PUSH2 0x3339 JUMPI POP POP JUMP JUMPDEST DUP1 SWAP2 SWAP4 POP ISZERO DUP1 ISZERO PUSH2 0x3430 JUMPI JUMPDEST PUSH2 0x334E SWAP1 PUSH2 0x30F0 JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP3 PUSH2 0x3377 PUSH2 0x335D PUSH2 0x2C74 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP4 PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x3219 JUMP JUMPDEST PUSH1 0x0 DUP1 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP4 PUSH2 0x33AF DUP4 PUSH2 0x601 PUSH2 0x2124 PUSH32 0x5B8CCBB9D4D8FB16EA74CE3C29A41F1B461FBDAFF4714A0D9A8EB05499746BC DUP2 JUMP JUMPDEST SSTORE DUP4 PUSH32 0x6BB7FF708619BA0610CBA295A58592E0451DEE2622938C8755667688DAF3529B PUSH1 0x40 MLOAD DUP1 PUSH2 0x33EC DUP2 PUSH1 0x40 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG2 DUP1 PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 PUSH1 0x40 MLOAD DUP1 PUSH2 0x342B DUP9 DUP3 SWAP2 SWAP1 PUSH1 0x20 PUSH1 0x40 DUP5 ADD SWAP4 PUSH1 0x0 DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x3345 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE SWAP1 SWAP3 SWAP2 PUSH2 0x3475 DUP2 PUSH2 0x601 DUP7 PUSH2 0xEEF DUP7 PUSH32 0xA9BC9A3A348C357BA16B37005D7E6B3236198C0E939F4AF8C5F19B8DEEB8EBC0 DUP3 JUMP JUMPDEST SLOAD SWAP4 DUP5 ISZERO PUSH2 0x3482 JUMPI POP POP POP JUMP JUMPDEST SWAP1 DUP1 SWAP3 SWAP5 POP ISZERO DUP1 ISZERO PUSH2 0x36F0 JUMPI JUMPDEST PUSH2 0x3498 SWAP1 PUSH2 0x30F0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xC3E9CE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP2 PUSH1 0x20 SWAP2 DUP5 DUP9 AND SWAP1 DUP4 DUP2 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x36D3 JUMPI JUMPDEST POP PUSH2 0x34D8 DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x3 EQ SWAP1 DUP2 PUSH2 0x3683 JUMPI JUMPDEST DUP2 PUSH2 0x35FA JUMPI JUMPDEST POP SWAP3 PUSH2 0x342B PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 SWAP4 PUSH2 0x3560 SWAP10 SWAP4 PUSH2 0x351F PUSH1 0x3 SWAP8 PUSH2 0x3175 JUMP JUMPDEST PUSH2 0x352B DUP5 EXTCODESIZE ISZERO ISZERO PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP11 DUP12 SWAP3 PUSH2 0x3547 DUP7 PUSH2 0x353D PUSH2 0x2C74 JUMP JUMPDEST PUSH1 0x3 DUP2 MSTORE SWAP3 PUSH2 0x21F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP2 DUP5 ADD MSTORE DUP11 PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x3219 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP2 PUSH2 0x359B DUP11 PUSH2 0x601 DUP12 PUSH2 0xEEF DUP10 PUSH32 0xA9BC9A3A348C357BA16B37005D7E6B3236198C0E939F4AF8C5F19B8DEEB8EBC0 DUP3 JUMP JUMPDEST SSTORE DUP2 PUSH32 0x6BB7FF708619BA0610CBA295A58592E0451DEE2622938C8755667688DAF3529B DUP3 MLOAD DUP1 PUSH2 0x35D7 DUP2 PUSH1 0x40 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP8 AND DUP8 MSTORE PUSH1 0x20 DUP8 ADD MSTORE SWAP2 AND SWAP4 SWAP1 DUP2 SWAP1 PUSH1 0x40 DUP3 ADD SWAP1 JUMP JUMPDEST DUP3 MLOAD PUSH4 0x5F5C3DF PUSH1 0xE2 SHL DUP2 MSTORE SWAP4 SWAP9 SWAP3 SWAP5 SWAP2 POP DUP9 SWAP1 DUP5 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 GAS STATICCALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x3560 SWAP9 PUSH1 0x3 SWAP6 PUSH2 0x351F PUSH2 0x342B SWAP4 PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 SWAP8 PUSH1 0x0 SWAP2 PUSH2 0x3666 JUMPI JUMPDEST POP DUP11 EQ SWAP5 SWAP8 POP POP SWAP4 SWAP10 POP SWAP4 POP PUSH2 0x34E8 JUMP JUMPDEST PUSH2 0x367D SWAP2 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x235D JUMPI PUSH2 0x234F DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST CODESIZE PUSH2 0x3655 JUMP JUMPDEST DUP3 MLOAD PUSH4 0x3DAD37ED PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP2 POP DUP4 DUP2 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL DUP1 ISZERO PUSH2 0x473 JUMPI DUP10 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x36B6 JUMPI JUMPDEST POP AND DUP9 DUP6 AND EQ SWAP1 PUSH2 0x34E2 JUMP JUMPDEST PUSH2 0x36CD SWAP2 POP DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x23BC JUMPI PUSH2 0x23AE DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST CODESIZE PUSH2 0x36AA JUMP JUMPDEST PUSH2 0x36EA SWAP2 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x23E9 JUMPI PUSH2 0x23DB DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST CODESIZE PUSH2 0x34CE JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x348F JUMP JUMPDEST ISZERO PUSH2 0x36FF JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204C656E677468206D69736D617463680000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA49 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x2763 JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH2 0x3B3 DUP2 PUSH2 0x47D JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x2763 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x478 JUMPI MLOAD PUSH2 0x3B3 DUP2 PUSH2 0x650 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP3 PUSH2 0x3B3 SWAP7 SWAP5 SWAP2 PUSH1 0xA0 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND DUP6 MSTORE AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP2 PUSH1 0x80 DUP3 ADD MSTORE ADD SWAP2 PUSH2 0x379F JUMP JUMPDEST ISZERO PUSH2 0x37FC JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57726F6E672072657475726E2076616C75650000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3848 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F203020616464726573730000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x127C JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x127C JUMPI JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP5 PUSH2 0x38C2 DUP7 ISZERO ISZERO PUSH2 0x3841 JUMP JUMPDEST AND SWAP3 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP5 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP3 DUP5 DUP5 SUB SWAP4 DUP5 GT PUSH2 0x127C JUMPI PUSH1 0x40 SWAP4 PUSH2 0x390A SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP5 DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 DUP1 SLOAD SWAP2 DUP1 DUP4 ADD DUP1 SWAP4 GT PUSH2 0x127C JUMPI SWAP2 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLER SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 DUP2 SWAP1 DUP2 ADD PUSH2 0x342B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x39FF JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x39C5 JUMPI JUMPDEST POP ISZERO PUSH2 0x3980 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73666572206E6F7420616C6C6F776564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF PUSH2 0x39F4 CALLER PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD AND ISZERO ISZERO EQ CODESIZE PUSH2 0x3978 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP PUSH2 0x3971 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ SWAP2 DUP3 ISZERO PUSH2 0x3A2B JUMPI JUMPDEST POP DUP2 ISZERO PUSH2 0x39C5 JUMPI POP ISZERO PUSH2 0x3980 JUMPI JUMP JUMPDEST SWAP2 POP CODESIZE PUSH2 0x3A1C JUMP JUMPDEST SWAP1 SWAP2 DUP3 DUP2 MSTORE PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x478 JUMPI PUSH1 0x20 SWAP3 PUSH1 0x5 SHL DUP1 SWAP3 DUP5 DUP4 ADD CALLDATACOPY ADD ADD SWAP1 JUMP JUMPDEST SWAP7 SWAP5 SWAP3 PUSH2 0x3AB3 SWAP5 PUSH2 0x3AA5 SWAP3 PUSH2 0x3B3 SWAP11 SWAP9 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND DUP12 MSTORE AND PUSH1 0x20 DUP11 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP11 ADD MSTORE PUSH1 0xA0 DUP10 ADD SWAP2 PUSH2 0x3A33 JUMP JUMPDEST SWAP2 DUP7 DUP4 SUB PUSH1 0x60 DUP9 ADD MSTORE PUSH2 0x3A33 JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP2 DUP6 SUB SWAP2 ADD MSTORE PUSH2 0x379F JUMP JUMPDEST SWAP3 SWAP1 PUSH2 0x3ADA SWAP1 PUSH2 0x3B3 SWAP6 SWAP4 PUSH1 0x40 DUP7 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 PUSH2 0x3A33 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 DUP6 SUB SWAP2 ADD MSTORE PUSH2 0x3A33 JUMP JUMPDEST SWAP1 SWAP5 SWAP4 SWAP2 SWAP3 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 DUP8 AND SWAP7 PUSH2 0x3B06 DUP9 ISZERO ISZERO PUSH2 0x3841 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 DUP2 LT PUSH2 0x3B4A JUMPI POP POP PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB SWAP4 SWAP3 SWAP2 PUSH2 0x342B SWAP2 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP5 AND SWAP8 CALLER SWAP8 DUP6 PUSH2 0x3AC1 JUMP JUMPDEST DUP1 PUSH2 0x3B59 PUSH2 0x3BC2 SWAP3 DUP11 DUP11 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD PUSH2 0x3BBB PUSH2 0x3BB3 PUSH2 0x3B6B DUP5 DUP10 DUP10 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD SWAP3 DUP11 DUP11 AND PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x2 DUP2 MSTORE PUSH1 0x40 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP1 DUP4 PUSH1 0x0 MSTORE MSTORE PUSH1 0x0 KECCAK256 PUSH2 0x3B94 DUP6 DUP3 SLOAD PUSH2 0x388D JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x601 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP2 DUP3 SLOAD PUSH2 0x389A JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x2C57 JUMP JUMPDEST PUSH2 0x3B09 JUMP JUMPDEST ISZERO PUSH2 0x3BCE JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E54463A2063616C6C6572206973206E6F7420746865206F776E657200000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x3C1F DUP3 PUSH2 0x2C83 JUMP JUMPDEST SWAP2 PUSH2 0x3C2D PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xAA2 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x478 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x3C58 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x3C94 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x3C89 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3C7D JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x3C74 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA49 JUMPI PUSH2 0x3CC6 DUP2 PUSH2 0x3CC0 DUP5 SLOAD PUSH2 0x94F JUMP JUMPDEST DUP5 PUSH2 0x3C4A JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x3D02 JUMPI POP DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x3CF7 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x3CE1 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP6 PUSH2 0x3D18 DUP6 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH2 0x3D55 JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x3D3C JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x3D32 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x3D1D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 DUP3 MLOAD SWAP3 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA49 JUMPI PUSH2 0x3D98 DUP2 PUSH2 0x3D92 DUP6 SLOAD PUSH2 0x94F JUMP JUMPDEST DUP6 PUSH2 0x3C4A JUMP JUMPDEST PUSH1 0x20 SWAP5 DUP6 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x3E19 JUMPI PUSH2 0x2C81 SWAP6 SWAP7 DUP4 PUSH1 0x60 SWAP5 PUSH1 0x3 SWAP7 SWAP5 PUSH2 0x3DE1 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x3E0E JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 DUP9 SHL SHR NOT AND OR DUP7 SSTORE JUMPDEST DUP3 ADD MLOAD PUSH1 0x1 DUP7 ADD PUSH2 0x3C9E JUMP JUMPDEST PUSH2 0x3E05 PUSH2 0x3DF2 PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP7 ADD SWAP1 PUSH1 0xFF AND PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP2 ADD PUSH2 0x3C9E JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x3DC1 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH2 0x3E2F DUP7 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x3E7B JUMPI POP DUP5 PUSH1 0x3 SWAP7 SWAP5 PUSH2 0x3DE1 SWAP5 PUSH2 0x2C81 SWAP11 SWAP12 SWAP5 PUSH1 0x60 SWAP9 PUSH1 0x1 SWAP6 LT PUSH2 0x3E63 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP7 SSTORE PUSH2 0x3DD5 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP11 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x3E56 JUMP JUMPDEST SWAP3 SWAP4 DUP10 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x3E33 JUMP JUMPDEST SWAP5 SWAP7 SWAP6 SWAP2 PUSH4 0xFFFFFFFF SWAP4 PUSH1 0x60 SWAP6 PUSH2 0x3EB7 PUSH1 0xFF SWAP5 PUSH2 0x3EC5 SWAP5 PUSH1 0x80 DUP12 MSTORE PUSH1 0x80 DUP12 ADD SWAP2 PUSH2 0x379F JUMP JUMPDEST SWAP2 DUP9 DUP4 SUB PUSH1 0x20 DUP11 ADD MSTORE PUSH2 0x379F JUMP JUMPDEST SWAP7 AND PUSH1 0x40 DUP6 ADD MSTORE AND SWAP2 ADD MSTORE JUMP JUMPDEST SWAP5 SWAP7 SWAP6 SWAP4 SWAP7 SWAP3 SWAP1 SWAP2 SWAP3 PUSH1 0x6 SLOAD SWAP8 PUSH4 0xFFFFFFFF SWAP3 DUP4 DUP11 GT PUSH2 0x4025 JUMPI PUSH2 0x3F81 PUSH32 0xB0BCDEBD2813328A89A9ED5971E5863201ED78FC4E0E2B271CCEDDB9CE90510 SWAP8 PUSH2 0x3FAD SWAP6 PUSH2 0x3F5D SWAP13 AND SWAP12 DUP13 SWAP6 PUSH2 0x3F26 DUP8 PUSH2 0x32FF JUMP JUMPDEST POP PUSH2 0x3F2F PUSH2 0x2C74 JUMP JUMPDEST SWAP3 PUSH2 0x3F3B CALLDATASIZE DUP12 DUP16 PUSH2 0x3C13 JUMP JUMPDEST DUP5 MSTORE PUSH2 0x3F48 CALLDATASIZE DUP8 DUP14 PUSH2 0x3C13 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0xFF DUP8 AND PUSH1 0x40 DUP6 ADD MSTORE CALLDATASIZE SWAP2 PUSH2 0x3C13 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x3F7C DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x3D6D JUMP JUMPDEST PUSH2 0x3F9F CALLER PUSH2 0x1631 DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP6 CALLER SWAP10 DUP8 PUSH2 0x3E92 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 CALLER SWAP2 DUP1 PUSH2 0x3FF8 DUP9 DUP3 PUSH1 0x20 PUSH1 0x0 SWAP2 SWAP4 SWAP3 SWAP4 PUSH4 0xFFFFFFFF PUSH1 0x40 DUP3 ADD SWAP6 AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 CALLER PUSH1 0x0 DUP4 PUSH32 0x16B85F49BF01212961345D3016C9A531894ACCF62EB7680F2045D79185CC0EC0 DUP3 DUP1 LOG4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E674D6174683A2075696E743332204F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x407F DUP3 ISZERO ISZERO PUSH2 0x3841 JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x127C JUMPI SSTORE PUSH2 0x40BC DUP2 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 DUP2 SLOAD PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x127C JUMPI PUSH1 0x0 SWAP3 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 CALLER SWAP3 LOG4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH2 0x4119 DUP4 ISZERO ISZERO PUSH2 0x3841 JUMP JUMPDEST DUP3 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 DUP4 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x127C JUMPI SSTORE PUSH2 0x4155 DUP2 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD SWAP1 DUP4 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x127C JUMPI SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 CALLER SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 DUP2 SWAP1 DUP2 ADD PUSH2 0x342B JUMP JUMPDEST ISZERO PUSH2 0x41A9 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E54463A204E6F74206E61746976650000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x4203 DUP3 ISZERO ISZERO PUSH2 0x3841 JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 DUP5 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x127C JUMPI SSTORE PUSH2 0x423F DUP2 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD SWAP1 DUP5 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x127C JUMPI SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x0 SWAP3 CALLER SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 DUP2 SWAP1 DUP2 ADD PUSH2 0x342B JUMP JUMPDEST SWAP5 SWAP4 SWAP3 SWAP1 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP8 AND SWAP3 PUSH1 0x0 SWAP2 DUP5 DUP4 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x42C8 PUSH1 0x40 DUP5 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP5 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH2 0x42DF PUSH1 0xFF PUSH1 0x40 DUP6 KECCAK256 SLOAD AND DUP11 PUSH2 0x3A08 JUMP JUMPDEST SWAP6 DUP1 PUSH2 0x42EA DUP6 PUSH2 0x2728 JUMP JUMPDEST POP SWAP2 PUSH2 0x42FA PUSH2 0x1C97 DUP5 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x4303 DUP4 PUSH2 0x463D JUMP JUMPDEST SWAP2 DUP1 PUSH2 0x44D9 JUMPI POP POP PUSH2 0x4324 DUP9 SWAP2 PUSH2 0x1CDA DUP8 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP10 JUMPDEST PUSH2 0x4331 DUP12 DUP8 DUP11 PUSH2 0x4103 JUMP JUMPDEST DUP4 DUP4 SLOAD PUSH1 0x1 PUSH1 0xFF DUP3 AND PUSH2 0x4343 DUP2 PUSH2 0xE70 JUMP JUMPDEST SUB PUSH2 0x4419 JUMPI POP POP DUP3 PUSH2 0x1D4A PUSH2 0xD38 SWAP4 PUSH1 0x1 SWAP4 PUSH2 0x1D2D PUSH2 0xD38 PUSH2 0x4370 SWAP9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x8 SHR AND SWAP1 JUMP JUMPDEST SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x1993 JUMPI PUSH1 0x40 MLOAD PUSH4 0x57D48E63 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE SWAP3 DUP4 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x473 JUMPI PUSH32 0x1AD178FF1B5D2C6DC0F3E4E2578B3D445E601C5BEAE2F63A73F237E480DF2FD0 SWAP3 PUSH2 0x4406 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP5 AND SWAP4 DUP1 PUSH2 0x43FF DUP10 DUP9 CALLER SWAP7 DUP5 PUSH1 0xA0 SWAP2 SWAP5 SWAP4 PUSH1 0x0 SWAP4 PUSH1 0xC0 DUP4 ADD SWAP7 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 SWAP2 SWAP1 JUMP JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x4413 SWAP3 PUSH2 0xA35 JUMP JUMPDEST CODESIZE PUSH2 0x43C6 JUMP JUMPDEST PUSH1 0x8 SHR AND ADDRESS DUP2 SUB PUSH2 0x4449 JUMPI POP DUP3 PUSH2 0x1E50 PUSH2 0xD38 SWAP4 PUSH1 0x1 SWAP4 PUSH2 0x1E45 PUSH2 0xD38 DUP7 PUSH2 0x4370 SWAP10 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH2 0x4463 PUSH2 0xD38 PUSH1 0x1 DUP6 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP5 ADD SLOAD SWAP3 DUP3 EXTCODESIZE ISZERO PUSH2 0x19A9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x79212195 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x64 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x84 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0xA4 DUP4 ADD MSTORE DUP5 SWAP1 DUP3 SWAP1 PUSH1 0xC4 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x4370 SWAP3 PUSH2 0xD38 SWAP3 PUSH1 0x1 SWAP3 PUSH2 0x1EE5 JUMPI POP PUSH2 0x1D4A JUMP JUMPDEST PUSH2 0x44F5 SWAP3 SWAP2 SWAP12 SWAP10 POP PUSH2 0x1F18 DUP8 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SWAP8 PUSH2 0x4326 JUMP JUMPDEST ISZERO PUSH2 0x4503 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A2063616E2774206465706F736974207479706500000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x478 JUMPI MLOAD PUSH2 0x3B3 DUP2 PUSH2 0x117D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP4 DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP4 SWAP2 SWAP3 DUP5 SWAP2 PUSH2 0x45AF DUP2 PUSH1 0x84 DUP2 ADD JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0xAA2 JUMP JUMPDEST MLOAD SWAP4 AND GAS CALL PUSH2 0x45BC PUSH2 0x2C9F JUMP JUMPDEST DUP2 PUSH2 0x460E JUMPI JUMPDEST POP ISZERO PUSH2 0x45CA JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E7366657246726F6D206661696C6564 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 MLOAD DUP1 ISZERO SWAP3 POP DUP3 ISZERO PUSH2 0x4623 JUMPI JUMPDEST POP POP CODESIZE PUSH2 0x45C2 JUMP JUMPDEST PUSH2 0x4636 SWAP3 POP PUSH1 0x20 DUP1 SWAP2 DUP4 ADD ADD SWAP2 ADD PUSH2 0x4548 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x461B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x1 PUSH1 0x4 SWAP4 ADD SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0xCE845D1D PUSH1 0xE0 SHL DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x4674 JUMPI POP SWAP1 JUMP JUMPDEST PUSH2 0x3B3 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x235D JUMPI PUSH2 0x234F DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST ISZERO PUSH2 0x4693 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A206E6F7420455243373231000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x46DF JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A206E6F7420777261707065644E61746976650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP3 SWAP2 SWAP1 SWAP3 PUSH2 0x4731 DUP2 PUSH2 0x2728 JUMP JUMPDEST POP SWAP4 PUSH2 0x4755 DUP6 SLOAD PUSH1 0x1 PUSH1 0xFF DUP3 AND PUSH2 0x4747 DUP2 PUSH2 0xE70 JUMP JUMPDEST EQ SWAP1 DUP2 PUSH2 0x48C4 JUMPI JUMPDEST POP PUSH2 0x46D8 JUMP JUMPDEST PUSH2 0x477D PUSH2 0x476C DUP4 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH2 0x4776 DUP8 PUSH2 0x463D JUMP JUMPDEST SWAP1 DUP6 PUSH2 0x5492 JUMP JUMPDEST SWAP5 PUSH2 0x4789 DUP7 DUP5 DUP5 PUSH2 0x4103 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH32 0x0 AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x478 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD0E30DB PUSH1 0xE4 SHL DUP2 MSTORE SWAP2 PUSH1 0x0 DUP4 PUSH1 0x4 DUP2 DUP11 DUP6 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x473 JUMPI DUP8 PUSH1 0x1 PUSH2 0x7C2 SWAP3 PUSH2 0x480D SWAP7 PUSH2 0xD38 SWAP7 PUSH2 0x48B1 JUMPI JUMPDEST POP ADD SWAP3 PUSH2 0x4807 PUSH2 0xD38 DUP6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x48FD JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x478 JUMPI PUSH1 0x40 MLOAD PUSH4 0x57D48E63 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x489E JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 AND SWAP2 PUSH32 0x1AD178FF1B5D2C6DC0F3E4E2578B3D445E601C5BEAE2F63A73F237E480DF2FD0 CALLER SWAP3 DUP1 PUSH2 0x43FF DUP10 DUP9 CALLER SWAP7 DUP5 PUSH1 0xA0 SWAP2 SWAP5 SWAP4 PUSH1 0x0 SWAP4 PUSH1 0xC0 DUP4 ADD SWAP7 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x48AB SWAP3 PUSH2 0xA35 JUMP JUMPDEST CODESIZE PUSH2 0x4842 JUMP JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x48BE SWAP3 PUSH2 0xA35 JUMP JUMPDEST CODESIZE PUSH2 0x47F0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH32 0x0 AND SWAP2 PUSH1 0x8 SHR AND EQ CODESIZE PUSH2 0x474F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP4 SWAP1 SWAP2 DUP5 SWAP2 SWAP1 PUSH2 0x493E DUP2 PUSH1 0x64 DUP2 ADD PUSH2 0x45A1 JUMP JUMPDEST MLOAD SWAP4 AND GAS CALL PUSH2 0x494B PUSH2 0x2C9F JUMP JUMPDEST DUP2 PUSH2 0x499E JUMPI JUMPDEST POP ISZERO PUSH2 0x4959 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E73666572206661696C656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP1 ISZERO SWAP3 POP DUP3 ISZERO PUSH2 0x49B3 JUMPI JUMPDEST POP POP CODESIZE PUSH2 0x4951 JUMP JUMPDEST PUSH2 0x49C6 SWAP3 POP PUSH1 0x20 DUP1 SWAP2 DUP4 ADD ADD SWAP2 ADD PUSH2 0x4548 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x49AB JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x49DA DUP6 PUSH2 0x2728 JUMP JUMPDEST POP SWAP5 PUSH1 0xFF DUP7 SLOAD AND PUSH2 0x49EA DUP2 PUSH2 0xE70 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4B6E JUMPI DUP1 PUSH2 0x49FC PUSH1 0x2 SWAP3 PUSH2 0xE70 JUMP JUMPDEST EQ PUSH2 0x4A0A JUMPI PUSH2 0x557 SWAP6 PUSH2 0x4BB3 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND SWAP3 PUSH2 0x4A26 DUP5 ISZERO ISZERO PUSH2 0x3841 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP5 DUP4 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 DUP5 KECCAK256 DUP6 DUP6 MSTORE PUSH1 0x20 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT SWAP2 DUP3 DUP3 ADD SWAP2 DUP3 GT PUSH2 0x127C JUMPI SSTORE PUSH2 0x4A65 DUP7 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD SWAP2 DUP3 ADD SWAP2 DUP3 GT PUSH2 0x127C JUMPI PUSH2 0x4ABC SWAP3 DUP6 SWAP3 PUSH1 0x1 SWAP3 SSTORE DUP7 DUP10 DUP7 MLOAD DUP11 DUP2 MSTORE DUP5 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP9 CALLER SWAP3 LOG4 ADD SLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP3 DUP4 EXTCODESIZE ISZERO PUSH2 0x1993 JUMPI DUP2 MLOAD PUSH4 0xF3FEF3A3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE SWAP4 DUP5 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x473 JUMPI PUSH32 0xD4594021CDD03E2C0ABC8108CBA8D75A347EAF64ACADDEDE25DF63F6EF9E2420 SWAP4 PUSH2 0x4B5B JUMPI JUMPDEST POP MLOAD SWAP5 AND SWAP4 DUP1 PUSH2 0x4B51 CALLER SWAP5 DUP3 PUSH1 0x80 PUSH1 0x1 SWAP2 SWAP4 SWAP3 SWAP4 PUSH1 0xA0 DUP2 ADD SWAP5 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 DUP2 SWAP1 JUMP JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x4B68 SWAP3 PUSH2 0xA35 JUMP JUMPDEST CODESIZE PUSH2 0x4B20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A2063616E2774207769746864726177204E617469766500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP6 SWAP5 SWAP3 SWAP2 SWAP3 PUSH2 0x4BC1 DUP8 PUSH2 0x463D JUMP JUMPDEST SWAP1 DUP1 PUSH2 0x4CB3 JUMPI POP PUSH2 0xD38 PUSH1 0x1 PUSH2 0x4BEF PUSH2 0x4BFC SWAP4 PUSH2 0x4BE8 DUP7 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD DUP10 PUSH2 0x54B9 JUMP JUMPDEST SWAP9 JUMPDEST PUSH2 0x1D4A DUP11 DUP7 DUP10 PUSH2 0x41EE JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x478 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF3FEF3A3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x4CA0 JUMPI JUMPDEST POP PUSH32 0xD4594021CDD03E2C0ABC8108CBA8D75A347EAF64ACADDEDE25DF63F6EF9E2420 PUSH1 0x40 MLOAD SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP5 AND SWAP3 DUP1 PUSH2 0x43FF DUP10 DUP9 CALLER SWAP7 DUP5 PUSH1 0x80 SWAP2 SWAP5 SWAP4 PUSH1 0x0 SWAP4 PUSH1 0xA0 DUP4 ADD SWAP7 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x4CAD SWAP3 PUSH2 0xA35 JUMP JUMPDEST CODESIZE PUSH2 0x4C40 JUMP JUMPDEST SWAP7 SWAP5 POP PUSH2 0xD38 PUSH1 0x1 PUSH2 0x4CDD PUSH2 0x4BFC SWAP4 PUSH2 0x4CD6 DUP7 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD DUP12 PUSH2 0x5501 JUMP JUMPDEST SWAP7 PUSH2 0x4BF1 JUMP JUMPDEST ISZERO PUSH2 0x4CEA JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A20746F206E6F7420736574000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x4D36 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A206F70657261746F72206E6F7420736574000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x4D82 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A2063616E277420617070726F7665207969656C64426F78 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND SWAP3 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH2 0x4E1E DUP6 PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP5 PUSH1 0x1 DUP7 MSTORE AND SWAP4 LOG3 JUMP JUMPDEST PUSH1 0x40 PUSH32 0x6ACEB1B079BEEABDD8C2F30CD221CA27EC52E9D0AEF6BB229CC175CF15DD778B SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP4 DUP5 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x4E8F DUP2 DUP5 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP7 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE DUP3 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE DUP3 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x1 PUSH1 0x20 DUP8 ADD MSTORE AND SWAP4 LOG3 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH32 0x6ACEB1B079BEEABDD8C2F30CD221CA27EC52E9D0AEF6BB229CC175CF15DD778B SWAP3 SWAP5 SWAP4 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND SWAP5 DUP6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x4F13 DUP3 DUP6 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x4F33 DUP2 DUP6 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST DUP4 MLOAD SWAP7 DUP8 MSTORE ISZERO ISZERO PUSH1 0x20 DUP8 ADD MSTORE AND SWAP4 LOG3 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x60 SWAP2 DUP1 SLOAD PUSH1 0xFF DUP2 AND PUSH2 0x4F58 DUP2 PUSH2 0xE70 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 PUSH1 0x8 SHR AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x1 DUP3 ADD SLOAD AND PUSH1 0x40 DUP6 ADD MSTORE ADD SLOAD SWAP2 ADD MSTORE JUMP JUMPDEST SWAP3 SWAP5 SWAP4 PUSH2 0x4FF3 PUSH1 0xC0 SWAP4 PUSH2 0x4F9A DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 PUSH2 0x4F44 JUMP JUMPDEST PUSH1 0xE0 PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0x80 PUSH1 0xE0 DUP8 ADD MSTORE PUSH1 0x3 PUSH2 0x4FB8 PUSH2 0x160 DUP9 ADD DUP4 PUSH2 0x989 JUMP JUMPDEST SWAP2 PUSH2 0x4FD4 PUSH1 0xDF NOT SWAP4 DUP5 DUP11 DUP3 SUB ADD PUSH2 0x100 DUP12 ADD MSTORE PUSH1 0x1 DUP4 ADD PUSH2 0x989 JUMP JUMPDEST SWAP3 PUSH1 0xFF PUSH1 0x2 DUP4 ADD SLOAD AND PUSH2 0x120 DUP11 ADD MSTORE DUP9 DUP5 SUB ADD PUSH2 0x140 DUP10 ADD MSTORE ADD PUSH2 0x989 JUMP JUMPDEST SWAP6 PUSH1 0xA0 DUP6 ADD MSTORE AND SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH2 0x5010 PUSH1 0xA0 SWAP3 PUSH2 0x3B3 SWAP6 SWAP5 PUSH2 0x4F44 JUMP JUMPDEST DUP2 PUSH1 0x80 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x989 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x478 JUMPI MLOAD PUSH2 0x3B3 DUP2 PUSH2 0xD52 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 PUSH1 0xFF PUSH1 0x80 SWAP2 PUSH2 0x5048 DUP5 PUSH1 0xA0 DUP2 ADD SWAP8 PUSH2 0x4F44 JUMP JUMPDEST AND SWAP2 ADD MSTORE JUMP JUMPDEST SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x505F DUP10 PUSH2 0xE70 JUMP JUMPDEST DUP9 PUSH2 0x507B JUMPI POP PUSH2 0x557 SWAP7 SWAP8 POP SWAP1 PUSH2 0x5076 SWAP2 ADDRESS PUSH2 0x3438 JUMP JUMPDEST PUSH2 0x428C JUMP JUMPDEST PUSH2 0x5088 SWAP4 SWAP9 SWAP6 SWAP5 SWAP6 PUSH2 0x2DA4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP8 AND SWAP3 PUSH1 0x0 SWAP2 DUP5 DUP4 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x42C8 PUSH1 0x40 DUP5 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x50C6 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F785065726D69743A206578706972656420646561646C696E65 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x5111 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F785065726D69743A20696E76616C6964207369676E61747572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x65 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x3B3 SWAP4 SWAP2 PUSH2 0x516F SWAP4 PUSH2 0x5292 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x517B DUP2 PUSH2 0xE70 JUMP JUMPDEST DUP1 PUSH2 0x5183 JUMPI POP JUMP JUMPDEST PUSH2 0x518C DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x51D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x51E2 DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x522F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x523B PUSH1 0x3 SWAP3 PUSH2 0xE70 JUMP JUMPDEST EQ PUSH2 0x5242 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP3 SWAP2 SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT PUSH2 0x5308 JUMPI SWAP2 PUSH1 0x80 SWAP5 SWAP4 SWAP2 PUSH1 0xFF PUSH1 0x20 SWAP5 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND DUP5 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP2 DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0x473 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x5302 JUMPI SWAP2 SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP POP POP PUSH1 0x0 SWAP1 PUSH1 0x3 SWAP1 JUMP JUMPDEST PUSH2 0x531C PUSH2 0x534B JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD SWAP3 PUSH2 0x1901 PUSH1 0xF0 SHL DUP5 MSTORE PUSH1 0x22 DUP4 ADD MSTORE PUSH1 0x42 DUP3 ADD MSTORE PUSH1 0x42 DUP2 MSTORE PUSH2 0x5345 DUP2 PUSH2 0xA86 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS EQ DUP1 PUSH2 0x5436 JUMPI JUMPDEST ISZERO PUSH2 0x53A6 JUMPI PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH32 0x0 DUP3 MSTORE PUSH32 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH2 0x5345 DUP2 PUSH2 0xA4E JUMP JUMPDEST POP PUSH32 0x0 CHAINID EQ PUSH2 0x537D JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x127C JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0x547C JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 SWAP2 PUSH2 0x549D SWAP1 PUSH2 0x2C57 JUMP JUMPDEST SWAP1 PUSH4 0x5F5E100 DUP4 ADD DUP1 SWAP4 GT PUSH2 0x127C JUMPI PUSH2 0x3B3 SWAP3 PUSH2 0x1241 SWAP2 PUSH2 0x545F JUMP JUMPDEST SWAP1 SWAP3 SWAP2 PUSH2 0x54C5 SWAP1 PUSH2 0x2C57 JUMP JUMPDEST SWAP3 PUSH4 0x5F5E100 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x127C JUMPI DUP1 PUSH2 0x1241 PUSH2 0x54E9 DUP7 PUSH2 0x1241 PUSH2 0x54F0 SWAP6 DUP8 PUSH2 0x545F JUMP JUMPDEST SWAP6 DUP7 PUSH2 0x545F JUMP JUMPDEST LT PUSH2 0x54F7 JUMPI JUMP JUMPDEST SWAP1 PUSH2 0x3B3 SWAP1 PUSH2 0x2C57 JUMP JUMPDEST SWAP2 PUSH2 0x550B SWAP1 PUSH2 0x2C57 JUMP JUMPDEST SWAP2 PUSH4 0x5F5E100 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x127C JUMPI PUSH2 0x3B3 SWAP3 PUSH2 0x1241 SWAP2 PUSH2 0x545F JUMP JUMPDEST SWAP1 SWAP3 SWAP2 PUSH2 0x5533 SWAP1 PUSH2 0x2C57 JUMP JUMPDEST PUSH4 0x5F5E100 DUP5 ADD DUP1 SWAP5 GT PUSH2 0x127C JUMPI DUP1 PUSH2 0x1241 PUSH2 0x54E9 DUP7 PUSH2 0x1241 PUSH2 0x54F0 SWAP6 DUP8 PUSH2 0x545F JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 0xB1 0x4B DUP11 SWAP12 EXTCODESIZE DUP2 0xC5 SWAP10 ADD 0x26 0xDD RETURNDATACOPY SMOD DUP2 DUP10 DUP13 NOT SHR 0xD3 PUSH31 0x3E2E5ED2B5647E2802CC7D64736F6C63430008120033000000000000000000 ","sourceMap":"2222:18939:34:-:0;;;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;2222:18939:34;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;2222:18939:34;;;2550:22:18;;2606:25;;2787;;;2822:31;;;;;2882:13;2222:18939:34;2863:32:18;2222:18939:34;;;3642:73:18;;2660:117;;2222:18939:34;;;;;;;;;;;;2882:13:18;2222:18939:34;;;;3709:4:18;2222:18939:34;;;;;3642:73:18;;2222:18939:34;;;;;;;;;;;;;;;;;;3632:84:18;;2222:18939:34;2905:85:18;3709:4;2222:18939:34;3000:28:18;3038:21;;;;2222:18939:34;;;;;;;;;;;;;;;;1075:14:28;4022:21:39;;2787:25:18;1069:49:28;;-1:-1:-1;;4022:21:39;;;1069:49:28;;;;4022:21:39;;;;1069:49:28;4022:21:39;;;;1057:6:28;4022:21:39;2222:18939:34;4022:21:39;;;;;2222:18939:34;4022:21:39;;;1057:6:28;4022:21:39;;;;;;1057:6:28;4022:21:39;;;2222:18939:34;4022:21:39;;;;;;;;;;;;;;-1:-1:-1;4022:21:39;;;;-1:-1:-1;;;;;2222:18939:34;4022:21:39;;;;;;;;;;-1:-1:-1;;;;;;4022:21:39;;;;;;;;;-1:-1:-1;4022:21:39;;;;2222:18939:34;;;;-1:-1:-1;;;;;;4022:21:39;;;;;;;;;;;;3480:30:34;;3520:24;;;;2222:18939;;;;;;;;;;;;;;;;;;;;;;;;;;;;2787:25:18;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4022:21:39;-1:-1:-1;;;4022:21:39;;;1075:14:28;4022:21:39;;;;;-1:-1:-1;;;4022:21:39;;;1075:14:28;4022:21:39;;2222:18939:34;4022:21:39;;-1:-1:-1;;;2222:18939:34;;;1075:14:28;2222:18939:34;;;;;;;;-1:-1:-1;2222:18939:34;;;;;-1:-1:-1;2222:18939:34;;-1:-1:-1;2222:18939:34;;;;;;;;;-1:-1:-1;;;;;2222:18939:34;;;;;;;:::o"},"deployedBytecode":{"functionDebugData":{"abi_decode":{"entryPoint":4217,"id":null,"parameterSlots":2,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":12625,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_addresst_addresst_array_uint256_dyn_calldatat_array_uint256_dyn_calldatat_bytes_calldata":{"entryPoint":3870,"id":null,"parameterSlots":1,"returnSlots":8},"abi_decode_addresst_addresst_uint256t_uint256t_bytes_calldata":{"entryPoint":11052,"id":null,"parameterSlots":1,"returnSlots":6},"abi_decode_array_address_dyn_calldata":{"entryPoint":1242,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_available_length_string":{"entryPoint":15379,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":17736,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes4_fromMemory":{"entryPoint":14218,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":2131,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_enum_TokenType_fromMemory":{"entryPoint":12604,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_enum_TokenTypet_addresst_contract_IStrategyt_uint256":{"entryPoint":3639,"id":null,"parameterSlots":1,"returnSlots":4},"abi_decode_string_fromMemory":{"entryPoint":11471,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint256_fromMemory":{"entryPoint":12646,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint256t_addresst_addresst_uint256t_uint256":{"entryPoint":6884,"id":null,"parameterSlots":1,"returnSlots":5},"abi_decode_uint256t_addresst_uint256":{"entryPoint":5975,"id":null,"parameterSlots":1,"returnSlots":3},"abi_decode_uint256t_array_address_dyn_calldatat_array_uint256_dyn_calldata":{"entryPoint":1291,"id":null,"parameterSlots":1,"returnSlots":5},"abi_decode_uint256t_uint256t_bool":{"entryPoint":4487,"id":null,"parameterSlots":1,"returnSlots":3},"abi_decode_uint8_fromMemory":{"entryPoint":20509,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_address_address_array_uint256_dyn_calldata_array_uint256_dyn_calldata_bytes_calldata":{"entryPoint":14960,"id":null,"parameterSlots":9,"returnSlots":1},"abi_encode_address_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_address_address_uint256_uint256_bytes_calldata":{"entryPoint":14272,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_address_address_uint256_uint256_stringliteral_c5d2":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_address_rational_by":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn":{"entryPoint":4834,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":14899,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_array_uint256_dyn_calldata_array_uint256_dyn_calldata":{"entryPoint":15041,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_bytes_calldata":{"entryPoint":11366,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_bytes_calldata_ptr":{"entryPoint":14239,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_contract_IStrategy_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_contract_IStrategy_uint256_40792":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_rational_by":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_string":{"entryPoint":930,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_calldata_string_calldata_uint8_uint32":{"entryPoint":16018,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_string_memory_ptr":{"entryPoint":893,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_storage":{"entryPoint":2441,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_stringliteral":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_520d":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_c5d2":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_struct_Asset_storage":{"entryPoint":20292,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_struct_Asset_storage_string":{"entryPoint":20479,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_struct_Asset_storage_struct_NativeToken_uint256_address":{"entryPoint":20351,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_struct_Asset_storage_uint8":{"entryPoint":20530,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_stringliteral":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint256_rational_by_rational_by_rational_by_rational_by":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint256_rational_by_rational_by_rational_by_rational_by_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint256_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_uint256_uint256_24105":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_uint256_uint256_uint256_uint256_uint256":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_uint256_uint256_uint256_uint256_uint256_bool":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_uint32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint32_rational_by":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_uint8":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":11380,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":14148,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":11395,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"array_push_from_struct_Asset_to_array_struct_Asset_storage_dyn_ptr":{"entryPoint":12825,"id":null,"parameterSlots":1,"returnSlots":0},"calldata_array_index_access_address_dyn_calldata":{"entryPoint":14172,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_uint256":{"entryPoint":14490,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_uint256":{"entryPoint":21618,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_uint256":{"entryPoint":21599,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256":{"entryPoint":14477,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":15434,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_address":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_from_storage_uint8":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_string_to_string":{"entryPoint":15518,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":858,"id":null,"parameterSlots":3,"returnSlots":0},"copy_struct_to_storage_from_struct_NativeToken_to_struct_NativeToken":{"entryPoint":15725,"id":null,"parameterSlots":2,"returnSlots":0},"external_fun_DOMAIN_SEPARATOR":{"entryPoint":4228,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_amountOf":{"entryPoint":5228,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_assetCount":{"entryPoint":10954,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_assetTotals":{"entryPoint":4769,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_assets":{"entryPoint":10088,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_balanceOf":{"entryPoint":1166,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_balanceOfBatch":{"entryPoint":4893,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_batch":{"entryPoint":10194,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_batchBurn":{"entryPoint":1371,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_batchMint":{"entryPoint":2268,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_batchTransfer":{"entryPoint":10659,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_burn":{"entryPoint":7995,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_claimOwnership":{"entryPoint":9843,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_createToken":{"entryPoint":3421,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_decimals":{"entryPoint":4263,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_deposit":{"entryPoint":5875,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_depositAsset":{"entryPoint":7196,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_depositETH":{"entryPoint":8346,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_depositETHAsset":{"entryPoint":6010,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_depositNFTAsset":{"entryPoint":6028,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_ids":{"entryPoint":3753,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_isApprovedForAll":{"entryPoint":10848,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_isApprovedForAsset":{"entryPoint":9200,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_mint":{"entryPoint":6826,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_name":{"entryPoint":950,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_nativeTokens":{"entryPoint":2756,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_nonces":{"entryPoint":6764,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_onERC1155BatchReceived":{"entryPoint":9760,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_onERC1155Received":{"entryPoint":11129,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_onERC721Received":{"entryPoint":2177,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_owner":{"entryPoint":8108,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_pendingOwner":{"entryPoint":3576,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_permit":{"entryPoint":10416,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_permitAll":{"entryPoint":9321,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_permitToken":{"entryPoint":6573,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_registerAsset":{"entryPoint":9567,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_safeBatchTransferFrom":{"entryPoint":3994,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_safeTransferFrom":{"entryPoint":11166,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_setApprovalForAll":{"entryPoint":8161,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_setApprovalForAsset":{"entryPoint":9595,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_supportsInterface":{"entryPoint":1658,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_symbol":{"entryPoint":5150,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_toAmount":{"entryPoint":4519,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_toShare":{"entryPoint":7036,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_totalSupply":{"entryPoint":9799,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_transfer":{"entryPoint":1768,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_transferMultiple":{"entryPoint":2936,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_transferOwnership":{"entryPoint":5467,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_uri":{"entryPoint":1902,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_uriBuilder":{"entryPoint":11261,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_withdraw":{"entryPoint":6936,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_wrappedNative":{"entryPoint":10984,"id":null,"parameterSlots":0,"returnSlots":0},"extract_byte_array_length":{"entryPoint":2383,"id":null,"parameterSlots":1,"returnSlots":1},"extract_from_storage_value_offsett_address":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"extract_returndata":{"entryPoint":11423,"id":null,"parameterSlots":0,"returnSlots":1},"finalize_allocation":{"entryPoint":2722,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_24101":{"entryPoint":2613,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_40765":{"entryPoint":2638,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_40766":{"entryPoint":2666,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_40767":{"entryPoint":2694,"id":null,"parameterSlots":1,"returnSlots":0},"fun_burn":{"entryPoint":16878,"id":5250,"parameterSlots":3,"returnSlots":0},"fun_createToken":{"entryPoint":16082,"id":5906,"parameterSlots":7,"returnSlots":1},"fun_deposit":{"entryPoint":20558,"id":7375,"parameterSlots":8,"returnSlots":2},"fun_depositETHAsset":{"entryPoint":18212,"id":6547,"parameterSlots":3,"returnSlots":2},"fun_domainSeparatorV4":{"entryPoint":21323,"id":2031,"parameterSlots":0,"returnSlots":1},"fun_getRevertMsg":{"entryPoint":11566,"id":28,"parameterSlots":1,"returnSlots":1},"fun_hashTypedDataV4":{"entryPoint":21268,"id":2074,"parameterSlots":1,"returnSlots":1},"fun_mint":{"entryPoint":16643,"id":5204,"parameterSlots":3,"returnSlots":0},"fun_mint_24100":{"entryPoint":16490,"id":5204,"parameterSlots":2,"returnSlots":0},"fun_recover":{"entryPoint":20832,"id":1861,"parameterSlots":4,"returnSlots":1},"fun_registerAsset":{"entryPoint":11684,"id":4889,"parameterSlots":4,"returnSlots":1},"fun_registerAsset_24196":{"entryPoint":13055,"id":4846,"parameterSlots":1,"returnSlots":1},"fun_registerAsset_40776":{"entryPoint":13368,"id":4846,"parameterSlots":3,"returnSlots":1},"fun_requireTransferAllowed":{"entryPoint":14856,"id":5402,"parameterSlots":2,"returnSlots":0},"fun_requireTransferAllowed_24066":{"entryPoint":14685,"id":5402,"parameterSlots":1,"returnSlots":0},"fun_safeTransfer":{"entryPoint":18685,"id":1124,"parameterSlots":3,"returnSlots":0},"fun_safeTransferFrom":{"entryPoint":17757,"id":1175,"parameterSlots":4,"returnSlots":0},"fun_setApprovalForAll":{"entryPoint":19910,"id":6969,"parameterSlots":2,"returnSlots":0},"fun_setApprovalForAsset":{"entryPoint":20150,"id":7048,"parameterSlots":4,"returnSlots":0},"fun_setApprovalForAsset_24159":{"entryPoint":20022,"id":7048,"parameterSlots":3,"returnSlots":0},"fun_throwError":{"entryPoint":null,"id":1614,"parameterSlots":1,"returnSlots":0},"fun_toAmount":{"entryPoint":21799,"id":7766,"parameterSlots":3,"returnSlots":1},"fun_toAmount_24086":{"entryPoint":21761,"id":7766,"parameterSlots":3,"returnSlots":1},"fun_toShares":{"entryPoint":21689,"id":7720,"parameterSlots":3,"returnSlots":1},"fun_toShares_24127":{"entryPoint":21650,"id":7720,"parameterSlots":3,"returnSlots":1},"fun_tokenBalanceOf":{"entryPoint":17981,"id":6193,"parameterSlots":1,"returnSlots":1},"fun_transferBatch":{"entryPoint":15080,"id":5375,"parameterSlots":6,"returnSlots":0},"fun_transferSingle":{"entryPoint":14503,"id":5297,"parameterSlots":4,"returnSlots":0},"fun_tryRecover":{"entryPoint":21138,"id":1828,"parameterSlots":4,"returnSlots":2},"fun_useNonce":{"entryPoint":null,"id":7660,"parameterSlots":1,"returnSlots":1},"fun_withdrawFungible":{"entryPoint":19379,"id":6745,"parameterSlots":6,"returnSlots":2},"fun_withdraw_inner":{"entryPoint":18893,"id":null,"parameterSlots":5,"returnSlots":2},"increment_uint256":{"entryPoint":11351,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_address_mapping_uint256_uint256_of_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"mapping_index_access_mapping_address_mapping_uint256_uint256_of_address_24061":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_address_mapping_uint256_uint256_of_address_40779":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_enum_TokenType_mapping_address_mapping_contract_IStrategy_mapping_uint256_uint256__of_enum_TokenType":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"mapping_index_access_mapping_enum_TokenType_mapping_address_mapping_contract_IStrategy_mapping_uint256_uint256_of_enum_TokenType":{"entryPoint":3728,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_enum_TokenType_mapping_address_mapping_contract_IStrategy_mapping_uint256_uint256_of_enum_TokenType_48984":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"mapping_index_access_mapping_enum_TokenType_mapping_address_mapping_contract_IStrategy_mapping_uint256_uint256_of_enum_TokenType_49006":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"mapping_index_access_mapping_uint256_struct_NativeToken_storage_of_uint32":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_uint256_struct_NativeToken_storage_of_uint32_24199":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_uint256_uint256_of_uint256":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"mapping_index_access_mapping_uint256_uint256_of_uint256_24056":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_uint256_uint256_of_uint256_24084":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"mapping_index_access_mapping_uint256_uint256_of_uint256_24091":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"memory_array_index_access_uint256_dyn":{"entryPoint":14198,"id":null,"parameterSlots":2,"returnSlots":1},"modifier_allowed":{"entryPoint":17036,"id":5699,"parameterSlots":5,"returnSlots":2},"panic_error_0x11":{"entryPoint":11329,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":10002,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2591,"id":null,"parameterSlots":0,"returnSlots":0},"read_from_calldatat_address":{"entryPoint":14188,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_storage_split_offset_address":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_storage_split_offset_bool":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"require_helper_stringliteral":{"entryPoint":17660,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_06e7":{"entryPoint":14401,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_5ed1":{"entryPoint":12661,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_6330":{"entryPoint":14072,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_7342":{"entryPoint":16802,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_75e2":{"entryPoint":19759,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_aae4":{"entryPoint":19683,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_ada4":{"entryPoint":14325,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_b7fe":{"entryPoint":20746,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_c441":{"entryPoint":18136,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_d1ab":{"entryPoint":18060,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_dda4":{"entryPoint":15303,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_df6c":{"entryPoint":19835,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_e229":{"entryPoint":20671,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_e87b":{"entryPoint":12528,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_ecf4":{"entryPoint":12737,"id":null,"parameterSlots":1,"returnSlots":0},"revert_forward":{"entryPoint":11672,"id":null,"parameterSlots":0,"returnSlots":0},"storage_array_index_access_struct_Asset_dyn":{"entryPoint":10024,"id":null,"parameterSlots":1,"returnSlots":2},"update_storage_value_offsett_bool_to_bool":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_contract_IStrategy_to_contract_IStrategy":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_contract_IStrategy_to_contract_IStrategy_24092":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0},"update_storage_value_offsett_uint8_to_uint8":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"validator_assert_enum_TokenType":{"entryPoint":3696,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_address":{"entryPoint":1149,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":4477,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":1616,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_enum_TokenType":{"entryPoint":3629,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_uint8":{"entryPoint":3410,"id":null,"parameterSlots":1,"returnSlots":0},"write_to_memory_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"write_to_memory_enum_TokenType":{"entryPoint":12813,"id":null,"parameterSlots":2,"returnSlots":0},"write_to_memory_enum_TokenType_48990":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0},"write_to_memory_enum_TokenType_49011":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0},"write_to_memory_uint8":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"immutableReferences":{"1927":[{"length":32,"start":21380}],"1929":[{"length":32,"start":21561}],"1931":[{"length":32,"start":21333}],"1933":[{"length":32,"start":21459}],"1935":[{"length":32,"start":21497}],"1937":[{"length":32,"start":21424}],"6154":[{"length":32,"start":8404},{"length":32,"start":11016},{"length":32,"start":18325},{"length":32,"start":18641}],"6157":[{"length":32,"start":1037},{"length":32,"start":2038},{"length":32,"start":4358},{"length":32,"start":11293}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xAD800C EQ PUSH2 0x355 JUMPI DUP1 PUSH3 0xFDD58E EQ PUSH2 0x350 JUMPI DUP1 PUSH4 0x1E1E3B1 EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x411B252 EQ PUSH2 0x341 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x33C JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x337 JUMPI DUP1 PUSH4 0x1DBEEB4E EQ PUSH2 0x332 JUMPI DUP1 PUSH4 0x1F0EE4C3 EQ PUSH2 0x32D JUMPI DUP1 PUSH4 0x215B595A EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0x2482EE27 EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0x2B800E3B EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0x2D4E1D52 EQ PUSH2 0x319 JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x314 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x30F JUMPI DUP1 PUSH4 0x3F47E662 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x442C1599 EQ PUSH2 0x305 JUMPI DUP1 PUSH4 0x4956D158 EQ PUSH2 0x300 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x2FB JUMPI DUP1 PUSH4 0x4E41A1FB EQ PUSH2 0x2F6 JUMPI DUP1 PUSH4 0x54317D16 EQ PUSH2 0x2F1 JUMPI DUP1 PUSH4 0x5BA4D64E EQ PUSH2 0x2EC JUMPI DUP1 PUSH4 0x6CD57031 EQ PUSH2 0x2E7 JUMPI DUP1 PUSH4 0x70400FBE EQ PUSH2 0x2E2 JUMPI DUP1 PUSH4 0x75338079 EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x7C516E94 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x2D3 JUMPI DUP1 PUSH4 0x836A1040 EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0x8D2E63B8 EQ PUSH2 0x2C9 JUMPI DUP1 PUSH4 0x8EB22CDD EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x9A9AF97A EQ PUSH2 0x2BF JUMPI DUP1 PUSH4 0x9EEA5F66 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0xA123C33E EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x2B0 JUMPI DUP1 PUSH4 0xA3823AC0 EQ PUSH2 0x2AB JUMPI DUP1 PUSH4 0xA75FCB1E EQ PUSH2 0x2A6 JUMPI DUP1 PUSH4 0xABA07847 EQ PUSH2 0x2A1 JUMPI DUP1 PUSH4 0xB061DB94 EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0xB8489FB5 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xBD85B039 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0xCE7F2714 EQ PUSH2 0x288 JUMPI DUP1 PUSH4 0xCF35BDD0 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0xD2423B51 EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0xDAF210B1 EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x26F JUMPI DUP1 PUSH4 0xEAFE7A74 EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0xEB6D3A11 EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x25B JUMPI PUSH4 0xFD330D43 EQ PUSH2 0x256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2BFD JUMP JUMPDEST PUSH2 0x2B9E JUMP JUMPDEST PUSH2 0x2B79 JUMP JUMPDEST PUSH2 0x2AE8 JUMP JUMPDEST PUSH2 0x2ACA JUMP JUMPDEST PUSH2 0x2A60 JUMP JUMPDEST PUSH2 0x29A3 JUMP JUMPDEST PUSH2 0x28B0 JUMP JUMPDEST PUSH2 0x27D2 JUMP JUMPDEST PUSH2 0x2768 JUMP JUMPDEST PUSH2 0x2673 JUMP JUMPDEST PUSH2 0x2647 JUMP JUMPDEST PUSH2 0x2620 JUMP JUMPDEST PUSH2 0x257B JUMP JUMPDEST PUSH2 0x255F JUMP JUMPDEST PUSH2 0x2469 JUMP JUMPDEST PUSH2 0x23F0 JUMP JUMPDEST PUSH2 0x209A JUMP JUMPDEST PUSH2 0x1FE1 JUMP JUMPDEST PUSH2 0x1FAC JUMP JUMPDEST PUSH2 0x1F3B JUMP JUMPDEST PUSH2 0x1C1C JUMP JUMPDEST PUSH2 0x1B7C JUMP JUMPDEST PUSH2 0x1B18 JUMP JUMPDEST PUSH2 0x1AAA JUMP JUMPDEST PUSH2 0x1A6C JUMP JUMPDEST PUSH2 0x19AD JUMP JUMPDEST PUSH2 0x178C JUMP JUMPDEST PUSH2 0x177A JUMP JUMPDEST PUSH2 0x16F3 JUMP JUMPDEST PUSH2 0x155B JUMP JUMPDEST PUSH2 0x146C JUMP JUMPDEST PUSH2 0x141E JUMP JUMPDEST PUSH2 0x131D JUMP JUMPDEST PUSH2 0x12A1 JUMP JUMPDEST PUSH2 0x11A7 JUMP JUMPDEST PUSH2 0x10A7 JUMP JUMPDEST PUSH2 0x1084 JUMP JUMPDEST PUSH2 0xF9A JUMP JUMPDEST PUSH2 0xEA9 JUMP JUMPDEST PUSH2 0xDF8 JUMP JUMPDEST PUSH2 0xD5D JUMP JUMPDEST PUSH2 0xB78 JUMP JUMPDEST PUSH2 0xAC4 JUMP JUMPDEST PUSH2 0x8DC JUMP JUMPDEST PUSH2 0x881 JUMP JUMPDEST PUSH2 0x76E JUMP JUMPDEST PUSH2 0x6E8 JUMP JUMPDEST PUSH2 0x67A JUMP JUMPDEST PUSH2 0x55B JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH2 0x3B6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x36D JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x35D JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x396 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x35A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x3B3 SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x37D JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x401 PUSH1 0x0 PUSH1 0x4 CALLDATALOAD PUSH2 0x3D8 DUP2 PUSH2 0x2728 JUMP JUMPDEST POP SWAP1 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP1 MLOAD PUSH4 0xAA1163B9 PUSH1 0xE0 SHL DUP2 MSTORE SWAP4 DUP5 SWAP3 DUP4 SWAP3 SWAP1 PUSH1 0x4 DUP5 ADD PUSH2 0x4FFF JUMP JUMPDEST SUB DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x44E SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x452 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3A2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x46D SWAP2 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x465 DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2CCF JUMP JUMPDEST CODESIZE PUSH2 0x441 JUMP JUMPDEST PUSH2 0x2D98 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0x478 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD PUSH2 0x4B3 DUP2 PUSH2 0x47D JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x24 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x478 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x478 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x478 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x60 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 PUSH1 0x24 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x478 JUMPI DUP3 PUSH2 0x53D SWAP2 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SWAP3 PUSH1 0x44 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x478 JUMPI PUSH2 0x557 SWAP2 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x569 CALLDATASIZE PUSH2 0x50B JUMP JUMPDEST SWAP2 SWAP4 PUSH2 0x58B PUSH1 0xFF PUSH2 0x579 DUP4 PUSH2 0x2728 JUMP JUMPDEST POP SLOAD AND PUSH2 0x585 DUP2 PUSH2 0xE70 JUMP JUMPDEST ISZERO PUSH2 0x41A2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT PUSH2 0x597 JUMPI STOP JUMPDEST DUP1 PUSH2 0x61D PUSH2 0x5A9 PUSH2 0x64B SWAP4 DUP10 DUP10 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD PUSH2 0x5B3 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x5C6 DUP5 DUP12 DUP12 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD PUSH2 0x5D0 DUP2 PUSH2 0x47D JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x617 PUSH2 0x610 DUP7 PUSH2 0x601 CALLER PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3A08 JUMP JUMPDEST PUSH2 0x646 PUSH2 0x633 PUSH2 0x62E DUP4 DUP11 DUP11 PUSH2 0x375C JUMP JUMPDEST PUSH2 0x376C JUMP JUMPDEST DUP5 PUSH2 0x63F DUP5 DUP10 DUP10 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD SWAP2 PUSH2 0x41EE JUMP JUMPDEST PUSH2 0x2C57 JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND SUB PUSH2 0x478 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x699 DUP2 PUSH2 0x650 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x6D7 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x6C6 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x3A24D07 PUSH1 0xE2 SHL EQ SWAP1 POP CODESIZE PUSH2 0x6BB JUMP JUMPDEST PUSH4 0x6CDB3D13 PUSH1 0xE1 SHL DUP2 EQ SWAP2 POP PUSH2 0x6B4 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x705 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH2 0x76B PUSH1 0x24 CALLDATALOAD SWAP2 PUSH2 0x715 DUP4 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x0 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP6 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x74B PUSH1 0x40 DUP7 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP3 DUP7 MSTORE PUSH1 0x20 MSTORE PUSH2 0x762 PUSH1 0xFF PUSH1 0x40 DUP8 KECCAK256 SLOAD AND DUP5 PUSH2 0x3A08 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP3 PUSH2 0x38A7 JUMP JUMPDEST DUP1 RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x78B DUP2 PUSH2 0x2728 JUMP JUMPDEST POP SWAP1 PUSH1 0x0 DUP1 SWAP3 DUP3 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x7EA PUSH2 0x7CF PUSH2 0x7C2 PUSH1 0x40 DUP7 KECCAK256 SLOAD SWAP7 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5C6D8435 PUSH1 0xE0 SHL DUP2 MSTORE SWAP6 DUP7 SWAP5 DUP6 SWAP5 PUSH1 0x4 DUP7 ADD PUSH2 0x4F7F JUMP JUMPDEST SUB DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI DUP3 PUSH2 0x44E SWAP4 SWAP3 PUSH2 0x838 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3A2 JUMP JUMPDEST PUSH2 0x84C SWAP3 POP RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x465 DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x82A JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x478 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x478 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x478 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x89D PUSH1 0x4 CALLDATALOAD PUSH2 0x47D JUMP JUMPDEST PUSH2 0x8A8 PUSH1 0x24 CALLDATALOAD PUSH2 0x47D JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x478 JUMPI PUSH2 0x8C8 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x853 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x8EA CALLDATASIZE PUSH2 0x50B JUMP JUMPDEST SWAP2 SWAP3 SWAP4 DUP1 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x90F PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND CALLER EQ PUSH2 0x3BC7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x91B JUMPI STOP JUMPDEST DUP1 PUSH2 0x646 PUSH2 0x92D PUSH2 0x94A SWAP4 DUP9 DUP11 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD PUSH2 0x937 DUP2 PUSH2 0x47D JUMP JUMPDEST DUP5 PUSH2 0x943 DUP5 DUP10 DUP10 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD SWAP2 PUSH2 0x4103 JUMP JUMPDEST PUSH2 0x912 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x97F JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x969 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x95E JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP2 PUSH2 0x99A DUP4 PUSH2 0x94F JUMP JUMPDEST SWAP2 DUP3 DUP3 MSTORE PUSH1 0x1 SWAP4 DUP5 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x9FC JUMPI POP PUSH1 0x1 EQ PUSH2 0x9BC JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST SWAP1 SWAP2 SWAP4 SWAP5 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP3 DUP4 PUSH1 0x0 KECCAK256 SWAP3 DUP5 PUSH1 0x0 SWAP5 JUMPDEST DUP4 DUP7 LT PUSH2 0x9E8 JUMPI POP POP POP POP ADD ADD SWAP1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x9B6 JUMP JUMPDEST DUP1 SLOAD DUP6 DUP8 ADD DUP4 ADD MSTORE SWAP5 ADD SWAP4 DUP6 SWAP1 DUP3 ADD PUSH2 0x9D1 JUMP JUMPDEST SWAP3 SWAP5 POP POP POP PUSH1 0x20 SWAP4 SWAP5 POP PUSH1 0xFF NOT AND DUP4 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL ADD ADD SWAP1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x9B6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA49 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xA1F JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA49 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA49 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA49 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA49 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH2 0xB59 PUSH1 0x40 PUSH2 0x44E DUP2 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x3 DUP2 MLOAD SWAP4 PUSH2 0xB07 DUP6 PUSH2 0xB00 DUP2 DUP5 PUSH2 0x989 JUMP JUMPDEST SUB DUP7 PUSH2 0xAA2 JUMP JUMPDEST PUSH2 0xB67 DUP4 MLOAD PUSH2 0xB24 DUP2 PUSH2 0xB1D DUP2 PUSH1 0x1 DUP8 ADD PUSH2 0x989 JUMP JUMPDEST SUB DUP3 PUSH2 0xAA2 JUMP JUMPDEST PUSH2 0xB46 PUSH1 0xFF PUSH1 0x2 DUP6 ADD SLOAD AND SWAP4 PUSH2 0xB3F DUP8 MLOAD DUP1 SWAP8 DUP2 SWAP4 ADD PUSH2 0x989 JUMP JUMPDEST SUB DUP6 PUSH2 0xAA2 JUMP JUMPDEST DUP5 MLOAD SWAP8 DUP9 SWAP8 PUSH1 0x80 DUP10 MSTORE PUSH1 0x80 DUP10 ADD SWAP1 PUSH2 0x37D JUMP JUMPDEST SWAP1 DUP8 DUP3 SUB PUSH1 0x20 DUP10 ADD MSTORE PUSH2 0x37D JUMP JUMPDEST SWAP3 DUP6 ADD MSTORE DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x37D JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xB95 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x478 JUMPI PUSH2 0xBB6 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP2 SWAP1 SWAP3 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0x64 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x478 JUMPI PUSH2 0xBD5 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP2 PUSH1 0x0 SWAP8 DUP4 DUP10 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 PUSH2 0xC0F DUP3 DUP12 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP12 MSTORE PUSH1 0x20 MSTORE PUSH2 0xC27 PUSH1 0xFF DUP4 DUP13 KECCAK256 SLOAD AND DUP9 PUSH2 0x3A08 JUMP JUMPDEST DUP9 DUP11 JUMPDEST DUP2 DUP2 LT PUSH2 0xD21 JUMPI POP POP DUP10 SWAP9 DUP11 JUMPDEST DUP2 DUP2 LT PUSH2 0xC71 JUMPI DUP12 DUP12 PUSH2 0xC6C PUSH2 0xC64 DUP14 PUSH2 0x601 DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP2 DUP3 SLOAD PUSH2 0x388D JUMP JUMPDEST SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP10 DUP8 DUP2 DUP9 PUSH2 0xC80 DUP6 DUP8 DUP15 PUSH2 0x375C JUMP JUMPDEST PUSH2 0xC89 SWAP1 PUSH2 0x376C JUMP JUMPDEST SWAP15 DUP16 PUSH2 0xC96 DUP8 DUP11 DUP14 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD SWAP4 PUSH2 0xCB6 DUP6 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 DUP2 SLOAD SWAP1 PUSH2 0xCCF SWAP2 PUSH2 0x389A JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xCDA SWAP2 PUSH2 0x389A JUMP JUMPDEST DUP9 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP14 AND SWAP2 CALLER SWAP1 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP1 PUSH1 0x40 SWAP1 LOG4 PUSH2 0xD1C SWAP1 PUSH2 0x2C57 JUMP JUMPDEST PUSH2 0xC37 JUMP JUMPDEST PUSH2 0x646 PUSH2 0xD44 PUSH2 0xD38 PUSH2 0x62E DUP5 PUSH2 0xD4B SWAP7 DUP14 PUSH2 0x375C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST ISZERO ISZERO PUSH2 0x4CE3 JUMP JUMPDEST DUP10 SWAP1 PUSH2 0xC2A JUMP JUMPDEST PUSH1 0xFF DUP2 AND SUB PUSH2 0x478 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x478 JUMPI PUSH2 0xD8F SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x853 JUMP JUMPDEST PUSH1 0x24 SWAP3 SWAP2 SWAP3 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x478 JUMPI PUSH2 0xDAA SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x853 JUMP JUMPDEST PUSH1 0x44 SWAP5 SWAP2 SWAP5 CALLDATALOAD SWAP1 PUSH2 0xDBA DUP3 PUSH2 0xD52 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP5 DUP6 GT PUSH2 0x478 JUMPI PUSH2 0x44E SWAP6 PUSH2 0xDD9 PUSH2 0xDE1 SWAP7 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x853 JUMP JUMPDEST SWAP6 SWAP1 SWAP5 PUSH2 0x3ED2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x5 GT ISZERO PUSH2 0x478 JUMPI JUMP JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xE4F DUP2 PUSH2 0xE2D JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD PUSH2 0xE5C DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD PUSH2 0xE69 DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x5 GT ISZERO PUSH2 0xE7A JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xE99 DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0xEEF PUSH2 0xF07 PUSH2 0xEBD CALLDATASIZE PUSH2 0xE37 JUMP JUMPDEST SWAP5 SWAP2 SWAP1 SWAP3 PUSH2 0xECA DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 PUSH1 0xA0 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xF37 DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD PUSH2 0xF44 DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x44 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x478 JUMPI DUP4 PUSH2 0xF65 SWAP2 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SWAP3 PUSH1 0x64 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x478 JUMPI DUP3 PUSH2 0xF80 SWAP2 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP4 SWAP1 SWAP4 SWAP3 PUSH1 0x84 CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x478 JUMPI PUSH2 0x557 SWAP2 PUSH1 0x4 ADD PUSH2 0x853 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0xFA8 CALLDATASIZE PUSH2 0xF1E JUMP JUMPDEST PUSH2 0xFB8 DUP4 DUP7 SWAP5 SWAP10 SWAP9 SWAP6 SWAP7 EQ PUSH2 0x36F8 JUMP JUMPDEST PUSH2 0xFC1 DUP8 PUSH2 0x395D JUMP JUMPDEST PUSH2 0xFCF DUP9 DUP7 DUP6 DUP10 DUP9 DUP13 PUSH2 0x3AE8 JUMP JUMPDEST DUP4 EXTCODESIZE PUSH2 0xFD7 JUMPI STOP JUMPDEST PUSH1 0x20 SWAP6 PUSH2 0x1009 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 PUSH1 0x0 SWAP5 PUSH1 0x40 MLOAD SWAP12 DUP13 SWAP10 DUP11 SWAP9 DUP10 SWAP7 PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP15 DUP16 DUP10 MSTORE CALLER PUSH1 0x4 DUP11 ADD PUSH2 0x3A70 JUMP JUMPDEST SUB SWAP4 AND GAS CALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x1049 SWAP3 PUSH1 0x0 SWAP2 PUSH2 0x104B JUMPI JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ PUSH2 0x37F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x106C SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1072 JUMPI JUMPDEST PUSH2 0x1064 DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x378A JUMP JUMPDEST CODESIZE PUSH2 0x1020 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x105A JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x478 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x20 PUSH2 0x109F PUSH2 0x534B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x10FA PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x10C9 DUP2 PUSH2 0x2728 JUMP JUMPDEST POP SWAP1 PUSH1 0x0 MSTORE PUSH1 0x7 DUP3 MSTORE PUSH1 0xFF PUSH1 0x2 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD AND SWAP1 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP3 DUP4 SWAP3 PUSH4 0x6D7CD037 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH2 0x5032 JUMP JUMPDEST SUB DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND GAS STATICCALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x44E SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x114F JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1170 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1176 JUMPI JUMPDEST PUSH2 0x1168 DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x501D JUMP JUMPDEST CODESIZE PUSH2 0x113A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x115E JUMP JUMPDEST DUP1 ISZERO ISZERO SUB PUSH2 0x478 JUMPI JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD PUSH2 0x3B3 DUP2 PUSH2 0x117D JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x11B5 CALLDATASIZE PUSH2 0x1187 JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 SWAP3 PUSH1 0xFF PUSH2 0x11C5 DUP5 PUSH2 0x2728 JUMP JUMPDEST POP SLOAD AND PUSH2 0x11D1 DUP2 PUSH2 0xE70 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1281 JUMPI JUMPDEST ISZERO PUSH2 0x11F6 JUMPI POP POP POP PUSH2 0x44E SWAP1 JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST DUP1 DUP4 PUSH2 0x1220 SWAP3 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x1219 PUSH2 0x1213 PUSH1 0x40 DUP4 KECCAK256 SLOAD SWAP6 PUSH2 0x2728 JUMP JUMPDEST POP PUSH2 0x463D JUMP JUMPDEST SWAP1 POP PUSH2 0x2C57 JUMP JUMPDEST SWAP3 PUSH4 0x5F5E100 DUP4 ADD DUP1 SWAP4 GT PUSH2 0x127C JUMPI DUP4 PUSH2 0x1246 DUP5 PUSH2 0x1241 PUSH2 0x44E SWAP8 DUP6 PUSH2 0x545F JUMP JUMPDEST PUSH2 0x5472 JUMP JUMPDEST SWAP4 DUP4 PUSH2 0x1263 JUMPI JUMPDEST POP POP POP ISZERO PUSH2 0x11E6 JUMPI PUSH2 0x125E SWAP1 PUSH2 0x2C57 JUMP JUMPDEST PUSH2 0x11E6 JUMP JUMPDEST PUSH2 0x1273 SWAP3 SWAP4 POP PUSH2 0x1241 SWAP1 DUP6 PUSH2 0x545F JUMP JUMPDEST LT CODESIZE DUP1 DUP1 PUSH2 0x124D JUMP JUMPDEST PUSH2 0x2C41 JUMP JUMPDEST POP PUSH1 0x2 PUSH1 0xFF PUSH2 0x128F DUP6 PUSH2 0x2728 JUMP JUMPDEST POP SLOAD AND PUSH2 0x129B DUP2 PUSH2 0xE70 JUMP JUMPDEST EQ PUSH2 0x11D9 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD DUP1 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x12D0 PUSH2 0x1213 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP3 PUSH2 0x2728 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 RETURN JUMPDEST PUSH1 0x20 SWAP1 DUP2 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP6 MLOAD DUP1 SWAP5 MSTORE ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x1309 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x12FB JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x40 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x478 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x478 JUMPI PUSH2 0x1351 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP2 SWAP1 SWAP3 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x478 JUMPI PUSH2 0x136C SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP4 SWAP1 PUSH2 0x1379 DUP6 DUP6 EQ PUSH2 0x36F8 JUMP JUMPDEST PUSH2 0x1382 DUP5 PUSH2 0x3744 JUMP JUMPDEST SWAP4 PUSH2 0x138F DUP5 MLOAD SWAP6 DUP7 PUSH2 0xAA2 JUMP JUMPDEST DUP1 DUP6 MSTORE PUSH1 0x1F NOT PUSH2 0x139E DUP3 PUSH2 0x3744 JUMP JUMPDEST ADD PUSH1 0x20 SWAP1 CALLDATASIZE DUP3 DUP9 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP3 JUMPDEST DUP2 DUP2 LT PUSH2 0x13C0 JUMPI DUP7 MLOAD DUP1 PUSH2 0x44E DUP11 DUP3 PUSH2 0x12E2 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x13D7 PUSH2 0x1419 SWAP4 DUP6 DUP11 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD PUSH2 0x13E1 DUP2 PUSH2 0x47D JUMP JUMPDEST AND DUP6 MSTORE PUSH1 0x2 DUP5 MSTORE PUSH2 0x1408 DUP9 DUP7 KECCAK256 PUSH2 0x13F9 DUP4 DUP14 DUP11 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH2 0x1413 DUP3 DUP12 PUSH2 0x3776 JUMP JUMPDEST MSTORE PUSH2 0x2C57 JUMP JUMPDEST PUSH2 0x13AC JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x401 PUSH1 0x0 PUSH1 0x4 CALLDATALOAD PUSH2 0x1440 DUP2 PUSH2 0x2728 JUMP JUMPDEST POP SWAP1 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP1 MLOAD PUSH4 0x84B1017D PUSH1 0xE0 SHL DUP2 MSTORE SWAP4 DUP5 SWAP3 DUP4 SWAP3 PUSH1 0x1 ADD SWAP1 PUSH1 0x4 DUP5 ADD PUSH2 0x4FFF JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x44E PUSH1 0x4 CALLDATALOAD PUSH2 0x148C DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x0 PUSH1 0xFF PUSH2 0x149C DUP4 PUSH2 0x2728 JUMP JUMPDEST POP SLOAD AND PUSH2 0x14A8 DUP2 PUSH2 0xE70 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x153B JUMPI JUMPDEST ISZERO PUSH2 0x14E7 JUMPI POP PUSH2 0x601 PUSH2 0x14D6 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x40 PUSH2 0x1512 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x125E SWAP7 AND DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE KECCAK256 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP1 PUSH2 0x1535 PUSH2 0x1213 PUSH2 0x152E DUP4 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP3 PUSH2 0x2728 JUMP JUMPDEST SWAP2 PUSH2 0x5501 JUMP JUMPDEST POP PUSH1 0x2 PUSH1 0xFF PUSH2 0x1549 DUP5 PUSH2 0x2728 JUMP JUMPDEST POP SLOAD AND PUSH2 0x1555 DUP2 PUSH2 0xE70 JUMP JUMPDEST EQ PUSH2 0x14B0 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH2 0x157B DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x1588 DUP4 PUSH2 0x117D JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP1 PUSH2 0x1595 DUP3 PUSH2 0x117D JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 DUP6 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x15BA DUP3 PUSH1 0x40 DUP9 KECCAK256 SLOAD AND CALLER EQ PUSH2 0x3BC7 JUMP JUMPDEST ISZERO PUSH2 0x16C6 JUMPI DUP1 DUP5 AND SWAP3 DUP4 ISZERO SWAP1 DUP2 ISZERO SWAP2 PUSH2 0x16BE JUMPI JUMPDEST POP ISZERO PUSH2 0x1679 JUMPI PUSH2 0x76B SWAP4 PUSH2 0x165C SWAP4 PUSH2 0x164C SWAP3 PUSH2 0x15F7 PUSH2 0x7C2 DUP7 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST AND DUP5 PUSH32 0x16B85F49BF01212961345D3016C9A531894ACCF62EB7680F2045D79185CC0EC0 DUP10 DUP1 LOG4 PUSH2 0x1631 DUP4 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E54463A207A65726F2061646472657373000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP CODESIZE PUSH2 0x15CE JUMP JUMPDEST POP PUSH2 0x76B SWAP3 SWAP2 POP DUP4 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x12D0 PUSH1 0x4 CALLDATALOAD PUSH2 0x1714 DUP2 PUSH2 0xE2D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x1720 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x172D DUP4 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD PUSH2 0x1739 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD SWAP2 PUSH2 0x1746 DUP4 PUSH2 0x47D JUMP JUMPDEST PUSH1 0xE4 CALLDATALOAD SWAP5 PUSH1 0xC4 CALLDATALOAD SWAP5 PUSH1 0x64 CALLDATALOAD SWAP3 PUSH2 0x504E JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH2 0x1773 DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH2 0x12D0 PUSH2 0x1786 CALLDATASIZE PUSH2 0x1757 JUMP JUMPDEST SWAP2 PUSH2 0x4724 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x17AC DUP3 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH2 0x17B9 DUP3 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP5 AND SWAP2 PUSH1 0x0 SWAP1 DUP4 DUP3 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP6 PUSH2 0x17F2 DUP8 DUP5 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP5 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1808 PUSH1 0xFF DUP9 DUP6 KECCAK256 SLOAD AND DUP3 PUSH2 0x3A08 JUMP JUMPDEST PUSH2 0x1811 DUP5 PUSH2 0x2728 JUMP JUMPDEST POP SWAP1 PUSH2 0x1832 PUSH1 0x2 PUSH2 0x1823 DUP5 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x182C DUP2 PUSH2 0xE70 JUMP JUMPDEST EQ PUSH2 0x468C JUMP JUMPDEST PUSH2 0x183C DUP6 DUP9 PUSH2 0x406A JUMP JUMPDEST PUSH2 0x1857 PUSH2 0xD38 PUSH2 0xD38 DUP5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x8 SHR AND SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP4 ADD SWAP3 PUSH1 0x2 PUSH2 0x1872 PUSH2 0xD38 DUP7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP2 ADD SLOAD SWAP3 DUP3 EXTCODESIZE ISZERO PUSH2 0x19A9 JUMPI DUP11 MLOAD PUSH4 0x21421707 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SWAP1 DUP5 SWAP1 DUP4 SWAP1 PUSH1 0x64 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI PUSH2 0x18DA SWAP3 PUSH2 0xD38 SWAP3 PUSH2 0x1996 JUMPI JUMPDEST POP SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x1993 JUMPI DUP7 MLOAD PUSH4 0x57D48E63 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x4 DUP3 ADD MSTORE SWAP3 DUP4 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x473 JUMPI PUSH32 0x1AD178FF1B5D2C6DC0F3E4E2578B3D445E601C5BEAE2F63A73F237E480DF2FD0 SWAP3 PUSH2 0x197A JUMPI JUMPDEST POP DUP6 MLOAD SWAP5 AND SWAP4 DUP1 PUSH2 0x1967 CALLER SWAP5 DUP3 PUSH1 0xA0 PUSH1 0x1 SWAP2 SWAP4 SWAP3 SWAP4 PUSH1 0xC0 DUP2 ADD SWAP5 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 SWAP1 RETURN JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x198D SWAP3 PUSH2 0xA35 JUMP JUMPDEST DUP1 PUSH2 0x1079 JUMP JUMPDEST CODESIZE PUSH2 0x192F JUMP JUMPDEST DUP1 REVERT JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x19A3 SWAP3 PUSH2 0xA35 JUMP JUMPDEST CODESIZE PUSH2 0x18CC JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x19CB DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x19D7 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x19E4 DUP4 PUSH2 0x47D JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD SWAP2 PUSH2 0x19F1 DUP4 PUSH2 0xD52 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 PUSH1 0xE4 SWAP3 PUSH1 0xFF DUP3 SWAP7 DUP7 PUSH1 0x40 MLOAD SWAP10 DUP11 SWAP9 DUP10 SWAP8 PUSH4 0xD505ACCF PUSH1 0xE0 SHL DUP10 MSTORE AND PUSH1 0x4 DUP9 ADD MSTORE AND PUSH1 0x24 DUP7 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x44 DUP7 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x64 DUP7 ADD MSTORE AND PUSH1 0x84 DUP5 ADD MSTORE PUSH1 0xC4 CALLDATALOAD PUSH1 0xA4 DUP5 ADD MSTORE DUP4 CALLDATALOAD PUSH1 0xC4 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x1A5F JUMPI STOP JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x1049 SWAP3 PUSH2 0xA35 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x4 CALLDATALOAD PUSH2 0x1A91 DUP2 PUSH2 0x47D JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x1049 PUSH2 0x1ABB CALLDATASIZE PUSH2 0x1757 JUMP JUMPDEST SWAP2 SWAP1 DUP2 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x1ADF PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND CALLER EQ PUSH2 0x3BC7 JUMP JUMPDEST PUSH2 0x4103 JUMP JUMPDEST PUSH1 0xA0 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD PUSH2 0x1B00 DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD PUSH2 0x1B0D DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP1 PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x84 CALLDATALOAD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x12D0 PUSH2 0x1B29 CALLDATASIZE PUSH2 0x1AE4 JUMP JUMPDEST SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 SWAP3 SWAP5 AND PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x1B5E PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1B77 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP4 PUSH2 0x3A08 JUMP JUMPDEST PUSH2 0x49CD JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x1B8A CALLDATASIZE PUSH2 0x1187 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF PUSH2 0x1B97 DUP6 PUSH2 0x2728 JUMP JUMPDEST POP SLOAD AND PUSH2 0x1BA3 DUP2 PUSH2 0xE70 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1BFC JUMPI JUMPDEST ISZERO PUSH2 0x1BBE JUMPI POP POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 POP RETURN JUMPDEST DUP1 DUP5 PUSH2 0x1BDB SWAP3 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x1219 PUSH2 0x1213 PUSH1 0x40 DUP4 KECCAK256 SLOAD SWAP7 PUSH2 0x2728 JUMP JUMPDEST SWAP2 PUSH4 0x5F5E100 DUP5 ADD DUP1 SWAP5 GT PUSH2 0x127C JUMPI DUP4 PUSH2 0x1246 DUP5 PUSH2 0x1241 PUSH2 0x44E SWAP8 DUP6 PUSH2 0x545F JUMP JUMPDEST POP PUSH1 0x2 PUSH1 0xFF PUSH2 0x1C0A DUP7 PUSH2 0x2728 JUMP JUMPDEST POP SLOAD AND PUSH2 0x1C16 DUP2 PUSH2 0xE70 JUMP JUMPDEST EQ PUSH2 0x1BAB JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x1C2A CALLDATASIZE PUSH2 0x1AE4 JUMP JUMPDEST SWAP3 SWAP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 DUP7 AND SWAP1 PUSH1 0x0 SWAP5 DUP3 DUP7 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP5 PUSH2 0x1C66 DUP7 DUP9 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP4 DUP9 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1C7C PUSH1 0xFF DUP8 DUP10 KECCAK256 SLOAD AND DUP11 PUSH2 0x3A08 JUMP JUMPDEST SWAP7 DUP1 PUSH2 0x1C87 DUP5 PUSH2 0x2728 JUMP JUMPDEST POP SWAP2 PUSH2 0x1CB0 PUSH2 0x1C97 DUP5 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1CA0 DUP2 PUSH2 0xE70 JUMP JUMPDEST DUP1 ISZERO ISZERO SWAP1 DUP2 PUSH2 0x1F26 JUMPI JUMPDEST POP PUSH2 0x44FC JUMP JUMPDEST PUSH2 0x1CB9 DUP4 PUSH2 0x463D JUMP JUMPDEST SWAP2 DUP1 PUSH2 0x1EFC JUMPI POP POP PUSH2 0x1CE1 DUP10 SWAP2 PUSH2 0x1CDA DUP7 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD DUP4 PUSH2 0x5492 JUMP JUMPDEST SWAP10 JUMPDEST PUSH2 0x1CEE DUP12 DUP7 DUP10 PUSH2 0x4103 JUMP JUMPDEST DUP4 DUP4 SLOAD PUSH1 0x1 PUSH1 0xFF DUP3 AND PUSH2 0x1D00 DUP2 PUSH2 0xE70 JUMP JUMPDEST SUB PUSH2 0x1E15 JUMPI POP POP DUP3 PUSH2 0x1D4A PUSH2 0xD38 SWAP4 PUSH1 0x1 SWAP4 PUSH2 0x1D2D PUSH2 0xD38 PUSH2 0x1D58 SWAP9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x8 SHR AND SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1D44 PUSH2 0xD38 DUP8 DUP8 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x455D JUMP JUMPDEST ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP6 DUP7 EXTCODESIZE ISZERO PUSH2 0x1993 JUMPI DUP6 MLOAD PUSH4 0x57D48E63 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE SWAP7 DUP8 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI PUSH2 0x44E SWAP7 PUSH32 0x1AD178FF1B5D2C6DC0F3E4E2578B3D445E601C5BEAE2F63A73F237E480DF2FD0 SWAP3 PUSH2 0x1E02 JUMPI JUMPDEST POP DUP6 MLOAD SWAP5 AND SWAP4 DUP1 PUSH2 0x1DE9 DUP11 DUP11 CALLER SWAP7 DUP5 PUSH1 0xA0 SWAP2 SWAP5 SWAP4 PUSH1 0x0 SWAP4 PUSH1 0xC0 DUP4 ADD SWAP7 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x40 DUP3 ADD SWAP1 JUMP JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x1E0F SWAP3 PUSH2 0xA35 JUMP JUMPDEST CODESIZE PUSH2 0x1DB1 JUMP JUMPDEST PUSH1 0x8 SHR AND ADDRESS DUP2 SUB PUSH2 0x1E55 JUMPI POP DUP3 PUSH2 0x1E50 PUSH2 0xD38 SWAP4 PUSH1 0x1 SWAP4 PUSH2 0x1E45 PUSH2 0xD38 DUP7 PUSH2 0x1D58 SWAP10 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP6 ADD SLOAD SWAP2 PUSH2 0x38A7 JUMP JUMPDEST PUSH2 0x1D4A JUMP JUMPDEST SWAP1 SWAP2 POP PUSH2 0x1E6F PUSH2 0xD38 PUSH1 0x1 DUP6 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP5 ADD SLOAD SWAP3 DUP3 EXTCODESIZE ISZERO PUSH2 0x1EF8 JUMPI DUP10 MLOAD PUSH4 0x79212195 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x64 DUP3 ADD DUP11 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x84 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0xA4 DUP4 ADD MSTORE DUP9 SWAP1 DUP3 SWAP1 PUSH1 0xC4 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x1D58 SWAP3 PUSH2 0xD38 SWAP3 PUSH1 0x1 SWAP3 PUSH2 0x1EE5 JUMPI JUMPDEST POP PUSH2 0x1D4A JUMP JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x1EF2 SWAP3 PUSH2 0xA35 JUMP JUMPDEST CODESIZE PUSH2 0x1EDF JUMP JUMPDEST DUP11 DUP1 REVERT JUMPDEST PUSH2 0x1F1F SWAP3 SWAP2 SWAP12 SWAP11 POP PUSH2 0x1F18 DUP7 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP1 PUSH2 0x5527 JUMP JUMPDEST DUP1 SWAP9 PUSH2 0x1CE3 JUMP JUMPDEST PUSH1 0x2 SWAP2 POP PUSH2 0x1F33 DUP2 PUSH2 0xE70 JUMP JUMPDEST EQ ISZERO CODESIZE PUSH2 0x1CAA JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x76B PUSH2 0x1F4C CALLDATASIZE PUSH2 0x1757 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 PUSH1 0x0 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP6 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x1F82 PUSH1 0x40 DUP7 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP3 DUP7 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1F99 PUSH1 0xFF PUSH1 0x40 DUP8 KECCAK256 SLOAD AND DUP3 PUSH2 0x3A08 JUMP JUMPDEST PUSH2 0x1FA7 PUSH1 0xFF PUSH2 0x579 DUP5 PUSH2 0x2728 JUMP JUMPDEST PUSH2 0x41EE JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1FFE DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x200A DUP2 PUSH2 0x117D JUMP JUMPDEST PUSH2 0x206A DUP2 PUSH2 0x2059 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP5 PUSH2 0x2027 DUP7 ISZERO ISZERO PUSH2 0x4D2F JUMP JUMPDEST PUSH2 0x2033 ADDRESS DUP8 EQ ISZERO PUSH2 0x4D7B JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 CALLER SWAP3 LOG3 STOP JUMPDEST PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x20B2 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x20BF DUP3 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH32 0x0 DUP4 AND PUSH2 0x2133 PUSH2 0x2124 DUP5 PUSH2 0xEEF DUP5 PUSH32 0x1471EB6EB2C5E789FC3DE43F8CE62938C7D1836EC861730447E2ADA8FD81017B DUP3 JUMP JUMPDEST PUSH1 0x0 DUP1 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP3 DUP4 ISZERO PUSH2 0x2149 JUMPI JUMPDEST PUSH2 0x12D0 PUSH1 0x44 CALLDATALOAD DUP5 DUP7 PUSH2 0x4724 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 POP DUP4 DUP2 AND SWAP4 PUSH1 0x40 SWAP1 DUP2 MLOAD SWAP6 PUSH4 0xC3E9CE3 PUSH1 0xE2 SHL DUP8 MSTORE PUSH1 0x20 SWAP7 DUP8 DUP2 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x23C3 JUMPI JUMPDEST POP PUSH2 0x2185 DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x1 EQ SWAP2 DUP3 PUSH2 0x2364 JUMPI JUMPDEST POP DUP2 PUSH2 0x22C3 JUMPI JUMPDEST POP PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 PUSH2 0x12D0 SWAP7 PUSH1 0x0 SWAP5 PUSH2 0x22B9 PUSH2 0x2220 SWAP9 SWAP8 SWAP6 PUSH2 0x21D3 PUSH1 0x1 SWAP7 PUSH2 0x3175 JUMP JUMPDEST PUSH2 0x21DF DUP8 EXTCODESIZE ISZERO ISZERO PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP10 DUP11 SWAP5 PUSH2 0x2207 DUP10 PUSH2 0x21F1 PUSH2 0x2C74 JUMP JUMPDEST PUSH1 0x1 DUP2 MSTORE SWAP3 JUMPDEST DUP4 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 DUP5 ADD MSTORE DUP10 PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x3219 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP4 PUSH2 0x225A PUSH2 0x2124 DUP6 PUSH2 0xEEF DUP12 PUSH32 0x1471EB6EB2C5E789FC3DE43F8CE62938C7D1836EC861730447E2ADA8FD81017B DUP3 JUMP JUMPDEST SSTORE DUP4 PUSH32 0x6BB7FF708619BA0610CBA295A58592E0451DEE2622938C8755667688DAF3529B DUP3 MLOAD DUP1 PUSH2 0x2296 DUP2 PUSH1 0x40 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG2 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP3 ADD SWAP6 AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x213C JUMP JUMPDEST DUP3 MLOAD PUSH4 0x5F5C3DF PUSH1 0xE2 SHL DUP2 MSTORE SWAP4 SWAP6 SWAP5 SWAP3 SWAP2 POP DUP7 SWAP1 DUP5 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x473 JUMPI PUSH2 0x12D0 SWAP7 PUSH2 0x2220 SWAP7 PUSH2 0x22B9 PUSH1 0x1 SWAP5 PUSH2 0x21D3 PUSH1 0x0 SWAP9 PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 SWAP7 DUP11 SWAP2 PUSH2 0x2337 JUMPI JUMPDEST POP ISZERO SWAP7 POP POP SWAP6 SWAP8 SWAP9 POP POP SWAP5 POP SWAP7 POP PUSH2 0x2196 JUMP JUMPDEST PUSH2 0x2357 SWAP2 POP DUP7 RETURNDATASIZE DUP9 GT PUSH2 0x235D JUMPI JUMPDEST PUSH2 0x234F DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3166 JUMP JUMPDEST CODESIZE PUSH2 0x2324 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2345 JUMP JUMPDEST DUP4 MLOAD PUSH4 0x3DAD37ED PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 SWAP3 POP SWAP1 DUP8 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x2396 JUMPI JUMPDEST POP AND DUP5 EQ SWAP1 CODESIZE PUSH2 0x218F JUMP JUMPDEST PUSH2 0x23B6 SWAP2 POP DUP9 RETURNDATASIZE DUP11 GT PUSH2 0x23BC JUMPI JUMPDEST PUSH2 0x23AE DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3151 JUMP JUMPDEST CODESIZE PUSH2 0x238B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x23A4 JUMP JUMPDEST PUSH2 0x23E3 SWAP2 POP DUP9 RETURNDATASIZE DUP11 GT PUSH2 0x23E9 JUMPI JUMPDEST PUSH2 0x23DB DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x313C JUMP JUMPDEST CODESIZE PUSH2 0x217B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x23D1 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x244B PUSH1 0x4 CALLDATALOAD PUSH2 0x2410 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD SWAP2 PUSH2 0x2425 DUP4 PUSH2 0x47D JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x1049 PUSH1 0x4 CALLDATALOAD PUSH2 0x2489 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x2496 DUP3 PUSH2 0x47D JUMP JUMPDEST PUSH2 0x255A PUSH1 0x64 CALLDATALOAD PUSH1 0x44 CALLDATALOAD PUSH2 0x24A8 DUP3 PUSH2 0xD52 JUMP JUMPDEST PUSH2 0x24B4 DUP2 TIMESTAMP GT ISZERO PUSH2 0x50BF JUMP JUMPDEST PUSH2 0x2553 PUSH2 0x24DD DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD SWAP2 PUSH1 0x1 DUP4 ADD SWAP1 SSTORE JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 PUSH32 0x8B2A9C07938B6D62909DC00103EA4E71485CAF5019E7FA95B0A87E13825663B0 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 DUP10 AND SWAP7 DUP8 PUSH1 0x40 DUP6 ADD MSTORE DUP7 DUP12 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 MSTORE PUSH2 0x253B DUP3 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x254E PUSH1 0xA4 CALLDATALOAD SWAP4 PUSH1 0x84 CALLDATALOAD SWAP4 MLOAD SWAP1 KECCAK256 PUSH2 0x5314 JUMP JUMPDEST PUSH2 0x5160 JUMP JUMPDEST AND EQ PUSH2 0x510A JUMP JUMPDEST PUSH2 0x4DC6 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 PUSH2 0x109F PUSH2 0x2572 CALLDATASIZE PUSH2 0xE37 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x2DA4 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x2598 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH2 0x25A7 DUP3 PUSH2 0x117D JUMP JUMPDEST PUSH2 0x25C7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x25BF DUP2 ISZERO ISZERO PUSH2 0x4D2F JUMP JUMPDEST ADDRESS EQ ISZERO PUSH2 0x4D7B JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x25DB JUMPI PUSH2 0x1049 SWAP3 CALLER PUSH2 0x4EB6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A206173736574206E6F742076616C696400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x262E CALLDATASIZE PUSH2 0xF1E JUMP JUMPDEST POP POP POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH4 0xBC197C81 PUSH1 0xE0 SHL DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH1 0x40 DUP5 KECCAK256 SLOAD AND SWAP1 DUP2 CALLER SUB PUSH2 0x26CD JUMPI PUSH2 0x164C DUP3 PUSH2 0x165C SWAP4 PUSH2 0x76B SWAP6 PUSH2 0x15F7 PUSH2 0x7C2 DUP7 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E54463A2063616C6C657220213D2070656E64696E67206F776E657200000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x2763 JUMPI PUSH1 0x3 SWAP1 PUSH1 0x6 PUSH1 0x0 MSTORE MUL PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2712 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x478 JUMPI PUSH2 0x2791 PUSH1 0x80 SWAP2 PUSH2 0x2728 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0xFF DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x2 DUP2 PUSH1 0x1 DUP5 ADD SLOAD AND SWAP3 ADD SLOAD SWAP3 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x27BB DUP2 PUSH2 0xE70 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x8 SHR AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST PUSH1 0x40 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x478 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 DUP1 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x478 JUMPI PUSH2 0x2800 SWAP1 CALLDATASIZE SWAP1 DUP4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP3 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH2 0x280E DUP4 PUSH2 0x117D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT PUSH2 0x281A JUMPI STOP JUMPDEST DUP1 PUSH1 0x5 SHL DUP3 ADD CALLDATALOAD PUSH1 0x1E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT ISZERO PUSH2 0x478 JUMPI DUP3 ADD DUP1 CALLDATALOAD SWAP1 DUP5 DUP3 GT PUSH2 0x478 JUMPI PUSH1 0x20 ADD DUP2 CALLDATASIZE SUB DUP2 SGT PUSH2 0x478 JUMPI PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH2 0x285A DUP12 MLOAD DUP1 SWAP4 DUP2 SWAP4 PUSH2 0x2C66 JUMP JUMPDEST SUB SWAP1 ADDRESS GAS DELEGATECALL PUSH2 0x2867 PUSH2 0x2C9F JUMP JUMPDEST SWAP1 ISZERO DUP1 PUSH2 0x28A9 JUMPI JUMPDEST PUSH2 0x2882 JUMPI POP PUSH2 0x287D SWAP1 PUSH2 0x2C57 JUMP JUMPDEST PUSH2 0x2811 JUMP JUMPDEST DUP6 PUSH2 0x28A5 PUSH2 0x2890 DUP11 SWAP4 PUSH2 0x2D2E JUMP JUMPDEST SWAP3 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP3 DUP4 SWAP3 DUP4 ADD PUSH2 0x3A2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP DUP5 PUSH2 0x286F JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH2 0x1049 PUSH1 0x4 CALLDATALOAD PUSH2 0x28D0 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x28DC DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x299E PUSH1 0x84 CALLDATALOAD PUSH1 0x64 CALLDATALOAD PUSH2 0x28F2 DUP3 PUSH2 0xD52 JUMP JUMPDEST PUSH2 0x28FE DUP2 TIMESTAMP GT ISZERO PUSH2 0x50BF JUMP JUMPDEST PUSH2 0x2553 PUSH2 0x2927 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD SWAP2 PUSH1 0x1 DUP4 ADD SWAP1 SSTORE JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 PUSH32 0x54A3A030F29B87FFFAACB4FAFC4220EF9C3EBA67EC74140BD9E716826BE356B1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 DUP10 AND SWAP7 DUP8 PUSH1 0x40 DUP6 ADD MSTORE DUP7 DUP12 AND PUSH1 0x60 DUP6 ADD MSTORE DUP12 PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 MSTORE PUSH2 0x298B DUP3 PUSH2 0xA6A JUMP JUMPDEST PUSH2 0x254E PUSH1 0xC4 CALLDATALOAD SWAP4 PUSH1 0xA4 CALLDATALOAD SWAP4 MLOAD SWAP1 KECCAK256 PUSH2 0x5314 JUMP JUMPDEST PUSH2 0x4E36 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x29C0 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x29CC DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 PUSH1 0x44 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x478 JUMPI PUSH2 0x29EE SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST PUSH1 0x64 SWAP3 SWAP2 SWAP3 CALLDATALOAD SWAP4 DUP5 GT PUSH2 0x478 JUMPI PUSH2 0x2A0C PUSH2 0x76B SWAP5 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x4DA JUMP JUMPDEST SWAP4 SWAP1 SWAP3 PUSH1 0x0 SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP9 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x2A42 PUSH1 0x40 DUP10 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP10 MSTORE PUSH1 0x20 MSTORE PUSH2 0x2A5B PUSH1 0xFF PUSH1 0x40 DUP11 KECCAK256 SLOAD AND DUP3 PUSH2 0x3A08 JUMP JUMPDEST PUSH2 0x3AE8 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH2 0x2ABE PUSH1 0x4 CALLDATALOAD PUSH2 0x2A84 DUP2 PUSH2 0x47D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x24 CALLDATALOAD SWAP2 PUSH2 0x2A99 DUP4 PUSH2 0x47D JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x1 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x20 PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0xA0 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x478 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x2B44 DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD PUSH2 0x2B51 DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP2 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0x64 CALLDATALOAD SWAP2 PUSH1 0x84 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x478 JUMPI PUSH2 0x557 SWAP2 PUSH1 0x4 ADD PUSH2 0x853 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x2B87 CALLDATASIZE PUSH2 0x2B2C JUMP JUMPDEST POP POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH4 0xF23A6E61 PUSH1 0xE0 SHL DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x2BAC CALLDATASIZE PUSH2 0x2B2C JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP2 PUSH2 0x2BB9 DUP6 PUSH2 0x395D JUMP JUMPDEST PUSH2 0x2BC5 DUP2 DUP6 DUP5 DUP9 PUSH2 0x38A7 JUMP JUMPDEST DUP2 EXTCODESIZE PUSH2 0x2BCD JUMPI STOP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 SWAP6 PUSH2 0x1009 PUSH1 0x40 MLOAD SWAP10 DUP11 SWAP8 DUP9 SWAP7 DUP8 SWAP5 PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP13 DUP14 DUP8 MSTORE CALLER PUSH1 0x4 DUP9 ADD PUSH2 0x37C0 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x478 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x127C JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP1 SWAP3 SWAP2 DUP3 CALLDATACOPY ADD PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x2C81 DUP3 PUSH2 0xA86 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA49 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x2CCA JUMPI RETURNDATASIZE SWAP1 PUSH2 0x2CB0 DUP3 PUSH2 0x2C83 JUMP JUMPDEST SWAP2 PUSH2 0x2CBE PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xAA2 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0x478 JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x478 JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x478 JUMPI DUP1 MLOAD PUSH2 0x2D02 DUP2 PUSH2 0x2C83 JUMP JUMPDEST SWAP3 PUSH2 0x2D10 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0xAA2 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x478 JUMPI PUSH2 0x3B3 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x35A JUMP JUMPDEST PUSH1 0x44 DUP2 MLOAD LT PUSH2 0x2D4D JUMPI DUP1 PUSH1 0x24 DUP1 PUSH1 0x4 PUSH2 0x3B3 SWAP5 ADD MLOAD DUP4 ADD ADD SWAP2 ADD PUSH2 0x2CCF JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xA49 JUMPI PUSH1 0x40 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH32 0x5472616E73616374696F6E2072657665727465642073696C656E746C79000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP3 SWAP1 SWAP2 PUSH2 0x2DB0 DUP5 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x1 DUP5 EQ SWAP4 DUP5 ISZERO SWAP5 DUP6 PUSH2 0x30DD JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x30CA JUMPI JUMPDEST ISZERO PUSH2 0x3085 JUMPI PUSH2 0x2DDF DUP4 PUSH2 0x601 DUP5 PUSH2 0xEEF DUP9 PUSH2 0xEEF DUP8 PUSH2 0xE90 JUMP JUMPDEST SLOAD SWAP5 DUP6 ISZERO PUSH2 0x2DF0 JUMPI JUMPDEST POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 PUSH2 0x2E09 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 POP ISZERO SWAP1 DUP2 ISZERO PUSH2 0x3074 JUMPI JUMPDEST POP PUSH2 0x30F0 JUMP JUMPDEST PUSH2 0x2E12 DUP2 PUSH2 0xE70 JUMP JUMPDEST DUP1 ISZERO DUP1 DUP1 ISZERO PUSH2 0x2F50 JUMPI JUMPDEST PUSH2 0x2E25 SWAP1 PUSH2 0x3175 JUMP JUMPDEST PUSH2 0x2E2E DUP3 PUSH2 0xE70 JUMP JUMPDEST DUP1 PUSH2 0x2F3F JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x2F35 JUMPI JUMPDEST PUSH2 0x2E44 SWAP1 PUSH2 0x31C1 JUMP JUMPDEST PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x6 SLOAD SWAP6 PUSH2 0x2EAF PUSH2 0x2E7C PUSH2 0x2C74 JUMP JUMPDEST PUSH2 0x2E86 DUP7 DUP3 PUSH2 0x320D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x40 DUP3 ADD MSTORE DUP8 PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x3219 JUMP JUMPDEST DUP7 PUSH2 0x2EC5 DUP8 PUSH2 0x601 DUP9 PUSH2 0xEEF DUP7 PUSH2 0xEEF DUP12 PUSH2 0xE90 JUMP JUMPDEST SSTORE DUP7 PUSH32 0x6BB7FF708619BA0610CBA295A58592E0451DEE2622938C8755667688DAF3529B PUSH1 0x40 MLOAD DUP1 PUSH2 0x2F02 DUP2 PUSH1 0x40 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x2F0E DUP5 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 SWAP1 SWAP7 AND DUP7 MSTORE PUSH1 0x20 DUP7 ADD DUP9 SWAP1 MSTORE SWAP2 AND SWAP4 LOG4 CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0x2DE8 JUMP JUMPDEST POP DUP4 EXTCODESIZE ISZERO ISZERO PUSH2 0x2E3B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x2E34 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xC3E9CE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP6 DUP3 AND SWAP1 DUP4 DUP2 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3057 JUMPI JUMPDEST POP PUSH2 0x2F8F DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH2 0x2F98 DUP7 PUSH2 0xE70 JUMP JUMPDEST DUP6 EQ SWAP2 DUP3 PUSH2 0x3004 JUMPI JUMPDEST POP DUP2 PUSH2 0x2FB0 JUMPI JUMPDEST POP SWAP1 POP PUSH2 0x2E1C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5F5C3DF PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 POP DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI PUSH2 0x2E25 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0x2FE7 JUMPI JUMPDEST POP POP DUP6 EQ CODESIZE PUSH2 0x2FA8 JUMP JUMPDEST PUSH2 0x2FFD SWAP3 POP DUP1 RETURNDATASIZE LT PUSH2 0x235D JUMPI PUSH2 0x234F DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x2FDD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3DAD37ED PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 SWAP3 POP SWAP1 DUP4 DUP2 PUSH1 0x4 DUP2 DUP7 GAS STATICCALL DUP1 ISZERO PUSH2 0x473 JUMPI DUP3 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x303A JUMPI JUMPDEST POP AND SWAP1 DUP9 AND EQ SWAP1 CODESIZE PUSH2 0x2FA1 JUMP JUMPDEST PUSH2 0x3051 SWAP2 POP DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x23BC JUMPI PUSH2 0x23AE DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST CODESIZE PUSH2 0x302D JUMP JUMPDEST PUSH2 0x306E SWAP2 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x23E9 JUMPI PUSH2 0x23DB DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST CODESIZE PUSH2 0x2F85 JUMP JUMPDEST SWAP1 POP PUSH2 0x307F DUP4 PUSH2 0xE70 JUMP JUMPDEST CODESIZE PUSH2 0x2E03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x41737365744D616E616765723A2063616E6E6F7420616464204E617469766500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH2 0x30D4 DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x3 DUP2 EQ PUSH2 0x2DC5 JUMP JUMPDEST POP PUSH2 0x30E7 DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x2 DUP2 EQ PUSH2 0x2DBE JUMP JUMPDEST ISZERO PUSH2 0x30F7 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A204E6F20746F6B656E496420666F722045524332300000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x478 JUMPI MLOAD PUSH2 0x3B3 DUP2 PUSH2 0xE2D JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x478 JUMPI MLOAD PUSH2 0x3B3 DUP2 PUSH2 0x47D JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x478 JUMPI MLOAD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x317C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A205374726174656779206D69736D617463680000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x31C8 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A204E6F74206120746F6B656E0000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x3216 DUP3 PUSH2 0xE70 JUMP JUMPDEST MSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH9 0x10000000000000000 DUP2 LT ISZERO PUSH2 0xA49 JUMPI DUP1 PUSH1 0x1 PUSH2 0x323D SWAP3 ADD PUSH1 0x6 SSTORE PUSH2 0x2728 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x32E9 JUMPI PUSH1 0x60 DUP2 PUSH1 0x2 SWAP3 MLOAD PUSH2 0x3254 DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH2 0x325D DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0xFF DUP6 SLOAD SWAP2 AND DUP1 PUSH1 0xFF NOT DUP4 AND OR DUP7 SSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000 PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x8 SHL AND SWAP3 AND OR OR DUP5 SSTORE PUSH2 0x32E2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP4 ADD MLOAD AND PUSH1 0x1 DUP7 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP2 ADD SSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x5BACA6D381F98BDAD74684704E9A88F2C190F7E9F75E6B88E5B7882FDF888198 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP3 SWAP2 DUP4 ISZERO PUSH2 0x3339 JUMPI POP POP JUMP JUMPDEST DUP1 SWAP2 SWAP4 POP ISZERO DUP1 ISZERO PUSH2 0x3430 JUMPI JUMPDEST PUSH2 0x334E SWAP1 PUSH2 0x30F0 JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP3 PUSH2 0x3377 PUSH2 0x335D PUSH2 0x2C74 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP4 PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x3219 JUMP JUMPDEST PUSH1 0x0 DUP1 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP4 PUSH2 0x33AF DUP4 PUSH2 0x601 PUSH2 0x2124 PUSH32 0x5B8CCBB9D4D8FB16EA74CE3C29A41F1B461FBDAFF4714A0D9A8EB05499746BC DUP2 JUMP JUMPDEST SSTORE DUP4 PUSH32 0x6BB7FF708619BA0610CBA295A58592E0451DEE2622938C8755667688DAF3529B PUSH1 0x40 MLOAD DUP1 PUSH2 0x33EC DUP2 PUSH1 0x40 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG2 DUP1 PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 PUSH1 0x40 MLOAD DUP1 PUSH2 0x342B DUP9 DUP3 SWAP2 SWAP1 PUSH1 0x20 PUSH1 0x40 DUP5 ADD SWAP4 PUSH1 0x0 DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x3345 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE SWAP1 SWAP3 SWAP2 PUSH2 0x3475 DUP2 PUSH2 0x601 DUP7 PUSH2 0xEEF DUP7 PUSH32 0xA9BC9A3A348C357BA16B37005D7E6B3236198C0E939F4AF8C5F19B8DEEB8EBC0 DUP3 JUMP JUMPDEST SLOAD SWAP4 DUP5 ISZERO PUSH2 0x3482 JUMPI POP POP POP JUMP JUMPDEST SWAP1 DUP1 SWAP3 SWAP5 POP ISZERO DUP1 ISZERO PUSH2 0x36F0 JUMPI JUMPDEST PUSH2 0x3498 SWAP1 PUSH2 0x30F0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xC3E9CE3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP2 PUSH1 0x20 SWAP2 DUP5 DUP9 AND SWAP1 DUP4 DUP2 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x36D3 JUMPI JUMPDEST POP PUSH2 0x34D8 DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x3 EQ SWAP1 DUP2 PUSH2 0x3683 JUMPI JUMPDEST DUP2 PUSH2 0x35FA JUMPI JUMPDEST POP SWAP3 PUSH2 0x342B PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 SWAP4 PUSH2 0x3560 SWAP10 SWAP4 PUSH2 0x351F PUSH1 0x3 SWAP8 PUSH2 0x3175 JUMP JUMPDEST PUSH2 0x352B DUP5 EXTCODESIZE ISZERO ISZERO PUSH2 0x31C1 JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP11 DUP12 SWAP3 PUSH2 0x3547 DUP7 PUSH2 0x353D PUSH2 0x2C74 JUMP JUMPDEST PUSH1 0x3 DUP2 MSTORE SWAP3 PUSH2 0x21F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND DUP2 DUP5 ADD MSTORE DUP11 PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x3219 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP2 PUSH2 0x359B DUP11 PUSH2 0x601 DUP12 PUSH2 0xEEF DUP10 PUSH32 0xA9BC9A3A348C357BA16B37005D7E6B3236198C0E939F4AF8C5F19B8DEEB8EBC0 DUP3 JUMP JUMPDEST SSTORE DUP2 PUSH32 0x6BB7FF708619BA0610CBA295A58592E0451DEE2622938C8755667688DAF3529B DUP3 MLOAD DUP1 PUSH2 0x35D7 DUP2 PUSH1 0x40 SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST SUB SWAP1 LOG2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP8 AND DUP8 MSTORE PUSH1 0x20 DUP8 ADD MSTORE SWAP2 AND SWAP4 SWAP1 DUP2 SWAP1 PUSH1 0x40 DUP3 ADD SWAP1 JUMP JUMPDEST DUP3 MLOAD PUSH4 0x5F5C3DF PUSH1 0xE2 SHL DUP2 MSTORE SWAP4 SWAP9 SWAP3 SWAP5 SWAP2 POP DUP9 SWAP1 DUP5 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 GAS STATICCALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x3560 SWAP9 PUSH1 0x3 SWAP6 PUSH2 0x351F PUSH2 0x342B SWAP4 PUSH32 0x30605D4CD099421ED12CA1BA642A1EA2659F679B5CDD0CCD032586640EEAFF43 SWAP8 PUSH1 0x0 SWAP2 PUSH2 0x3666 JUMPI JUMPDEST POP DUP11 EQ SWAP5 SWAP8 POP POP SWAP4 SWAP10 POP SWAP4 POP PUSH2 0x34E8 JUMP JUMPDEST PUSH2 0x367D SWAP2 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x235D JUMPI PUSH2 0x234F DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST CODESIZE PUSH2 0x3655 JUMP JUMPDEST DUP3 MLOAD PUSH4 0x3DAD37ED PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP2 POP DUP4 DUP2 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL DUP1 ISZERO PUSH2 0x473 JUMPI DUP10 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x36B6 JUMPI JUMPDEST POP AND DUP9 DUP6 AND EQ SWAP1 PUSH2 0x34E2 JUMP JUMPDEST PUSH2 0x36CD SWAP2 POP DUP6 RETURNDATASIZE DUP8 GT PUSH2 0x23BC JUMPI PUSH2 0x23AE DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST CODESIZE PUSH2 0x36AA JUMP JUMPDEST PUSH2 0x36EA SWAP2 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x23E9 JUMPI PUSH2 0x23DB DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST CODESIZE PUSH2 0x34CE JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x348F JUMP JUMPDEST ISZERO PUSH2 0x36FF JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313135353A204C656E677468206D69736D617463680000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA49 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x2763 JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH2 0x3B3 DUP2 PUSH2 0x47D JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x2763 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x478 JUMPI MLOAD PUSH2 0x3B3 DUP2 PUSH2 0x650 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP3 PUSH2 0x3B3 SWAP7 SWAP5 SWAP2 PUSH1 0xA0 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND DUP6 MSTORE AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP2 PUSH1 0x80 DUP3 ADD MSTORE ADD SWAP2 PUSH2 0x379F JUMP JUMPDEST ISZERO PUSH2 0x37FC JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57726F6E672072657475726E2076616C75650000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3848 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F203020616464726573730000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x127C JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x127C JUMPI JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP5 PUSH2 0x38C2 DUP7 ISZERO ISZERO PUSH2 0x3841 JUMP JUMPDEST AND SWAP3 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP5 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP3 DUP5 DUP5 SUB SWAP4 DUP5 GT PUSH2 0x127C JUMPI PUSH1 0x40 SWAP4 PUSH2 0x390A SWAP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP5 DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 DUP1 SLOAD SWAP2 DUP1 DUP4 ADD DUP1 SWAP4 GT PUSH2 0x127C JUMPI SWAP2 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLER SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 DUP2 SWAP1 DUP2 ADD PUSH2 0x342B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x39FF JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x39C5 JUMPI JUMPDEST POP ISZERO PUSH2 0x3980 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616E73666572206E6F7420616C6C6F776564000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xFF PUSH2 0x39F4 CALLER PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD AND ISZERO ISZERO EQ CODESIZE PUSH2 0x3978 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP PUSH2 0x3971 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ SWAP2 DUP3 ISZERO PUSH2 0x3A2B JUMPI JUMPDEST POP DUP2 ISZERO PUSH2 0x39C5 JUMPI POP ISZERO PUSH2 0x3980 JUMPI JUMP JUMPDEST SWAP2 POP CODESIZE PUSH2 0x3A1C JUMP JUMPDEST SWAP1 SWAP2 DUP3 DUP2 MSTORE PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x478 JUMPI PUSH1 0x20 SWAP3 PUSH1 0x5 SHL DUP1 SWAP3 DUP5 DUP4 ADD CALLDATACOPY ADD ADD SWAP1 JUMP JUMPDEST SWAP7 SWAP5 SWAP3 PUSH2 0x3AB3 SWAP5 PUSH2 0x3AA5 SWAP3 PUSH2 0x3B3 SWAP11 SWAP9 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND DUP12 MSTORE AND PUSH1 0x20 DUP11 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP11 ADD MSTORE PUSH1 0xA0 DUP10 ADD SWAP2 PUSH2 0x3A33 JUMP JUMPDEST SWAP2 DUP7 DUP4 SUB PUSH1 0x60 DUP9 ADD MSTORE PUSH2 0x3A33 JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP2 DUP6 SUB SWAP2 ADD MSTORE PUSH2 0x379F JUMP JUMPDEST SWAP3 SWAP1 PUSH2 0x3ADA SWAP1 PUSH2 0x3B3 SWAP6 SWAP4 PUSH1 0x40 DUP7 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 PUSH2 0x3A33 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 DUP6 SUB SWAP2 ADD MSTORE PUSH2 0x3A33 JUMP JUMPDEST SWAP1 SWAP5 SWAP4 SWAP2 SWAP3 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 DUP8 AND SWAP7 PUSH2 0x3B06 DUP9 ISZERO ISZERO PUSH2 0x3841 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 DUP2 LT PUSH2 0x3B4A JUMPI POP POP PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB SWAP4 SWAP3 SWAP2 PUSH2 0x342B SWAP2 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP5 AND SWAP8 CALLER SWAP8 DUP6 PUSH2 0x3AC1 JUMP JUMPDEST DUP1 PUSH2 0x3B59 PUSH2 0x3BC2 SWAP3 DUP11 DUP11 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD PUSH2 0x3BBB PUSH2 0x3BB3 PUSH2 0x3B6B DUP5 DUP10 DUP10 PUSH2 0x375C JUMP JUMPDEST CALLDATALOAD SWAP3 DUP11 DUP11 AND PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x2 DUP2 MSTORE PUSH1 0x40 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP1 DUP4 PUSH1 0x0 MSTORE MSTORE PUSH1 0x0 KECCAK256 PUSH2 0x3B94 DUP6 DUP3 SLOAD PUSH2 0x388D JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x601 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP2 DUP3 SLOAD PUSH2 0x389A JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x2C57 JUMP JUMPDEST PUSH2 0x3B09 JUMP JUMPDEST ISZERO PUSH2 0x3BCE JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E54463A2063616C6C6572206973206E6F7420746865206F776E657200000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x3C1F DUP3 PUSH2 0x2C83 JUMP JUMPDEST SWAP2 PUSH2 0x3C2D PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xAA2 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x478 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x3C58 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP4 ADD SWAP5 LT PUSH2 0x3C94 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x3C89 JUMPI POP POP POP JUMP JUMPDEST DUP2 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3C7D JUMP JUMPDEST SWAP1 SWAP3 POP DUP3 SWAP1 PUSH2 0x3C74 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA49 JUMPI PUSH2 0x3CC6 DUP2 PUSH2 0x3CC0 DUP5 SLOAD PUSH2 0x94F JUMP JUMPDEST DUP5 PUSH2 0x3C4A JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x3D02 JUMPI POP DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x3CF7 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x3CE1 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP6 PUSH2 0x3D18 DUP6 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH2 0x3D55 JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x3D3C JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x3D32 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x3D1D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 DUP3 MLOAD SWAP3 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xA49 JUMPI PUSH2 0x3D98 DUP2 PUSH2 0x3D92 DUP6 SLOAD PUSH2 0x94F JUMP JUMPDEST DUP6 PUSH2 0x3C4A JUMP JUMPDEST PUSH1 0x20 SWAP5 DUP6 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x3E19 JUMPI PUSH2 0x2C81 SWAP6 SWAP7 DUP4 PUSH1 0x60 SWAP5 PUSH1 0x3 SWAP7 SWAP5 PUSH2 0x3DE1 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x3E0E JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 DUP9 SHL SHR NOT AND OR DUP7 SSTORE JUMPDEST DUP3 ADD MLOAD PUSH1 0x1 DUP7 ADD PUSH2 0x3C9E JUMP JUMPDEST PUSH2 0x3E05 PUSH2 0x3DF2 PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP7 ADD SWAP1 PUSH1 0xFF AND PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP2 ADD PUSH2 0x3C9E JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x3DC1 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH2 0x3E2F DUP7 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x3E7B JUMPI POP DUP5 PUSH1 0x3 SWAP7 SWAP5 PUSH2 0x3DE1 SWAP5 PUSH2 0x2C81 SWAP11 SWAP12 SWAP5 PUSH1 0x60 SWAP9 PUSH1 0x1 SWAP6 LT PUSH2 0x3E63 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP7 SSTORE PUSH2 0x3DD5 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP11 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x3E56 JUMP JUMPDEST SWAP3 SWAP4 DUP10 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x3E33 JUMP JUMPDEST SWAP5 SWAP7 SWAP6 SWAP2 PUSH4 0xFFFFFFFF SWAP4 PUSH1 0x60 SWAP6 PUSH2 0x3EB7 PUSH1 0xFF SWAP5 PUSH2 0x3EC5 SWAP5 PUSH1 0x80 DUP12 MSTORE PUSH1 0x80 DUP12 ADD SWAP2 PUSH2 0x379F JUMP JUMPDEST SWAP2 DUP9 DUP4 SUB PUSH1 0x20 DUP11 ADD MSTORE PUSH2 0x379F JUMP JUMPDEST SWAP7 AND PUSH1 0x40 DUP6 ADD MSTORE AND SWAP2 ADD MSTORE JUMP JUMPDEST SWAP5 SWAP7 SWAP6 SWAP4 SWAP7 SWAP3 SWAP1 SWAP2 SWAP3 PUSH1 0x6 SLOAD SWAP8 PUSH4 0xFFFFFFFF SWAP3 DUP4 DUP11 GT PUSH2 0x4025 JUMPI PUSH2 0x3F81 PUSH32 0xB0BCDEBD2813328A89A9ED5971E5863201ED78FC4E0E2B271CCEDDB9CE90510 SWAP8 PUSH2 0x3FAD SWAP6 PUSH2 0x3F5D SWAP13 AND SWAP12 DUP13 SWAP6 PUSH2 0x3F26 DUP8 PUSH2 0x32FF JUMP JUMPDEST POP PUSH2 0x3F2F PUSH2 0x2C74 JUMP JUMPDEST SWAP3 PUSH2 0x3F3B CALLDATASIZE DUP12 DUP16 PUSH2 0x3C13 JUMP JUMPDEST DUP5 MSTORE PUSH2 0x3F48 CALLDATASIZE DUP8 DUP14 PUSH2 0x3C13 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0xFF DUP8 AND PUSH1 0x40 DUP6 ADD MSTORE CALLDATASIZE SWAP2 PUSH2 0x3C13 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x3F7C DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x3D6D JUMP JUMPDEST PUSH2 0x3F9F CALLER PUSH2 0x1631 DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP6 CALLER SWAP10 DUP8 PUSH2 0x3E92 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 CALLER SWAP2 DUP1 PUSH2 0x3FF8 DUP9 DUP3 PUSH1 0x20 PUSH1 0x0 SWAP2 SWAP4 SWAP3 SWAP4 PUSH4 0xFFFFFFFF PUSH1 0x40 DUP3 ADD SWAP6 AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 CALLER PUSH1 0x0 DUP4 PUSH32 0x16B85F49BF01212961345D3016C9A531894ACCF62EB7680F2045D79185CC0EC0 DUP3 DUP1 LOG4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E674D6174683A2075696E743332204F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x407F DUP3 ISZERO ISZERO PUSH2 0x3841 JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x127C JUMPI SSTORE PUSH2 0x40BC DUP2 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 DUP2 SLOAD PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x127C JUMPI PUSH1 0x0 SWAP3 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 PUSH1 0x40 CALLER SWAP3 LOG4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH2 0x4119 DUP4 ISZERO ISZERO PUSH2 0x3841 JUMP JUMPDEST DUP3 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 DUP4 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x127C JUMPI SSTORE PUSH2 0x4155 DUP2 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD SWAP1 DUP4 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x127C JUMPI SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 CALLER SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 DUP2 SWAP1 DUP2 ADD PUSH2 0x342B JUMP JUMPDEST ISZERO PUSH2 0x41A9 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E54463A204E6F74206E61746976650000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x4203 DUP3 ISZERO ISZERO PUSH2 0x3841 JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 DUP5 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x127C JUMPI SSTORE PUSH2 0x423F DUP2 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD SWAP1 DUP5 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x127C JUMPI SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x0 SWAP3 CALLER SWAP2 PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 SWAP2 DUP2 SWAP1 DUP2 ADD PUSH2 0x342B JUMP JUMPDEST SWAP5 SWAP4 SWAP3 SWAP1 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP8 AND SWAP3 PUSH1 0x0 SWAP2 DUP5 DUP4 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x42C8 PUSH1 0x40 DUP5 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP5 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH2 0x42DF PUSH1 0xFF PUSH1 0x40 DUP6 KECCAK256 SLOAD AND DUP11 PUSH2 0x3A08 JUMP JUMPDEST SWAP6 DUP1 PUSH2 0x42EA DUP6 PUSH2 0x2728 JUMP JUMPDEST POP SWAP2 PUSH2 0x42FA PUSH2 0x1C97 DUP5 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x4303 DUP4 PUSH2 0x463D JUMP JUMPDEST SWAP2 DUP1 PUSH2 0x44D9 JUMPI POP POP PUSH2 0x4324 DUP9 SWAP2 PUSH2 0x1CDA DUP8 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP10 JUMPDEST PUSH2 0x4331 DUP12 DUP8 DUP11 PUSH2 0x4103 JUMP JUMPDEST DUP4 DUP4 SLOAD PUSH1 0x1 PUSH1 0xFF DUP3 AND PUSH2 0x4343 DUP2 PUSH2 0xE70 JUMP JUMPDEST SUB PUSH2 0x4419 JUMPI POP POP DUP3 PUSH2 0x1D4A PUSH2 0xD38 SWAP4 PUSH1 0x1 SWAP4 PUSH2 0x1D2D PUSH2 0xD38 PUSH2 0x4370 SWAP9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x8 SHR AND SWAP1 JUMP JUMPDEST SWAP2 DUP3 EXTCODESIZE ISZERO PUSH2 0x1993 JUMPI PUSH1 0x40 MLOAD PUSH4 0x57D48E63 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE SWAP3 DUP4 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x473 JUMPI PUSH32 0x1AD178FF1B5D2C6DC0F3E4E2578B3D445E601C5BEAE2F63A73F237E480DF2FD0 SWAP3 PUSH2 0x4406 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP5 AND SWAP4 DUP1 PUSH2 0x43FF DUP10 DUP9 CALLER SWAP7 DUP5 PUSH1 0xA0 SWAP2 SWAP5 SWAP4 PUSH1 0x0 SWAP4 PUSH1 0xC0 DUP4 ADD SWAP7 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 SWAP2 SWAP1 JUMP JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x4413 SWAP3 PUSH2 0xA35 JUMP JUMPDEST CODESIZE PUSH2 0x43C6 JUMP JUMPDEST PUSH1 0x8 SHR AND ADDRESS DUP2 SUB PUSH2 0x4449 JUMPI POP DUP3 PUSH2 0x1E50 PUSH2 0xD38 SWAP4 PUSH1 0x1 SWAP4 PUSH2 0x1E45 PUSH2 0xD38 DUP7 PUSH2 0x4370 SWAP10 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH2 0x4463 PUSH2 0xD38 PUSH1 0x1 DUP6 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP5 ADD SLOAD SWAP3 DUP3 EXTCODESIZE ISZERO PUSH2 0x19A9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x79212195 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x64 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x84 DUP4 ADD MSTORE PUSH1 0x0 PUSH1 0xA4 DUP4 ADD MSTORE DUP5 SWAP1 DUP3 SWAP1 PUSH1 0xC4 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x4370 SWAP3 PUSH2 0xD38 SWAP3 PUSH1 0x1 SWAP3 PUSH2 0x1EE5 JUMPI POP PUSH2 0x1D4A JUMP JUMPDEST PUSH2 0x44F5 SWAP3 SWAP2 SWAP12 SWAP10 POP PUSH2 0x1F18 DUP8 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SWAP8 PUSH2 0x4326 JUMP JUMPDEST ISZERO PUSH2 0x4503 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A2063616E2774206465706F736974207479706500000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x478 JUMPI MLOAD PUSH2 0x3B3 DUP2 PUSH2 0x117D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP4 DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP4 SWAP2 SWAP3 DUP5 SWAP2 PUSH2 0x45AF DUP2 PUSH1 0x84 DUP2 ADD JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0xAA2 JUMP JUMPDEST MLOAD SWAP4 AND GAS CALL PUSH2 0x45BC PUSH2 0x2C9F JUMP JUMPDEST DUP2 PUSH2 0x460E JUMPI JUMPDEST POP ISZERO PUSH2 0x45CA JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E7366657246726F6D206661696C6564 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 MLOAD DUP1 ISZERO SWAP3 POP DUP3 ISZERO PUSH2 0x4623 JUMPI JUMPDEST POP POP CODESIZE PUSH2 0x45C2 JUMP JUMPDEST PUSH2 0x4636 SWAP3 POP PUSH1 0x20 DUP1 SWAP2 DUP4 ADD ADD SWAP2 ADD PUSH2 0x4548 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x461B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x1 PUSH1 0x4 SWAP4 ADD SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0xCE845D1D PUSH1 0xE0 SHL DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x473 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x4674 JUMPI POP SWAP1 JUMP JUMPDEST PUSH2 0x3B3 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x235D JUMPI PUSH2 0x234F DUP2 DUP4 PUSH2 0xAA2 JUMP JUMPDEST ISZERO PUSH2 0x4693 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A206E6F7420455243373231000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x46DF JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A206E6F7420777261707065644E61746976650000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP3 SWAP2 SWAP1 SWAP3 PUSH2 0x4731 DUP2 PUSH2 0x2728 JUMP JUMPDEST POP SWAP4 PUSH2 0x4755 DUP6 SLOAD PUSH1 0x1 PUSH1 0xFF DUP3 AND PUSH2 0x4747 DUP2 PUSH2 0xE70 JUMP JUMPDEST EQ SWAP1 DUP2 PUSH2 0x48C4 JUMPI JUMPDEST POP PUSH2 0x46D8 JUMP JUMPDEST PUSH2 0x477D PUSH2 0x476C DUP4 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD PUSH2 0x4776 DUP8 PUSH2 0x463D JUMP JUMPDEST SWAP1 DUP6 PUSH2 0x5492 JUMP JUMPDEST SWAP5 PUSH2 0x4789 DUP7 DUP5 DUP5 PUSH2 0x4103 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH32 0x0 AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x478 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD0E30DB PUSH1 0xE4 SHL DUP2 MSTORE SWAP2 PUSH1 0x0 DUP4 PUSH1 0x4 DUP2 DUP11 DUP6 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x473 JUMPI DUP8 PUSH1 0x1 PUSH2 0x7C2 SWAP3 PUSH2 0x480D SWAP7 PUSH2 0xD38 SWAP7 PUSH2 0x48B1 JUMPI JUMPDEST POP ADD SWAP3 PUSH2 0x4807 PUSH2 0xD38 DUP6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x48FD JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x478 JUMPI PUSH1 0x40 MLOAD PUSH4 0x57D48E63 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x489E JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 AND SWAP2 PUSH32 0x1AD178FF1B5D2C6DC0F3E4E2578B3D445E601C5BEAE2F63A73F237E480DF2FD0 CALLER SWAP3 DUP1 PUSH2 0x43FF DUP10 DUP9 CALLER SWAP7 DUP5 PUSH1 0xA0 SWAP2 SWAP5 SWAP4 PUSH1 0x0 SWAP4 PUSH1 0xC0 DUP4 ADD SWAP7 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x48AB SWAP3 PUSH2 0xA35 JUMP JUMPDEST CODESIZE PUSH2 0x4842 JUMP JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x48BE SWAP3 PUSH2 0xA35 JUMP JUMPDEST CODESIZE PUSH2 0x47F0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH32 0x0 AND SWAP2 PUSH1 0x8 SHR AND EQ CODESIZE PUSH2 0x474F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP4 SWAP1 SWAP2 DUP5 SWAP2 SWAP1 PUSH2 0x493E DUP2 PUSH1 0x64 DUP2 ADD PUSH2 0x45A1 JUMP JUMPDEST MLOAD SWAP4 AND GAS CALL PUSH2 0x494B PUSH2 0x2C9F JUMP JUMPDEST DUP2 PUSH2 0x499E JUMPI JUMPDEST POP ISZERO PUSH2 0x4959 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E73666572206661696C656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP1 ISZERO SWAP3 POP DUP3 ISZERO PUSH2 0x49B3 JUMPI JUMPDEST POP POP CODESIZE PUSH2 0x4951 JUMP JUMPDEST PUSH2 0x49C6 SWAP3 POP PUSH1 0x20 DUP1 SWAP2 DUP4 ADD ADD SWAP2 ADD PUSH2 0x4548 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x49AB JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x49DA DUP6 PUSH2 0x2728 JUMP JUMPDEST POP SWAP5 PUSH1 0xFF DUP7 SLOAD AND PUSH2 0x49EA DUP2 PUSH2 0xE70 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4B6E JUMPI DUP1 PUSH2 0x49FC PUSH1 0x2 SWAP3 PUSH2 0xE70 JUMP JUMPDEST EQ PUSH2 0x4A0A JUMPI PUSH2 0x557 SWAP6 PUSH2 0x4BB3 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND SWAP3 PUSH2 0x4A26 DUP5 ISZERO ISZERO PUSH2 0x3841 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP5 DUP4 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 DUP5 KECCAK256 DUP6 DUP6 MSTORE PUSH1 0x20 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT SWAP2 DUP3 DUP3 ADD SWAP2 DUP3 GT PUSH2 0x127C JUMPI SSTORE PUSH2 0x4A65 DUP7 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD SWAP2 DUP3 ADD SWAP2 DUP3 GT PUSH2 0x127C JUMPI PUSH2 0x4ABC SWAP3 DUP6 SWAP3 PUSH1 0x1 SWAP3 SSTORE DUP7 DUP10 DUP7 MLOAD DUP11 DUP2 MSTORE DUP5 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP9 CALLER SWAP3 LOG4 ADD SLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP3 DUP4 EXTCODESIZE ISZERO PUSH2 0x1993 JUMPI DUP2 MLOAD PUSH4 0xF3FEF3A3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE SWAP4 DUP5 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL SWAP3 DUP4 ISZERO PUSH2 0x473 JUMPI PUSH32 0xD4594021CDD03E2C0ABC8108CBA8D75A347EAF64ACADDEDE25DF63F6EF9E2420 SWAP4 PUSH2 0x4B5B JUMPI JUMPDEST POP MLOAD SWAP5 AND SWAP4 DUP1 PUSH2 0x4B51 CALLER SWAP5 DUP3 PUSH1 0x80 PUSH1 0x1 SWAP2 SWAP4 SWAP3 SWAP4 PUSH1 0xA0 DUP2 ADD SWAP5 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x1 SWAP1 DUP2 SWAP1 JUMP JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x4B68 SWAP3 PUSH2 0xA35 JUMP JUMPDEST CODESIZE PUSH2 0x4B20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A2063616E2774207769746864726177204E617469766500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP6 SWAP5 SWAP3 SWAP2 SWAP3 PUSH2 0x4BC1 DUP8 PUSH2 0x463D JUMP JUMPDEST SWAP1 DUP1 PUSH2 0x4CB3 JUMPI POP PUSH2 0xD38 PUSH1 0x1 PUSH2 0x4BEF PUSH2 0x4BFC SWAP4 PUSH2 0x4BE8 DUP7 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD DUP10 PUSH2 0x54B9 JUMP JUMPDEST SWAP9 JUMPDEST PUSH2 0x1D4A DUP11 DUP7 DUP10 PUSH2 0x41EE JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x478 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF3FEF3A3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x473 JUMPI PUSH2 0x4CA0 JUMPI JUMPDEST POP PUSH32 0xD4594021CDD03E2C0ABC8108CBA8D75A347EAF64ACADDEDE25DF63F6EF9E2420 PUSH1 0x40 MLOAD SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP5 AND SWAP3 DUP1 PUSH2 0x43FF DUP10 DUP9 CALLER SWAP7 DUP5 PUSH1 0x80 SWAP2 SWAP5 SWAP4 PUSH1 0x0 SWAP4 PUSH1 0xA0 DUP4 ADD SWAP7 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST DUP1 PUSH2 0x1987 PUSH2 0x4CAD SWAP3 PUSH2 0xA35 JUMP JUMPDEST CODESIZE PUSH2 0x4C40 JUMP JUMPDEST SWAP7 SWAP5 POP PUSH2 0xD38 PUSH1 0x1 PUSH2 0x4CDD PUSH2 0x4BFC SWAP4 PUSH2 0x4CD6 DUP7 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD DUP12 PUSH2 0x5501 JUMP JUMPDEST SWAP7 PUSH2 0x4BF1 JUMP JUMPDEST ISZERO PUSH2 0x4CEA JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A20746F206E6F7420736574000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x4D36 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A206F70657261746F72206E6F7420736574000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x4D82 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F783A2063616E277420617070726F7665207969656C64426F78 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND SWAP3 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH2 0x4E1E DUP6 PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP5 PUSH1 0x1 DUP7 MSTORE AND SWAP4 LOG3 JUMP JUMPDEST PUSH1 0x40 PUSH32 0x6ACEB1B079BEEABDD8C2F30CD221CA27EC52E9D0AEF6BB229CC175CF15DD778B SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP4 DUP5 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x4E8F DUP2 DUP5 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP7 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE DUP3 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE DUP3 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x1 PUSH1 0x20 DUP8 ADD MSTORE AND SWAP4 LOG3 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH32 0x6ACEB1B079BEEABDD8C2F30CD221CA27EC52E9D0AEF6BB229CC175CF15DD778B SWAP3 SWAP5 SWAP4 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND SWAP5 DUP6 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x4F13 DUP3 DUP6 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x4F33 DUP2 DUP6 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 ISZERO ISZERO AND OR SWAP1 SSTORE JUMP JUMPDEST DUP4 MLOAD SWAP7 DUP8 MSTORE ISZERO ISZERO PUSH1 0x20 DUP8 ADD MSTORE AND SWAP4 LOG3 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x60 SWAP2 DUP1 SLOAD PUSH1 0xFF DUP2 AND PUSH2 0x4F58 DUP2 PUSH2 0xE70 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 PUSH1 0x8 SHR AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x1 DUP3 ADD SLOAD AND PUSH1 0x40 DUP6 ADD MSTORE ADD SLOAD SWAP2 ADD MSTORE JUMP JUMPDEST SWAP3 SWAP5 SWAP4 PUSH2 0x4FF3 PUSH1 0xC0 SWAP4 PUSH2 0x4F9A DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 PUSH2 0x4F44 JUMP JUMPDEST PUSH1 0xE0 PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0x80 PUSH1 0xE0 DUP8 ADD MSTORE PUSH1 0x3 PUSH2 0x4FB8 PUSH2 0x160 DUP9 ADD DUP4 PUSH2 0x989 JUMP JUMPDEST SWAP2 PUSH2 0x4FD4 PUSH1 0xDF NOT SWAP4 DUP5 DUP11 DUP3 SUB ADD PUSH2 0x100 DUP12 ADD MSTORE PUSH1 0x1 DUP4 ADD PUSH2 0x989 JUMP JUMPDEST SWAP3 PUSH1 0xFF PUSH1 0x2 DUP4 ADD SLOAD AND PUSH2 0x120 DUP11 ADD MSTORE DUP9 DUP5 SUB ADD PUSH2 0x140 DUP10 ADD MSTORE ADD PUSH2 0x989 JUMP JUMPDEST SWAP6 PUSH1 0xA0 DUP6 ADD MSTORE AND SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH2 0x5010 PUSH1 0xA0 SWAP3 PUSH2 0x3B3 SWAP6 SWAP5 PUSH2 0x4F44 JUMP JUMPDEST DUP2 PUSH1 0x80 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x989 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x478 JUMPI MLOAD PUSH2 0x3B3 DUP2 PUSH2 0xD52 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 PUSH1 0xFF PUSH1 0x80 SWAP2 PUSH2 0x5048 DUP5 PUSH1 0xA0 DUP2 ADD SWAP8 PUSH2 0x4F44 JUMP JUMPDEST AND SWAP2 ADD MSTORE JUMP JUMPDEST SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x505F DUP10 PUSH2 0xE70 JUMP JUMPDEST DUP9 PUSH2 0x507B JUMPI POP PUSH2 0x557 SWAP7 SWAP8 POP SWAP1 PUSH2 0x5076 SWAP2 ADDRESS PUSH2 0x3438 JUMP JUMPDEST PUSH2 0x428C JUMP JUMPDEST PUSH2 0x5088 SWAP4 SWAP9 SWAP6 SWAP5 SWAP6 PUSH2 0x2DA4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP8 AND SWAP3 PUSH1 0x0 SWAP2 DUP5 DUP4 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x42C8 PUSH1 0x40 DUP5 KECCAK256 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x50C6 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F785065726D69743A206578706972656420646561646C696E65 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x5111 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5969656C64426F785065726D69743A20696E76616C6964207369676E61747572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x65 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x3B3 SWAP4 SWAP2 PUSH2 0x516F SWAP4 PUSH2 0x5292 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x517B DUP2 PUSH2 0xE70 JUMP JUMPDEST DUP1 PUSH2 0x5183 JUMPI POP JUMP JUMPDEST PUSH2 0x518C DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x51D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x51E2 DUP2 PUSH2 0xE70 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x522F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x523B PUSH1 0x3 SWAP3 PUSH2 0xE70 JUMP JUMPDEST EQ PUSH2 0x5242 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP3 SWAP2 SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT PUSH2 0x5308 JUMPI SWAP2 PUSH1 0x80 SWAP5 SWAP4 SWAP2 PUSH1 0xFF PUSH1 0x20 SWAP5 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND DUP5 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP2 DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0x473 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x5302 JUMPI SWAP2 SWAP1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP POP POP PUSH1 0x0 SWAP1 PUSH1 0x3 SWAP1 JUMP JUMPDEST PUSH2 0x531C PUSH2 0x534B JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD SWAP3 PUSH2 0x1901 PUSH1 0xF0 SHL DUP5 MSTORE PUSH1 0x22 DUP4 ADD MSTORE PUSH1 0x42 DUP3 ADD MSTORE PUSH1 0x42 DUP2 MSTORE PUSH2 0x5345 DUP2 PUSH2 0xA86 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND ADDRESS EQ DUP1 PUSH2 0x5436 JUMPI JUMPDEST ISZERO PUSH2 0x53A6 JUMPI PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH32 0x0 DUP3 MSTORE PUSH32 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH2 0x5345 DUP2 PUSH2 0xA4E JUMP JUMPDEST POP PUSH32 0x0 CHAINID EQ PUSH2 0x537D JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x127C JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0x547C JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 SWAP2 PUSH2 0x549D SWAP1 PUSH2 0x2C57 JUMP JUMPDEST SWAP1 PUSH4 0x5F5E100 DUP4 ADD DUP1 SWAP4 GT PUSH2 0x127C JUMPI PUSH2 0x3B3 SWAP3 PUSH2 0x1241 SWAP2 PUSH2 0x545F JUMP JUMPDEST SWAP1 SWAP3 SWAP2 PUSH2 0x54C5 SWAP1 PUSH2 0x2C57 JUMP JUMPDEST SWAP3 PUSH4 0x5F5E100 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x127C JUMPI DUP1 PUSH2 0x1241 PUSH2 0x54E9 DUP7 PUSH2 0x1241 PUSH2 0x54F0 SWAP6 DUP8 PUSH2 0x545F JUMP JUMPDEST SWAP6 DUP7 PUSH2 0x545F JUMP JUMPDEST LT PUSH2 0x54F7 JUMPI JUMP JUMPDEST SWAP1 PUSH2 0x3B3 SWAP1 PUSH2 0x2C57 JUMP JUMPDEST SWAP2 PUSH2 0x550B SWAP1 PUSH2 0x2C57 JUMP JUMPDEST SWAP2 PUSH4 0x5F5E100 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x127C JUMPI PUSH2 0x3B3 SWAP3 PUSH2 0x1241 SWAP2 PUSH2 0x545F JUMP JUMPDEST SWAP1 SWAP3 SWAP2 PUSH2 0x5533 SWAP1 PUSH2 0x2C57 JUMP JUMPDEST PUSH4 0x5F5E100 DUP5 ADD DUP1 SWAP5 GT PUSH2 0x127C JUMPI DUP1 PUSH2 0x1241 PUSH2 0x54E9 DUP7 PUSH2 0x1241 PUSH2 0x54F0 SWAP6 DUP8 PUSH2 0x545F JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 0xB1 0x4B DUP11 SWAP12 EXTCODESIZE DUP2 0xC5 SWAP10 ADD 0x26 0xDD RETURNDATACOPY SMOD DUP2 DUP10 DUP13 NOT SHR 0xD3 PUSH31 0x3E2E5ED2B5647E2802CC7D64736F6C63430008120033000000000000000000 ","sourceMap":"2222:18939:34:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;-1:-1:-1;;2222:18939:34;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;2222:18939:34;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;-1:-1:-1;;2222:18939:34;;;;16443:60;-1:-1:-1;2222:18939:34;;16459:15;;;:::i;:::-;-1:-1:-1;2222:18939:34;;;16476:12;2222:18939;;;;;;;;-1:-1:-1;;;16443:60:34;;2222:18939;;;;;;;16443:60;;;:::i;:::-;;:10;-1:-1:-1;;;;;16443:10:34;2222:18939;16443:60;;;;;;2222:18939;16443:60;-1:-1:-1;16443:60:34;;;2222:18939;;;;;;;;;:::i;:::-;;;;16443:60;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;2222:18939::-;-1:-1:-1;2222:18939:34;;;-1:-1:-1;;;;;2222:18939:34;;;;;:::o;:::-;;;;;;-1:-1:-1;;2222:18939:34;;;;-1:-1:-1;;;;;2222:18939:34;;;;;:::i;:::-;;-1:-1:-1;2222:18939:34;571:73:30;2222:18939:34;;;-1:-1:-1;2222:18939:34;;;-1:-1:-1;2222:18939:34;;;;;-1:-1:-1;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;:::i;:::-;7046:15:33;;7038:73;2222:18939:34;7046:15:33;;;:::i;:::-;2222:18939:34;;;;;;:::i;:::-;7046:45:33;7038:73;:::i;:::-;-1:-1:-1;7177:7:33;;;;;;2222:18939:34;7186:3:33;7229:8;7239:49;7229:8;7186:3;7229:8;;;;:::i;:::-;2222:18939:34;;;;:::i;:::-;-1:-1:-1;;;;;7258:8:33;;;;;:::i;:::-;2222:18939:34;;;;:::i;:::-;;-1:-1:-1;2222:18939:34;;;;7239:49:33;;7268:10;7239:40;7268:10;2222:18939:34;-1:-1:-1;2222:18939:34;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;7239:40:33;2222:18939:34;;;;;;;;;;7239:49:33;2222:18939:34;;;;;7239:49:33;;;:::i;:::-;7328:10;7309:8;;;;;;:::i;:::-;;:::i;:::-;7328:10;;;;;;:::i;:::-;2222:18939:34;7328:10:33;;:::i;:::-;7186:3;:::i;:::-;7162:13;;2222:18939:34;;;;;;;:::o;:::-;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;;:::i;:::-;;;;;;;;866:46:30;;:98;;;;;2222:18939:34;866:151:30;;;;2222:18939:34;;;;;;;;;;866:151:30;-1:-1:-1;;;992:25:30;;-1:-1:-1;866:151:30;;;:98;-1:-1:-1;;;939:25:30;;;-1:-1:-1;866:98:30;;2222:18939:34;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;:::i;:::-;12220:5;2222:18939;;;;;;:::i;:::-;;;-1:-1:-1;2222:18939:34;-1:-1:-1;;;;;2222:18939:34;;;;;;;1457:37:33;2222:18939:34;;;1483:10:33;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;1457:37:33;2222:18939:34;;;;;1457:42:33;2222:18939:34;;;;;;1457:42:33;;:::i;:::-;2222:18939:34;;12220:5;;:::i;:::-;2222:18939;;;;;;;;-1:-1:-1;;2222:18939:34;;;;;;16267:15;;;:::i;:::-;-1:-1:-1;;;2222:18939:34;;;;;16284:12;2222:18939;;;;;;;;;16252:92;16329:14;;2222:18939;;;;16329:14;2222:18939;;16329:5;2222:18939;;;;;;;16329:14;2222:18939;-1:-1:-1;;;;;2222:18939:34;;;16329:14;2222:18939;;-1:-1:-1;;;16252:92:34;;2222:18939;;;;;;16252:92;;;:::i;:::-;;:10;-1:-1:-1;;;;;16252:10:34;2222:18939;16252:92;;;;;;;;2222:18939;16252:92;;;;2222:18939;;;;;;;;;;:::i;16252:92::-;;;;;;;;;;;;;:::i;:::-;;;;;2222:18939;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;2222:18939:34;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;2222:18939:34;1730:5:33;2222:18939:34;;1708:69:33;-1:-1:-1;;;;;2222:18939:34;-1:-1:-1;2222:18939:34;;;1716:10:33;:28;1708:69;:::i;:::-;-1:-1:-1;6613:7:33;;;;;;2222:18939:34;6622:3:33;6647:6;6664:10;6647:6;6622:3;6647:6;;;;:::i;:::-;2222:18939:34;;;;:::i;:::-;6664:10:33;;;;;;:::i;:::-;2222:18939:34;6664:10:33;;:::i;6622:3::-;6598:13;;2222:18939:34;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;2222:18939:34;;;;-1:-1:-1;2222:18939:34;;;-1:-1:-1;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;;2222:18939:34;;;;;;-1:-1:-1;2222:18939:34;662:51:33;2222:18939:34;;;;;;-1:-1:-1;2222:18939:34;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;662:51:33;2222:18939:34;662:51:33;;;;2222:18939:34;:::i;:::-;;;;:::i;:::-;;;662:51:33;;;2222:18939:34;;;;;;662:51:33;;;;;2222:18939:34;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;2222:18939:34;;;-1:-1:-1;;2222:18939:34;;;;;;;;;1457:37:33;2222:18939:34;;;1483:10:33;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;1457:37:33;12959:17:34;;2222:18939;;;;1457:42:33;2222:18939:34;;;;;;1457:42:33;;:::i;:::-;13045:13:34;;13060:7;;;;;;13221:19;;;13255:13;;13270:7;;;;;;13530:15;;:39;:24;:15;;;-1:-1:-1;;;;;2222:18939:34;;;13371:9;2222:18939;;;;;;;13530:24;2222:18939;;;13530:39;:::i;:::-;2222:18939;;;;13279:3;13311:6;;;;;;;;;:::i;:::-;;;;:::i;:::-;13348:9;;;;;;;:::i;:::-;2222:18939;13371:13;;;;-1:-1:-1;;;;;2222:18939:34;;;13371:9;2222:18939;;;;;;;13371:13;2222:18939;;;;;;;;;;;;13371:32;;;;:::i;:::-;2222:18939;;13417:21;;;:::i;:::-;2222:18939;;;;;;;;;;;;;;;;1483:10:33;;13457:53:34;;2222:18939;;13457:53;13279:3;;;:::i;:::-;13255:13;;13069:3;13088:53;13096:20;:6;;;13069:3;13096:6;;;:::i;:::-;-1:-1:-1;;;;;2222:18939:34;;;13096:20;;;13088:53;:::i;13069:3::-;13045:13;;;;2222:18939;;;;;;;:::o;:::-;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2222:18939:34;;;;;;-1:-1:-1;2222:18939:34;765:47:33;2222:18939:34;;;-1:-1:-1;;;;;2222:18939:34;-1:-1:-1;2222:18939:34;;;;;;;;;;;-1:-1:-1;2222:18939:34;;;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;:::o;:::-;;-1:-1:-1;2222:18939:34;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2222:18939:34;1445:3:28;2222:18939:34;;;-1:-1:-1;2222:18939:34;;:::o;:::-;;;;897:102:28;;2222:18939:34;;;:::i;:::-;;;;;;;;:::i;:::-;897:102:28;2222:18939:34;897:102:28;2222:18939:34;;;897:102:28;2222:18939:34;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;897:102:28;2222:18939:34;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;897:102:28;2222:18939:34;897:102:28;2222:18939:34;;;;;897:102:28;2222:18939:34;;;;;;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;3722:64:30;3730:27;;;;;;;;3722:64;:::i;:::-;3826:5;;;:::i;:::-;3873:6;;;;;;;;:::i;:::-;230:63:11;;3891:318:30;;2222:18939:34;3891:318:30;3951:85;2222:18939:34;3951:85:30;-1:-1:-1;;;;;2222:18939:34;3826:5:30;2222:18939:34;;;;;;;;;;;;;3951:85:30;;;;4000:10;2222:18939:34;3951:85:30;;;:::i;:::-;;2222:18939:34;;3951:85:30;;;;;;3926:272;3951:85;3826:5;3951:85;;;3891:318;-1:-1:-1;2222:18939:34;;3951:195:30;3926:272;:::i;:::-;2222:18939:34;3951:85:30;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;2222:18939:34;;;;;;;:::o;:::-;;;;;;-1:-1:-1;;2222:18939:34;;;;;3639:20:35;;:::i;:::-;2222:18939:34;;;;;;;;;;;;-1:-1:-1;;2222:18939:34;;;;16763:68;2222:18939;;;16783:15;;;:::i;:::-;2222:18939;;-1:-1:-1;2222:18939:34;16800:12;2222:18939;;;16800:30;2222:18939;-1:-1:-1;2222:18939:34;16800:30;2222:18939;;;;;;;;;;;;;16763:68;;2222:18939;16763:68;;;:::i;:::-;;:10;-1:-1:-1;;;;;16763:10:34;2222:18939;16763:68;;;;;;2222:18939;16763:68;-1:-1:-1;16763:68:34;;;2222:18939;-1:-1:-1;2222:18939:34;;;;;;;;;;;;;;;;16763:68;;;;2222:18939;16763:68;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;2222:18939;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;-1:-1:-1;2222:18939:34;;;;18472:15;;;:::i;:::-;2222:18939;;;;;;:::i;:::-;18472:45;:94;;;;2222:18939;18468:259;;;18582:14;;;2222:18939;18582:14;18468:259;2222:18939;;;;;;;;;;;;;18468:259;2222:18939;;2291:13:36;2222:18939:34;;18652:11;2222:18939;;18674:32;18690:15;2222:18939;;;;18690:15;;:::i;:::-;18674:32;;:::i;:::-;18636:80;2291:13:36;;:::i;:::-;2222:18939:34;2330:3:36;2222:18939:34;;;;;;;2424:19:36;2423:36;2424:19;;2222:18939:34;2424:19:36;;;:::i;:::-;2423:36;:::i;:::-;2543:56;;;;18468:259:34;2539:95:36;;;;18468:259:34;2539:95:36;2615:8;;;:::i;:::-;18468:259:34;;2543:56:36;2554:37;2555:21;;;;;;;:::i;2554:37::-;:45;2543:56;;;;;2222:18939:34;;:::i;18472:94::-;18521:15;18550:16;2222:18939;18521:15;;;:::i;:::-;2222:18939;;;;;;:::i;:::-;18521:45;18472:94;;2222:18939;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;-1:-1:-1;2222:18939:34;;;;17281:32;17297:15;2222:18939;-1:-1:-1;2222:18939:34;;17297:15;;:::i;17281:32::-;2222:18939;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;1240:17:30;;1232:54;1240:17;;;1232:54;:::i;:::-;2222:18939:34;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2222:18939:34;;;:::i;:::-;;;;;;;;;-1:-1:-1;1342:13:30;;1357:7;;;;;;2222:18939:34;;;;;;;:::i;1366:3:30:-;1409:9;-1:-1:-1;;;;;1409:9:30;1366:3;1409:9;;;;:::i;:::-;2222:18939:34;;;;:::i;:::-;;;;1399:9:30;2222:18939:34;;1399:28:30;2222:18939:34;;;1420:6:30;;;;;:::i;:::-;2222:18939:34;;;;;;;;;;1399:28:30;2222:18939:34;1385:42:30;;;;:::i;:::-;2222:18939:34;1366:3:30;:::i;:::-;1342:13;;2222:18939:34;;;;;;-1:-1:-1;;2222:18939:34;;;;16604:64;-1:-1:-1;2222:18939:34;;16622:15;;;:::i;:::-;-1:-1:-1;2222:18939:34;;;16639:12;2222:18939;;;;;;;;-1:-1:-1;;;16604:64:34;;2222:18939;;;;;16639:28;;;2222:18939;16604:64;;;:::i;2222:18939::-;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;;:::i;:::-;;;-1:-1:-1;2222:18939:34;19037:15;;;:::i;:::-;2222:18939;;;;;;:::i;:::-;19037:45;:94;;;;2222:18939;19033:295;;;19156:15;;:24;:15;-1:-1:-1;;;;;2222:18939:34;;;13371:9;2222:18939;;;;;;;19156:24;2222:18939;;;;;;;;;;;;;;19033:295;2222:18939;;19220:24;2222:18939;-1:-1:-1;;;;;19220:97:34;2222:18939;;;;19220:9;2222:18939;;;;;;;;;;;;;19220:24;2222:18939;19255:20;19277:32;19293:15;19255:20;;2222:18939;;19255:11;2222:18939;;;;;;;19255:20;2222:18939;19293:15;;:::i;19277:32::-;19220:97;;:::i;19037:94::-;19086:15;19115:16;2222:18939;19086:15;;;:::i;:::-;2222:18939;;;;;;:::i;:::-;19086:45;19037:94;;2222:18939;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;-1:-1:-1;2222:18939:34;;;;1730:5:33;2222:18939:34;;-1:-1:-1;;;;;2222:18939:34;1708:69:33;2222:18939:34;;;;;;1716:10:33;:28;1708:69;:::i;:::-;2492:394;;;2222:18939:34;;;2548:22:33;;;;;;:34;;;2492:394;2222:18939:34;;;;2755:34:33;2677:14;2755:21;2677:14;2716:25;2677:14;;;;2222:18939:34;;16329:5;2222:18939;;;;;;;2677:14:33;2222:18939:34;2647:55:33;;;;;2716:14;;2222:18939:34;;16329:5;2222:18939;;;;;;;2716:14:33;2222:18939:34;-1:-1:-1;;;;;2222:18939:34;-1:-1:-1;;;;;2222:18939:34;;;;;;;;2716:25:33;2222:18939:34;;2755:12:33;2222:18939:34;;;;;;;2755:21:33;2222:18939:34;;-1:-1:-1;;2222:18939:34;;;;;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;2548:34:33;;;;;;2492:394;2222:18939:34;2843:32:33;2222:18939:34;;;;;2843:12:33;2222:18939:34;;;;;;-1:-1:-1;;;;;2222:18939:34;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;:::i;:::-;;;:::i;:::-;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;-1:-1:-1;;;;;2222:18939:34;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;1457:37:33;2222:18939:34;;;1483:10:33;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;1457:37:33;2222:18939:34;;;;;1457:42:33;2222:18939:34;;;;;;1457:42:33;;:::i;:::-;7036:15:34;;;:::i;:::-;2222:18939;;7061:68;7088:16;2222:18939;;;;;;;;;;;:::i;:::-;7069:35;7061:68;:::i;:::-;7159:21;;;;:::i;:::-;7215:47;:30;2222:18939;;;-1:-1:-1;;;;;2222:18939:34;;;;;;7215:47;7178:1;7277:14;;2222:18939;7088:16;7269:23;2222:18939;;;-1:-1:-1;;;;;2222:18939:34;;;7269:23;7294:13;;2222:18939;7215:93;;;;;;2222:18939;;-1:-1:-1;;;7215:93:34;;-1:-1:-1;;;;;2222:18939:34;;;;7215:93;;2222:18939;;;574:10:12;;;2222:18939:34;574:10:12;;;2222:18939:34;;;;;;;;;;;574:10:12;;2222:18939:34;;;;7215:93;;;;;;;7319:24;7215:93;2222:18939;7215:93;;;2222:18939;;;-1:-1:-1;;;;;2222:18939:34;;;7319:24;:27;;;;;;2222:18939;;-1:-1:-1;;;7319:27:34;;7178:1;2222:18939;7319:27;;2222:18939;;;;;;;;7319:27;;;;;;;;;7362:58;7319:27;;;2222:18939;;;;;;1483:10:33;;7362:58:34;1483:10:33;7362:58:34;;2222:18939;7178:1;2222:18939;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7362:58;;;;2222:18939;7178:1;2222:18939;;;;;;;;;;7319:27;;;;;;:::i;:::-;;;:::i;:::-;;;;;2222:18939;;7215:93;;;;;;:::i;:::-;;;;;2222:18939;;;;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;-1:-1:-1;;;;;2222:18939:34;;;2691:49:0;;;;;;-1:-1:-1;2222:18939:34;;;;;;;;;;;;;;;;2691:49:0;;2222:18939:34;;2691:49:0;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2691:49:0;;;;;;;;2222:18939:34;2691:49:0;;;;;;:::i;2222:18939:34:-;;;;;;-1:-1:-1;;2222:18939:34;;;;-1:-1:-1;;;;;2222:18939:34;;;;;:::i;:::-;;-1:-1:-1;2222:18939:34;-1:-1:-1;2222:18939:34;;;;-1:-1:-1;2222:18939:34;;;;;;;;;;;;5376:6:33;2222:18939:34;;;:::i;:::-;;;;-1:-1:-1;2222:18939:34;1730:5:33;2222:18939:34;;1708:69:33;-1:-1:-1;;;;;2222:18939:34;-1:-1:-1;2222:18939:34;;;1716:10:33;:28;1708:69;:::i;:::-;5376:6;:::i;2222:18939:34:-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;1510:1:33;2222:18939:34;;;:::i;:::-;;-1:-1:-1;;;;;2222:18939:34;;;;-1:-1:-1;2222:18939:34;;;;1457:37:33;2222:18939:34;-1:-1:-1;2222:18939:34;1483:10:33;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;1457:37:33;2222:18939:34;-1:-1:-1;2222:18939:34;;;1457:42:33;2222:18939:34;;-1:-1:-1;2222:18939:34;;;1457:42:33;;:::i;:::-;1510:1;:::i;2222:18939:34:-;;;;;;;:::i;:::-;-1:-1:-1;2222:18939:34;17763:15;;;:::i;:::-;2222:18939;;;;;;:::i;:::-;17763:45;:94;;;;2222:18939;17759:259;;;-1:-1:-1;;2222:18939:34;;;;;;;-1:-1:-1;2222:18939:34;17759:259;2222:18939;;1327:13:36;2222:18939:34;;17943:11;2222:18939;;17965:32;17981:15;2222:18939;;;;17981:15;;:::i;1327:13:36:-;2222:18939:34;1366:3:36;2222:18939:34;;;;;;;1459:21:36;1458:37;1459:21;;2222:18939:34;1459:21:36;;;:::i;17763:94:34:-;17812:15;17841:16;2222:18939;17812:15;;;:::i;:::-;2222:18939;;;;;;:::i;:::-;17812:45;17763:94;;2222:18939;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;2222:18939:34;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;1457:37:33;2222:18939:34;;;1483:10:33;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;1457:37:33;2222:18939:34;;;;;1457:42:33;2222:18939:34;;;;;;1457:42:33;;:::i;:::-;1510:1;;4865:15:34;;;:::i;:::-;2222:18939;;4890:115;2222:18939;;;;;;;;;;;:::i;:::-;4898:35;;;:74;;;;2222:18939;4890:115;;:::i;:::-;5057:22;;;:::i;:::-;5093:10;;;;5234:20;;5217:58;5234:20;;;;2222:18939;;19255:11;2222:18939;;;;;;;5234:20;2222:18939;5217:58;;:::i;:::-;5089:417;;5535:5;;;;;:::i;:::-;2222:18939;;;5599:15;2222:18939;;;;;;:::i;:::-;5580:34;5599:15;;2222:18939;;;5869:6;2222:18939;;5599:15;2222:18939;5791:29;2222:18939;6332:24;2222:18939;;-1:-1:-1;;;;;2222:18939:34;;;;;;5791:29;5852:14;5844:23;2222:18939;5852:14;;;2222:18939;-1:-1:-1;;;;;2222:18939:34;;;5844:23;5869:6;;:::i;:::-;6332:14;2222:18939;-1:-1:-1;;;;;2222:18939:34;;;6332:24;:32;;;;;;2222:18939;;-1:-1:-1;;;6332:32:34;;2222:18939;6332:32;;2222:18939;;;;;;;;;;6332:32;;;;;;;;;2222:18939;6332:32;6380:83;6332:32;;;5576:746;2222:18939;;;;;1483:10:33;;6380:83:34;1483:10:33;;;6380:83:34;;2222:18939;;;;-1:-1:-1;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;6380:83;;;;2222:18939;;;;;;;;;;;;;;;;;;;6332:32;;;;;;:::i;:::-;;;;5576:746;2222:18939;;;6058:4;6025:38;;6058:4;;6113:14;;6145:6;2222:18939;6113:14;5599:15;6113:14;6105:23;2222:18939;6113:14;6332:24;6113:14;;2222:18939;-1:-1:-1;;;;;2222:18939:34;;;6105:23;6130:13;;;2222:18939;6145:6;;:::i;:::-;5576:746;;6021:291;6254:14;;;6246:23;2222:18939;5599:15;6254:14;;2222:18939;-1:-1:-1;;;;;2222:18939:34;;;6246:23;6271:13;;;2222:18939;6191:106;;;;;;2222:18939;;-1:-1:-1;;;6191:106:34;;-1:-1:-1;;;;;2222:18939:34;;;;6191:106;;2222:18939;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2222:18939:34;;;;;;;;;;;;;;6191:106;;;;;;6332:24;6191:106;2222:18939;6191:106;5599:15;6191:106;;;6021:291;;5576:746;;6191:106;;;;;;:::i;:::-;;;;;2222:18939;;;5089:417;5439:56;5455:20;;;;;;;2222:18939;;19255:11;2222:18939;;;;;;;5455:20;2222:18939;5439:56;;:::i;:::-;5089:417;;;;4898:74;4956:16;2222:18939;;;;;:::i;:::-;4937:35;;4898:74;;;2222:18939;;;;5795:6:33;2222:18939:34;;;:::i;:::-;-1:-1:-1;;;;2222:18939:34;-1:-1:-1;;;;;2222:18939:34;;;;;;;1457:37:33;2222:18939:34;;;1483:10:33;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;1457:37:33;2222:18939:34;;;;;1457:42:33;2222:18939:34;;;;;;1457:42:33;;:::i;:::-;5691:73;2222:18939:34;5699:15:33;;;:::i;5691:73::-;5795:6;:::i;2222:18939:34:-;;;;;;-1:-1:-1;;2222:18939:34;;;;;;-1:-1:-1;2222:18939:34;719:40:33;2222:18939:34;;;-1:-1:-1;;;;;2222:18939:34;-1:-1:-1;2222:18939:34;;;;;;;;;;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;14469:45;2222:18939;14469:34;-1:-1:-1;;;;;2222:18939:34;;13865:22;13857:61;13865:22;;;13857:61;:::i;:::-;13954:70;13982:4;13962:25;;;13954:70;:::i;:::-;14073:10;-1:-1:-1;2222:18939:34;14469:16;2222:18939;;;-1:-1:-1;2222:18939:34;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;14469:34;2222:18939;;;;;;;;;;;;;;;14469:45;2222:18939;;;;;;;14529:42;2222:18939;14073:10;14529:42;;2222:18939;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;21086:15;-1:-1:-1;2222:18939:34;1445:3:28;2222:18939:34;;-1:-1:-1;;;;;2222:18939:34;21111:13;2222:18939;;1445:50:28;:41;:14;:31;2222:18939:34;;1445:31:28;2222:18939:34;1445:41:28;4242:16:33;2222:18939:34;;;;;4242:16:33;2222:18939:34;;;1445:50:28;2222:18939:34;1586:12:28;;;1582:1417;;2222:18939:34;21056:96;2222:18939;;;;21056:96;:::i;1582:1417:28:-;2222:18939:34;;;;;;;;;;;;;;;;1878:20:28;;;;;;2222:18939:34;1878:20:28;;;;;;;;;-1:-1:-1;1878:20:28;;;1582:1417;2222:18939:34;;;;:::i;:::-;21086:15;1865:33:28;:82;;;;1582:1417;1865:115;;;;1582:1417;1786:256;2917:71;21056:96:34;1786:256:28;-1:-1:-1;1786:256:28;2917:71;2607:65;1786:256;;;;21086:15:34;1786:256:28;;:::i;:::-;2402:130;230:63:11;;310:8;;2402:130:28;:::i;:::-;2580:6;2222:18939:34;;;;2619:52:28;2222:18939:34;;;:::i;:::-;21086:15;2222:18939;;2619:52:28;;;;2222:18939:34;-1:-1:-1;;;;;2222:18939:34;;;;2619:52:28;-1:-1:-1;;;;;2222:18939:34;;2619:52:28;;;2222:18939:34;2619:52:28;2222:18939:34;2619:52:28;;2222:18939:34;2607:65:28;:::i;:::-;21086:15:34;-1:-1:-1;2222:18939:34;1445:3:28;2222:18939:34;;2686:14:28;:50;:41;:14;:31;:14;2222:18939:34;2686:31:28;2222:18939:34;2686:50:28;2222:18939:34;;2882:16:28;2222:18939:34;;2882:16:28;;;2222:18939:34;;;;;;;;;;;;;2882:16:28;;;;2222:18939:34;2917:71:28;;;;2222:18939:34;;;;;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;2917:71:28;;;;1582:1417;;;;1865:115;2222:18939:34;;-1:-1:-1;;;1962:18:28;;2222:18939:34;;;;;-1:-1:-1;2222:18939:34;;;;;;;;1962:18:28;;;;;;;21056:96:34;1962:18:28;2607:65;1962:18;2917:71;21086:15:34;1962:18:28;1786:256;-1:-1:-1;1962:18:28;2917:71;1962:18;;;;;1865:115;1951:29;;1865:115;;;;;;;;;;;;;;1962:18;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;1865:82;2222:18939:34;;-1:-1:-1;;;1921:26:28;;2222:18939:34;;-1:-1:-1;2222:18939:34;1921:26:28;2222:18939:34;;;;1921:26:28;;;;;;;-1:-1:-1;1921:26:28;;;1865:82;2222:18939:34;;1902:45:28;;1865:82;;;;1921:26;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;1878:20;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;2222:18939:34;;;;;;-1:-1:-1;;2222:18939:34;;;;427:90:28;2222:18939:34;;;;;:::i;:::-;-1:-1:-1;;;;;2222:18939:34;;;;;;:::i;:::-;;-1:-1:-1;2222:18939:34;;;;;-1:-1:-1;2222:18939:34;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;427:90:28;2222:18939:34;;-1:-1:-1;2222:18939:34;;;;;;-1:-1:-1;2222:18939:34;;;;;;;;;;;;;;;;;-1:-1:-1;;2222:18939:34;;;;3114:4:35;2222:18939:34;;;;;:::i;:::-;;;;;;;:::i;:::-;3007:61:35;2222:18939:34;;;;;;;:::i;:::-;2696:72:35;2704:15;;:27;;2696:72;:::i;:::-;2969:28;2859:16;;-1:-1:-1;;;;;2222:18939:34;3886:7:35;2222:18939:34;3886:7:35;2222:18939:34;;;3886:7:35;2222:18939:34;;;;;1050:1:15;2222:18939:34;;;;3766:203:35;2859:16;2222:18939:34;;;;2810:76:35;;2222:18939:34;1327:84:35;2222:18939:34;;-1:-1:-1;;;;;2222:18939:34;;;;1327:84:35;;2222:18939:34;1327:84:35;;2222:18939:34;;;;;1327:84:35;;2222:18939:34;;1327:84:35;;2222:18939:34;;1327:84:35;;2222:18939:34;;2810:76:35;;;;;:::i;:::-;2913:28;2222:18939:34;;;;;;;2800:87:35;;2913:28;:::i;:::-;2969;:::i;:::-;2222:18939:34;3015:15:35;3007:61;:::i;:::-;3114:4;:::i;2222:18939:34:-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;15097:70;-1:-1:-1;;;;;2222:18939:34;;15000:61;15008:22;;;15000:61;:::i;:::-;15125:4;15105:25;;15097:70;:::i;:::-;1201:6:28;2222:18939:34;15185:22;;2222:18939;;;15319:8;15288:10;;15319:8;:::i;2222:18939::-;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2222:18939:34;;;;;;-1:-1:-1;2222:18939:34;;;;;;-1:-1:-1;2222:18939:34;;;;;;;;;;;;;;-1:-1:-1;;2222:18939:34;;;;;;-1:-1:-1;2222:18939:34;;;;3134:12:33;2222:18939:34;;-1:-1:-1;;;;;2222:18939:34;;;;;;;3192:10:33;;;:27;2222:18939:34;;3357:30:33;3317:14;3397:21;3317:14;3397:34;3317:14;;;;2222:18939:34;;16329:5;2222:18939;;;;;;;;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16459:6;2222:18939;;;;;;;;16459:6;-1:-1:-1;2222:18939:34;;;;;-1:-1:-1;2222:18939:34;:::o;:::-;;:::i;:::-;;;;;;-1:-1:-1;;2222:18939:34;;;;;;1005:21:28;2222:18939:34;1005:21:28;;;;;;2222:18939:34;1005:21:28;;:::i;:::-;2222:18939:34;;;;;;;-1:-1:-1;;;;;1005:21:28;;;;;2222:18939:34;;1005:21:28;;2222:18939:34;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;-1:-1:-1;1835:16:0;;;;;;2222:18939:34;1853:3:0;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2222:18939:34;;;;;;;;;;;:::i;:::-;1911:36:0;1919:4;;1911:36;;;;:::i;:::-;1966:8;;:24;;;1853:3;1962:94;;1853:3;;;;:::i;:::-;1820:13;;1962:94;2018:21;2011:29;2018:21;;;;:::i;:::-;2222:18939:34;;-1:-1:-1;;;2011:29:0;;2222:18939:34;;;2011:29:0;;;:::i;:::-;;;;1966:24;;;;;2222:18939:34;;;;;;-1:-1:-1;;2222:18939:34;;;;2342:4:35;2222:18939:34;;;;;:::i;:::-;;;;;;:::i;:::-;;;;2224:61:35;2222:18939:34;;;;;;;:::i;:::-;1908:72:35;1916:15;;:27;;1908:72;:::i;:::-;2186:28;2076:16;;-1:-1:-1;;;;;2222:18939:34;3886:7:35;2222:18939:34;3886:7:35;2222:18939:34;;;3886:7:35;2222:18939:34;;;;;1050:1:15;2222:18939:34;;;;3766:203:35;2076:16;2222:18939:34;;;;2022:81:35;;2222:18939:34;1162:97:35;2222:18939:34;;-1:-1:-1;;;;;2222:18939:34;;;;1162:97:35;;2222:18939:34;1162:97:35;;2222:18939:34;;;;;1162:97:35;;2222:18939:34;1162:97:35;2222:18939:34;1162:97:35;;2222:18939:34;;1162:97:35;;2222:18939:34;;1162:97:35;;2222:18939:34;;2022:81:35;;;;;:::i;:::-;2130:28;2222:18939:34;;;;;;;2012:92:35;;2130:28;:::i;2224:61::-;2342:4;:::i;2222:18939:34:-;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;12470:7;2222:18939;;;;;;:::i;:::-;-1:-1:-1;;;;2222:18939:34;-1:-1:-1;;;;;2222:18939:34;;;;;;;1457:37:33;2222:18939:34;;;1483:10:33;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;1457:37:33;12959:17:34;;2222:18939;;;;1457:42:33;2222:18939:34;;;;;;1457:42:33;;:::i;:::-;12470:7:34;:::i;2222:18939::-;;;;;;-1:-1:-1;;2222:18939:34;;;;;;460:77:30;2222:18939:34;;;;;:::i;:::-;-1:-1:-1;;;;;2222:18939:34;;;;;;:::i;:::-;;-1:-1:-1;2222:18939:34;460:77:30;2222:18939:34;;;-1:-1:-1;2222:18939:34;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;460:77:30;2222:18939:34;;;;;;;;;;;;;;;;-1:-1:-1;;2222:18939:34;;;;;1201:6:28;2222:18939:34;;;;;;;;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;-1:-1:-1;;;;;3264:45:34;2222:18939;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3141:5:30;;;;;;;:::i;:::-;3188;;;;;;:::i;:::-;230:63:11;;3205:302:30;;2222:18939:34;3205:302:30;3141:5;-1:-1:-1;;;;;3265:78:30;2222:18939:34;3265:78:30;2222:18939:34;;;;;;;;;;;;3265:78:30;;;;3309:10;2222:18939:34;3265:78:30;;;:::i;2222:18939:34:-;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;-1:-1:-1;;;;;3315:46:34;2222:18939;;;;;;;;;;;;;;;;;-1:-1:-1;;2222:18939:34;;;;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;-1:-1:-1;;2222:18939:34;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;2222:18939:34;;;;:::o;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;603:496:0:-;838:2;2222:18939:34;;817:23:0;813:67;;893:107;1017:33;893:107;;1017:33;893:107;;2222:18939:34;1017:33:0;;;;;;:::i;813:67::-;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;842:38:0;:::o;2222:18939:34:-;;;;;;;;;;3011:490:28;;;;2222:18939:34;;;:::i;:::-;3274:15:28;3261:28;;:61;;;;;;;3011:490;3261:95;;;;3011:490;2222:18939:34;;;1445:50:28;:14;:41;:14;:31;:14;;;;:::i;:50::-;2222:18939:34;1586:12:28;;;1582:1417;;3011:490;3423:71;;;;;3011:490;:::o;1582:1417::-;1693:12;1685:87;1693:12;;;;;;;:44;;;;;1582:1417;1685:87;;:::i;:::-;2222:18939:34;;;:::i;:::-;1811:29:28;;:170;;;;;1582:1417;1786:256;;;:::i;:::-;2222:18939:34;;;:::i;:::-;2411:62:28;;;1582:1417;2410:96;;;;1582:1417;2402:130;;;:::i;:::-;2917:71;-1:-1:-1;;;;;2580:6:28;2222:18939:34;;2607:65:28;2222:18939:34;;:::i;:::-;2619:52:28;;;;:::i;:::-;-1:-1:-1;;;;;2222:18939:34;;2619:52:28;;;2222:18939:34;-1:-1:-1;;;;;2222:18939:34;;2619:52:28;;;2222:18939:34;2619:52:28;;;;2222:18939:34;2607:65:28;:::i;:::-;2686:14;:50;:14;:41;:14;:31;:14;;;;:::i;:50::-;2222:18939:34;;2882:16:28;2619:52;2222:18939:34;2882:16:28;;;2222:18939:34;;;;;;;;;;;;;2882:16:28;;;;2222:18939:34;;;:::i;:::-;2619:52:28;2222:18939:34;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;;;;;;2917:71:28;1582:1417;;;;;;;2410:96;-1:-1:-1;230:63:11;;310:8;;2410:96:28;;2411:62;2222:18939:34;-1:-1:-1;;;;;2222:18939:34;;2444:29:28;2411:62;;1811:170;-1:-1:-1;2222:18939:34;;-1:-1:-1;;;1878:20:28;;;;-1:-1:-1;;;;;2222:18939:34;;;;;1878:20:28;2222:18939:34;1878:20:28;2222:18939:34;;1878:20:28;;;;;;;-1:-1:-1;1878:20:28;;;1811:170;2222:18939:34;;;;:::i;:::-;;;;:::i;:::-;1865:33:28;;:82;;;;1811:170;1865:115;;;;1811:170;-1:-1:-1;1811:170:28;-1:-1:-1;1811:170:28;;1865:115;2222:18939:34;;-1:-1:-1;;;1962:18:28;;2222:18939:34;-1:-1:-1;2222:18939:34;;;;1878:20:28;;2222:18939:34;;1962:18:28;;;;;;;1786:256;1962:18;-1:-1:-1;1962:18:28;;;1865:115;1951:29;;;;1865:115;;;1962:18;;;;;;-1:-1:-1;1962:18:28;;;;;;:::i;:::-;;;;;1865:82;2222:18939:34;;-1:-1:-1;;;1921:26:28;;2222:18939:34;;-1:-1:-1;2222:18939:34;1921:26:28;2222:18939:34;1878:20:28;2222:18939:34;;1921:26:28;;;;;;;;-1:-1:-1;1921:26:28;;;1865:82;2222:18939:34;;;;;1902:45:28;1865:82;;;;1921:26;;;;;;;;;;;;;;:::i;:::-;;;;1878:20;;;;;;;;;;;;;;:::i;:::-;;;;1693:44;2222:18939:34;;;;;:::i;:::-;1693:44:28;;;2222:18939:34;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;3261:95:28;2222:18939:34;;;;:::i;:::-;3339:17:28;3326:30;;3261:95;;:61;2222:18939:34;;;;:::i;:::-;3306:16:28;3293:29;;3261:61;;2222:18939:34;;;;:::o;:::-;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;2580:6:28;2222:18939:34;;;;;;;;;;;;2580:6:28;2222:18939:34;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;-1:-1:-1;;;;;2222:18939:34;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;1227:1778:28;4242:16:33;2222:18939:34;;;;;;;;;;;1227:1778:28;1586:12;;1582:1417;;1227:1778;;:::o;1582:1417::-;1693:12;;;;;:44;;;;1582:1417;1685:87;;;:::i;:::-;2580:6;2222:18939:34;;2607:65:28;2222:18939:34;;:::i;:::-;;;;2619:52:28;2222:18939:34;2619:52:28;;2222:18939:34;2619:52:28;2222:18939:34;2619:52:28;;2222:18939:34;2619:52:28;;;;2222:18939:34;2607:65:28;:::i;:::-;4242:16:33;2222:18939:34;;1445:3:28;2222:18939:34;;2686:14:28;:50;:14;:41;:31;2222:18939:34;2686:31:28;2222:18939:34;2686:50:28;2222:18939:34;;2882:16:28;2222:18939:34;;2882:16:28;;;2222:18939:34;;;;;;;;;;;;;2882:16:28;;;;2222:18939:34;2917:71:28;2222:18939:34;;2917:71:28;;;;2222:18939:34;;;;;;;4242:16:33;2222:18939:34;;;;;2917:71:28;;;;1227:1778::o;1693:44::-;-1:-1:-1;1722:15:28;1693:44;;1227:1778;20377:17:34;-1:-1:-1;2222:18939:34;1445:3:28;2222:18939:34;;1227:1778:28;;;1445:50;1227:1778;1445:41;1227:1778;1445:31;1227:1778;2222:18939:34;1445:31:28;2222:18939:34;1445:50:28;2222:18939:34;1586:12:28;;;1582:1417;;1227:1778;;;:::o;1582:1417::-;1693:12;;;;;;:44;;;;1582:1417;1685:87;;;:::i;:::-;2222:18939:34;;;-1:-1:-1;;;1878:20:28;;-1:-1:-1;;;;;2222:18939:34;;1878:20:28;;2222:18939:34;;;;1878:20:28;2222:18939:34;1878:20:28;2222:18939:34;;1878:20:28;;;;;;;1811:29;1878:20;;;1582:1417;2222:18939:34;;;;:::i;:::-;20377:17;1865:33:28;:82;;;;1582:1417;1865:115;;;1582:1417;1786:256;;2917:71;;1786:256;2607:65;1786:256;;;20377:17:34;1786:256:28;;:::i;:::-;2402:130;230:63:11;;310:8;;2402:130:28;:::i;:::-;2580:6;2222:18939:34;;;;2619:52:28;2222:18939:34;;;:::i;:::-;20377:17;2222:18939;;2619:52:28;;2222:18939:34;2619:52:28;-1:-1:-1;;;;;2222:18939:34;;2619:52:28;;;2222:18939:34;2619:52:28;;;;2222:18939:34;2607:65:28;:::i;:::-;20377:17:34;-1:-1:-1;2222:18939:34;1445:3:28;2222:18939:34;;2686:14:28;:50;:14;:41;:14;:31;:14;2222:18939:34;2686:31:28;2222:18939:34;2686:50:28;2222:18939:34;;2882:16:28;2222:18939:34;;2882:16:28;;;2222:18939:34;;;;;;;;;;;;;2882:16:28;;;;2222:18939:34;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;1865:115:28;2222:18939:34;;-1:-1:-1;;;1962:18:28;;2222:18939:34;;;;;-1:-1:-1;2222:18939:34;;;;1878:20:28;;2222:18939:34;;1962:18:28;;;;;;2607:65;1962:18;20377:17:34;1962:18:28;1786:256;2917:71;1962:18;2917:71;1962:18;1811:29;1962:18;;;1865:115;1951:29;;;1865:115;;;;;;;;;;;1962:18;;;;;;;;;;;;;;:::i;:::-;;;;1865:82;2222:18939:34;;-1:-1:-1;;;1921:26:28;;2222:18939:34;;-1:-1:-1;1921:26:28;2222:18939:34;1878:20:28;2222:18939:34;;1921:26:28;;;;;;;;1811:29;1921:26;;;1865:82;2222:18939:34;;;;;1902:45:28;1865:82;;;1921:26;;;;;;;;;;;;;;:::i;:::-;;;;1878:20;;;;;;;;;;;;;;:::i;:::-;;;;1693:44;-1:-1:-1;1722:15:28;1693:44;;2222:18939:34;;;;:::o;:::-;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;2222:18939:34;;;;;;;;-1:-1:-1;;2222:18939:34;;;;:::o;:::-;;;;;;;;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;1992:283:30:-;;;;;-1:-1:-1;;;;;2222:18939:34;;;2097:16:30;2089:41;2097:16;;;2089:41;:::i;:::-;2222:18939:34;2111:1:30;;2222:18939:34;;;2141:9:30;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;2179:13:30;2222:18939:34;;-1:-1:-1;;;;;2222:18939:34;;;13371:9;2222:18939;;;;;;;2179:13:30;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2236:10:30;;2221:47;;2222:18939:34;;;;2221:47:30;2222:18939:34;2762:215:30;-1:-1:-1;;;;;2222:18939:34;2875:10:30;2866:19;;:32;;;;;2762:215;2866:79;;;;2762:215;2222:18939:34;;;;2762:215:30:o;2222:18939:34:-;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;2866:79:30;2222:18939:34;;3826:5:30;2222:18939:34;2902:16:30;2222:18939:34;;2902:16:30;2222:18939:34;2902:35:30;2875:10;2222:18939:34;3826:5:30;2222:18939:34;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;2902:35:30;2222:18939:34;;;;2902:43:30;2866:79;;;:32;3826:5;;-1:-1:-1;2866:32:30;;2762:215;-1:-1:-1;;;;;2222:18939:34;2875:10:30;2866:19;;:32;;;;;2762:215;2866:79;;;;;2222:18939:34;;;;2762:215:30:o;2866:32::-;;-1:-1:-1;2866:32:30;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;2281:475:30:-;;;;;;;-1:-1:-1;;;;;2222:18939:34;;;;2409:16:30;2401:41;2409:16;;;2401:41;:::i;:::-;2423:1;2507:7;;;;;;2222:18939:34;;2701:48:30;2222:18939:34;;;2701:48:30;2222:18939:34;;;;;;;2715:10:30;;2701:48;;;:::i;2516:3::-;2548:6;;2516:3;2548:6;;;;:::i;:::-;2222:18939:34;2649:26:30;:17;2584:9;;;;;:::i;:::-;2222:18939:34;;;;;2423:1:30;2222:18939:34;;2607:9:30;2222:18939:34;;;;;2423:1:30;2222:18939:34;;;2423:1:30;2222:18939:34;;2423:1:30;2222:18939:34;2607:28:30;2222:18939:34;;;2607:28:30;:::i;:::-;2222:18939:34;;2649:13:30;;-1:-1:-1;;;;;2222:18939:34;;;13371:9;2222:18939;;;;;;;2649:17:30;2222:18939:34;;;2649:26:30;:::i;:::-;2222:18939:34;;2516:3:30;:::i;:::-;2492:13;;2222:18939:34;;;;:::o;:::-;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;4022:21:39;;;;;;;:::i;:::-;2222:18939:34;;;;;;;:::i;:::-;4022:21:39;;;;;;;;;;;;;;;;-1:-1:-1;4022:21:39;;2222:18939:34;;;;4022:21:39:o;:::-;;;;;;;;;;:::o;:::-;-1:-1:-1;2222:18939:34;;;;;;4022:21:39;2222:18939:34;4022:21:39;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;4022:21:39;;;;;;;;2222:18939:34;;4022:21:39;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;12959:17:34;;;4022:21:39;;;2222:18939:34;4022:21:39;;;;;:::o;:::-;;;;-1:-1:-1;4022:21:39;;;;;2222:18939:34;;;4022:21:39;;;;;2222:18939:34;;;;;;;4022:21:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;12959:17:34;;4022:21:39;;;;;2222:18939:34;4022:21:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2222:18939:34;;;;;4022:21:39;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12959:17:34;;;4022:21:39;;;2222:18939:34;4022:21:39;;;;;;;;2222:18939:34;4022:21:39;;;;:::i;:::-;;;;;;;2222:18939:34;;;;4022:21:39;;;;;2222:18939:34;;;;4022:21:39;;2222:18939:34;;4022:21:39;;;;;2222:18939:34;4022:21:39;;;:::i;:::-;;;;-1:-1:-1;4022:21:39;;;;;2222:18939:34;;;4022:21:39;;;;;2222:18939:34;;;;;;;4022:21:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4022:21:39;;;;;2222:18939:34;4022:21:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2222:18939:34;4022:21:39;;;;2222:18939:34;4022:21:39;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;2222:18939:34;;4022:21:39;;;2222:18939:34;;4022:21:39;;2222:18939:34;4022:21:39:o;3881:930:33:-;;;;;;;;;;4197:6;2222:18939:34;;;493:21:29;;;;2222:18939:34;;4022:21:39;4602:57:33;2222:18939:34;4602:57:33;2222:18939:34;4022:21:39;2222:18939:34;;4227:66:33;;;;;;:::i;:::-;;2222:18939:34;;:::i;:::-;4022:21:39;;;;;;:::i;:::-;2222:18939:34;;4022:21:39;;;;;:::i;:::-;4509:40:33;;;2222:18939:34;;;;4509:40:33;;;4022:21:39;;;;:::i;:::-;4509:40:33;;;2222:18939:34;4485:21:33;;2222:18939:34;;4022:21:39;;4485:12:33;4022:21:39;;;;;;;4485::33;4022::39;:::i;:::-;4559:27:33;4576:10;4559:14;;2222:18939:34;;4022:21:39;;4559:5:33;4022:21:39;;;;;;;4559:27:33;4509:40;2222:18939:34;4576:10:33;;;;4602:57;;;:::i;:::-;;;;-1:-1:-1;2222:18939:34;4509:40:33;2222:18939:34;4674:62:33;4576:10;4674:62;;;;;4022:21:39;4242:16:33;4022:21:39;;;;2222:18939:34;4022:21:39;;;2222:18939:34;;;;4022:21:39;2222:18939:34;4022:21:39;4674:62:33;;;;4576:10;-1:-1:-1;4751:53:33;;;;;3881:930::o;2222:18939:34:-;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;1450:261:30;-1:-1:-1;;;;;2222:18939:34;1531:16:30;1523:41;1531:16;;;1523:41;:::i;:::-;2222:18939:34;1545:1:30;2222:18939:34;1575:9:30;2222:18939:34;;;1545:1:30;2222:18939:34;;1545:1:30;2222:18939:34;;;;1545:1:30;2222:18939:34;;;;7178:1;2222:18939;;;;;;;;1611:15:30;;2222:18939:34;;19255:11;2222:18939;;;;;;;1611:15:30;2222:18939:34;;;7178:1;2222:18939;;;;;;;1545:1:30;2222:18939:34;;;;;;;7178:1;2222:18939;;;;1651:53:30;2222:18939:34;1666:10:30;1651:53;;1450:261::o;:::-;-1:-1:-1;;;;;2222:18939:34;;1450:261:30;1523:41;1531:16;;;1523:41;:::i;:::-;2222:18939:34;1545:1:30;2222:18939:34;1575:9:30;2222:18939:34;;;1545:1:30;2222:18939:34;;1545:1:30;2222:18939:34;;;;1545:1:30;2222:18939:34;;;;;;;;;;;;;1611:15:30;;2222:18939:34;;19255:11;2222:18939;;;;;;;1611:15:30;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;1545:1:30;;1666:10;;1651:53;;2222:18939:34;;;;1651:53:30;2222:18939:34;;;;;:::o;:::-;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;1717:269:30;-1:-1:-1;;;;;2222:18939:34;1800:18:30;1792:43;1800:18;;;1792:43;:::i;:::-;2222:18939:34;1816:1:30;2222:18939:34;1846:9:30;2222:18939:34;;;1816:1:30;2222:18939:34;;1816:1:30;2222:18939:34;;;;1816:1:30;2222:18939:34;;;;;;;;;;;;;1884:15:30;;2222:18939:34;;19255:11;2222:18939;;;;;;;1884:15:30;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;1816:1:30;;1939:10;;1924:55;;2222:18939:34;;;;1924:55:30;2222:18939:34;1371:147:33;;;;;;-1:-1:-1;;;;;2222:18939:34;;;;20224:16;;2222:18939;;;;1457:18:33;2222:18939:34;;1457:37:33;2222:18939:34;;;1483:10:33;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;1457:37:33;2222:18939:34;;;;;1457:42:33;2222:18939:34;;;;;;1457:42:33;;:::i;:::-;1510:1;;4865:15:34;;;:::i;:::-;2222:18939;;4890:115;2222:18939;;;;;;;4890:115;5057:22;;;:::i;:::-;5093:10;;;;5234:20;;5217:58;5234:20;;;;2222:18939;;19255:11;2222:18939;;;;;;;5217:58;5089:417;;5535:5;;;;;:::i;:::-;2222:18939;;;5599:15;2222:18939;;;;;;:::i;:::-;5580:34;5599:15;;2222:18939;;;5869:6;2222:18939;;5599:15;2222:18939;5791:29;2222:18939;6332:24;2222:18939;;-1:-1:-1;;;;;2222:18939:34;;;;;;6332:24;:32;;;;;;2222:18939;;-1:-1:-1;;;6332:32:34;;1457:18:33;6332:32:34;;2222:18939;;;;;;;;;;6332:32;;;;;;;;;6380:83;6332:32;;;5576:746;2222:18939;;;;;1483:10:33;;6380:83:34;1483:10:33;;;6380:83:34;;2222:18939;;;;-1:-1:-1;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;6380:83;;;;1510:1:33;1371:147;:::o;6332:32:34:-;;;;;;:::i;:::-;;;;5576:746;2222:18939;;;6058:4;6025:38;;6058:4;;6113:14;;6145:6;2222:18939;6113:14;5599:15;6113:14;6105:23;2222:18939;6113:14;6332:24;6113:14;;2222:18939;-1:-1:-1;;;;;2222:18939:34;;;6021:291;6254:14;;;6246:23;2222:18939;5599:15;6254:14;;2222:18939;-1:-1:-1;;;;;2222:18939:34;;;6246:23;6271:13;;;2222:18939;6191:106;;;;;;2222:18939;;-1:-1:-1;;;6191:106:34;;-1:-1:-1;;;;;2222:18939:34;;;1457:18:33;6191:106:34;;2222:18939;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2222:18939:34;;;;;;;;;;;;;;6191:106;;;;;;6332:24;6191:106;2222:18939;6191:106;5599:15;6191:106;;;6021:291;5576:746;;5089:417;5439:56;5455:20;;;;;;;2222:18939;;19255:11;2222:18939;;;;;;;5439:56;5089:417;;;;2222:18939;;;;:::o;:::-;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;574:10:12;;;;;;;;;;;;;:::i;4164:382::-;2222:18939:34;;-1:-1:-1;;;4365:59:12;;;;;;-1:-1:-1;;;;;2222:18939:34;;;4365:59:12;;;2222:18939:34;;;;574:10:12;;;2222:18939:34;574:10:12;;;2222:18939:34;;;;4345:80:12;;;;4164:382;;4345:80;;4365:59;2222:18939:34;574:10:12;;;4365:59;;2222:18939:34;;4365:59:12;;;;;;:::i;:::-;4345:80;2222:18939:34;;4345:80:12;;;;:::i;:::-;4444:57;;;4164:382;574:10;;;;4164:382::o;574:10::-;;2222:18939:34;;;;;574:10:12;;4365:59;574:10;;;;4365:59;;574:10;;2222:18939:34;574:10:12;2222:18939:34;;;574:10:12;;4444:57;2222:18939:34;;4456:16:12;;;-1:-1:-1;4456:44:12;;;;4444:57;;;;;;4456:44;4476:24;;;4365:59;4476:24;;;;;;;;:::i;:::-;4456:44;;;;3819:140:34;3921:31;-1:-1:-1;;;;;3921:14:34;:31;3819:140;3921:14;2222:18939;;;;;;;;;;;3921:31;;;;;;;;;-1:-1:-1;3921:31:34;;;3914:38;3819:140;:::o;3921:31::-;;;;;;;;;;;;;;:::i;2222:18939::-;;;;:::o;:::-;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;7748:967;;;;;7959:15;;;:::i;:::-;2222:18939;;7984:125;2222:18939;;8011:15;2222:18939;;;;;;:::i;:::-;7992:34;:85;;;;7748:967;7984:125;;:::i;:::-;8155:69;8172:20;;2222:18939;;19255:11;2222:18939;;;;;;;8172:20;2222:18939;8194:22;;;:::i;:::-;8155:69;;;:::i;:::-;8254:5;;;;;;:::i;:::-;-1:-1:-1;;;;;8295:13:34;;;2222:18939;8295:40;;;;;;2222:18939;;-1:-1:-1;;;8295:40:34;;2222:18939;;;8295:40;2222:18939;8295:40;2222:18939;8295:40;;;;;;;;8011:15;8521:6;8295:40;8538:24;8295:40;2222:18939;8295:40;;;7748:967;8504:14;;2222:18939;8496:23;2222:18939;;;-1:-1:-1;;;;;2222:18939:34;;;8496:23;8521:6;;:::i;8538:24::-;:32;;;;;2222:18939;;-1:-1:-1;;;8538:32:34;;8295:40;8538:32;;2222:18939;;;;-1:-1:-1;;2222:18939:34;;;;;;-1:-1:-1;;8538:32:34;;;;;;;;7748:967;2222:18939;;;;;8596:10;8586:89;8596:10;;;8586:89;8596:10;;;8586:89;;2222:18939;;;;-1:-1:-1;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;8538:32;;;;;;:::i;:::-;;;;8295:40;;;;;;:::i;:::-;;;;7992:85;2222:18939;;-1:-1:-1;;;;;8063:13:34;;2222:18939;;;;;8030:47;7992:85;;;3501:340:12;2222:18939:34;;-1:-1:-1;;;3675:48:12;;;;;;-1:-1:-1;;;;;2222:18939:34;;;3675:48:12;;;2222:18939:34;;;;;;;;3655:69:12;;;;3675:48;;3655:69;;2222:18939:34;3675:48:12;2222:18939:34;;;;3675:48:12;2222:18939:34;3675:48:12;3655:69;2222:18939:34;;3655:69:12;;;;:::i;:::-;3743:57;;;3501:340;484:10;;;;3501:340::o;484:10::-;2222:18939:34;;-1:-1:-1;;;484:10:12;;3675:48;484:10;;;;;3675:48;484:10;;2222:18939:34;484:10:12;2222:18939:34;;;484:10:12;;;;3743:57;2222:18939:34;;3755:16:12;;;-1:-1:-1;3755:44:12;;;;3743:57;;;;;;3755:44;3775:24;;;3675:48;3775:24;;;;;;;;:::i;:::-;3755:44;;;;9099:608:34;;;;;9363:15;;;:::i;:::-;2222:18939;;;;;;;;;:::i;:::-;9396:35;;2222:18939;;;;9537:16;2222:18939;;:::i;:::-;9518:35;9514:111;;9642:58;;;:::i;9514:111::-;2222:18939;;;;;-1:-1:-1;;;;;2222:18939:34;;;1800:18:30;1792:43;1800:18;;;1792:43;:::i;:::-;-1:-1:-1;2222:18939:34;;;;9537:16;2222:18939;;;;;;;;;;;;;;;;;12959:17;;2222:18939;;;;;;;;;;1884:15:30;;2222:18939:34;;19255:11;2222:18939;;;;;;;1884:15:30;2222:18939:34;;;;;;;;;;10221:23;2222:18939;;;10184:1;2222:18939;;;;;;;;;;;;;;1924:55:30;1939:10;;1924:55;;10221:14:34;2222:18939;;-1:-1:-1;;;;;2222:18939:34;;;10221:23;:30;;;;;;2222:18939;;-1:-1:-1;;;10221:30:34;;-1:-1:-1;;;;;2222:18939:34;;10221:30;;;2222:18939;10184:1;2222:18939;;;;;;;;;;;10221:30;;;;;;;;;10267:51;10221:30;;;9514:111;2222:18939;;;;1939:10:30;;10267:51:34;1939:10:30;10267:51:34;;2222:18939;10184:1;2222:18939;;;;;;;;;;;;;;;;;;;;;;;;;;;;10267:51;;;;10184:1;9569:45;;;:::o;10221:30::-;;;;;;:::i;:::-;;;;2222:18939;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;10782:977;;;;;;11064:22;;;:::i;:::-;11100:10;;;;11287:20;2222:18939;11593:14;11270:57;11593:23;11287:20;;;2222:18939;;19255:11;2222:18939;;;;;;;11287:20;2222:18939;11270:57;;:::i;:::-;11096:425;;11552:5;;;;;:::i;11593:23::-;:35;;;;;2222:18939;;-1:-1:-1;;;11593:35:34;;-1:-1:-1;;;;;2222:18939:34;;11593:35;;;2222:18939;;;;;;;;-1:-1:-1;;2222:18939:34;;;;;;-1:-1:-1;;11593:35:34;;;;;;;;11096:425;2222:18939;11644:75;2222:18939;;;-1:-1:-1;;;;;2222:18939:34;;;;;11653:10;;11644:75;11653:10;;;11644:75;;2222:18939;;;;;;;;;;;;;;;;;;;;;;;;;;;;11593:35;;;;;;:::i;:::-;;;;11096:425;11469:20;;;2222:18939;11593:14;11453:57;11593:23;11469:20;;;2222:18939;;19255:11;2222:18939;;;;;;;11469:20;2222:18939;11453:57;;:::i;:::-;11096:425;;;2222:18939;;;;:::o;:::-;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;14335:243;14529:42;2222:18939;-1:-1:-1;;;;;2222:18939:34;;;;;-1:-1:-1;2222:18939:34;3114:4:35;2222:18939:34;;14469:34;2222:18939;;-1:-1:-1;2222:18939:34;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;14469:34;3114:4:35;2222:18939:34;;;;;;;;;;;3114:4:35;2222:18939:34;;;14529:42;;14335:243::o;15647:293::-;2222:18939;15880:53;15647:293;-1:-1:-1;;;;;2222:18939:34;;;;;-1:-1:-1;2222:18939:34;15809:18;2222:18939;;15809:36;2222:18939;;-1:-1:-1;2222:18939:34;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;15809:36;2222:18939;-1:-1:-1;2222:18939:34;;;;-1:-1:-1;2222:18939:34;2342:4:35;2222:18939:34;;;;;;;;;;;;;2342:4:35;2222:18939:34;;;;;15880:53;;15647:293::o;:::-;2222:18939;15647:293;15880:53;15647:293;;;;-1:-1:-1;;;;;2222:18939:34;;;;;-1:-1:-1;2222:18939:34;15809:18;2222:18939;;15809:36;2222:18939;;-1:-1:-1;2222:18939:34;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;15809:36;2222:18939;-1:-1:-1;2222:18939:34;;;15809:56;2222:18939;;-1:-1:-1;2222:18939:34;;;;;;;;;;;;;;;;15809:56;2222:18939;;;;;;;;;;;;15880:53;;15647:293::o;2222:18939::-;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;;;;;2222:18939:34;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;19917:692::-;;;;;;;;;2222:18939;;;:::i;:::-;20211:29;;;20404:4;4797:16;20404:4;;;;3433:61:28;20404:4:34;;3433:61:28;:::i;:::-;4797:16:34;:::i;20207:396::-;20506:60;;;;;;;:::i;:::-;-1:-1:-1;;;;;2222:18939:34;;;;20224:16;;2222:18939;;;;1457:18:33;2222:18939:34;;1457:37:33;2222:18939:34;;;1483:10:33;-1:-1:-1;;;;;2222:18939:34;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;1162:97:35;;;;:::o;:::-;2222:18939:34;;-1:-1:-1;;;1162:97:35;;;;;;;;;;;2222:18939:34;1162:97:35;2222:18939:34;;;1162:97:35;-1:-1:-1;;;1162:97:35;;;;;;;6696:270:17;;6927:5;6696:270;;6880:25;6696:270;6880:25;:::i;:::-;6927:5;;;2222:18939:34;;;:::i;:::-;638:29:17;;;683:7;:::o;634:441::-;2222:18939:34;;;:::i;:::-;743:29:17;734:38;;743:29;;2222:18939:34;;-1:-1:-1;;;788:34:17;;2222:18939:34;788:34:17;;;2222:18939:34;;;;;;;;;;;;;2011:29:0;730:345:17;2222:18939:34;;;:::i;:::-;852:35:17;843:44;;852:35;;2222:18939:34;;-1:-1:-1;;;903:41:17;;2222:18939:34;903:41:17;;;2222:18939:34;;;;;;;;;;;;;2011:29:0;839:236:17;2222:18939:34;;974:30:17;2222:18939:34;;:::i;:::-;965:39:17;961:114;;570:511::o;961:114::-;2222:18939:34;;-1:-1:-1;;;1020:44:17;;2222:18939:34;1020:44:17;;;2222:18939:34;;;;;;;;;;;-1:-1:-1;;;2222:18939:34;;;;;;2011:29:0;5069:1494:17;;;;6119:66;6106:79;;6102:161;;2222:18939:34;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6374:24:17;;;;;;;;;;;;;;-1:-1:-1;;;;;2222:18939:34;;6412:20:17;6408:101;;6519:37;5069:1494;:::o;6408:101::-;6448:50;6374:24;6448:50;:::o;6102:161::-;6201:51;;;;6217:1;6201:51;6221:30;6201:51;:::o;4348:165:18:-;4473:20;;:::i;:::-;2222:18939:34;;;8470:57:17;;;;2222:18939:34;;;;;;;;;;;;;;;8470:57:17;;;;;:::i;:::-;2222:18939:34;8460:68:17;;4348:165:18;:::o;3152:308::-;-1:-1:-1;;;;;3245:12:18;2222:18939:34;3236:4:18;3228:29;:66;;;3152:308;3224:230;;;3317:24;3310:31;:::o;3224:230::-;2222:18939:34;;3642:73:18;;;3401:10;;2222:18939:34;;3413:12:18;2222:18939:34;;;;3427:15:18;2222:18939:34;;;;3686:13:18;2222:18939:34;;;;3236:4:18;2222:18939:34;;;;;3642:73:18;;;;;:::i;3228:66::-;3278:16;;3261:13;:33;3228:66;;2222:18939:34;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;801:874:36;;;1327:13;801:874;1327:13;:::i;:::-;2222:18939:34;1366:3:36;2222:18939:34;;;;;;;1458:37:36;1459:21;;;;:::i;801:874::-;;;;1327:13;801:874;1327:13;:::i;:::-;2222:18939:34;1366:3:36;2222:18939:34;;;;;;;1459:21:36;1591:19;1458:37;1459:21;;1590:36;1459:21;;;:::i;1458:37::-;1591:19;;;:::i;1590:36::-;:45;1575:94;;801:874::o;1575:94::-;1651:7;;;;:::i;1765:875::-;;2291:13;1765:875;2291:13;:::i;:::-;2222:18939:34;2330:3:36;2222:18939:34;;;;;;;2423:36:36;2424:19;;;;:::i;1765:875::-;;;;2291:13;1765:875;2291:13;:::i;:::-;2330:3;2222:18939:34;;;;;;;2424:19:36;2555:21;2423:36;2424:19;;2554:37;2424:19;;;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"4380000","executionCost":"infinite","totalCost":"infinite"},"external":{"DOMAIN_SEPARATOR()":"infinite","amountOf(address,uint256)":"infinite","assetCount()":"3296","assetTotals(uint256)":"infinite","assets(uint256)":"11863","balanceOf(address,uint256)":"2498","balanceOfBatch(address[],uint256[])":"infinite","batch(bytes[],bool)":"infinite","batchBurn(uint256,address[],uint256[])":"infinite","batchMint(uint256,address[],uint256[])":"infinite","batchTransfer(address,address,uint256[],uint256[])":"infinite","burn(uint256,address,uint256)":"61381","claimOwnership(uint256)":"56028","createToken(string,string,uint8,string)":"infinite","decimals(uint256)":"infinite","deposit(uint8,address,address,uint256,address,address,uint256,uint256)":"infinite","depositAsset(uint256,address,address,uint256,uint256)":"infinite","depositETH(address,address,uint256)":"infinite","depositETHAsset(uint256,address,uint256)":"infinite","depositNFTAsset(uint256,address,address)":"infinite","ids(uint8,address,address,uint256)":"infinite","isApprovedForAll(address,address)":"infinite","isApprovedForAsset(address,address,uint256)":"infinite","mint(uint256,address,uint256)":"54345","name(uint256)":"infinite","nativeTokens(uint256)":"infinite","nonces(address)":"2982","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","onERC721Received(address,address,uint256,bytes)":"infinite","owner(uint256)":"3050","pendingOwner(uint256)":"2588","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","permitAll(address,address,uint256,uint8,bytes32,bytes32)":"infinite","permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","registerAsset(uint8,address,address,uint256)":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"27319","setApprovalForAsset(address,uint256,bool)":"29964","supportsInterface(bytes4)":"424","symbol(uint256)":"infinite","toAmount(uint256,uint256,bool)":"infinite","toShare(uint256,uint256,bool)":"infinite","totalSupply(uint256)":"3208","transfer(address,address,uint256,uint256)":"infinite","transferMultiple(address,address[],uint256,uint256[])":"infinite","transferOwnership(uint256,address,bool,bool)":"infinite","uri(uint256)":"infinite","uriBuilder()":"infinite","withdraw(uint256,address,address,uint256,uint256)":"infinite","wrappedNative()":"infinite"},"internal":{"_setApprovalForAll(address,address,bool)":"infinite","_setApprovalForAsset(address,address,uint256,bool)":"infinite","_tokenBalanceOf(struct Asset storage pointer)":"infinite","_withdrawFungible(struct Asset storage pointer,uint256,address,address,uint256,uint256)":"infinite","_withdrawNFT(struct Asset storage pointer,uint256,address,address)":"infinite"}},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","amountOf(address,uint256)":"54317d16","assetCount()":"eafe7a74","assetTotals(uint256)":"4956d158","assets(uint256)":"cf35bdd0","balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","batch(bytes[],bool)":"d2423b51","batchBurn(uint256,address[],uint256[])":"01e1e3b1","batchMint(uint256,address[],uint256[])":"1dbeeb4e","batchTransfer(address,address,uint256[],uint256[])":"daf210b1","burn(uint256,address,uint256)":"9eea5f66","claimOwnership(uint256)":"ce7f2714","createToken(string,string,uint8,string)":"2482ee27","decimals(uint256)":"3f47e662","deposit(uint8,address,address,uint256,address,address,uint256,uint256)":"6cd57031","depositAsset(uint256,address,address,uint256,uint256)":"9a9af97a","depositETH(address,address,uint256)":"a3823ac0","depositETHAsset(uint256,address,uint256)":"70400fbe","depositNFTAsset(uint256,address,address)":"75338079","ids(uint8,address,address,uint256)":"2d4e1d52","isApprovedForAll(address,address)":"e985e9c5","isApprovedForAsset(address,address,uint256)":"a75fcb1e","mint(uint256,address,uint256)":"836a1040","name(uint256)":"00ad800c","nativeTokens(uint256)":"1f0ee4c3","nonces(address)":"7ecebe00","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","onERC721Received(address,address,uint256,bytes)":"150b7a02","owner(uint256)":"a123c33e","pendingOwner(uint256)":"2b800e3b","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","permitAll(address,address,uint256,uint8,bytes32,bytes32)":"aba07847","permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)":"7c516e94","registerAsset(uint8,address,address,uint256)":"b061db94","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","setApprovalForAsset(address,uint256,bool)":"b8489fb5","supportsInterface(bytes4)":"01ffc9a7","symbol(uint256)":"4e41a1fb","toAmount(uint256,uint256,bool)":"442c1599","toShare(uint256,uint256,bool)":"8eb22cdd","totalSupply(uint256)":"bd85b039","transfer(address,address,uint256,uint256)":"0411b252","transferMultiple(address,address[],uint256,uint256[])":"215b595a","transferOwnership(uint256,address,bool,bool)":"5ba4d64e","uri(uint256)":"0e89341c","uriBuilder()":"fd330d43","withdraw(uint256,address,address,uint256,uint256)":"8d2e63b8","wrappedNative()":"eb6d3a11"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWrappedNative\",\"name\":\"wrappedNative_\",\"type\":\"address\"},{\"internalType\":\"contract YieldBoxURIBuilder\",\"name\":\"uriBuilder_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"AssetRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isNFT\",\"type\":\"bool\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"amountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"assetTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"froms\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"assetIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares_\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"depositAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositETHAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositNFTAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TokenType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isApprovedForAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nativeTokens\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"registerAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"roundUp\",\"type\":\"bool\"}],\"name\":\"toAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"roundUp\",\"type\":\"bool\"}],\"name\":\"toShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriBuilder\",\"outputs\":[{\"internalType\":\"contract YieldBoxURIBuilder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNative\",\"outputs\":[{\"internalType\":\"contract IWrappedNative\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BoringCrypto, Keno\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"amountOf(address,uint256)\":{\"details\":\"Helper function represent the balance in `token` amount for a `user` for an `asset`.\",\"params\":{\"assetId\":\"The id of the asset.\",\"user\":\"The `user` to get the amount for.\"}},\"assetTotals(uint256)\":{\"params\":{\"assetId\":\"The regierestered asset id\"},\"returns\":{\"totalAmount\":\"The total amount for asset\",\"totalShare\":\"The total amount for asset represented in shares\"}},\"batch(bytes[],bool)\":{\"params\":{\"calls\":\"An array of inputs for each call.\",\"revertOnFail\":\"If True then reverts after a failed call and stops doing further calls.\"}},\"batchBurn(uint256,address[],uint256[])\":{\"params\":{\"amounts\":\"The amounts of tokens to burn.\",\"froms\":\"The accounts to burn tokens from.\",\"tokenId\":\"The token to be burned.\"}},\"batchMint(uint256,address[],uint256[])\":{\"details\":\"If the tos array is longer than the amounts array there will be an out of bounds error. If the amounts array is longer, the extra amounts are simply ignored.For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.\",\"params\":{\"amounts\":\"The amounts of tokens to mint.\",\"tokenId\":\"The token to be minted.\",\"tos\":\"The accounts to transfer the minted tokens to.\"}},\"burn(uint256,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to burn.\",\"tokenId\":\"The token to be burned.\"}},\"claimOwnership(uint256)\":{\"params\":{\"tokenId\":\"The `tokenId` of the token that ownership is claimed for.\"}},\"createToken(string,string,uint8,string)\":{\"params\":{\"decimals\":\"The number of decimals of the token (this is just for display purposes). Should be set to 18 in normal cases.\",\"name\":\"The name of the token.\",\"symbol\":\"The symbol of the token.\"}},\"deposit(uint8,address,address,uint256,address,address,uint256,uint256)\":{\"params\":{\"amount\":\"amount to deposit.\",\"contractAddress\":\"Token address.\",\"from\":\"which user to pull the tokens.\",\"share\":\"amount to deposit represented in shares.\",\"strategy\":\"Asset's strategy address.\",\"to\":\"which account to push the tokens.\",\"tokenId\":\"Registration token id.\",\"tokenType\":\"Registration token type.\"},\"returns\":{\"amountOut\":\"The amount deposited.\",\"shareOut\":\"The deposited amount repesented in shares.\"}},\"depositAsset(uint256,address,address,uint256,uint256)\":{\"params\":{\"amount\":\"Token amount in native representation to deposit.\",\"assetId\":\"The id of the asset.\",\"from\":\"which account to pull the tokens.\",\"share\":\"Token amount represented in shares to deposit. Takes precedence over `amount`.\",\"to\":\"which account to push the tokens.\"},\"returns\":{\"amountOut\":\"The amount deposited.\",\"shareOut\":\"The deposited amount repesented in shares.\"}},\"depositETH(address,address,uint256)\":{\"params\":{\"amount\":\"amount to deposit.\",\"strategy\":\"Asset's strategy address.\"},\"returns\":{\"amountOut\":\"The amount deposited.\",\"shareOut\":\"The deposited amount repesented in shares.\"}},\"depositETHAsset(uint256,address,uint256)\":{\"params\":{\"amount\":\"ETH amount to deposit.\",\"assetId\":\"The id of the asset.\",\"to\":\"which account to push the tokens.\"},\"returns\":{\"amountOut\":\"The amount deposited.\",\"shareOut\":\"The deposited amount repesented in shares.\"}},\"depositNFTAsset(uint256,address,address)\":{\"params\":{\"assetId\":\"The id of the asset.\",\"from\":\"which account to pull the tokens.\",\"to\":\"which account to push the tokens.\"},\"returns\":{\"amountOut\":\"The amount deposited.\",\"shareOut\":\"The deposited amount repesented in shares.\"}},\"mint(uint256,address,uint256)\":{\"details\":\"For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.\",\"params\":{\"amount\":\"The amount of tokens to mint.\",\"to\":\"The account to transfer the minted tokens to.\",\"tokenId\":\"The token to be minted.\"}},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"True/False\",\"operator\":\"The address approved to perform actions on your behalf\"}},\"setApprovalForAsset(address,uint256,bool)\":{\"params\":{\"approved\":\"True/False\",\"assetId\":\"The asset id  to update approval status for\",\"operator\":\"The address approved to perform actions on your behalf\"}},\"toAmount(uint256,uint256,bool)\":{\"details\":\"Helper function represent shares back into the `token` amount.\",\"params\":{\"assetId\":\"The id of the asset.\",\"roundUp\":\"If the result should be rounded up.\",\"share\":\"The amount of shares.\"},\"returns\":{\"amount\":\"The share amount back into native representation.\"}},\"toShare(uint256,uint256,bool)\":{\"details\":\"Helper function to represent an `amount` of `token` in shares.\",\"params\":{\"amount\":\"The `token` amount.\",\"assetId\":\"The id of the asset.\",\"roundUp\":\"If the result `share` should be rounded up.\"},\"returns\":{\"share\":\"The token amount represented in shares.\"}},\"transfer(address,address,uint256,uint256)\":{\"params\":{\"assetId\":\"The id of the asset.\",\"from\":\"which user to pull the tokens.\",\"share\":\"The amount of `token` in shares.\",\"to\":\"which user to push the tokens.\"}},\"transferMultiple(address,address[],uint256,uint256[])\":{\"params\":{\"assetId\":\"The id of the asset.\",\"from\":\"which user to pull the tokens.\",\"shares\":\"The amount of `token` in shares for each receiver in `tos`.\",\"tos\":\"The receivers of the tokens.\"}},\"transferOwnership(uint256,address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\",\"tokenId\":\"The `tokenId` of the token that ownership whose ownership will be transferred/renounced.\"}},\"withdraw(uint256,address,address,uint256,uint256)\":{\"params\":{\"amount\":\"of tokens. Either one of `amount` or `share` needs to be supplied.\",\"assetId\":\"The id of the asset.\",\"from\":\"which user to pull the tokens.\",\"share\":\"Like above, but `share` takes precedence over `amount`.\",\"to\":\"which user to push the tokens.\"}}},\"title\":\"YieldBox\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assetTotals(uint256)\":{\"notice\":\"Helper function to return totals for an asset\"},\"batch(bytes[],bool)\":{\"notice\":\"Allows batched call to self (this contract).\"},\"batchBurn(uint256,address[],uint256[])\":{\"notice\":\"Burns tokens. This is only useful to be used by an operator.\"},\"batchMint(uint256,address[],uint256[])\":{\"notice\":\"The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\"},\"burn(uint256,address,uint256)\":{\"notice\":\"Burns tokens. Only the holder of tokens can burn them or an approved operator.\"},\"claimOwnership(uint256)\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"createToken(string,string,uint8,string)\":{\"notice\":\"Create a new native token. This will be an ERC1155 token. If later it's needed as an ERC20 token it can be wrapped into an ERC20 token. Native support for ERC1155 tokens is growing though.\"},\"deposit(uint8,address,address,uint256,address,address,uint256,uint256)\":{\"notice\":\"Helper function to register & deposit an asset\"},\"depositAsset(uint256,address,address,uint256,uint256)\":{\"notice\":\"Deposit an amount of `token` represented in either `amount` or `share`.\"},\"depositETH(address,address,uint256)\":{\"notice\":\"Helper function to register & deposit ETH\"},\"depositETHAsset(uint256,address,uint256)\":{\"notice\":\"Deposit ETH asset\"},\"depositNFTAsset(uint256,address,address)\":{\"notice\":\"Deposit an NFT asset\"},\"mint(uint256,address,uint256)\":{\"notice\":\"The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\"},\"permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Update approval status for an operator\"},\"setApprovalForAsset(address,uint256,bool)\":{\"notice\":\"Update approval status for an operator and for a specific asset\"},\"transfer(address,address,uint256,uint256)\":{\"notice\":\"Transfer shares from a user account to another one.\"},\"transferMultiple(address,address[],uint256,uint256[])\":{\"notice\":\"Transfer shares from a user account to multiple other ones.\"},\"transferOwnership(uint256,address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"},\"withdraw(uint256,address,address,uint256,uint256)\":{\"notice\":\"Withdraws an amount of `token` from a user account.\"}},\"notice\":\"The YieldBox is a vault for tokens. The stored tokens can assigned to strategies. Yield from this will go to the token depositors. Any funds transfered directly onto the YieldBox will be lost, use the deposit function instead.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol\":\"YieldBox\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\n// WARNING!!!\\r\\n// Combining BoringBatchable with msg.value can cause double spending issues\\r\\n// https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/\\r\\n\\r\\nimport \\\"./interfaces/IERC20.sol\\\";\\r\\n\\r\\ncontract BaseBoringBatchable {\\r\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\r\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\r\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n\\r\\n        assembly {\\r\\n            // Slice the sighash.\\r\\n            _returnData := add(_returnData, 0x04)\\r\\n        }\\r\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\r\\n    }\\r\\n\\r\\n    /// @notice Allows batched call to self (this contract).\\r\\n    /// @param calls An array of inputs for each call.\\r\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\r\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\r\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\r\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\r\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\r\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable {\\r\\n        for (uint256 i = 0; i < calls.length; i++) {\\r\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\r\\n            if (!success && revertOnFail) {\\r\\n                revert(_getRevertMsg(result));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BoringBatchable is BaseBoringBatchable {\\r\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\r\\n    /// Lookup `IERC20.permit`.\\r\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\r\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\r\\n    function permitToken(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public {\\r\\n        token.permit(from, to, amount, deadline, v, r, s);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0e12064dbcb5659e5eaaef1baf8e7d611429d8699da9805eaa908644b6605151\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/BoringFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./interfaces/IMasterContract.sol\\\";\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\ncontract BoringFactory {\\r\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\r\\n\\r\\n    /// @notice Mapping from clone contracts to their masterContract.\\r\\n    mapping(address => address) public masterContractOf;\\r\\n\\r\\n    /// @notice Mapping from masterContract to an array of all clones\\r\\n    /// On mainnet events can be used to get this list, but events aren't always easy to retrieve and\\r\\n    /// barely work on sidechains. While this adds gas, it makes enumerating all clones much easier.\\r\\n    mapping(address => address[]) public clonesOf;\\r\\n\\r\\n    /// @notice Returns the count of clones that exists for a specific masterContract\\r\\n    /// @param masterContract The address of the master contract.\\r\\n    /// @return cloneCount total number of clones for the masterContract.\\r\\n    function clonesOfCount(address masterContract) public view returns (uint256 cloneCount) {\\r\\n        cloneCount = clonesOf[masterContract].length;\\r\\n    }\\r\\n\\r\\n    /// @notice Deploys a given master Contract as a clone.\\r\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\r\\n    /// Emits `LogDeploy`.\\r\\n    /// @param masterContract The address of the contract to clone.\\r\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\r\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\r\\n    /// @return cloneAddress Address of the created clone contract.\\r\\n    function deploy(\\r\\n        address masterContract,\\r\\n        bytes calldata data,\\r\\n        bool useCreate2\\r\\n    ) public payable returns (address cloneAddress) {\\r\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\r\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\r\\n\\r\\n        if (useCreate2) {\\r\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\r\\n            bytes32 salt = keccak256(data);\\r\\n\\r\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\r\\n            assembly {\\r\\n                let clone := mload(0x40)\\r\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\r\\n                mstore(add(clone, 0x14), targetBytes)\\r\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\r\\n                cloneAddress := create2(0, clone, 0x37, salt)\\r\\n            }\\r\\n        } else {\\r\\n            assembly {\\r\\n                let clone := mload(0x40)\\r\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\r\\n                mstore(add(clone, 0x14), targetBytes)\\r\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\r\\n                cloneAddress := create(0, clone, 0x37)\\r\\n            }\\r\\n        }\\r\\n        masterContractOf[cloneAddress] = masterContract;\\r\\n        clonesOf[masterContract].push(cloneAddress);\\r\\n\\r\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\r\\n\\r\\n        emit LogDeploy(masterContract, data, cloneAddress);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x09b8928fe64262a9cf934b360193a581cc6709d8642fd1b9f19d550991c475d7\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/Domain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Based on code and smartness by Ross Campbell and Keno\\r\\n// Uses immutable to store the domain separator to reduce gas usage\\r\\n// If the chain id changes due to a fork, the forked chain will calculate on the fly.\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\ncontract Domain {\\r\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\r\\n    // See https://eips.ethereum.org/EIPS/eip-191\\r\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\r\\n\\r\\n    // solhint-disable var-name-mixedcase\\r\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\r\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\r\\n\\r\\n    /// @dev Calculate the DOMAIN_SEPARATOR\\r\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\r\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, chainId, address(this)));\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\r\\n    }\\r\\n\\r\\n    /// @dev Return the DOMAIN_SEPARATOR\\r\\n    // It's named internal to allow making it public from the contract that uses it by creating a simple view function\\r\\n    // with the desired public name, such as DOMAIN_SEPARATOR or domainSeparator.\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function _domainSeparator() internal view returns (bytes32) {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\r\\n    }\\r\\n\\r\\n    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\\r\\n        digest = keccak256(abi.encodePacked(EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA, _domainSeparator(), dataHash));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x26e7d78c93c138e022d6fce9bc32d17fa3a0df1603927ddba65b9e81acbd1820\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\ninterface IERC1155 is IERC165 {\\r\\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\\r\\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n    event URI(string _value, uint256 indexed _id);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n\\r\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\r\\n\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x39f388312b08552eb8a5f09cbe6b0c6ea511a6a47c72985e1ab53b777b911771\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC1155TokenReceiver {\\r\\n    function onERC1155Received(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0x5a73c68c2975f8908b96e76fe916a1a39b86fd7acb2d1e463e85e7841225c0cf\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC165 {\\r\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x2929dd1b0483b96a0b59b4b945684705adf252697b404fe7f126816cb78d684c\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc7605391c07120ced6c1cca9d01abf39add948385828037a537b2d6b4c52f4a3\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\\r\\ninterface IERC721 /* is ERC165 */ {\\r\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\r\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\r\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\r\\n    ///  may be created and assigned without emitting Transfer. At the time of\\r\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when the approved address for an NFT is changed or\\r\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\r\\n    ///  When a Transfer event emits, this also indicates that the approved\\r\\n    ///  address for that NFT (if any) is reset to none.\\r\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\r\\n    ///  The operator can manage all NFTs of the owner.\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n    /// @notice Count all NFTs assigned to an owner\\r\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\r\\n    ///  function throws for queries about the zero address.\\r\\n    /// @param _owner An address for whom to query the balance\\r\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\r\\n    function balanceOf(address _owner) external view returns (uint256);\\r\\n\\r\\n    /// @notice Find the owner of an NFT\\r\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\r\\n    ///  about them do throw.\\r\\n    /// @param _tokenId The identifier for an NFT\\r\\n    /// @return The address of the owner of the NFT\\r\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\r\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\r\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\r\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\r\\n    ///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\\r\\n\\r\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\r\\n    /// @dev This works identically to the other function with an extra data parameter,\\r\\n    ///  except this function just sets data to \\\"\\\".\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\r\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\r\\n    ///  THEY MAY BE PERMANENTLY LOST\\r\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\r\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\r\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\r\\n    ///  `_tokenId` is not a valid NFT.\\r\\n    /// @param _from The current owner of the NFT\\r\\n    /// @param _to The new owner\\r\\n    /// @param _tokenId The NFT to transfer\\r\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Change or reaffirm the approved address for an NFT\\r\\n    /// @dev The zero address indicates there is no approved address.\\r\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\r\\n    ///  operator of the current owner.\\r\\n    /// @param _approved The new approved NFT controller\\r\\n    /// @param _tokenId The NFT to approve\\r\\n    function approve(address _approved, uint256 _tokenId) external payable;\\r\\n\\r\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\r\\n    ///  all of `msg.sender`'s assets\\r\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\r\\n    ///  multiple operators per owner.\\r\\n    /// @param _operator Address to add to the set of authorized operators\\r\\n    /// @param _approved True if the operator is approved, false to revoke approval\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    /// @notice Get the approved address for a single NFT\\r\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\r\\n    /// @param _tokenId The NFT to find the approved address for\\r\\n    /// @return The approved address for this NFT, or the zero address if there is none\\r\\n    function getApproved(uint256 _tokenId) external view returns (address);\\r\\n\\r\\n    /// @notice Query if an address is an authorized operator for another address\\r\\n    /// @param _owner The address that owns the NFTs\\r\\n    /// @param _operator The address that acts on behalf of the owner\\r\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n}\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\r\\ninterface IERC721Metadata /* is ERC721 */ {\\r\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\r\\n    function name() external view returns (string memory _name);\\r\\n\\r\\n    /// @notice An abbreviated name for NFTs in this contract\\r\\n    function symbol() external view returns (string memory _symbol);\\r\\n\\r\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\r\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\r\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\r\\n    ///  Metadata JSON Schema\\\".\\r\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\r\\n}\\r\\n\\r\\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\\r\\ninterface IERC721Enumerable /* is ERC721 */ {\\r\\n    /// @notice Count NFTs tracked by this contract\\r\\n    /// @return A count of valid NFTs tracked by this contract, where each one of\\r\\n    ///  them has an assigned and queryable owner not equal to the zero address\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /// @notice Enumerate valid NFTs\\r\\n    /// @dev Throws if `_index` >= `totalSupply()`.\\r\\n    /// @param _index A counter less than `totalSupply()`\\r\\n    /// @return The token identifier for the `_index`th NFT,\\r\\n    ///  (sort order not specified)\\r\\n    function tokenByIndex(uint256 _index) external view returns (uint256);\\r\\n\\r\\n    /// @notice Enumerate NFTs assigned to an owner\\r\\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\\r\\n    ///  `_owner` is the zero address, representing invalid NFTs.\\r\\n    /// @param _owner An address where we are interested in NFTs owned by them\\r\\n    /// @param _index A counter less than `balanceOf(_owner)`\\r\\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\\r\\n    ///   (sort order not specified)\\r\\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x8091cd3dd3561fe90675780de7111f11430b7b6f9174cff8e9a8eaa4ab682aca\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC721TokenReceiver {\\r\\n    function onERC721Received(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256 _tokenId,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xd466593f91b204a62802f199b0f99869b81f87807db088a52319c60ed7bd6080\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IMasterContract {\\r\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\r\\n    /// Also kown as the constructor for cloned contracts.\\r\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\r\\n    /// @param data Can be abi encoded arguments or anything else.\\r\\n    function init(bytes calldata data) external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0xdc1227c73bcaaf012c37ab85424909a4e900df34ecfcf9d090f7998e4d3aefe7\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n// solhint-disable no-empty-blocks\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides functions for encoding/decoding base64\\r\\nlibrary Base64 {\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                // read 3 bytes\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n                case 1 {\\r\\n                    mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n                }\\r\\n                case 2 {\\r\\n                    mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n                }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf85defde09eac584631013ed63018550950e1de602103538806b611ed86aa5b2\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\nlibrary BoringAddress {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function sendNative(address to, uint256 amount) internal {\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"BoringAddress: transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdcdf9c08bc41b6091e03d4bb44d6503bd084ae9d990277d0761ed6e1cdeefbb3\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to The address of the user to check.\\r\\n    /// @return amount The token amount.\\r\\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\\r\\n        require(success && data.length >= 32, \\\"BoringERC20: BalanceOf failed\\\");\\r\\n        amount = abi.decode(data, (uint256));\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1781055f2cd993ad2c58db7ea644b5d8017daf1f89e824cb5f47d8da10389722\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\nimport \\\"./ERC1155.sol\\\";\\n\\n// An asset is a token + a strategy\\nstruct Asset {\\n    TokenType tokenType;\\n    address contractAddress;\\n    IStrategy strategy;\\n    uint256 tokenId;\\n}\\n\\ncontract AssetRegister is ERC1155 {\\n    using BoringAddress for address;\\n\\n    mapping(address => mapping(address => mapping(uint256 => bool))) public isApprovedForAsset;\\n\\n    event AssetRegistered(\\n        TokenType indexed tokenType,\\n        address indexed contractAddress,\\n        IStrategy strategy,\\n        uint256 indexed tokenId,\\n        uint256 assetId\\n    );\\n    event ApprovalForAsset(address indexed sender, address indexed operator, uint256 assetId, bool approved);\\n\\n    // ids start at 1 so that id 0 means it's not yet registered\\n    mapping(TokenType => mapping(address => mapping(IStrategy => mapping(uint256 => uint256)))) public ids;\\n    Asset[] public assets;\\n\\n    constructor() {\\n        assets.push(Asset(TokenType.None, address(0), NO_STRATEGY, 0));\\n    }\\n\\n    function assetCount() public view returns (uint256) {\\n        return assets.length;\\n    }\\n\\n    function _registerAsset(\\n        TokenType tokenType,\\n        address contractAddress,\\n        IStrategy strategy,\\n        uint256 tokenId\\n    ) internal returns (uint256 assetId) {\\n        // Checks\\n        assetId = ids[tokenType][contractAddress][strategy][tokenId];\\n\\n        // If assetId is 0, this is a new asset that needs to be registered\\n        if (assetId == 0) {\\n            // Only do these checks if a new asset needs to be created\\n            require(tokenId == 0 || tokenType != TokenType.ERC20, \\\"YieldBox: No tokenId for ERC20\\\");\\n            require(\\n                tokenType == TokenType.Native ||\\n                    (tokenType == strategy.tokenType() && contractAddress == strategy.contractAddress() && tokenId == strategy.tokenId()),\\n                \\\"YieldBox: Strategy mismatch\\\"\\n            );\\n            // If a new token gets added, the isContract checks that this is a deployed contract. Needed for security.\\n            // Prevents getting shares for a future token whose address is known in advance. For instance a token that will be deployed with CREATE2 in the future or while the contract creation is\\n            // in the mempool\\n            require((tokenType == TokenType.Native && contractAddress == address(0)) || contractAddress.isContract(), \\\"YieldBox: Not a token\\\");\\n\\n            // Effects\\n            assetId = assets.length;\\n            assets.push(Asset(tokenType, contractAddress, strategy, tokenId));\\n            ids[tokenType][contractAddress][strategy][tokenId] = assetId;\\n\\n            // The actual URI isn't emitted here as per EIP1155, because that would make this call super expensive.\\n            emit URI(\\\"\\\", assetId);\\n            emit AssetRegistered(tokenType, contractAddress, strategy, tokenId, assetId);\\n        }\\n    }\\n\\n    function registerAsset(TokenType tokenType, address contractAddress, IStrategy strategy, uint256 tokenId) public returns (uint256 assetId) {\\n        // Native assets can only be added internally by the NativeTokenFactory\\n        require(\\n            tokenType == TokenType.ERC20 || tokenType == TokenType.ERC721 || tokenType == TokenType.ERC1155,\\n            \\\"AssetManager: cannot add Native\\\"\\n        );\\n        assetId = _registerAsset(tokenType, contractAddress, strategy, tokenId);\\n    }\\n\\n    function setApprovalForAsset(address operator, uint256 assetId, bool approved) external virtual {\\n        require(assetId < assetCount(), \\\"AssetManager: asset not valid\\\");\\n        isApprovedForAsset[msg.sender][operator][assetId] = approved;\\n\\n        emit ApprovalForAsset(msg.sender, operator, assetId, approved);\\n    }\\n}\\n\",\"keccak256\":\"0x614d8dd6ef5b414eda33855d3f55091d8669169d8f8ca584153c91111094c72f\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/BoringMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary BoringMath {\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= type(uint128).max, \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= type(uint64).max, \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= type(uint32).max, \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n\\n    function muldiv(\\n        uint256 value,\\n        uint256 mul,\\n        uint256 div,\\n        bool roundUp\\n    ) internal pure returns (uint256 result) {\\n        result = (value * mul) / div;\\n        if (roundUp && (result * div) / mul < value) {\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x72b9e717e3845aa584e81dee9a2f486c42941ebdb552130887b383ce59a7627d\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\n\\n// Written by OreNoMochi (https://github.com/OreNoMochii), BoringCrypto\\n\\ncontract ERC1155 is IERC1155 {\\n    using BoringAddress for address;\\n\\n    // mappings\\n\\n    mapping(address => mapping(address => bool)) public override isApprovedForAll; // map of operator approval\\n    mapping(address => mapping(uint256 => uint256)) public override balanceOf; // map of tokens owned by\\n    mapping(uint256 => uint256) public totalSupply; // totalSupply per token\\n\\n    function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\\n        return\\n            interfaceID == this.supportsInterface.selector || // EIP-165\\n            interfaceID == 0xd9b67a26 || // ERC-1155\\n            interfaceID == 0x0e89341c; // EIP-1155 Metadata\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view override returns (uint256[] memory balances) {\\n        uint256 len = owners.length;\\n        require(len == ids.length, \\\"ERC1155: Length mismatch\\\");\\n\\n        balances = new uint256[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            balances[i] = balanceOf[owners[i]][ids[i]];\\n        }\\n    }\\n\\n    function _mint(address to, uint256 id, uint256 value) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[to][id] += value;\\n        totalSupply[id] += value;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, value);\\n    }\\n\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        require(from != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        totalSupply[id] -= value;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, value);\\n    }\\n\\n    function _transferSingle(address from, address to, uint256 id, uint256 value) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        balanceOf[to][id] += value;\\n\\n        emit TransferSingle(msg.sender, from, to, id, value);\\n    }\\n\\n    function _transferBatch(address from, address to, uint256[] calldata ids, uint256[] calldata values) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        uint256 len = ids.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 id = ids[i];\\n            uint256 value = values[i];\\n            balanceOf[from][id] -= value;\\n            balanceOf[to][id] += value;\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, values);\\n    }\\n\\n    function _requireTransferAllowed(address _from, bool _approved) internal view virtual {\\n        require(_from == msg.sender || _approved || isApprovedForAll[_from][msg.sender] == true, \\\"Transfer not allowed\\\");\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external override {\\n        _requireTransferAllowed(from, false);\\n\\n        _transferSingle(from, to, id, value);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, value, data) ==\\n                    bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override {\\n        require(ids.length == values.length, \\\"ERC1155: Length mismatch\\\");\\n        _requireTransferAllowed(from, false);\\n\\n        _transferBatch(from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, values, data) ==\\n                    bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function uri(uint256 /*assetId*/) external view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x946ff1e91845883dc69b26d2547bb8d53b0fabe08dcb6c4f8e4d6c32d585195c\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\n\\ncontract ERC1155TokenReceiver is IERC1155TokenReceiver {\\n    // ERC1155 receivers that simple accept the transfer\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xf23a6e61; //bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xbc197c81; //bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))\\n    }\\n}\\n\",\"keccak256\":\"0xdfcb43caa675d8c9d0864f300257d2cf1b263f2206c862f601abf86863dfde6d\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC721TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol\\\";\\n\\ncontract ERC721TokenReceiver is IERC721TokenReceiver {\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return 0x150b7a02; //bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\n    }\\n}\\n\",\"keccak256\":\"0x6278868ed51f956038b649b6d4b212e620c1563a31ddfd666c6f1d2fb5aa2f4f\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"./AssetRegister.sol\\\";\\nimport \\\"./BoringMath.sol\\\";\\n\\nstruct NativeToken {\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n    string uri;\\n}\\n\\n/// @title NativeTokenFactory\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The NativeTokenFactory is a token factory to create ERC1155 tokens. This is used by YieldBox to create\\n/// native tokens in YieldBox. These have many benefits:\\n/// - low and predictable gas usage\\n/// - simplified approval\\n/// - no hidden features, all these tokens behave the same\\n\\ncontract NativeTokenFactory is AssetRegister {\\n    using BoringMath for uint256;\\n\\n    mapping(uint256 => NativeToken) public nativeTokens;\\n    mapping(uint256 => address) public owner;\\n    mapping(uint256 => address) public pendingOwner;\\n\\n    event TokenCreated(address indexed creator, string name, string symbol, uint8 decimals, uint256 tokenId);\\n    event OwnershipTransferred(uint256 indexed tokenId, address indexed previousOwner, address indexed newOwner);\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'msg.sender' is an address (an operator) that is approved by 'from', it's allowed.\\n    modifier allowed(address _from, uint256 _id) {\\n        _requireTransferAllowed(_from, isApprovedForAsset[_from][msg.sender][_id]);\\n        _;\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    /// @param tokenId The `tokenId` that the sender has to be owner of.\\n    modifier onlyOwner(uint256 tokenId) {\\n        require(msg.sender == owner[tokenId], \\\"NTF: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param tokenId The `tokenId` of the token that ownership whose ownership will be transferred/renounced.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(uint256 tokenId, address newOwner, bool direct, bool renounce) public onlyOwner(tokenId) {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"NTF: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(tokenId, owner[tokenId], newOwner);\\n            owner[tokenId] = newOwner;\\n            pendingOwner[tokenId] = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner[tokenId] = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    /// @param tokenId The `tokenId` of the token that ownership is claimed for.\\n    function claimOwnership(uint256 tokenId) public {\\n        address _pendingOwner = pendingOwner[tokenId];\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"NTF: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(tokenId, owner[tokenId], _pendingOwner);\\n        owner[tokenId] = _pendingOwner;\\n        pendingOwner[tokenId] = address(0);\\n    }\\n\\n    /// @notice Create a new native token. This will be an ERC1155 token. If later it's needed as an ERC20 token it can\\n    /// be wrapped into an ERC20 token. Native support for ERC1155 tokens is growing though.\\n    /// @param name The name of the token.\\n    /// @param symbol The symbol of the token.\\n    /// @param decimals The number of decimals of the token (this is just for display purposes). Should be set to 18 in normal cases.\\n    function createToken(string calldata name, string calldata symbol, uint8 decimals, string calldata uri) public returns (uint32 tokenId) {\\n        // To keep each Token unique in the AssetRegister, we use the assetId as the tokenId. So for native assets, the tokenId is always equal to the assetId.\\n        tokenId = assets.length.to32();\\n        _registerAsset(TokenType.Native, address(0), NO_STRATEGY, tokenId);\\n        // Initial supply is 0, use owner can mint. For a fixed supply the owner can mint and revoke ownership.\\n        // The msg.sender is the initial owner, can be changed after.\\n        nativeTokens[tokenId] = NativeToken(name, symbol, decimals, uri);\\n        owner[tokenId] = msg.sender;\\n\\n        emit TokenCreated(msg.sender, name, symbol, decimals, tokenId);\\n        emit TransferSingle(msg.sender, address(0), address(0), tokenId, 0);\\n        emit OwnershipTransferred(tokenId, address(0), msg.sender);\\n    }\\n\\n    /// @notice The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\\n    /// @param tokenId The token to be minted.\\n    /// @param to The account to transfer the minted tokens to.\\n    /// @param amount The amount of tokens to mint.\\n    /// @dev For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.\\n    function mint(uint256 tokenId, address to, uint256 amount) public onlyOwner(tokenId) {\\n        _mint(to, tokenId, amount);\\n    }\\n\\n    /// @notice Burns tokens. Only the holder of tokens can burn them or an approved operator.\\n    /// @param tokenId The token to be burned.\\n    /// @param amount The amount of tokens to burn.\\n    function burn(uint256 tokenId, address from, uint256 amount) public allowed(from, tokenId) {\\n        require(assets[tokenId].tokenType == TokenType.Native, \\\"NTF: Not native\\\");\\n        _burn(from, tokenId, amount);\\n    }\\n\\n    /// @notice The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\\n    /// @param tokenId The token to be minted.\\n    /// @param tos The accounts to transfer the minted tokens to.\\n    /// @param amounts The amounts of tokens to mint.\\n    /// @dev If the tos array is longer than the amounts array there will be an out of bounds error. If the amounts array is longer, the extra amounts are simply ignored.\\n    /// @dev For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.\\n    function batchMint(uint256 tokenId, address[] calldata tos, uint256[] calldata amounts) public onlyOwner(tokenId) {\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            _mint(tos[i], tokenId, amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Burns tokens. This is only useful to be used by an operator.\\n    /// @param tokenId The token to be burned.\\n    /// @param froms The accounts to burn tokens from.\\n    /// @param amounts The amounts of tokens to burn.\\n    function batchBurn(uint256 tokenId, address[] calldata froms, uint256[] calldata amounts) public {\\n        require(assets[tokenId].tokenType == TokenType.Native, \\\"NTF: Not native\\\");\\n        uint256 len = froms.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            _requireTransferAllowed(froms[i], isApprovedForAsset[froms[i]][msg.sender][tokenId]);\\n            _burn(froms[i], tokenId, amounts[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x12cfa2a50322ae33b741b6bd0bc63feff775d4ba034c9937bbc49f1c33190a96\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\n// The YieldBox\\n// The original BentoBox is owned by the Sushi team to set strategies for each token. Abracadabra wanted different strategies, which led to\\n// them launching their own DegenBox. The YieldBox solves this by allowing an unlimited number of strategies for each token in a fully\\n// permissionless manner. The YieldBox has no owner and operates fully permissionless.\\n\\n// Other improvements:\\n// Better system to make sure the token to share ratio doesn't reset.\\n// Full support for rebasing tokens.\\n\\n// This contract stores funds, handles their transfers, approvals and strategies.\\n\\n// Copyright (c) 2021, 2022 BoringCrypto - All rights reserved\\n// Twitter: @Boring_Crypto\\n\\n// Since the contract is permissionless, only one deployment per chain is needed. If it's not yet deployed\\n// on a chain or if you want to make a derivative work, contact @BoringCrypto. The core of YieldBox is\\n// copyrighted. Most of the contracts that it builds on are open source though.\\n\\n// BEWARE: Still under active development\\n// Security review not done yet\\n\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\nimport \\\"./interfaces/IWrappedNative.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/Domain.sol\\\";\\nimport \\\"./ERC721TokenReceiver.sol\\\";\\nimport \\\"./ERC1155TokenReceiver.sol\\\";\\nimport \\\"./ERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./AssetRegister.sol\\\";\\nimport \\\"./NativeTokenFactory.sol\\\";\\nimport \\\"./YieldBoxRebase.sol\\\";\\nimport \\\"./YieldBoxURIBuilder.sol\\\";\\nimport \\\"./YieldBoxPermit.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n\\n/// @title YieldBox\\n/// @author BoringCrypto, Keno\\n/// @notice The YieldBox is a vault for tokens. The stored tokens can assigned to strategies.\\n/// Yield from this will go to the token depositors.\\n/// Any funds transfered directly onto the YieldBox will be lost, use the deposit function instead.\\ncontract YieldBox is YieldBoxPermit, BoringBatchable, NativeTokenFactory, ERC721TokenReceiver, ERC1155TokenReceiver {\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n    using BoringAddress for address;\\n    using BoringERC20 for IERC20;\\n    using BoringERC20 for IWrappedNative;\\n    using YieldBoxRebase for uint256;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n    event Deposited(\\n        address indexed sender,\\n        address indexed from,\\n        address indexed to,\\n        uint256 assetId,\\n        uint256 amountIn,\\n        uint256 shareIn,\\n        uint256 amountOut,\\n        uint256 shareOut,\\n        bool isNFT\\n    );\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed from,\\n        address indexed to,\\n        uint256 assetId,\\n        uint256 amountIn,\\n        uint256 shareIn,\\n        uint256 amountOut,\\n        uint256 shareOut\\n    );\\n\\n    // ******************* //\\n    // *** CONSTRUCTOR *** //\\n    // ******************* //\\n    IWrappedNative public immutable wrappedNative;\\n    YieldBoxURIBuilder public immutable uriBuilder;\\n\\n    constructor(IWrappedNative wrappedNative_, YieldBoxURIBuilder uriBuilder_) YieldBoxPermit(\\\"YieldBox\\\") {\\n        wrappedNative = wrappedNative_;\\n        uriBuilder = uriBuilder_;\\n    }\\n\\n    // ************************** //\\n    // *** INTERNAL FUNCTIONS *** //\\n    // ************************** //\\n\\n    /// @dev Returns the total balance of `token` the strategy contract holds,\\n    /// plus the total amount this contract thinks the strategy holds.\\n    function _tokenBalanceOf(Asset storage asset) internal view returns (uint256 amount) {\\n        return asset.strategy.currentBalance();\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param assetId The id of the asset.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount repesented in shares.\\n    function depositAsset(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from, assetId) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        Asset storage asset = assets[assetId];\\n        require(asset.tokenType != TokenType.Native && asset.tokenType != TokenType.ERC721, \\\"YieldBox: can't deposit type\\\");\\n\\n        // Effects\\n        uint256 totalAmount = _tokenBalanceOf(asset);\\n        if (share == 0) {\\n            // value of the share may be lower than the amount due to rounding, that's ok\\n            share = amount._toShares(totalSupply[assetId], totalAmount, false);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\\n            amount = share._toAmount(totalSupply[assetId], totalAmount, true);\\n        }\\n\\n        _mint(to, assetId, share);\\n\\n        // Interactions\\n        if (asset.tokenType == TokenType.ERC20) {\\n            // For ERC20 tokens, use the safe helper function to deal with broken ERC20 implementations. This actually calls transferFrom on the ERC20 contract.\\n            IERC20(asset.contractAddress).safeTransferFrom(from, address(asset.strategy), amount);\\n        } else {\\n            // ERC1155\\n            // When depositing yieldBox tokens into the yieldBox, things can be simplified\\n            if (asset.contractAddress == address(this)) {\\n                _transferSingle(from, address(asset.strategy), asset.tokenId, amount);\\n            } else {\\n                IERC1155(asset.contractAddress).safeTransferFrom(from, address(asset.strategy), asset.tokenId, amount, \\\"\\\");\\n            }\\n        }\\n\\n        asset.strategy.deposited(amount);\\n\\n        emit Deposited(msg.sender, from, to, assetId, amount, share, amountOut, shareOut, false);\\n\\n        return (amount, share);\\n    }\\n\\n    /// @notice Deposit an NFT asset\\n    /// @param assetId The id of the asset.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount repesented in shares.\\n    function depositNFTAsset(\\n        uint256 assetId,\\n        address from,\\n        address to\\n    ) public allowed(from, assetId) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        Asset storage asset = assets[assetId];\\n        require(asset.tokenType == TokenType.ERC721, \\\"YieldBox: not ERC721\\\");\\n\\n        // Effects\\n        _mint(to, assetId, 1);\\n\\n        // Interactions\\n        IERC721(asset.contractAddress).safeTransferFrom(from, address(asset.strategy), asset.tokenId);\\n\\n        asset.strategy.deposited(1);\\n\\n        emit Deposited(msg.sender, from, to, assetId, 1, 1, 1, 1, true);\\n\\n        return (1, 1);\\n    }\\n\\n    /// @notice Deposit ETH asset\\n    /// @param assetId The id of the asset.\\n    /// @param to which account to push the tokens.\\n    /// @param amount ETH amount to deposit.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount repesented in shares.\\n    function depositETHAsset(\\n        uint256 assetId,\\n        address to,\\n        uint256 amount\\n    ) public payable returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        Asset storage asset = assets[assetId];\\n        require(asset.tokenType == TokenType.ERC20 && asset.contractAddress == address(wrappedNative), \\\"YieldBox: not wrappedNative\\\");\\n\\n        // Effects\\n        uint256 share = amount._toShares(totalSupply[assetId], _tokenBalanceOf(asset), false);\\n\\n        _mint(to, assetId, share);\\n\\n        // Interactions\\n        wrappedNative.deposit{ value: amount }();\\n        // Strategies always receive wrappedNative (supporting both wrapped and raw native tokens adds too much complexity)\\n        wrappedNative.safeTransfer(address(asset.strategy), amount);\\n        asset.strategy.deposited(amount);\\n\\n        emit Deposited(msg.sender, msg.sender, to, assetId, amount, share, amountOut, shareOut, false);\\n\\n        return (amount, share);\\n    }\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param assetId The id of the asset.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public allowed(from, assetId) returns (uint256 amountOut, uint256 shareOut) {\\n        // Checks\\n        Asset storage asset = assets[assetId];\\n        require(asset.tokenType != TokenType.Native, \\\"YieldBox: can't withdraw Native\\\");\\n\\n        // Handle ERC721 separately\\n        if (asset.tokenType == TokenType.ERC721) {\\n            return _withdrawNFT(asset, assetId, from, to);\\n        }\\n\\n        return _withdrawFungible(asset, assetId, from, to, amount, share);\\n    }\\n\\n    /// @notice Handles burning and withdrawal of ERC20 and 1155 tokens.\\n    /// @param asset The asset to withdraw.\\n    /// @param assetId The id of the asset.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    function _withdrawNFT(\\n        Asset storage asset,\\n        uint256 assetId,\\n        address from,\\n        address to\\n    ) internal returns (uint256 amountOut, uint256 shareOut) {\\n        _burn(from, assetId, 1);\\n\\n        // Interactions\\n        asset.strategy.withdraw(to, 1);\\n\\n        emit Withdraw(msg.sender, from, to, assetId, 1, 1, 1, 1);\\n\\n        return (1, 1);\\n    }\\n\\n    /// @notice Handles burning and withdrawal of ERC20 and 1155 tokens.\\n    /// @param asset The asset to withdraw.\\n    /// @param assetId The id of the asset.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function _withdrawFungible(\\n        Asset storage asset,\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) internal returns (uint256 amountOut, uint256 shareOut) {\\n        // Effects\\n        uint256 totalAmount = _tokenBalanceOf(asset);\\n        if (share == 0) {\\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\\n            share = amount._toShares(totalSupply[assetId], totalAmount, true);\\n        } else {\\n            // amount may be lower than the value of share due to rounding, that's ok\\n            amount = share._toAmount(totalSupply[assetId], totalAmount, false);\\n        }\\n\\n        _burn(from, assetId, share);\\n\\n        // Interactions\\n        asset.strategy.withdraw(to, amount);\\n\\n        emit Withdraw(msg.sender, from, to, assetId, amount, share, amountOut, shareOut);\\n\\n        return (amount, share);\\n    }\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param assetId The id of the asset.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 assetId,\\n        uint256 share\\n    ) public allowed(from, assetId) {\\n        _transferSingle(from, to, assetId, share);\\n    }\\n\\n    function batchTransfer(\\n        address from,\\n        address to,\\n        uint256[] calldata assetIds_,\\n        uint256[] calldata shares_\\n    ) public allowed(from, type(uint256).max) {\\n        _transferBatch(from, to, assetIds_, shares_);\\n    }\\n\\n    /// @notice Transfer shares from a user account to multiple other ones.\\n    /// @param assetId The id of the asset.\\n    /// @param from which user to pull the tokens.\\n    /// @param tos The receivers of the tokens.\\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\\n    function transferMultiple(\\n        address from,\\n        address[] calldata tos,\\n        uint256 assetId,\\n        uint256[] calldata shares\\n    ) public allowed(from, type(uint256).max) {\\n        // Checks\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            require(tos[i] != address(0), \\\"YieldBox: to not set\\\"); // To avoid a bad UI from burning funds\\n        }\\n\\n        // Effects\\n        uint256 totalAmount;\\n        for (uint256 i = 0; i < len; i++) {\\n            address to = tos[i];\\n            uint256 share_ = shares[i];\\n            balanceOf[to][assetId] += share_;\\n            totalAmount += share_;\\n            emit TransferSingle(msg.sender, from, to, assetId, share_);\\n        }\\n        balanceOf[from][assetId] -= totalAmount;\\n    }\\n\\n    /// @notice Update approval status for an operator\\n    /// @param operator The address approved to perform actions on your behalf\\n    /// @param approved True/False\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        // Checks\\n        require(operator != address(0), \\\"YieldBox: operator not set\\\"); // Important for security\\n        require(operator != address(this), \\\"YieldBox: can't approve yieldBox\\\");\\n\\n        // Effects\\n        _setApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @notice Update approval status for an operator\\n    /// @param _owner The YieldBox account owner\\n    /// @param operator The address approved to perform actions on your behalf\\n    /// @param approved True/False\\n    function _setApprovalForAll(\\n        address _owner,\\n        address operator,\\n        bool approved\\n    ) internal override{\\n        isApprovedForAll[_owner][operator] = approved;\\n        emit ApprovalForAll(_owner, operator, approved);\\n    }\\n\\n    /// @notice Update approval status for an operator and for a specific asset\\n    /// @param operator The address approved to perform actions on your behalf\\n    /// @param assetId The asset id  to update approval status for\\n    /// @param approved True/False\\n    function setApprovalForAsset(\\n        address operator,\\n        uint256 assetId,\\n        bool approved\\n    ) external override {\\n        // Checks\\n        require(operator != address(0), \\\"YieldBox: operator not set\\\"); // Important for security\\n        require(operator != address(this), \\\"YieldBox: can't approve yieldBox\\\");\\n        require(assetId < assetCount(), \\\"YieldBox: asset not valid\\\");\\n\\n        // Effects\\n        _setApprovalForAsset(msg.sender, operator, assetId, approved);\\n    }\\n\\n    /// @notice Update approval status for an operator and for a specific asset\\n    /// @param _owner The owner of the asset\\n    /// @param operator The address approved to perform actions on your behalf\\n    /// @param assetId The asset id  to update approval status for\\n    /// @param approved True/False\\n    function _setApprovalForAsset(\\n        address _owner,\\n        address operator,\\n        uint256 assetId,\\n        bool approved\\n    ) internal override {\\n        isApprovedForAsset[_owner][operator][assetId] = approved;\\n        emit ApprovalForAsset(_owner, operator, assetId, approved);\\n    }\\n\\n    // This functionality has been split off into a separate contract. This is only a view function, so gas usage isn't a huge issue.\\n    // This keeps the YieldBox contract smaller, so it can be optimized more.\\n    function uri(uint256 assetId) external view override returns (string memory) {\\n        return uriBuilder.uri(assets[assetId], nativeTokens[assetId], totalSupply[assetId], owner[assetId]);\\n    }\\n\\n    function name(uint256 assetId) external view returns (string memory) {\\n        return uriBuilder.name(assets[assetId], nativeTokens[assetId].name);\\n    }\\n\\n    function symbol(uint256 assetId) external view returns (string memory) {\\n        return uriBuilder.symbol(assets[assetId], nativeTokens[assetId].symbol);\\n    }\\n\\n    function decimals(uint256 assetId) external view returns (uint8) {\\n        return uriBuilder.decimals(assets[assetId], nativeTokens[assetId].decimals);\\n    }\\n\\n    // Helper functions\\n\\n    /// @notice Helper function to return totals for an asset\\n    /// @param assetId The regierestered asset id\\n    /// @return totalShare The total amount for asset represented in shares\\n    /// @return totalAmount The total amount for asset\\n    function assetTotals(uint256 assetId) external view returns (uint256 totalShare, uint256 totalAmount) {\\n        totalShare = totalSupply[assetId];\\n        totalAmount = _tokenBalanceOf(assets[assetId]);\\n    }\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param assetId The id of the asset.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        uint256 assetId,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share) {\\n        if (assets[assetId].tokenType == TokenType.Native || assets[assetId].tokenType == TokenType.ERC721) {\\n            share = amount;\\n        } else {\\n            share = amount._toShares(totalSupply[assetId], _tokenBalanceOf(assets[assetId]), roundUp);\\n        }\\n    }\\n\\n    /// @dev Helper function represent shares back into the `token` amount.\\n    /// @param assetId The id of the asset.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        uint256 assetId,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount) {\\n        if (assets[assetId].tokenType == TokenType.Native || assets[assetId].tokenType == TokenType.ERC721) {\\n            amount = share;\\n        } else {\\n            amount = share._toAmount(totalSupply[assetId], _tokenBalanceOf(assets[assetId]), roundUp);\\n        }\\n    }\\n\\n    /// @dev Helper function represent the balance in `token` amount for a `user` for an `asset`.\\n    /// @param user The `user` to get the amount for.\\n    /// @param assetId The id of the asset.\\n    function amountOf(address user, uint256 assetId) external view returns (uint256 amount) {\\n        if (assets[assetId].tokenType == TokenType.Native || assets[assetId].tokenType == TokenType.ERC721) {\\n            amount = balanceOf[user][assetId];\\n        } else {\\n            amount = balanceOf[user][assetId]._toAmount(totalSupply[assetId], _tokenBalanceOf(assets[assetId]), false);\\n        }\\n    }\\n\\n    /// @notice Helper function to register & deposit an asset\\n    /// @param tokenType Registration token type.\\n    /// @param contractAddress Token address.\\n    /// @param strategy Asset's strategy address.\\n    /// @param tokenId Registration token id.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount amount to deposit.\\n    /// @param share amount to deposit represented in shares.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount repesented in shares.\\n    function deposit(\\n        TokenType tokenType,\\n        address contractAddress,\\n        IStrategy strategy,\\n        uint256 tokenId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) public returns (uint256 amountOut, uint256 shareOut) {\\n        if (tokenType == TokenType.Native) {\\n            // If native token, register it as an ERC1155 asset (as that's what it is)\\n            return depositAsset(registerAsset(TokenType.ERC1155, address(this), strategy, tokenId), from, to, amount, share);\\n        } else {\\n            return depositAsset(registerAsset(tokenType, contractAddress, strategy, tokenId), from, to, amount, share);\\n        }\\n    }\\n\\n    /// @notice Helper function to register & deposit ETH\\n    /// @param strategy Asset's strategy address.\\n    /// @param amount amount to deposit.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount repesented in shares.\\n    function depositETH(\\n        IStrategy strategy,\\n        address to,\\n        uint256 amount\\n    ) public payable returns (uint256 amountOut, uint256 shareOut) {\\n        return depositETHAsset(registerAsset(TokenType.ERC20, address(wrappedNative), strategy, 0), to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc8a1e20fad72a94030af574e1b593eef13e85648d012fd273d253731a5ef6b54\",\"license\":\"UNLICENSED\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxPermit.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./interfaces/IYieldBox.sol\\\";\\n\\n/**\\n * Modification of the OpenZeppelin ERC20Permit contract to support ERC721 tokens.\\n * OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol).\\n *\\n * @dev Implementation of the ERC-4494 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-4494[EIP-4494].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC721 allowance (see {IERC721-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC721-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract YieldBoxPermit is EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 assetId,uint256 nonce,uint256 deadline)\\\");\\n    \\n\\n    bytes32 private constant _PERMIT_ALL_TYPEHASH =\\n        keccak256(\\\"PermitAll(address owner,address spender,uint256 nonce,uint256 deadline)\\\");\\n    \\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC721 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 assetId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(block.timestamp <= deadline, \\\"YieldBoxPermit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, assetId, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"YieldBoxPermit: invalid signature\\\");\\n\\n        _setApprovalForAsset(owner, spender, assetId, true);\\n    }\\n\\n\\n    function _setApprovalForAsset(\\n        address owner,\\n        address spender,\\n        uint256 assetId,\\n        bool approved\\n    ) internal virtual;\\n\\n\\n    function permitAll(\\n        address owner,\\n        address spender,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(block.timestamp <= deadline, \\\"YieldBoxPermit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_ALL_TYPEHASH, owner, spender, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"YieldBoxPermit: invalid signature\\\");\\n\\n        _setApprovalForAll(owner, spender, true);\\n    }\\n\\n    function _setApprovalForAll(\\n        address _owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual;\\n    \\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x4b7a7a6df1334f2019b90a4a64286a7ffdf32711109a0309d7d95f94ae5b25ee\",\"license\":\"UNLICENSED\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxRebase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/Domain.sol\\\";\\nimport \\\"./ERC1155TokenReceiver.sol\\\";\\nimport \\\"./ERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/BoringFactory.sol\\\";\\n\\nlibrary YieldBoxRebase {\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function _toShares(\\n        uint256 amount,\\n        uint256 totalShares_,\\n        uint256 totalAmount,\\n        bool roundUp\\n    ) internal pure returns (uint256 share) {\\n        // To prevent reseting the ratio due to withdrawal of all shares, we start with\\n        // 1 amount/1e8 shares already burned. This also starts with a 1 : 1e8 ratio which\\n        // functions like 8 decimal fixed point math. This prevents ratio attacks or inaccuracy\\n        // due to 'gifting' or rebasing tokens. (Up to a certain degree)\\n        totalAmount++;\\n        totalShares_ += 1e8;\\n\\n        // Calculte the shares using te current amount to share ratio\\n        share = (amount * totalShares_) / totalAmount;\\n\\n        // Default is to round down (Solidity), round up if required\\n        if (roundUp && (share * totalAmount) / totalShares_ < amount) {\\n            share++;\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function _toAmount(\\n        uint256 share,\\n        uint256 totalShares_,\\n        uint256 totalAmount,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount) {\\n        // To prevent reseting the ratio due to withdrawal of all shares, we start with\\n        // 1 amount/1e8 shares already burned. This also starts with a 1 : 1e8 ratio which\\n        // functions like 8 decimal fixed point math. This prevents ratio attacks or inaccuracy\\n        // due to 'gifting' or rebasing tokens. (Up to a certain degree)\\n        totalAmount++;\\n        totalShares_ += 1e8;\\n\\n        // Calculte the amount using te current amount to share ratio\\n        amount = (share * totalAmount) / totalShares_;\\n\\n        // Default is to round down (Solidity), round up if required\\n        if (roundUp && (amount * totalShares_) / totalAmount < share) {\\n            amount++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x903bdfa00cef45f5502885fa878101d5e160102e06868d19fbade03a1fd2713d\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxURIBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\nimport \\\"./interfaces/IYieldBox.sol\\\";\\nimport \\\"./NativeTokenFactory.sol\\\";\\n\\n// solhint-disable quotes\\n\\ncontract YieldBoxURIBuilder {\\n    using BoringERC20 for IERC20;\\n    using Strings for uint256;\\n    using Base64 for bytes;\\n\\n    struct AssetDetails {\\n        string tokenType;\\n        string name;\\n        string symbol;\\n        uint256 decimals;\\n    }\\n\\n    function name(Asset calldata asset, string calldata nativeName) external view returns (string memory) {\\n        if (asset.strategy == NO_STRATEGY) {\\n            return nativeName;\\n        } else {\\n            if (asset.tokenType == TokenType.ERC20) {\\n                IERC20 token = IERC20(asset.contractAddress);\\n                return string(abi.encodePacked(token.safeName(), \\\" (\\\", asset.strategy.name(), \\\")\\\"));\\n            } else if (asset.tokenType == TokenType.ERC1155) {\\n                return\\n                    string(\\n                        abi.encodePacked(\\n                            string(\\n                                abi.encodePacked(\\n                                    \\\"ERC1155:\\\",\\n                                    uint256(uint160(asset.contractAddress)).toHexString(20),\\n                                    \\\"/\\\",\\n                                    asset.tokenId.toString()\\n                                )\\n                            ),\\n                            \\\" (\\\",\\n                            asset.strategy.name(),\\n                            \\\")\\\"\\n                        )\\n                    );\\n            } else {\\n                return string(abi.encodePacked(nativeName, \\\" (\\\", asset.strategy.name(), \\\")\\\"));\\n            }\\n        }\\n    }\\n\\n    function symbol(Asset calldata asset, string calldata nativeSymbol) external view returns (string memory) {\\n        if (asset.strategy == NO_STRATEGY) {\\n            return nativeSymbol;\\n        } else {\\n            if (asset.tokenType == TokenType.ERC20) {\\n                IERC20 token = IERC20(asset.contractAddress);\\n                return string(abi.encodePacked(token.safeSymbol(), \\\" (\\\", asset.strategy.name(), \\\")\\\"));\\n            } else if (asset.tokenType == TokenType.ERC1155) {\\n                return string(abi.encodePacked(\\\"ERC1155\\\", \\\" (\\\", asset.strategy.name(), \\\")\\\"));\\n            } else {\\n                return string(abi.encodePacked(nativeSymbol, \\\" (\\\", asset.strategy.name(), \\\")\\\"));\\n            }\\n        }\\n    }\\n\\n    function decimals(Asset calldata asset, uint8 nativeDecimals) external view returns (uint8) {\\n        if (asset.tokenType == TokenType.ERC1155) {\\n            return 0;\\n        } else if (asset.tokenType == TokenType.ERC20) {\\n            IERC20 token = IERC20(asset.contractAddress);\\n            return token.safeDecimals();\\n        } else {\\n            return nativeDecimals;\\n        }\\n    }\\n\\n    function uri(\\n        Asset calldata asset,\\n        NativeToken calldata nativeToken,\\n        uint256 totalSupply,\\n        address owner\\n    ) external view returns (string memory) {\\n        AssetDetails memory details;\\n        if (asset.tokenType == TokenType.ERC1155) {\\n            // Contracts can't retrieve URIs, so the details are out of reach\\n            details.tokenType = \\\"ERC1155\\\";\\n            details.name = string(\\n                abi.encodePacked(\\\"ERC1155:\\\", uint256(uint160(asset.contractAddress)).toHexString(20), \\\"/\\\", asset.tokenId.toString())\\n            );\\n            details.symbol = \\\"ERC1155\\\";\\n        } else if (asset.tokenType == TokenType.ERC20) {\\n            IERC20 token = IERC20(asset.contractAddress);\\n            details = AssetDetails(\\\"ERC20\\\", token.safeName(), token.safeSymbol(), token.safeDecimals());\\n        } else {\\n            // Native\\n            details.tokenType = \\\"Native\\\";\\n            details.name = nativeToken.name;\\n            details.symbol = nativeToken.symbol;\\n            details.decimals = nativeToken.decimals;\\n        }\\n\\n        string memory properties = string(\\n            asset.tokenType != TokenType.Native\\n                ? abi.encodePacked(',\\\"tokenAddress\\\":\\\"', uint256(uint160(asset.contractAddress)).toHexString(20), '\\\"')\\n                : abi.encodePacked(',\\\"totalSupply\\\":', totalSupply.toString(), ',\\\"fixedSupply\\\":', owner == address(0) ? \\\"true\\\" : \\\"false\\\")\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    abi\\n                        .encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            details.name,\\n                            '\\\",\\\"symbol\\\":\\\"',\\n                            details.symbol,\\n                            '\\\"',\\n                            asset.tokenType == TokenType.ERC1155 ? \\\"\\\" : ',\\\"decimals\\\":',\\n                            asset.tokenType == TokenType.ERC1155 ? \\\"\\\" : details.decimals.toString(),\\n                            ',\\\"properties\\\":{\\\"strategy\\\":\\\"',\\n                            uint256(uint160(address(asset.strategy))).toHexString(20),\\n                            '\\\",\\\"tokenType\\\":\\\"',\\n                            details.tokenType,\\n                            '\\\"',\\n                            properties,\\n                            asset.tokenType == TokenType.ERC1155 ? string(abi.encodePacked(',\\\"tokenId\\\":', asset.tokenId.toString())) : \\\"\\\",\\n                            \\\"}}\\\"\\n                        )\\n                        .encode()\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x48f41f8c40d0d724dd09c88f6db8d1559c3e8c0796f5e17fc87f348405f9d155\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title TokenType\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The YieldBox can hold different types of tokens:\\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\\nenum TokenType {\\n    Native,\\n    ERC20,\\n    ERC721,\\n    ERC1155,\\n    None\\n}\\n\",\"keccak256\":\"0xc6adb740ff68d4162214dfa9d406422a066ae2197b7f0c8df5daa7c84b4a10aa\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\nimport \\\"./IYieldBox.sol\\\";\\n\\ninterface IStrategy {\\n    /// Each strategy only works with a single asset. This should help make implementations simpler and more readable.\\n    /// To safe gas a proxy pattern (YieldBox factory) could be used to deploy the same strategy for multiple tokens.\\n\\n    /// It is recommended that strategies keep a small amount of funds uninvested (like 5%) to handle small withdrawals\\n    /// and deposits without triggering costly investing/divesting logic.\\n\\n    /// #########################\\n    /// ### Basic Information ###\\n    /// #########################\\n\\n    /// Returns the address of the yieldBox that this strategy is for\\n    function yieldBox() external view returns (IYieldBox yieldBox_);\\n\\n    /// Returns a name for this strategy\\n    function name() external view returns (string memory name_);\\n\\n    /// Returns a description for this strategy\\n    function description() external view returns (string memory description_);\\n\\n    /// #######################\\n    /// ### Supported Token ###\\n    /// #######################\\n\\n    /// Returns the standard that this strategy works with\\n    function tokenType() external view returns (TokenType tokenType_);\\n\\n    /// Returns the contract address that this strategy works with\\n    function contractAddress() external view returns (address contractAddress_);\\n\\n    /// Returns the tokenId that this strategy works with (for EIP1155)\\n    /// This is always 0 for EIP20 tokens\\n    function tokenId() external view returns (uint256 tokenId_);\\n\\n    /// ###########################\\n    /// ### Balance Information ###\\n    /// ###########################\\n\\n    /// Returns the total value the strategy holds (principle + gain) expressed in asset token amount.\\n    /// This should be cheap in gas to retrieve. Can return a bit less than the actual, but MUST NOT return more.\\n    /// The gas cost of this function will be paid on any deposit or withdrawal onto and out of the YieldBox\\n    /// that uses this strategy. Also, anytime a protocol converts between shares and amount, this gets called.\\n    function currentBalance() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn\\n    function withdrawable() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn for a low gas fee\\n    /// When more than this amount is withdrawn it will trigger divesting from the actual strategy\\n    /// which will incur higher gas costs\\n    function cheapWithdrawable() external view returns (uint256 amount);\\n\\n    /// ##########################\\n    /// ### YieldBox Functions ###\\n    /// ##########################\\n\\n    /// Is called by YieldBox to signal funds have been added, the strategy may choose to act on this\\n    /// When a large enough deposit is made, this should trigger the strategy to invest into the actual\\n    /// strategy. This function should normally NOT be used to invest on each call as that would be costly\\n    /// for small deposits.\\n    /// If the strategy handles native tokens (ETH) it will receive it directly (not wrapped). It will be\\n    /// up to the strategy to wrap it if needed.\\n    /// Only accept this call from the YieldBox\\n    function deposited(uint256 amount) external;\\n\\n    /// Is called by the YieldBox to ask the strategy to withdraw to the user\\n    /// When a strategy keeps a little reserve for cheap withdrawals and the requested withdrawal goes over this amount,\\n    /// the strategy should divest enough from the strategy to complete the withdrawal and rebalance the reserve.\\n    /// If the strategy handles native tokens (ETH) it should send this, not a wrapped version.\\n    /// With some strategies it might be hard to withdraw exactly the correct amount.\\n    /// Only accept this call from the YieldBox\\n    function withdraw(address to, uint256 amount) external;\\n}\\n\\nIStrategy constant NO_STRATEGY = IStrategy(address(0));\\n\",\"keccak256\":\"0x637400567ba619671921a58dd2b17c9d1fdacc27f0f021d79bb4f122ead71902\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IWrappedNative.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IWrappedNative is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x458479ed595ed2327cc2e9376657aaa592825838e21af7a54a0b7e852c0ddd80\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\n\\ninterface IYieldBox {\\n    function wrappedNative() external view returns (address wrappedNative);\\n\\n    function assets(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            TokenType tokenType,\\n            address contractAddress,\\n            address strategy,\\n            uint256 tokenId\\n        );\\n\\n    function nativeTokens(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            uint8 decimals\\n        );\\n\\n    function owner(uint256 assetId) external view returns (address owner);\\n\\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\\n\\n    function setApprovalForAsset(\\n        address operator,\\n        uint256 assetId,\\n        bool approved\\n    ) external;\\n\\n    function depositAsset(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function withdraw(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 assetId,\\n        uint256 share\\n    ) external;\\n\\n    function batchTransfer(\\n        address from,\\n        address to,\\n        uint256[] calldata assetIds_,\\n        uint256[] calldata shares_\\n    ) external;\\n\\n    function transferMultiple(\\n        address from,\\n        address[] calldata tos,\\n        uint256 assetId,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function toShare(\\n        uint256 assetId,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function toAmount(\\n        uint256 assetId,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x83e4c62b4059bbd59cac87eb714311f9304ce164ead7b45a7562067732fdc5d3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7425,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"_nonces","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(Counter)1317_storage)"},{"astId":5063,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"isApprovedForAll","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":5070,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"balanceOf","offset":0,"slot":"2","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"},{"astId":5074,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"totalSupply","offset":0,"slot":"3","type":"t_mapping(t_uint256,t_uint256)"},{"astId":4645,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"isApprovedForAsset","offset":0,"slot":"4","type":"t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))"},{"astId":4681,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"ids","offset":0,"slot":"5","type":"t_mapping(t_enum(TokenType)8288,t_mapping(t_address,t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256))))"},{"astId":4685,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"assets","offset":0,"slot":"6","type":"t_array(t_struct(Asset)4632_storage)dyn_storage"},{"astId":5650,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"nativeTokens","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_struct(NativeToken)5639_storage)"},{"astId":5654,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"owner","offset":0,"slot":"8","type":"t_mapping(t_uint256,t_address)"},{"astId":5658,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"pendingOwner","offset":0,"slot":"9","type":"t_mapping(t_uint256,t_address)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Asset)4632_storage)dyn_storage":{"base":"t_struct(Asset)4632_storage","encoding":"dynamic_array","label":"struct Asset[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(IStrategy)8364":{"encoding":"inplace","label":"contract IStrategy","numberOfBytes":"20"},"t_enum(TokenType)8288":{"encoding":"inplace","label":"enum TokenType","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => mapping(uint256 => bool)))","numberOfBytes":"32","value":"t_mapping(t_address,t_mapping(t_uint256,t_bool))"},"t_mapping(t_address,t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(contract IStrategy => mapping(uint256 => uint256)))","numberOfBytes":"32","value":"t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256))"},"t_mapping(t_address,t_mapping(t_uint256,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => bool))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_bool)"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_address,t_struct(Counter)1317_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct Counters.Counter)","numberOfBytes":"32","value":"t_struct(Counter)1317_storage"},"t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_contract(IStrategy)8364","label":"mapping(contract IStrategy => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_enum(TokenType)8288,t_mapping(t_address,t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256))))":{"encoding":"mapping","key":"t_enum(TokenType)8288","label":"mapping(enum TokenType => mapping(address => mapping(contract IStrategy => mapping(uint256 => uint256))))","numberOfBytes":"32","value":"t_mapping(t_address,t_mapping(t_contract(IStrategy)8364,t_mapping(t_uint256,t_uint256)))"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_struct(NativeToken)5639_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct NativeToken)","numberOfBytes":"32","value":"t_struct(NativeToken)5639_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Asset)4632_storage":{"encoding":"inplace","label":"struct Asset","members":[{"astId":4624,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"tokenType","offset":0,"slot":"0","type":"t_enum(TokenType)8288"},{"astId":4626,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"contractAddress","offset":1,"slot":"0","type":"t_address"},{"astId":4629,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"strategy","offset":0,"slot":"1","type":"t_contract(IStrategy)8364"},{"astId":4631,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"tokenId","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_struct(Counter)1317_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":1316,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_struct(NativeToken)5639_storage":{"encoding":"inplace","label":"struct NativeToken","members":[{"astId":5632,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":5634,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":5636,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"decimals","offset":0,"slot":"2","type":"t_uint8"},{"astId":5638,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBox.sol:YieldBox","label":"uri","offset":0,"slot":"3","type":"t_string_storage"}],"numberOfBytes":"128"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"assetTotals(uint256)":{"notice":"Helper function to return totals for an asset"},"batch(bytes[],bool)":{"notice":"Allows batched call to self (this contract)."},"batchBurn(uint256,address[],uint256[])":{"notice":"Burns tokens. This is only useful to be used by an operator."},"batchMint(uint256,address[],uint256[])":{"notice":"The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership."},"burn(uint256,address,uint256)":{"notice":"Burns tokens. Only the holder of tokens can burn them or an approved operator."},"claimOwnership(uint256)":{"notice":"Needs to be called by `pendingOwner` to claim ownership."},"createToken(string,string,uint8,string)":{"notice":"Create a new native token. This will be an ERC1155 token. If later it's needed as an ERC20 token it can be wrapped into an ERC20 token. Native support for ERC1155 tokens is growing though."},"deposit(uint8,address,address,uint256,address,address,uint256,uint256)":{"notice":"Helper function to register & deposit an asset"},"depositAsset(uint256,address,address,uint256,uint256)":{"notice":"Deposit an amount of `token` represented in either `amount` or `share`."},"depositETH(address,address,uint256)":{"notice":"Helper function to register & deposit ETH"},"depositETHAsset(uint256,address,uint256)":{"notice":"Deposit ETH asset"},"depositNFTAsset(uint256,address,address)":{"notice":"Deposit an NFT asset"},"mint(uint256,address,uint256)":{"notice":"The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership."},"permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"Call wrapper that performs `ERC20.permit` on `token`. Lookup `IERC20.permit`."},"setApprovalForAll(address,bool)":{"notice":"Update approval status for an operator"},"setApprovalForAsset(address,uint256,bool)":{"notice":"Update approval status for an operator and for a specific asset"},"transfer(address,address,uint256,uint256)":{"notice":"Transfer shares from a user account to another one."},"transferMultiple(address,address[],uint256,uint256[])":{"notice":"Transfer shares from a user account to multiple other ones."},"transferOwnership(uint256,address,bool,bool)":{"notice":"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."},"withdraw(uint256,address,address,uint256,uint256)":{"notice":"Withdraws an amount of `token` from a user account."}},"notice":"The YieldBox is a vault for tokens. The stored tokens can assigned to strategies. Yield from this will go to the token depositors. Any funds transfered directly onto the YieldBox will be lost, use the deposit function instead.","version":1}}},"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxPermit.sol":{"YieldBoxPermit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permitAll","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the ERC-4494 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-4494[EIP-4494]. Adds the {permit} method, which can be used to change an account's ERC721 allowance (see {IERC721-allowance}) by presenting a message signed by the account. By not relying on `{IERC721-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"See {IERC20Permit-DOMAIN_SEPARATOR}."},"constructor":{"details":"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`. It's a good idea to use the same `name` that is defined as the ERC721 token name."},"nonces(address)":{"details":"See {IERC20Permit-nonces}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","permitAll(address,address,uint256,uint8,bytes32,bytes32)":"aba07847"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC-4494 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-4494[EIP-4494]. Adds the {permit} method, which can be used to change an account's ERC721 allowance (see {IERC721-allowance}) by presenting a message signed by the account. By not relying on `{IERC721-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"constructor\":{\"details\":\"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`. It's a good idea to use the same `name` that is defined as the ERC721 token name.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Modification of the OpenZeppelin ERC20Permit contract to support ERC721 tokens. OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxPermit.sol\":\"YieldBoxPermit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxPermit.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./interfaces/IYieldBox.sol\\\";\\n\\n/**\\n * Modification of the OpenZeppelin ERC20Permit contract to support ERC721 tokens.\\n * OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol).\\n *\\n * @dev Implementation of the ERC-4494 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-4494[EIP-4494].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC721 allowance (see {IERC721-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC721-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract YieldBoxPermit is EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 assetId,uint256 nonce,uint256 deadline)\\\");\\n    \\n\\n    bytes32 private constant _PERMIT_ALL_TYPEHASH =\\n        keccak256(\\\"PermitAll(address owner,address spender,uint256 nonce,uint256 deadline)\\\");\\n    \\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC721 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 assetId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(block.timestamp <= deadline, \\\"YieldBoxPermit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, assetId, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"YieldBoxPermit: invalid signature\\\");\\n\\n        _setApprovalForAsset(owner, spender, assetId, true);\\n    }\\n\\n\\n    function _setApprovalForAsset(\\n        address owner,\\n        address spender,\\n        uint256 assetId,\\n        bool approved\\n    ) internal virtual;\\n\\n\\n    function permitAll(\\n        address owner,\\n        address spender,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(block.timestamp <= deadline, \\\"YieldBoxPermit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_ALL_TYPEHASH, owner, spender, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"YieldBoxPermit: invalid signature\\\");\\n\\n        _setApprovalForAll(owner, spender, true);\\n    }\\n\\n    function _setApprovalForAll(\\n        address _owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual;\\n    \\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x4b7a7a6df1334f2019b90a4a64286a7ffdf32711109a0309d7d95f94ae5b25ee\",\"license\":\"UNLICENSED\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title TokenType\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The YieldBox can hold different types of tokens:\\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\\nenum TokenType {\\n    Native,\\n    ERC20,\\n    ERC721,\\n    ERC1155,\\n    None\\n}\\n\",\"keccak256\":\"0xc6adb740ff68d4162214dfa9d406422a066ae2197b7f0c8df5daa7c84b4a10aa\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\n\\ninterface IYieldBox {\\n    function wrappedNative() external view returns (address wrappedNative);\\n\\n    function assets(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            TokenType tokenType,\\n            address contractAddress,\\n            address strategy,\\n            uint256 tokenId\\n        );\\n\\n    function nativeTokens(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            uint8 decimals\\n        );\\n\\n    function owner(uint256 assetId) external view returns (address owner);\\n\\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\\n\\n    function setApprovalForAsset(\\n        address operator,\\n        uint256 assetId,\\n        bool approved\\n    ) external;\\n\\n    function depositAsset(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function withdraw(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 assetId,\\n        uint256 share\\n    ) external;\\n\\n    function batchTransfer(\\n        address from,\\n        address to,\\n        uint256[] calldata assetIds_,\\n        uint256[] calldata shares_\\n    ) external;\\n\\n    function transferMultiple(\\n        address from,\\n        address[] calldata tos,\\n        uint256 assetId,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function toShare(\\n        uint256 assetId,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function toAmount(\\n        uint256 assetId,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x83e4c62b4059bbd59cac87eb714311f9304ce164ead7b45a7562067732fdc5d3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7425,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxPermit.sol:YieldBoxPermit","label":"_nonces","offset":0,"slot":"0","type":"t_mapping(t_address,t_struct(Counter)1317_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_struct(Counter)1317_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct Counters.Counter)","numberOfBytes":"32","value":"t_struct(Counter)1317_storage"},"t_struct(Counter)1317_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":1316,"contract":"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxPermit.sol:YieldBoxPermit","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"notice":"Modification of the OpenZeppelin ERC20Permit contract to support ERC721 tokens. OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol).","version":1}}},"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxRebase.sol":{"YieldBoxRebase":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122016e1e5ee68fb26e58fb4cf4e53953e0abc28173628ad721b7f62c0d46a79b66064736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 AND 0xE1 0xE5 0xEE PUSH9 0xFB26E58FB4CF4E5395 RETURNDATACOPY EXP 0xBC 0x28 OR CALLDATASIZE 0x28 0xAD PUSH19 0x1B7F62C0D46A79B66064736F6C634300081200 CALLER ","sourceMap":"688:1954:36:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122016e1e5ee68fb26e58fb4cf4e53953e0abc28173628ad721b7f62c0d46a79b66064736f6c63430008120033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 AND 0xE1 0xE5 0xEE PUSH9 0xFB26E58FB4CF4E5395 RETURNDATACOPY EXP 0xBC 0x28 OR CALLDATASIZE 0x28 0xAD PUSH19 0x1B7F62C0D46A79B66064736F6C634300081200 CALLER ","sourceMap":"688:1954:36:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_toAmount(uint256,uint256,uint256,bool)":"infinite","_toShares(uint256,uint256,uint256,bool)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxRebase.sol\":\"YieldBoxRebase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\n// WARNING!!!\\r\\n// Combining BoringBatchable with msg.value can cause double spending issues\\r\\n// https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/\\r\\n\\r\\nimport \\\"./interfaces/IERC20.sol\\\";\\r\\n\\r\\ncontract BaseBoringBatchable {\\r\\n    /// @dev Helper function to extract a useful revert message from a failed call.\\r\\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\\r\\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n\\r\\n        assembly {\\r\\n            // Slice the sighash.\\r\\n            _returnData := add(_returnData, 0x04)\\r\\n        }\\r\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\r\\n    }\\r\\n\\r\\n    /// @notice Allows batched call to self (this contract).\\r\\n    /// @param calls An array of inputs for each call.\\r\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\r\\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\\r\\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\\r\\n    // C3: The length of the loop is fully under user control, so can't be exploited\\r\\n    // C7: Delegatecall is only used on the same contract, so it's safe\\r\\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable {\\r\\n        for (uint256 i = 0; i < calls.length; i++) {\\r\\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\\r\\n            if (!success && revertOnFail) {\\r\\n                revert(_getRevertMsg(result));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BoringBatchable is BaseBoringBatchable {\\r\\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\\r\\n    /// Lookup `IERC20.permit`.\\r\\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\\r\\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\\r\\n    function permitToken(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public {\\r\\n        token.permit(from, to, amount, deadline, v, r, s);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0e12064dbcb5659e5eaaef1baf8e7d611429d8699da9805eaa908644b6605151\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/BoringFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./interfaces/IMasterContract.sol\\\";\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\ncontract BoringFactory {\\r\\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\\r\\n\\r\\n    /// @notice Mapping from clone contracts to their masterContract.\\r\\n    mapping(address => address) public masterContractOf;\\r\\n\\r\\n    /// @notice Mapping from masterContract to an array of all clones\\r\\n    /// On mainnet events can be used to get this list, but events aren't always easy to retrieve and\\r\\n    /// barely work on sidechains. While this adds gas, it makes enumerating all clones much easier.\\r\\n    mapping(address => address[]) public clonesOf;\\r\\n\\r\\n    /// @notice Returns the count of clones that exists for a specific masterContract\\r\\n    /// @param masterContract The address of the master contract.\\r\\n    /// @return cloneCount total number of clones for the masterContract.\\r\\n    function clonesOfCount(address masterContract) public view returns (uint256 cloneCount) {\\r\\n        cloneCount = clonesOf[masterContract].length;\\r\\n    }\\r\\n\\r\\n    /// @notice Deploys a given master Contract as a clone.\\r\\n    /// Any ETH transferred with this call is forwarded to the new clone.\\r\\n    /// Emits `LogDeploy`.\\r\\n    /// @param masterContract The address of the contract to clone.\\r\\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\\r\\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\\r\\n    /// @return cloneAddress Address of the created clone contract.\\r\\n    function deploy(\\r\\n        address masterContract,\\r\\n        bytes calldata data,\\r\\n        bool useCreate2\\r\\n    ) public payable returns (address cloneAddress) {\\r\\n        require(masterContract != address(0), \\\"BoringFactory: No masterContract\\\");\\r\\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\\r\\n\\r\\n        if (useCreate2) {\\r\\n            // each masterContract has different code already. So clones are distinguished by their data only.\\r\\n            bytes32 salt = keccak256(data);\\r\\n\\r\\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\\r\\n            assembly {\\r\\n                let clone := mload(0x40)\\r\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\r\\n                mstore(add(clone, 0x14), targetBytes)\\r\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\r\\n                cloneAddress := create2(0, clone, 0x37, salt)\\r\\n            }\\r\\n        } else {\\r\\n            assembly {\\r\\n                let clone := mload(0x40)\\r\\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\r\\n                mstore(add(clone, 0x14), targetBytes)\\r\\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\r\\n                cloneAddress := create(0, clone, 0x37)\\r\\n            }\\r\\n        }\\r\\n        masterContractOf[cloneAddress] = masterContract;\\r\\n        clonesOf[masterContract].push(cloneAddress);\\r\\n\\r\\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\\r\\n\\r\\n        emit LogDeploy(masterContract, data, cloneAddress);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x09b8928fe64262a9cf934b360193a581cc6709d8642fd1b9f19d550991c475d7\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/Domain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Based on code and smartness by Ross Campbell and Keno\\r\\n// Uses immutable to store the domain separator to reduce gas usage\\r\\n// If the chain id changes due to a fork, the forked chain will calculate on the fly.\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\ncontract Domain {\\r\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\r\\n    // See https://eips.ethereum.org/EIPS/eip-191\\r\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\r\\n\\r\\n    // solhint-disable var-name-mixedcase\\r\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\r\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\r\\n\\r\\n    /// @dev Calculate the DOMAIN_SEPARATOR\\r\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\r\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, chainId, address(this)));\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\r\\n    }\\r\\n\\r\\n    /// @dev Return the DOMAIN_SEPARATOR\\r\\n    // It's named internal to allow making it public from the contract that uses it by creating a simple view function\\r\\n    // with the desired public name, such as DOMAIN_SEPARATOR or domainSeparator.\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function _domainSeparator() internal view returns (bytes32) {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\r\\n    }\\r\\n\\r\\n    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\\r\\n        digest = keccak256(abi.encodePacked(EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA, _domainSeparator(), dataHash));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x26e7d78c93c138e022d6fce9bc32d17fa3a0df1603927ddba65b9e81acbd1820\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\ninterface IERC1155 is IERC165 {\\r\\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\\r\\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n    event URI(string _value, uint256 indexed _id);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n\\r\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\r\\n\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x39f388312b08552eb8a5f09cbe6b0c6ea511a6a47c72985e1ab53b777b911771\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC1155TokenReceiver {\\r\\n    function onERC1155Received(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0x5a73c68c2975f8908b96e76fe916a1a39b86fd7acb2d1e463e85e7841225c0cf\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC165 {\\r\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x2929dd1b0483b96a0b59b4b945684705adf252697b404fe7f126816cb78d684c\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc7605391c07120ced6c1cca9d01abf39add948385828037a537b2d6b4c52f4a3\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IMasterContract {\\r\\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\\r\\n    /// Also kown as the constructor for cloned contracts.\\r\\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\\r\\n    /// @param data Can be abi encoded arguments or anything else.\\r\\n    function init(bytes calldata data) external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0xdc1227c73bcaaf012c37ab85424909a4e900df34ecfcf9d090f7998e4d3aefe7\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n// solhint-disable no-empty-blocks\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides functions for encoding/decoding base64\\r\\nlibrary Base64 {\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                // read 3 bytes\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n                case 1 {\\r\\n                    mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n                }\\r\\n                case 2 {\\r\\n                    mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n                }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf85defde09eac584631013ed63018550950e1de602103538806b611ed86aa5b2\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\nlibrary BoringAddress {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function sendNative(address to, uint256 amount) internal {\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"BoringAddress: transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdcdf9c08bc41b6091e03d4bb44d6503bd084ae9d990277d0761ed6e1cdeefbb3\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to The address of the user to check.\\r\\n    /// @return amount The token amount.\\r\\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\\r\\n        require(success && data.length >= 32, \\\"BoringERC20: BalanceOf failed\\\");\\r\\n        amount = abi.decode(data, (uint256));\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1781055f2cd993ad2c58db7ea644b5d8017daf1f89e824cb5f47d8da10389722\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\n\\n// Written by OreNoMochi (https://github.com/OreNoMochii), BoringCrypto\\n\\ncontract ERC1155 is IERC1155 {\\n    using BoringAddress for address;\\n\\n    // mappings\\n\\n    mapping(address => mapping(address => bool)) public override isApprovedForAll; // map of operator approval\\n    mapping(address => mapping(uint256 => uint256)) public override balanceOf; // map of tokens owned by\\n    mapping(uint256 => uint256) public totalSupply; // totalSupply per token\\n\\n    function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\\n        return\\n            interfaceID == this.supportsInterface.selector || // EIP-165\\n            interfaceID == 0xd9b67a26 || // ERC-1155\\n            interfaceID == 0x0e89341c; // EIP-1155 Metadata\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view override returns (uint256[] memory balances) {\\n        uint256 len = owners.length;\\n        require(len == ids.length, \\\"ERC1155: Length mismatch\\\");\\n\\n        balances = new uint256[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            balances[i] = balanceOf[owners[i]][ids[i]];\\n        }\\n    }\\n\\n    function _mint(address to, uint256 id, uint256 value) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[to][id] += value;\\n        totalSupply[id] += value;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, value);\\n    }\\n\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        require(from != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        totalSupply[id] -= value;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, value);\\n    }\\n\\n    function _transferSingle(address from, address to, uint256 id, uint256 value) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        balanceOf[to][id] += value;\\n\\n        emit TransferSingle(msg.sender, from, to, id, value);\\n    }\\n\\n    function _transferBatch(address from, address to, uint256[] calldata ids, uint256[] calldata values) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        uint256 len = ids.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 id = ids[i];\\n            uint256 value = values[i];\\n            balanceOf[from][id] -= value;\\n            balanceOf[to][id] += value;\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, values);\\n    }\\n\\n    function _requireTransferAllowed(address _from, bool _approved) internal view virtual {\\n        require(_from == msg.sender || _approved || isApprovedForAll[_from][msg.sender] == true, \\\"Transfer not allowed\\\");\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external override {\\n        _requireTransferAllowed(from, false);\\n\\n        _transferSingle(from, to, id, value);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, value, data) ==\\n                    bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override {\\n        require(ids.length == values.length, \\\"ERC1155: Length mismatch\\\");\\n        _requireTransferAllowed(from, false);\\n\\n        _transferBatch(from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, values, data) ==\\n                    bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function uri(uint256 /*assetId*/) external view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x946ff1e91845883dc69b26d2547bb8d53b0fabe08dcb6c4f8e4d6c32d585195c\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\n\\ncontract ERC1155TokenReceiver is IERC1155TokenReceiver {\\n    // ERC1155 receivers that simple accept the transfer\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xf23a6e61; //bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return 0xbc197c81; //bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))\\n    }\\n}\\n\",\"keccak256\":\"0xdfcb43caa675d8c9d0864f300257d2cf1b263f2206c862f601abf86863dfde6d\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxRebase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/Domain.sol\\\";\\nimport \\\"./ERC1155TokenReceiver.sol\\\";\\nimport \\\"./ERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/BoringFactory.sol\\\";\\n\\nlibrary YieldBoxRebase {\\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\\n    function _toShares(\\n        uint256 amount,\\n        uint256 totalShares_,\\n        uint256 totalAmount,\\n        bool roundUp\\n    ) internal pure returns (uint256 share) {\\n        // To prevent reseting the ratio due to withdrawal of all shares, we start with\\n        // 1 amount/1e8 shares already burned. This also starts with a 1 : 1e8 ratio which\\n        // functions like 8 decimal fixed point math. This prevents ratio attacks or inaccuracy\\n        // due to 'gifting' or rebasing tokens. (Up to a certain degree)\\n        totalAmount++;\\n        totalShares_ += 1e8;\\n\\n        // Calculte the shares using te current amount to share ratio\\n        share = (amount * totalShares_) / totalAmount;\\n\\n        // Default is to round down (Solidity), round up if required\\n        if (roundUp && (share * totalAmount) / totalShares_ < amount) {\\n            share++;\\n        }\\n    }\\n\\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\\n    function _toAmount(\\n        uint256 share,\\n        uint256 totalShares_,\\n        uint256 totalAmount,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount) {\\n        // To prevent reseting the ratio due to withdrawal of all shares, we start with\\n        // 1 amount/1e8 shares already burned. This also starts with a 1 : 1e8 ratio which\\n        // functions like 8 decimal fixed point math. This prevents ratio attacks or inaccuracy\\n        // due to 'gifting' or rebasing tokens. (Up to a certain degree)\\n        totalAmount++;\\n        totalShares_ += 1e8;\\n\\n        // Calculte the amount using te current amount to share ratio\\n        amount = (share * totalAmount) / totalShares_;\\n\\n        // Default is to round down (Solidity), round up if required\\n        if (roundUp && (amount * totalShares_) / totalAmount < share) {\\n            amount++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x903bdfa00cef45f5502885fa878101d5e160102e06868d19fbade03a1fd2713d\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title TokenType\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The YieldBox can hold different types of tokens:\\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\\nenum TokenType {\\n    Native,\\n    ERC20,\\n    ERC721,\\n    ERC1155,\\n    None\\n}\\n\",\"keccak256\":\"0xc6adb740ff68d4162214dfa9d406422a066ae2197b7f0c8df5daa7c84b4a10aa\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\nimport \\\"./IYieldBox.sol\\\";\\n\\ninterface IStrategy {\\n    /// Each strategy only works with a single asset. This should help make implementations simpler and more readable.\\n    /// To safe gas a proxy pattern (YieldBox factory) could be used to deploy the same strategy for multiple tokens.\\n\\n    /// It is recommended that strategies keep a small amount of funds uninvested (like 5%) to handle small withdrawals\\n    /// and deposits without triggering costly investing/divesting logic.\\n\\n    /// #########################\\n    /// ### Basic Information ###\\n    /// #########################\\n\\n    /// Returns the address of the yieldBox that this strategy is for\\n    function yieldBox() external view returns (IYieldBox yieldBox_);\\n\\n    /// Returns a name for this strategy\\n    function name() external view returns (string memory name_);\\n\\n    /// Returns a description for this strategy\\n    function description() external view returns (string memory description_);\\n\\n    /// #######################\\n    /// ### Supported Token ###\\n    /// #######################\\n\\n    /// Returns the standard that this strategy works with\\n    function tokenType() external view returns (TokenType tokenType_);\\n\\n    /// Returns the contract address that this strategy works with\\n    function contractAddress() external view returns (address contractAddress_);\\n\\n    /// Returns the tokenId that this strategy works with (for EIP1155)\\n    /// This is always 0 for EIP20 tokens\\n    function tokenId() external view returns (uint256 tokenId_);\\n\\n    /// ###########################\\n    /// ### Balance Information ###\\n    /// ###########################\\n\\n    /// Returns the total value the strategy holds (principle + gain) expressed in asset token amount.\\n    /// This should be cheap in gas to retrieve. Can return a bit less than the actual, but MUST NOT return more.\\n    /// The gas cost of this function will be paid on any deposit or withdrawal onto and out of the YieldBox\\n    /// that uses this strategy. Also, anytime a protocol converts between shares and amount, this gets called.\\n    function currentBalance() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn\\n    function withdrawable() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn for a low gas fee\\n    /// When more than this amount is withdrawn it will trigger divesting from the actual strategy\\n    /// which will incur higher gas costs\\n    function cheapWithdrawable() external view returns (uint256 amount);\\n\\n    /// ##########################\\n    /// ### YieldBox Functions ###\\n    /// ##########################\\n\\n    /// Is called by YieldBox to signal funds have been added, the strategy may choose to act on this\\n    /// When a large enough deposit is made, this should trigger the strategy to invest into the actual\\n    /// strategy. This function should normally NOT be used to invest on each call as that would be costly\\n    /// for small deposits.\\n    /// If the strategy handles native tokens (ETH) it will receive it directly (not wrapped). It will be\\n    /// up to the strategy to wrap it if needed.\\n    /// Only accept this call from the YieldBox\\n    function deposited(uint256 amount) external;\\n\\n    /// Is called by the YieldBox to ask the strategy to withdraw to the user\\n    /// When a strategy keeps a little reserve for cheap withdrawals and the requested withdrawal goes over this amount,\\n    /// the strategy should divest enough from the strategy to complete the withdrawal and rebalance the reserve.\\n    /// If the strategy handles native tokens (ETH) it should send this, not a wrapped version.\\n    /// With some strategies it might be hard to withdraw exactly the correct amount.\\n    /// Only accept this call from the YieldBox\\n    function withdraw(address to, uint256 amount) external;\\n}\\n\\nIStrategy constant NO_STRATEGY = IStrategy(address(0));\\n\",\"keccak256\":\"0x637400567ba619671921a58dd2b17c9d1fdacc27f0f021d79bb4f122ead71902\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\n\\ninterface IYieldBox {\\n    function wrappedNative() external view returns (address wrappedNative);\\n\\n    function assets(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            TokenType tokenType,\\n            address contractAddress,\\n            address strategy,\\n            uint256 tokenId\\n        );\\n\\n    function nativeTokens(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            uint8 decimals\\n        );\\n\\n    function owner(uint256 assetId) external view returns (address owner);\\n\\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\\n\\n    function setApprovalForAsset(\\n        address operator,\\n        uint256 assetId,\\n        bool approved\\n    ) external;\\n\\n    function depositAsset(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function withdraw(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 assetId,\\n        uint256 share\\n    ) external;\\n\\n    function batchTransfer(\\n        address from,\\n        address to,\\n        uint256[] calldata assetIds_,\\n        uint256[] calldata shares_\\n    ) external;\\n\\n    function transferMultiple(\\n        address from,\\n        address[] calldata tos,\\n        uint256 assetId,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function toShare(\\n        uint256 assetId,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function toAmount(\\n        uint256 assetId,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x83e4c62b4059bbd59cac87eb714311f9304ce164ead7b45a7562067732fdc5d3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxURIBuilder.sol":{"YieldBoxURIBuilder":{"abi":[{"inputs":[{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"internalType":"struct Asset","name":"asset","type":"tuple"},{"internalType":"uint8","name":"nativeDecimals","type":"uint8"}],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"internalType":"struct Asset","name":"asset","type":"tuple"},{"internalType":"string","name":"nativeName","type":"string"}],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"internalType":"struct Asset","name":"asset","type":"tuple"},{"internalType":"string","name":"nativeSymbol","type":"string"}],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"internalType":"struct Asset","name":"asset","type":"tuple"},{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals","type":"uint8"},{"internalType":"string","name":"uri","type":"string"}],"internalType":"struct NativeToken","name":"nativeToken","type":"tuple"},{"internalType":"uint256","name":"totalSupply","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080806040523461001657611510908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b6000803560e01c9182635c6d84351461005c57505080636d7cd0371461005757806384b1017d146100525763aa1163b91461004d57600080fd5b610711565b6106eb565b61065c565b346105c95760e03660031901126105c957610076366105cd565b9160843567ffffffffffffffff81116105c9576100979036906004016105e3565b9260c4356100a4816105f1565b6100ac61122e565b9460036100b884610758565b6100c181610738565b036104fd57506100cf6112e4565b85526101376101526100fd6100f86100ec6100ec6020880161072b565b6001600160a01b031690565b610f95565b61014461010d6060870135610dae565b6101318951958694610131602087016008906722a92198989a9a9d60c11b81520190565b90610873565b602f60f81b815260010190565b03601f19810183528261079c565b602086015261015f6112e4565b848601525b61016d82610758565b61017681610738565b1561045b57506101d06101dd6101976100f86100ec6100ec6020870161072b565b6101448651938492610131602085016011907f2c22746f6b656e41646472657373223a2200000000000000000000000000000081520190565b601160f91b815260010190565b602085015192848601519560036101f385610758565b6101fc81610738565b0361044d57610209610b36565b935b600361021682610758565b61021f81610738565b0361043a5761022c610b36565b905b60036102476100f86100ec6100ec6100ec8d870161072b565b93519461025383610758565b9061025d82610738565b500361042b576102aa6102766060610144930135610dae565b89517f2c22746f6b656e4964223a0000000000000000000000000000000000000000006020820152928391602b8301610131565b945b87517f7b226e616d65223a2200000000000000000000000000000000000000000000006020820152988997602989016102e491610873565b7f222c2273796d626f6c223a2200000000000000000000000000000000000000008152600c0161031391610873565b601160f91b815260010161032691610873565b61032f91610873565b7f2c2270726f70657274696573223a7b227374726174656779223a2200000000008152601b0161035e91610873565b7f222c22746f6b656e54797065223a2200000000000000000000000000000000008152600f0161038d91610873565b601160f91b81526001016103a091610873565b6103a991610873565b617d7d60f01b81526002010391601f199283810182526103c9908261079c565b6103d2906113f1565b81517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000602082015292908390603d820161040b91610873565b03908101835261041b908361079c565b51610427819282610625565b0390f35b50610434610b36565b946102ac565b6104476060830151610dae565b9061022e565b610455611348565b9361020b565b6104e86104bf916001600160a01b0361047560a435610dae565b91166104ed57610144610486611328565b610131885195869461013160208701600f907f2c22746f74616c537570706c79223a000000000000000000000000000000000081520190565b7f2c226669786564537570706c79223a00000000000000000000000000000000008152600f0190565b6101dd565b6101446104f8611307565b610486565b600161050b84979397610758565b61051481610738565b0361057157505061052a6100ec6020830161072b565b60ff61053582610ba9565b9161054861054282611135565b916111bf565b906105516107be565b9361055a6112c3565b855260208501528684015216606082015293610164565b6105b9856105bf92610584989498611264565b895261059a6105938280611286565b369161088a565b60208a01526105af6105936020830183611286565b828a0152016112b9565b60ff1690565b6060860152610164565b5080fd5b60809060031901126105de57600490565b600080fd5b908160809103126105de5790565b6001600160a01b038116036105de57565b60005b8381106106155750506000910152565b8181015183820152602001610605565b604091602082526106458151809281602086015260208686019101610602565b601f01601f1916010190565b60ff8116036105de57565b346105de5760a03660031901126105de57602061068d61067b366105cd565b6084359061068882610651565b611160565b60ff60405191168152f35b600319810160a081126105de576080136105de5760049160843567ffffffffffffffff928382116105de57806023830112156105de57818501359384116105de57602484830101116105de576024019190565b346105de576104276107056106ff36610698565b9161101a565b60405191829182610625565b346105de5761042761070561072536610698565b916108c1565b35610735816105f1565b90565b6005111561074257565b634e487b7160e01b600052602160045260246000fd5b3560058110156105de5790565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761079757604052565b610765565b90601f8019910116810190811067ffffffffffffffff82111761079757604052565b604051906080820182811067ffffffffffffffff82111761079757604052565b67ffffffffffffffff811161079757601f01601f191660200190565b6020818303126105de5780519067ffffffffffffffff82116105de570181601f820112156105de57805161082d816107de565b9261083b604051948561079c565b818452602082840101116105de576107359160208085019101610602565b6040513d6000823e3d90fd5b908092918237016000815290565b9061088660209282815194859201610602565b0190565b929192610896826107de565b916108a4604051938461079c565b8294818452818301116105de578281602093846000960137010152565b91604092838101906001600160a01b036108da8361072b565b166108ed5750506107359250369161088a565b9160016108fc84959395610758565b61090581610738565b036109c05750509060006109356100ec61092f61092a6100ec6020600499980161072b565b610ba9565b9361072b565b83516306fdde0360e01b815294859182905afa9182156109bb57610987610735936101449261097996600092610994575b5061013190519687956020870190610873565b61040560f31b815260020190565b602960f81b815260010190565b6109b49061013192933d8091833e6109ac818361079c565b8101906107fa565b9190610966565b610859565b60036109cb84610758565b6109d481610738565b03610abc575050906101376000610a4d6100ec85610a34610a106060610a086100f86100ec6100ec602060049f9e0161072b565b930135610dae565b6101318951978894610131602087016008906722a92198989a9a9d60c11b81520190565b0394610a48601f199687810187528661079c565b61072b565b84516306fdde0360e01b815295869182905afa9283156109bb5761098761073594610a919261097997600092610a9d575b5061013190519788956020870190610873565b0390810183528261079c565b610ab59061013192933d8091833e6109ac818361079c565b9190610a7e565b9150926000610acf6100ec60049561072b565b82516306fdde0360e01b815294859182905afa9283156109bb57610735936101449261098792600092610b13575b5061097961013191519788966020880191610865565b610b2e6109799161013193943d8091833e6109ac818361079c565b929150610afd565b604051906020820182811067ffffffffffffffff8211176107975760405260008252565b3d15610b85573d90610b6b826107de565b91610b79604051938461079c565b82523d6000602084013e565b606090565b60405190610b978261077b565b60038252623f3f3f60e81b6020830152565b600080916040516001600160a01b0360208201916306fdde0360e01b835260048152610bd48161077b565b5192165afa610be1610b5a565b9015610bf05761073590610cb0565b50610735610b8a565b634e487b7160e01b600052603260045260246000fd5b908151811015610c20570160200190565b610bf9565b634e487b7160e01b600052601160045260246000fd5b60ff1660ff8114610c4c5760010190565b610c25565b604051906060820182811067ffffffffffffffff82111761079757604052602a8252604082602036910137565b90610c88826107de565b610c95604051918261079c565b8281528092610ca6601f19916107de565b0190602036910137565b805160408110610cce575080602080610735935183010191016107fa565b602092908303610da3576000805b60ff81168581109081610d81575b5015610cfe57610cf990610c3b565b610cdc565b92610d0c60ff809516610c7e565b92825b85811687811080610d62575b15610d57579081610d4c610d43610d35610d529588610c0f565b516001600160f81b03191690565b871a9188610c0f565b53610c3b565b610d0f565b505094505050905090565b506001600160f81b0319610d79610d358387610c0f565b161515610d1b565b6001600160f81b03199150610d9a90610d359087610c0f565b16151538610cea565b915050610735610b8a565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015610ee3575b506d04ee2d6d415b85acef810000000080831015610ed4575b50662386f26fc1000080831015610ec5575b506305f5e10080831015610eb6575b5061271080831015610ea7575b506064821015610e97575b600a80921015610e8d575b600190816021610e45828701610c7e565b95860101905b610e57575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215610e8857919082610e4b565b610e50565b9160010191610e34565b9190606460029104910191610e29565b60049193920491019138610e1e565b60089193920491019138610e11565b60109193920491019138610e02565b60209193920491019138610df0565b604093508104915038610dd7565b908160021b917f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811603610c4c57565b9060028201809211610c4c57565b9060208201809211610c4c57565b8015610c4c576000190190565b15610f5157565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b610f9d610c51565b90815115610c2057603060208301538151600190811015610c205790607860218401536029915b808311610fd75750610735915015610f4a565b90600f8116906010821015610c20576f181899199a1a9b1b9c1cb0b131b232b360811b611013921a6110098587610c0f565b5360041c92610f3d565b9190610fc4565b91604092838101906001600160a01b036110338361072b565b166110465750506107359250369161088a565b91600161105584959395610758565b61105e81610738565b036110885750509060006109356100ec61092f6110836100ec6020600499980161072b565b611135565b9091611095600391610758565b61109e81610738565b0361112357505060006110b56100ec60049361072b565b83516306fdde0360e01b815292839182905afa80156109bb576109879261073592600092611104575b5051664552433131353560c81b6020820152928391610144919061013160278501610979565b61111c9061014492933d8091833e6109ac818361079c565b91906110de565b90926000610acf6100ec60049561072b565b600080916040516001600160a01b0360208201916395d89b4160e01b835260048152610bd48161077b565b9061116a82610758565b600581101561074257600303611181575050600090565b600161118c83610758565b61119581610738565b036111ba57506001600160a01b0360206107359201356111b4816105f1565b166111bf565b905090565b600080916040516001600160a01b03602082019163313ce56760e01b8352600481526111ea8161077b565b5192165afa6111f7610b5a565b9080611223575b1561121d576020818051810103126105de576020015161073581610651565b50601290565b5060208151146111fe565b604051906080820182811067ffffffffffffffff8211176107975760405260006060838181528160208201528160408201520152565b604051906112718261077b565b60068252654e617469766560d01b6020830152565b903590601e19813603018212156105de570180359067ffffffffffffffff82116105de576020019181360383136105de57565b3561073581610651565b604051906112d08261077b565b6005825264045524332360dc1b6020830152565b604051906112f18261077b565b60078252664552433131353560c81b6020830152565b604051906113148261077b565b600582526466616c736560d81b6020830152565b604051906113358261077b565b60048252637472756560e01b6020830152565b604051906113558261077b565b600c82527f2c22646563696d616c73223a00000000000000000000000000000000000000006020830152565b604051906060820182811067ffffffffffffffff82111761079757604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b8051156114d157611400611381565b61141c6114176114108451610f21565b6003900490565b610ef1565b9161142e61142984610f2f565b610c7e565b92835280815182019060208501935b82821061147f5750505060039051068060011461146e5760021461145f575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c168801015160028601531685010151908201530193919061143d565b50610735610b3656fea2646970667358221220bcfee2d27cd3dc59af8922776c9f323f6c3cc6d1ee5a299f168048339ed3f75d64736f6c63430008120033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x1510 SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x5C6D8435 EQ PUSH2 0x5C JUMPI POP POP DUP1 PUSH4 0x6D7CD037 EQ PUSH2 0x57 JUMPI DUP1 PUSH4 0x84B1017D EQ PUSH2 0x52 JUMPI PUSH4 0xAA1163B9 EQ PUSH2 0x4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x711 JUMP JUMPDEST PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST CALLVALUE PUSH2 0x5C9 JUMPI PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5C9 JUMPI PUSH2 0x76 CALLDATASIZE PUSH2 0x5CD JUMP JUMPDEST SWAP2 PUSH1 0x84 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x5C9 JUMPI PUSH2 0x97 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x5E3 JUMP JUMPDEST SWAP3 PUSH1 0xC4 CALLDATALOAD PUSH2 0xA4 DUP2 PUSH2 0x5F1 JUMP JUMPDEST PUSH2 0xAC PUSH2 0x122E JUMP JUMPDEST SWAP5 PUSH1 0x3 PUSH2 0xB8 DUP5 PUSH2 0x758 JUMP JUMPDEST PUSH2 0xC1 DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0x4FD JUMPI POP PUSH2 0xCF PUSH2 0x12E4 JUMP JUMPDEST DUP6 MSTORE PUSH2 0x137 PUSH2 0x152 PUSH2 0xFD PUSH2 0xF8 PUSH2 0xEC PUSH2 0xEC PUSH1 0x20 DUP9 ADD PUSH2 0x72B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xF95 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x10D PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH2 0xDAE JUMP JUMPDEST PUSH2 0x131 DUP10 MLOAD SWAP6 DUP7 SWAP5 PUSH2 0x131 PUSH1 0x20 DUP8 ADD PUSH1 0x8 SWAP1 PUSH8 0x22A92198989A9A9D PUSH1 0xC1 SHL DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x873 JUMP JUMPDEST PUSH1 0x2F PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x79C JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x15F PUSH2 0x12E4 JUMP JUMPDEST DUP5 DUP7 ADD MSTORE JUMPDEST PUSH2 0x16D DUP3 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x176 DUP2 PUSH2 0x738 JUMP JUMPDEST ISZERO PUSH2 0x45B JUMPI POP PUSH2 0x1D0 PUSH2 0x1DD PUSH2 0x197 PUSH2 0xF8 PUSH2 0xEC PUSH2 0xEC PUSH1 0x20 DUP8 ADD PUSH2 0x72B JUMP JUMPDEST PUSH2 0x144 DUP7 MLOAD SWAP4 DUP5 SWAP3 PUSH2 0x131 PUSH1 0x20 DUP6 ADD PUSH1 0x11 SWAP1 PUSH32 0x2C22746F6B656E41646472657373223A22000000000000000000000000000000 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP3 DUP5 DUP7 ADD MLOAD SWAP6 PUSH1 0x3 PUSH2 0x1F3 DUP6 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x1FC DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0x44D JUMPI PUSH2 0x209 PUSH2 0xB36 JUMP JUMPDEST SWAP4 JUMPDEST PUSH1 0x3 PUSH2 0x216 DUP3 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x21F DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0x43A JUMPI PUSH2 0x22C PUSH2 0xB36 JUMP JUMPDEST SWAP1 JUMPDEST PUSH1 0x3 PUSH2 0x247 PUSH2 0xF8 PUSH2 0xEC PUSH2 0xEC PUSH2 0xEC DUP14 DUP8 ADD PUSH2 0x72B JUMP JUMPDEST SWAP4 MLOAD SWAP5 PUSH2 0x253 DUP4 PUSH2 0x758 JUMP JUMPDEST SWAP1 PUSH2 0x25D DUP3 PUSH2 0x738 JUMP JUMPDEST POP SUB PUSH2 0x42B JUMPI PUSH2 0x2AA PUSH2 0x276 PUSH1 0x60 PUSH2 0x144 SWAP4 ADD CALLDATALOAD PUSH2 0xDAE JUMP JUMPDEST DUP10 MLOAD PUSH32 0x2C22746F6B656E4964223A000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 PUSH1 0x2B DUP4 ADD PUSH2 0x131 JUMP JUMPDEST SWAP5 JUMPDEST DUP8 MLOAD PUSH32 0x7B226E616D65223A220000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP9 DUP10 SWAP8 PUSH1 0x29 DUP10 ADD PUSH2 0x2E4 SWAP2 PUSH2 0x873 JUMP JUMPDEST PUSH32 0x222C2273796D626F6C223A220000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xC ADD PUSH2 0x313 SWAP2 PUSH2 0x873 JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH1 0x1 ADD PUSH2 0x326 SWAP2 PUSH2 0x873 JUMP JUMPDEST PUSH2 0x32F SWAP2 PUSH2 0x873 JUMP JUMPDEST PUSH32 0x2C2270726F70657274696573223A7B227374726174656779223A220000000000 DUP2 MSTORE PUSH1 0x1B ADD PUSH2 0x35E SWAP2 PUSH2 0x873 JUMP JUMPDEST PUSH32 0x222C22746F6B656E54797065223A220000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xF ADD PUSH2 0x38D SWAP2 PUSH2 0x873 JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH1 0x1 ADD PUSH2 0x3A0 SWAP2 PUSH2 0x873 JUMP JUMPDEST PUSH2 0x3A9 SWAP2 PUSH2 0x873 JUMP JUMPDEST PUSH2 0x7D7D PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 ADD SUB SWAP2 PUSH1 0x1F NOT SWAP3 DUP4 DUP2 ADD DUP3 MSTORE PUSH2 0x3C9 SWAP1 DUP3 PUSH2 0x79C JUMP JUMPDEST PUSH2 0x3D2 SWAP1 PUSH2 0x13F1 JUMP JUMPDEST DUP2 MLOAD PUSH32 0x646174613A6170706C69636174696F6E2F6A736F6E3B6261736536342C000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP1 DUP4 SWAP1 PUSH1 0x3D DUP3 ADD PUSH2 0x40B SWAP2 PUSH2 0x873 JUMP JUMPDEST SUB SWAP1 DUP2 ADD DUP4 MSTORE PUSH2 0x41B SWAP1 DUP4 PUSH2 0x79C JUMP JUMPDEST MLOAD PUSH2 0x427 DUP2 SWAP3 DUP3 PUSH2 0x625 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP PUSH2 0x434 PUSH2 0xB36 JUMP JUMPDEST SWAP5 PUSH2 0x2AC JUMP JUMPDEST PUSH2 0x447 PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0xDAE JUMP JUMPDEST SWAP1 PUSH2 0x22E JUMP JUMPDEST PUSH2 0x455 PUSH2 0x1348 JUMP JUMPDEST SWAP4 PUSH2 0x20B JUMP JUMPDEST PUSH2 0x4E8 PUSH2 0x4BF SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x475 PUSH1 0xA4 CALLDATALOAD PUSH2 0xDAE JUMP JUMPDEST SWAP2 AND PUSH2 0x4ED JUMPI PUSH2 0x144 PUSH2 0x486 PUSH2 0x1328 JUMP JUMPDEST PUSH2 0x131 DUP9 MLOAD SWAP6 DUP7 SWAP5 PUSH2 0x131 PUSH1 0x20 DUP8 ADD PUSH1 0xF SWAP1 PUSH32 0x2C22746F74616C537570706C79223A0000000000000000000000000000000000 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH32 0x2C226669786564537570706C79223A0000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xF ADD SWAP1 JUMP JUMPDEST PUSH2 0x1DD JUMP JUMPDEST PUSH2 0x144 PUSH2 0x4F8 PUSH2 0x1307 JUMP JUMPDEST PUSH2 0x486 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x50B DUP5 SWAP8 SWAP4 SWAP8 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x514 DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0x571 JUMPI POP POP PUSH2 0x52A PUSH2 0xEC PUSH1 0x20 DUP4 ADD PUSH2 0x72B JUMP JUMPDEST PUSH1 0xFF PUSH2 0x535 DUP3 PUSH2 0xBA9 JUMP JUMPDEST SWAP2 PUSH2 0x548 PUSH2 0x542 DUP3 PUSH2 0x1135 JUMP JUMPDEST SWAP2 PUSH2 0x11BF JUMP JUMPDEST SWAP1 PUSH2 0x551 PUSH2 0x7BE JUMP JUMPDEST SWAP4 PUSH2 0x55A PUSH2 0x12C3 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD MSTORE DUP7 DUP5 ADD MSTORE AND PUSH1 0x60 DUP3 ADD MSTORE SWAP4 PUSH2 0x164 JUMP JUMPDEST PUSH2 0x5B9 DUP6 PUSH2 0x5BF SWAP3 PUSH2 0x584 SWAP9 SWAP5 SWAP9 PUSH2 0x1264 JUMP JUMPDEST DUP10 MSTORE PUSH2 0x59A PUSH2 0x593 DUP3 DUP1 PUSH2 0x1286 JUMP JUMPDEST CALLDATASIZE SWAP2 PUSH2 0x88A JUMP JUMPDEST PUSH1 0x20 DUP11 ADD MSTORE PUSH2 0x5AF PUSH2 0x593 PUSH1 0x20 DUP4 ADD DUP4 PUSH2 0x1286 JUMP JUMPDEST DUP3 DUP11 ADD MSTORE ADD PUSH2 0x12B9 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x164 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x5DE JUMPI PUSH1 0x4 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x80 SWAP2 SUB SLT PUSH2 0x5DE JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0x5DE JUMPI JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x615 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x605 JUMP JUMPDEST PUSH1 0x40 SWAP2 PUSH1 0x20 DUP3 MSTORE PUSH2 0x645 DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x602 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF DUP2 AND SUB PUSH2 0x5DE JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x5DE JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5DE JUMPI PUSH1 0x20 PUSH2 0x68D PUSH2 0x67B CALLDATASIZE PUSH2 0x5CD JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD SWAP1 PUSH2 0x688 DUP3 PUSH2 0x651 JUMP JUMPDEST PUSH2 0x1160 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0x3 NOT DUP2 ADD PUSH1 0xA0 DUP2 SLT PUSH2 0x5DE JUMPI PUSH1 0x80 SGT PUSH2 0x5DE JUMPI PUSH1 0x4 SWAP2 PUSH1 0x84 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0x5DE JUMPI DUP1 PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x5DE JUMPI DUP2 DUP6 ADD CALLDATALOAD SWAP4 DUP5 GT PUSH2 0x5DE JUMPI PUSH1 0x24 DUP5 DUP4 ADD ADD GT PUSH2 0x5DE JUMPI PUSH1 0x24 ADD SWAP2 SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x5DE JUMPI PUSH2 0x427 PUSH2 0x705 PUSH2 0x6FF CALLDATASIZE PUSH2 0x698 JUMP JUMPDEST SWAP2 PUSH2 0x101A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x625 JUMP JUMPDEST CALLVALUE PUSH2 0x5DE JUMPI PUSH2 0x427 PUSH2 0x705 PUSH2 0x725 CALLDATASIZE PUSH2 0x698 JUMP JUMPDEST SWAP2 PUSH2 0x8C1 JUMP JUMPDEST CALLDATALOAD PUSH2 0x735 DUP2 PUSH2 0x5F1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x5 GT ISZERO PUSH2 0x742 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLDATALOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x5DE JUMPI SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x797 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x765 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x797 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x80 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x797 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x797 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0x5DE JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x5DE JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x5DE JUMPI DUP1 MLOAD PUSH2 0x82D DUP2 PUSH2 0x7DE JUMP JUMPDEST SWAP3 PUSH2 0x83B PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x79C JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x5DE JUMPI PUSH2 0x735 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x602 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 DUP1 SWAP3 SWAP2 DUP3 CALLDATACOPY ADD PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x886 PUSH1 0x20 SWAP3 DUP3 DUP2 MLOAD SWAP5 DUP6 SWAP3 ADD PUSH2 0x602 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x896 DUP3 PUSH2 0x7DE JUMP JUMPDEST SWAP2 PUSH2 0x8A4 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x79C JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x5DE JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST SWAP2 PUSH1 0x40 SWAP3 DUP4 DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x8DA DUP4 PUSH2 0x72B JUMP JUMPDEST AND PUSH2 0x8ED JUMPI POP POP PUSH2 0x735 SWAP3 POP CALLDATASIZE SWAP2 PUSH2 0x88A JUMP JUMPDEST SWAP2 PUSH1 0x1 PUSH2 0x8FC DUP5 SWAP6 SWAP4 SWAP6 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x905 DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0x9C0 JUMPI POP POP SWAP1 PUSH1 0x0 PUSH2 0x935 PUSH2 0xEC PUSH2 0x92F PUSH2 0x92A PUSH2 0xEC PUSH1 0x20 PUSH1 0x4 SWAP10 SWAP9 ADD PUSH2 0x72B JUMP JUMPDEST PUSH2 0xBA9 JUMP JUMPDEST SWAP4 PUSH2 0x72B JUMP JUMPDEST DUP4 MLOAD PUSH4 0x6FDDE03 PUSH1 0xE0 SHL DUP2 MSTORE SWAP5 DUP6 SWAP2 DUP3 SWAP1 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x9BB JUMPI PUSH2 0x987 PUSH2 0x735 SWAP4 PUSH2 0x144 SWAP3 PUSH2 0x979 SWAP7 PUSH1 0x0 SWAP3 PUSH2 0x994 JUMPI JUMPDEST POP PUSH2 0x131 SWAP1 MLOAD SWAP7 DUP8 SWAP6 PUSH1 0x20 DUP8 ADD SWAP1 PUSH2 0x873 JUMP JUMPDEST PUSH2 0x405 PUSH1 0xF3 SHL DUP2 MSTORE PUSH1 0x2 ADD SWAP1 JUMP JUMPDEST PUSH1 0x29 PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0x9B4 SWAP1 PUSH2 0x131 SWAP3 SWAP4 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x9AC DUP2 DUP4 PUSH2 0x79C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x7FA JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x966 JUMP JUMPDEST PUSH2 0x859 JUMP JUMPDEST PUSH1 0x3 PUSH2 0x9CB DUP5 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x9D4 DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0xABC JUMPI POP POP SWAP1 PUSH2 0x137 PUSH1 0x0 PUSH2 0xA4D PUSH2 0xEC DUP6 PUSH2 0xA34 PUSH2 0xA10 PUSH1 0x60 PUSH2 0xA08 PUSH2 0xF8 PUSH2 0xEC PUSH2 0xEC PUSH1 0x20 PUSH1 0x4 SWAP16 SWAP15 ADD PUSH2 0x72B JUMP JUMPDEST SWAP4 ADD CALLDATALOAD PUSH2 0xDAE JUMP JUMPDEST PUSH2 0x131 DUP10 MLOAD SWAP8 DUP9 SWAP5 PUSH2 0x131 PUSH1 0x20 DUP8 ADD PUSH1 0x8 SWAP1 PUSH8 0x22A92198989A9A9D PUSH1 0xC1 SHL DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SUB SWAP5 PUSH2 0xA48 PUSH1 0x1F NOT SWAP7 DUP8 DUP2 ADD DUP8 MSTORE DUP7 PUSH2 0x79C JUMP JUMPDEST PUSH2 0x72B JUMP JUMPDEST DUP5 MLOAD PUSH4 0x6FDDE03 PUSH1 0xE0 SHL DUP2 MSTORE SWAP6 DUP7 SWAP2 DUP3 SWAP1 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x9BB JUMPI PUSH2 0x987 PUSH2 0x735 SWAP5 PUSH2 0xA91 SWAP3 PUSH2 0x979 SWAP8 PUSH1 0x0 SWAP3 PUSH2 0xA9D JUMPI JUMPDEST POP PUSH2 0x131 SWAP1 MLOAD SWAP8 DUP9 SWAP6 PUSH1 0x20 DUP8 ADD SWAP1 PUSH2 0x873 JUMP JUMPDEST SUB SWAP1 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x79C JUMP JUMPDEST PUSH2 0xAB5 SWAP1 PUSH2 0x131 SWAP3 SWAP4 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x9AC DUP2 DUP4 PUSH2 0x79C JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xA7E JUMP JUMPDEST SWAP2 POP SWAP3 PUSH1 0x0 PUSH2 0xACF PUSH2 0xEC PUSH1 0x4 SWAP6 PUSH2 0x72B JUMP JUMPDEST DUP3 MLOAD PUSH4 0x6FDDE03 PUSH1 0xE0 SHL DUP2 MSTORE SWAP5 DUP6 SWAP2 DUP3 SWAP1 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x9BB JUMPI PUSH2 0x735 SWAP4 PUSH2 0x144 SWAP3 PUSH2 0x987 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xB13 JUMPI JUMPDEST POP PUSH2 0x979 PUSH2 0x131 SWAP2 MLOAD SWAP8 DUP9 SWAP7 PUSH1 0x20 DUP9 ADD SWAP2 PUSH2 0x865 JUMP JUMPDEST PUSH2 0xB2E PUSH2 0x979 SWAP2 PUSH2 0x131 SWAP4 SWAP5 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x9AC DUP2 DUP4 PUSH2 0x79C JUMP JUMPDEST SWAP3 SWAP2 POP PUSH2 0xAFD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x797 JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0xB85 JUMPI RETURNDATASIZE SWAP1 PUSH2 0xB6B DUP3 PUSH2 0x7DE JUMP JUMPDEST SWAP2 PUSH2 0xB79 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x79C JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xB97 DUP3 PUSH2 0x77B JUMP JUMPDEST PUSH1 0x3 DUP3 MSTORE PUSH3 0x3F3F3F PUSH1 0xE8 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD SWAP2 PUSH4 0x6FDDE03 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0xBD4 DUP2 PUSH2 0x77B JUMP JUMPDEST MLOAD SWAP3 AND GAS STATICCALL PUSH2 0xBE1 PUSH2 0xB5A JUMP JUMPDEST SWAP1 ISZERO PUSH2 0xBF0 JUMPI PUSH2 0x735 SWAP1 PUSH2 0xCB0 JUMP JUMPDEST POP PUSH2 0x735 PUSH2 0xB8A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xC20 JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xBF9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xFF AND PUSH1 0xFF DUP2 EQ PUSH2 0xC4C JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0xC25 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x797 JUMPI PUSH1 0x40 MSTORE PUSH1 0x2A DUP3 MSTORE PUSH1 0x40 DUP3 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH2 0xC88 DUP3 PUSH2 0x7DE JUMP JUMPDEST PUSH2 0xC95 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x79C JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0xCA6 PUSH1 0x1F NOT SWAP2 PUSH2 0x7DE JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP2 LT PUSH2 0xCCE JUMPI POP DUP1 PUSH1 0x20 DUP1 PUSH2 0x735 SWAP4 MLOAD DUP4 ADD ADD SWAP2 ADD PUSH2 0x7FA JUMP JUMPDEST PUSH1 0x20 SWAP3 SWAP1 DUP4 SUB PUSH2 0xDA3 JUMPI PUSH1 0x0 DUP1 JUMPDEST PUSH1 0xFF DUP2 AND DUP6 DUP2 LT SWAP1 DUP2 PUSH2 0xD81 JUMPI JUMPDEST POP ISZERO PUSH2 0xCFE JUMPI PUSH2 0xCF9 SWAP1 PUSH2 0xC3B JUMP JUMPDEST PUSH2 0xCDC JUMP JUMPDEST SWAP3 PUSH2 0xD0C PUSH1 0xFF DUP1 SWAP6 AND PUSH2 0xC7E JUMP JUMPDEST SWAP3 DUP3 JUMPDEST DUP6 DUP2 AND DUP8 DUP2 LT DUP1 PUSH2 0xD62 JUMPI JUMPDEST ISZERO PUSH2 0xD57 JUMPI SWAP1 DUP2 PUSH2 0xD4C PUSH2 0xD43 PUSH2 0xD35 PUSH2 0xD52 SWAP6 DUP9 PUSH2 0xC0F JUMP JUMPDEST MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 JUMP JUMPDEST DUP8 BYTE SWAP2 DUP9 PUSH2 0xC0F JUMP JUMPDEST MSTORE8 PUSH2 0xC3B JUMP JUMPDEST PUSH2 0xD0F JUMP JUMPDEST POP POP SWAP5 POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT PUSH2 0xD79 PUSH2 0xD35 DUP4 DUP8 PUSH2 0xC0F JUMP JUMPDEST AND ISZERO ISZERO PUSH2 0xD1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT SWAP2 POP PUSH2 0xD9A SWAP1 PUSH2 0xD35 SWAP1 DUP8 PUSH2 0xC0F JUMP JUMPDEST AND ISZERO ISZERO CODESIZE PUSH2 0xCEA JUMP JUMPDEST SWAP2 POP POP PUSH2 0x735 PUSH2 0xB8A JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP2 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP1 DUP3 LT ISZERO PUSH2 0xEE3 JUMPI JUMPDEST POP PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP1 DUP4 LT ISZERO PUSH2 0xED4 JUMPI JUMPDEST POP PUSH7 0x2386F26FC10000 DUP1 DUP4 LT ISZERO PUSH2 0xEC5 JUMPI JUMPDEST POP PUSH4 0x5F5E100 DUP1 DUP4 LT ISZERO PUSH2 0xEB6 JUMPI JUMPDEST POP PUSH2 0x2710 DUP1 DUP4 LT ISZERO PUSH2 0xEA7 JUMPI JUMPDEST POP PUSH1 0x64 DUP3 LT ISZERO PUSH2 0xE97 JUMPI JUMPDEST PUSH1 0xA DUP1 SWAP3 LT ISZERO PUSH2 0xE8D JUMPI JUMPDEST PUSH1 0x1 SWAP1 DUP2 PUSH1 0x21 PUSH2 0xE45 DUP3 DUP8 ADD PUSH2 0xC7E JUMP JUMPDEST SWAP6 DUP7 ADD ADD SWAP1 JUMPDEST PUSH2 0xE57 JUMPI JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP1 DUP4 SWAP1 PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP3 DUP3 MOD BYTE DUP4 MSTORE8 DIV SWAP2 DUP3 ISZERO PUSH2 0xE88 JUMPI SWAP2 SWAP1 DUP3 PUSH2 0xE4B JUMP JUMPDEST PUSH2 0xE50 JUMP JUMPDEST SWAP2 PUSH1 0x1 ADD SWAP2 PUSH2 0xE34 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x64 PUSH1 0x2 SWAP2 DIV SWAP2 ADD SWAP2 PUSH2 0xE29 JUMP JUMPDEST PUSH1 0x4 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0xE1E JUMP JUMPDEST PUSH1 0x8 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0xE11 JUMP JUMPDEST PUSH1 0x10 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0xE02 JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0xDF0 JUMP JUMPDEST PUSH1 0x40 SWAP4 POP DUP2 DIV SWAP2 POP CODESIZE PUSH2 0xDD7 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x2 SHL SWAP2 PUSH32 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SUB PUSH2 0xC4C JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x2 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC4C JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC4C JUMPI JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC4C JUMPI PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xF51 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0xF9D PUSH2 0xC51 JUMP JUMPDEST SWAP1 DUP2 MLOAD ISZERO PUSH2 0xC20 JUMPI PUSH1 0x30 PUSH1 0x20 DUP4 ADD MSTORE8 DUP2 MLOAD PUSH1 0x1 SWAP1 DUP2 LT ISZERO PUSH2 0xC20 JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP5 ADD MSTORE8 PUSH1 0x29 SWAP2 JUMPDEST DUP1 DUP4 GT PUSH2 0xFD7 JUMPI POP PUSH2 0x735 SWAP2 POP ISZERO PUSH2 0xF4A JUMP JUMPDEST SWAP1 PUSH1 0xF DUP2 AND SWAP1 PUSH1 0x10 DUP3 LT ISZERO PUSH2 0xC20 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH2 0x1013 SWAP3 BYTE PUSH2 0x1009 DUP6 DUP8 PUSH2 0xC0F JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 PUSH2 0xF3D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xFC4 JUMP JUMPDEST SWAP2 PUSH1 0x40 SWAP3 DUP4 DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1033 DUP4 PUSH2 0x72B JUMP JUMPDEST AND PUSH2 0x1046 JUMPI POP POP PUSH2 0x735 SWAP3 POP CALLDATASIZE SWAP2 PUSH2 0x88A JUMP JUMPDEST SWAP2 PUSH1 0x1 PUSH2 0x1055 DUP5 SWAP6 SWAP4 SWAP6 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x105E DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0x1088 JUMPI POP POP SWAP1 PUSH1 0x0 PUSH2 0x935 PUSH2 0xEC PUSH2 0x92F PUSH2 0x1083 PUSH2 0xEC PUSH1 0x20 PUSH1 0x4 SWAP10 SWAP9 ADD PUSH2 0x72B JUMP JUMPDEST PUSH2 0x1135 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x1095 PUSH1 0x3 SWAP2 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x109E DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0x1123 JUMPI POP POP PUSH1 0x0 PUSH2 0x10B5 PUSH2 0xEC PUSH1 0x4 SWAP4 PUSH2 0x72B JUMP JUMPDEST DUP4 MLOAD PUSH4 0x6FDDE03 PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 GAS STATICCALL DUP1 ISZERO PUSH2 0x9BB JUMPI PUSH2 0x987 SWAP3 PUSH2 0x735 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0x1104 JUMPI JUMPDEST POP MLOAD PUSH7 0x45524331313535 PUSH1 0xC8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 PUSH2 0x144 SWAP2 SWAP1 PUSH2 0x131 PUSH1 0x27 DUP6 ADD PUSH2 0x979 JUMP JUMPDEST PUSH2 0x111C SWAP1 PUSH2 0x144 SWAP3 SWAP4 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x9AC DUP2 DUP4 PUSH2 0x79C JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x10DE JUMP JUMPDEST SWAP1 SWAP3 PUSH1 0x0 PUSH2 0xACF PUSH2 0xEC PUSH1 0x4 SWAP6 PUSH2 0x72B JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD SWAP2 PUSH4 0x95D89B41 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0xBD4 DUP2 PUSH2 0x77B JUMP JUMPDEST SWAP1 PUSH2 0x116A DUP3 PUSH2 0x758 JUMP JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x742 JUMPI PUSH1 0x3 SUB PUSH2 0x1181 JUMPI POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x118C DUP4 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x1195 DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0x11BA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 PUSH2 0x735 SWAP3 ADD CALLDATALOAD PUSH2 0x11B4 DUP2 PUSH2 0x5F1 JUMP JUMPDEST AND PUSH2 0x11BF JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD SWAP2 PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0x11EA DUP2 PUSH2 0x77B JUMP JUMPDEST MLOAD SWAP3 AND GAS STATICCALL PUSH2 0x11F7 PUSH2 0xB5A JUMP JUMPDEST SWAP1 DUP1 PUSH2 0x1223 JUMPI JUMPDEST ISZERO PUSH2 0x121D JUMPI PUSH1 0x20 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x5DE JUMPI PUSH1 0x20 ADD MLOAD PUSH2 0x735 DUP2 PUSH2 0x651 JUMP JUMPDEST POP PUSH1 0x12 SWAP1 JUMP JUMPDEST POP PUSH1 0x20 DUP2 MLOAD EQ PUSH2 0x11FE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x80 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x797 JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 DUP4 DUP2 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1271 DUP3 PUSH2 0x77B JUMP JUMPDEST PUSH1 0x6 DUP3 MSTORE PUSH6 0x4E6174697665 PUSH1 0xD0 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x5DE JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x5DE JUMPI PUSH1 0x20 ADD SWAP2 DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0x5DE JUMPI JUMP JUMPDEST CALLDATALOAD PUSH2 0x735 DUP2 PUSH2 0x651 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x12D0 DUP3 PUSH2 0x77B JUMP JUMPDEST PUSH1 0x5 DUP3 MSTORE PUSH5 0x455243323 PUSH1 0xDC SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x12F1 DUP3 PUSH2 0x77B JUMP JUMPDEST PUSH1 0x7 DUP3 MSTORE PUSH7 0x45524331313535 PUSH1 0xC8 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1314 DUP3 PUSH2 0x77B JUMP JUMPDEST PUSH1 0x5 DUP3 MSTORE PUSH5 0x66616C7365 PUSH1 0xD8 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1335 DUP3 PUSH2 0x77B JUMP JUMPDEST PUSH1 0x4 DUP3 MSTORE PUSH4 0x74727565 PUSH1 0xE0 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1355 DUP3 PUSH2 0x77B JUMP JUMPDEST PUSH1 0xC DUP3 MSTORE PUSH32 0x2C22646563696D616C73223A0000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x797 JUMPI PUSH1 0x40 MSTORE PUSH1 0x40 DUP3 MSTORE PUSH32 0x6768696A6B6C6D6E6F707172737475767778797A303132333435363738392B2F PUSH1 0x40 DUP4 PUSH32 0x4142434445464748494A4B4C4D4E4F505152535455565758595A616263646566 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x14D1 JUMPI PUSH2 0x1400 PUSH2 0x1381 JUMP JUMPDEST PUSH2 0x141C PUSH2 0x1417 PUSH2 0x1410 DUP5 MLOAD PUSH2 0xF21 JUMP JUMPDEST PUSH1 0x3 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH2 0xEF1 JUMP JUMPDEST SWAP2 PUSH2 0x142E PUSH2 0x1429 DUP5 PUSH2 0xF2F JUMP JUMPDEST PUSH2 0xC7E JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP1 DUP2 MLOAD DUP3 ADD SWAP1 PUSH1 0x20 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP3 LT PUSH2 0x147F JUMPI POP POP POP PUSH1 0x3 SWAP1 MLOAD MOD DUP1 PUSH1 0x1 EQ PUSH2 0x146E JUMPI PUSH1 0x2 EQ PUSH2 0x145F JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x3D PUSH1 0xF8 SHL PUSH1 0x0 NOT SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST POP PUSH2 0x3D3D PUSH1 0xF0 SHL PUSH1 0x1 NOT SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP4 PUSH1 0x4 SWAP1 PUSH1 0x3 DUP1 SWAP5 ADD SWAP4 DUP5 MLOAD PUSH1 0x1 SWAP1 PUSH1 0x3F SWAP1 DUP3 DUP3 DUP3 PUSH1 0x12 SHR AND DUP9 ADD ADD MLOAD DUP6 MSTORE8 DUP3 DUP3 DUP3 PUSH1 0xC SHR AND DUP9 ADD ADD MLOAD DUP4 DUP7 ADD MSTORE8 DUP3 DUP3 DUP3 PUSH1 0x6 SHR AND DUP9 ADD ADD MLOAD PUSH1 0x2 DUP7 ADD MSTORE8 AND DUP6 ADD ADD MLOAD SWAP1 DUP3 ADD MSTORE8 ADD SWAP4 SWAP2 SWAP1 PUSH2 0x143D JUMP JUMPDEST POP PUSH2 0x735 PUSH2 0xB36 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC INVALID 0xE2 0xD2 PUSH29 0xD3DC59AF8922776C9F323F6C3CC6D1EE5A299F168048339ED3F75D6473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"355:5263:37:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_available_length_string":{"entryPoint":2186,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_string_fromMemory":{"entryPoint":2042,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_struct_Asset_calldata":{"entryPoint":1507,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_struct_Asset_calldata_5232":{"entryPoint":1485,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_struct_Asset_calldatat_string_calldata":{"entryPoint":1688,"id":null,"parameterSlots":1,"returnSlots":3},"abi_encode_string":{"entryPoint":1573,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_calldata":{"entryPoint":2149,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_string_memory_ptr":{"entryPoint":2163,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_stringliteral":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_1228":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_1427":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_3034":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_32f9":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_3632":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_59d7":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_6e9f":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_90f3":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_973b":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_b05f":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_bcca":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_c128":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_ccb5":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_e534":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_stringliteral_fba9":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"access_calldata_tail_string_calldata":{"entryPoint":4742,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_and_zero_memory_array_bytes":{"entryPoint":3198,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_and_zero_memory_array_bytes_12262":{"entryPoint":3153,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_and_zero_memory_struct_struct_AssetDetails":{"entryPoint":4654,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory":{"entryPoint":1982,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory_array_bytes":{"entryPoint":2870,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_string":{"entryPoint":2014,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_uint256":{"entryPoint":3873,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_uint256_5315":{"entryPoint":3887,"id":null,"parameterSlots":1,"returnSlots":1},"checked_mul_uint256":{"entryPoint":3825,"id":null,"parameterSlots":1,"returnSlots":1},"convert_uint160_to_contract_IStrategy":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"convert_uint8_to_uint256":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"copy_literal_to_memory_56a6a18fe17a1c7329dfbc0c37216227b3fea75ee720fe2eff9b1a862ccbdf5e":{"entryPoint":4936,"id":null,"parameterSlots":0,"returnSlots":1},"copy_literal_to_memory_6273151f959616268004b58dbb21e5c851b7b8d04498b4aabee12291d22fc034":{"entryPoint":4904,"id":null,"parameterSlots":0,"returnSlots":1},"copy_literal_to_memory_84d8a590de33e00cbdc16e1f28c3506f5ec15c599fab9a6a4bcd575cc2f110ce":{"entryPoint":4993,"id":null,"parameterSlots":0,"returnSlots":1},"copy_literal_to_memory_8ae85d849167ff996c04040c44924fd364217285e4cad818292c7ac37c0a345b":{"entryPoint":4803,"id":null,"parameterSlots":0,"returnSlots":1},"copy_literal_to_memory_973bb64086f173ec8099b7ed3d43da984f4a332e4417a08bc6a286e6402b0586":{"entryPoint":4836,"id":null,"parameterSlots":0,"returnSlots":1},"copy_literal_to_memory_ad68b4dd5516c9b8c2050c111c09e315e44fd13499c6724a87c1b4642b615187":{"entryPoint":2954,"id":null,"parameterSlots":0,"returnSlots":1},"copy_literal_to_memory_ba9154e0baa69c78e0ca563b867df81bae9d177c4ea1452c35c84386a70f0f7a":{"entryPoint":4871,"id":null,"parameterSlots":0,"returnSlots":1},"copy_literal_to_memory_d3a129fa95d8e1dff73193c0e0092bfae8c1a1d8cb953ed67bd42a4861e423f9":{"entryPoint":4708,"id":null,"parameterSlots":0,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":1538,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_uint256":{"entryPoint":3901,"id":null,"parameterSlots":1,"returnSlots":1},"external_fun_decimals":{"entryPoint":1628,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_name":{"entryPoint":1809,"id":null,"parameterSlots":0,"returnSlots":0},"external_fun_symbol":{"entryPoint":1771,"id":null,"parameterSlots":0,"returnSlots":0},"extract_returndata":{"entryPoint":2906,"id":null,"parameterSlots":0,"returnSlots":1},"finalize_allocation":{"entryPoint":1948,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_9765":{"entryPoint":1915,"id":null,"parameterSlots":1,"returnSlots":0},"fun_decimals":{"entryPoint":4448,"id":8031,"parameterSlots":2,"returnSlots":1},"fun_encode":{"entryPoint":5105,"id":773,"parameterSlots":1,"returnSlots":1},"fun_name":{"entryPoint":2241,"id":7902,"parameterSlots":3,"returnSlots":1},"fun_returnDataToString":{"entryPoint":3248,"id":923,"parameterSlots":1,"returnSlots":1},"fun_safeDecimals":{"entryPoint":4543,"id":1028,"parameterSlots":1,"returnSlots":1},"fun_safeName":{"entryPoint":2985,"id":987,"parameterSlots":1,"returnSlots":1},"fun_safeSymbol":{"entryPoint":4405,"id":955,"parameterSlots":1,"returnSlots":1},"fun_symbol":{"entryPoint":4122,"id":7989,"parameterSlots":3,"returnSlots":1},"fun_toHexString":{"entryPoint":3989,"id":1539,"parameterSlots":1,"returnSlots":1},"fun_toString":{"entryPoint":3502,"id":1443,"parameterSlots":1,"returnSlots":1},"increment_uint8":{"entryPoint":3131,"id":null,"parameterSlots":1,"returnSlots":1},"memory_array_index_access_bytes":{"entryPoint":3087,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":3109,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3065,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1893,"id":null,"parameterSlots":0,"returnSlots":0},"read_from_calldatat_contract_IStrategy":{"entryPoint":1835,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_calldatat_enum_TokenType":{"entryPoint":1880,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_calldatat_uint8":{"entryPoint":4793,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_memoryt_bytes1":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"require_helper_stringliteral_04fc":{"entryPoint":3914,"id":null,"parameterSlots":1,"returnSlots":0},"revert_forward":{"entryPoint":2137,"id":null,"parameterSlots":0,"returnSlots":0},"validator_assert_enum_TokenType":{"entryPoint":1848,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_address":{"entryPoint":1521,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_uint8":{"entryPoint":1617,"id":null,"parameterSlots":1,"returnSlots":0},"wrapping_div_uint256":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"604060808152600436101561001357600080fd5b6000803560e01c9182635c6d84351461005c57505080636d7cd0371461005757806384b1017d146100525763aa1163b91461004d57600080fd5b610711565b6106eb565b61065c565b346105c95760e03660031901126105c957610076366105cd565b9160843567ffffffffffffffff81116105c9576100979036906004016105e3565b9260c4356100a4816105f1565b6100ac61122e565b9460036100b884610758565b6100c181610738565b036104fd57506100cf6112e4565b85526101376101526100fd6100f86100ec6100ec6020880161072b565b6001600160a01b031690565b610f95565b61014461010d6060870135610dae565b6101318951958694610131602087016008906722a92198989a9a9d60c11b81520190565b90610873565b602f60f81b815260010190565b03601f19810183528261079c565b602086015261015f6112e4565b848601525b61016d82610758565b61017681610738565b1561045b57506101d06101dd6101976100f86100ec6100ec6020870161072b565b6101448651938492610131602085016011907f2c22746f6b656e41646472657373223a2200000000000000000000000000000081520190565b601160f91b815260010190565b602085015192848601519560036101f385610758565b6101fc81610738565b0361044d57610209610b36565b935b600361021682610758565b61021f81610738565b0361043a5761022c610b36565b905b60036102476100f86100ec6100ec6100ec8d870161072b565b93519461025383610758565b9061025d82610738565b500361042b576102aa6102766060610144930135610dae565b89517f2c22746f6b656e4964223a0000000000000000000000000000000000000000006020820152928391602b8301610131565b945b87517f7b226e616d65223a2200000000000000000000000000000000000000000000006020820152988997602989016102e491610873565b7f222c2273796d626f6c223a2200000000000000000000000000000000000000008152600c0161031391610873565b601160f91b815260010161032691610873565b61032f91610873565b7f2c2270726f70657274696573223a7b227374726174656779223a2200000000008152601b0161035e91610873565b7f222c22746f6b656e54797065223a2200000000000000000000000000000000008152600f0161038d91610873565b601160f91b81526001016103a091610873565b6103a991610873565b617d7d60f01b81526002010391601f199283810182526103c9908261079c565b6103d2906113f1565b81517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000602082015292908390603d820161040b91610873565b03908101835261041b908361079c565b51610427819282610625565b0390f35b50610434610b36565b946102ac565b6104476060830151610dae565b9061022e565b610455611348565b9361020b565b6104e86104bf916001600160a01b0361047560a435610dae565b91166104ed57610144610486611328565b610131885195869461013160208701600f907f2c22746f74616c537570706c79223a000000000000000000000000000000000081520190565b7f2c226669786564537570706c79223a00000000000000000000000000000000008152600f0190565b6101dd565b6101446104f8611307565b610486565b600161050b84979397610758565b61051481610738565b0361057157505061052a6100ec6020830161072b565b60ff61053582610ba9565b9161054861054282611135565b916111bf565b906105516107be565b9361055a6112c3565b855260208501528684015216606082015293610164565b6105b9856105bf92610584989498611264565b895261059a6105938280611286565b369161088a565b60208a01526105af6105936020830183611286565b828a0152016112b9565b60ff1690565b6060860152610164565b5080fd5b60809060031901126105de57600490565b600080fd5b908160809103126105de5790565b6001600160a01b038116036105de57565b60005b8381106106155750506000910152565b8181015183820152602001610605565b604091602082526106458151809281602086015260208686019101610602565b601f01601f1916010190565b60ff8116036105de57565b346105de5760a03660031901126105de57602061068d61067b366105cd565b6084359061068882610651565b611160565b60ff60405191168152f35b600319810160a081126105de576080136105de5760049160843567ffffffffffffffff928382116105de57806023830112156105de57818501359384116105de57602484830101116105de576024019190565b346105de576104276107056106ff36610698565b9161101a565b60405191829182610625565b346105de5761042761070561072536610698565b916108c1565b35610735816105f1565b90565b6005111561074257565b634e487b7160e01b600052602160045260246000fd5b3560058110156105de5790565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761079757604052565b610765565b90601f8019910116810190811067ffffffffffffffff82111761079757604052565b604051906080820182811067ffffffffffffffff82111761079757604052565b67ffffffffffffffff811161079757601f01601f191660200190565b6020818303126105de5780519067ffffffffffffffff82116105de570181601f820112156105de57805161082d816107de565b9261083b604051948561079c565b818452602082840101116105de576107359160208085019101610602565b6040513d6000823e3d90fd5b908092918237016000815290565b9061088660209282815194859201610602565b0190565b929192610896826107de565b916108a4604051938461079c565b8294818452818301116105de578281602093846000960137010152565b91604092838101906001600160a01b036108da8361072b565b166108ed5750506107359250369161088a565b9160016108fc84959395610758565b61090581610738565b036109c05750509060006109356100ec61092f61092a6100ec6020600499980161072b565b610ba9565b9361072b565b83516306fdde0360e01b815294859182905afa9182156109bb57610987610735936101449261097996600092610994575b5061013190519687956020870190610873565b61040560f31b815260020190565b602960f81b815260010190565b6109b49061013192933d8091833e6109ac818361079c565b8101906107fa565b9190610966565b610859565b60036109cb84610758565b6109d481610738565b03610abc575050906101376000610a4d6100ec85610a34610a106060610a086100f86100ec6100ec602060049f9e0161072b565b930135610dae565b6101318951978894610131602087016008906722a92198989a9a9d60c11b81520190565b0394610a48601f199687810187528661079c565b61072b565b84516306fdde0360e01b815295869182905afa9283156109bb5761098761073594610a919261097997600092610a9d575b5061013190519788956020870190610873565b0390810183528261079c565b610ab59061013192933d8091833e6109ac818361079c565b9190610a7e565b9150926000610acf6100ec60049561072b565b82516306fdde0360e01b815294859182905afa9283156109bb57610735936101449261098792600092610b13575b5061097961013191519788966020880191610865565b610b2e6109799161013193943d8091833e6109ac818361079c565b929150610afd565b604051906020820182811067ffffffffffffffff8211176107975760405260008252565b3d15610b85573d90610b6b826107de565b91610b79604051938461079c565b82523d6000602084013e565b606090565b60405190610b978261077b565b60038252623f3f3f60e81b6020830152565b600080916040516001600160a01b0360208201916306fdde0360e01b835260048152610bd48161077b565b5192165afa610be1610b5a565b9015610bf05761073590610cb0565b50610735610b8a565b634e487b7160e01b600052603260045260246000fd5b908151811015610c20570160200190565b610bf9565b634e487b7160e01b600052601160045260246000fd5b60ff1660ff8114610c4c5760010190565b610c25565b604051906060820182811067ffffffffffffffff82111761079757604052602a8252604082602036910137565b90610c88826107de565b610c95604051918261079c565b8281528092610ca6601f19916107de565b0190602036910137565b805160408110610cce575080602080610735935183010191016107fa565b602092908303610da3576000805b60ff81168581109081610d81575b5015610cfe57610cf990610c3b565b610cdc565b92610d0c60ff809516610c7e565b92825b85811687811080610d62575b15610d57579081610d4c610d43610d35610d529588610c0f565b516001600160f81b03191690565b871a9188610c0f565b53610c3b565b610d0f565b505094505050905090565b506001600160f81b0319610d79610d358387610c0f565b161515610d1b565b6001600160f81b03199150610d9a90610d359087610c0f565b16151538610cea565b915050610735610b8a565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015610ee3575b506d04ee2d6d415b85acef810000000080831015610ed4575b50662386f26fc1000080831015610ec5575b506305f5e10080831015610eb6575b5061271080831015610ea7575b506064821015610e97575b600a80921015610e8d575b600190816021610e45828701610c7e565b95860101905b610e57575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215610e8857919082610e4b565b610e50565b9160010191610e34565b9190606460029104910191610e29565b60049193920491019138610e1e565b60089193920491019138610e11565b60109193920491019138610e02565b60209193920491019138610df0565b604093508104915038610dd7565b908160021b917f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811603610c4c57565b9060028201809211610c4c57565b9060208201809211610c4c57565b8015610c4c576000190190565b15610f5157565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b610f9d610c51565b90815115610c2057603060208301538151600190811015610c205790607860218401536029915b808311610fd75750610735915015610f4a565b90600f8116906010821015610c20576f181899199a1a9b1b9c1cb0b131b232b360811b611013921a6110098587610c0f565b5360041c92610f3d565b9190610fc4565b91604092838101906001600160a01b036110338361072b565b166110465750506107359250369161088a565b91600161105584959395610758565b61105e81610738565b036110885750509060006109356100ec61092f6110836100ec6020600499980161072b565b611135565b9091611095600391610758565b61109e81610738565b0361112357505060006110b56100ec60049361072b565b83516306fdde0360e01b815292839182905afa80156109bb576109879261073592600092611104575b5051664552433131353560c81b6020820152928391610144919061013160278501610979565b61111c9061014492933d8091833e6109ac818361079c565b91906110de565b90926000610acf6100ec60049561072b565b600080916040516001600160a01b0360208201916395d89b4160e01b835260048152610bd48161077b565b9061116a82610758565b600581101561074257600303611181575050600090565b600161118c83610758565b61119581610738565b036111ba57506001600160a01b0360206107359201356111b4816105f1565b166111bf565b905090565b600080916040516001600160a01b03602082019163313ce56760e01b8352600481526111ea8161077b565b5192165afa6111f7610b5a565b9080611223575b1561121d576020818051810103126105de576020015161073581610651565b50601290565b5060208151146111fe565b604051906080820182811067ffffffffffffffff8211176107975760405260006060838181528160208201528160408201520152565b604051906112718261077b565b60068252654e617469766560d01b6020830152565b903590601e19813603018212156105de570180359067ffffffffffffffff82116105de576020019181360383136105de57565b3561073581610651565b604051906112d08261077b565b6005825264045524332360dc1b6020830152565b604051906112f18261077b565b60078252664552433131353560c81b6020830152565b604051906113148261077b565b600582526466616c736560d81b6020830152565b604051906113358261077b565b60048252637472756560e01b6020830152565b604051906113558261077b565b600c82527f2c22646563696d616c73223a00000000000000000000000000000000000000006020830152565b604051906060820182811067ffffffffffffffff82111761079757604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b8051156114d157611400611381565b61141c6114176114108451610f21565b6003900490565b610ef1565b9161142e61142984610f2f565b610c7e565b92835280815182019060208501935b82821061147f5750505060039051068060011461146e5760021461145f575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c168801015160028601531685010151908201530193919061143d565b50610735610b3656fea2646970667358221220bcfee2d27cd3dc59af8922776c9f323f6c3cc6d1ee5a299f168048339ed3f75d64736f6c63430008120033","opcodes":"PUSH1 0x40 PUSH1 0x80 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x5C6D8435 EQ PUSH2 0x5C JUMPI POP POP DUP1 PUSH4 0x6D7CD037 EQ PUSH2 0x57 JUMPI DUP1 PUSH4 0x84B1017D EQ PUSH2 0x52 JUMPI PUSH4 0xAA1163B9 EQ PUSH2 0x4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x711 JUMP JUMPDEST PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST CALLVALUE PUSH2 0x5C9 JUMPI PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5C9 JUMPI PUSH2 0x76 CALLDATASIZE PUSH2 0x5CD JUMP JUMPDEST SWAP2 PUSH1 0x84 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x5C9 JUMPI PUSH2 0x97 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x5E3 JUMP JUMPDEST SWAP3 PUSH1 0xC4 CALLDATALOAD PUSH2 0xA4 DUP2 PUSH2 0x5F1 JUMP JUMPDEST PUSH2 0xAC PUSH2 0x122E JUMP JUMPDEST SWAP5 PUSH1 0x3 PUSH2 0xB8 DUP5 PUSH2 0x758 JUMP JUMPDEST PUSH2 0xC1 DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0x4FD JUMPI POP PUSH2 0xCF PUSH2 0x12E4 JUMP JUMPDEST DUP6 MSTORE PUSH2 0x137 PUSH2 0x152 PUSH2 0xFD PUSH2 0xF8 PUSH2 0xEC PUSH2 0xEC PUSH1 0x20 DUP9 ADD PUSH2 0x72B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xF95 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x10D PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH2 0xDAE JUMP JUMPDEST PUSH2 0x131 DUP10 MLOAD SWAP6 DUP7 SWAP5 PUSH2 0x131 PUSH1 0x20 DUP8 ADD PUSH1 0x8 SWAP1 PUSH8 0x22A92198989A9A9D PUSH1 0xC1 SHL DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x873 JUMP JUMPDEST PUSH1 0x2F PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x79C JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x15F PUSH2 0x12E4 JUMP JUMPDEST DUP5 DUP7 ADD MSTORE JUMPDEST PUSH2 0x16D DUP3 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x176 DUP2 PUSH2 0x738 JUMP JUMPDEST ISZERO PUSH2 0x45B JUMPI POP PUSH2 0x1D0 PUSH2 0x1DD PUSH2 0x197 PUSH2 0xF8 PUSH2 0xEC PUSH2 0xEC PUSH1 0x20 DUP8 ADD PUSH2 0x72B JUMP JUMPDEST PUSH2 0x144 DUP7 MLOAD SWAP4 DUP5 SWAP3 PUSH2 0x131 PUSH1 0x20 DUP6 ADD PUSH1 0x11 SWAP1 PUSH32 0x2C22746F6B656E41646472657373223A22000000000000000000000000000000 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP3 DUP5 DUP7 ADD MLOAD SWAP6 PUSH1 0x3 PUSH2 0x1F3 DUP6 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x1FC DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0x44D JUMPI PUSH2 0x209 PUSH2 0xB36 JUMP JUMPDEST SWAP4 JUMPDEST PUSH1 0x3 PUSH2 0x216 DUP3 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x21F DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0x43A JUMPI PUSH2 0x22C PUSH2 0xB36 JUMP JUMPDEST SWAP1 JUMPDEST PUSH1 0x3 PUSH2 0x247 PUSH2 0xF8 PUSH2 0xEC PUSH2 0xEC PUSH2 0xEC DUP14 DUP8 ADD PUSH2 0x72B JUMP JUMPDEST SWAP4 MLOAD SWAP5 PUSH2 0x253 DUP4 PUSH2 0x758 JUMP JUMPDEST SWAP1 PUSH2 0x25D DUP3 PUSH2 0x738 JUMP JUMPDEST POP SUB PUSH2 0x42B JUMPI PUSH2 0x2AA PUSH2 0x276 PUSH1 0x60 PUSH2 0x144 SWAP4 ADD CALLDATALOAD PUSH2 0xDAE JUMP JUMPDEST DUP10 MLOAD PUSH32 0x2C22746F6B656E4964223A000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 PUSH1 0x2B DUP4 ADD PUSH2 0x131 JUMP JUMPDEST SWAP5 JUMPDEST DUP8 MLOAD PUSH32 0x7B226E616D65223A220000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP9 DUP10 SWAP8 PUSH1 0x29 DUP10 ADD PUSH2 0x2E4 SWAP2 PUSH2 0x873 JUMP JUMPDEST PUSH32 0x222C2273796D626F6C223A220000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xC ADD PUSH2 0x313 SWAP2 PUSH2 0x873 JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH1 0x1 ADD PUSH2 0x326 SWAP2 PUSH2 0x873 JUMP JUMPDEST PUSH2 0x32F SWAP2 PUSH2 0x873 JUMP JUMPDEST PUSH32 0x2C2270726F70657274696573223A7B227374726174656779223A220000000000 DUP2 MSTORE PUSH1 0x1B ADD PUSH2 0x35E SWAP2 PUSH2 0x873 JUMP JUMPDEST PUSH32 0x222C22746F6B656E54797065223A220000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xF ADD PUSH2 0x38D SWAP2 PUSH2 0x873 JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL DUP2 MSTORE PUSH1 0x1 ADD PUSH2 0x3A0 SWAP2 PUSH2 0x873 JUMP JUMPDEST PUSH2 0x3A9 SWAP2 PUSH2 0x873 JUMP JUMPDEST PUSH2 0x7D7D PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 ADD SUB SWAP2 PUSH1 0x1F NOT SWAP3 DUP4 DUP2 ADD DUP3 MSTORE PUSH2 0x3C9 SWAP1 DUP3 PUSH2 0x79C JUMP JUMPDEST PUSH2 0x3D2 SWAP1 PUSH2 0x13F1 JUMP JUMPDEST DUP2 MLOAD PUSH32 0x646174613A6170706C69636174696F6E2F6A736F6E3B6261736536342C000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP1 DUP4 SWAP1 PUSH1 0x3D DUP3 ADD PUSH2 0x40B SWAP2 PUSH2 0x873 JUMP JUMPDEST SUB SWAP1 DUP2 ADD DUP4 MSTORE PUSH2 0x41B SWAP1 DUP4 PUSH2 0x79C JUMP JUMPDEST MLOAD PUSH2 0x427 DUP2 SWAP3 DUP3 PUSH2 0x625 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP PUSH2 0x434 PUSH2 0xB36 JUMP JUMPDEST SWAP5 PUSH2 0x2AC JUMP JUMPDEST PUSH2 0x447 PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0xDAE JUMP JUMPDEST SWAP1 PUSH2 0x22E JUMP JUMPDEST PUSH2 0x455 PUSH2 0x1348 JUMP JUMPDEST SWAP4 PUSH2 0x20B JUMP JUMPDEST PUSH2 0x4E8 PUSH2 0x4BF SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x475 PUSH1 0xA4 CALLDATALOAD PUSH2 0xDAE JUMP JUMPDEST SWAP2 AND PUSH2 0x4ED JUMPI PUSH2 0x144 PUSH2 0x486 PUSH2 0x1328 JUMP JUMPDEST PUSH2 0x131 DUP9 MLOAD SWAP6 DUP7 SWAP5 PUSH2 0x131 PUSH1 0x20 DUP8 ADD PUSH1 0xF SWAP1 PUSH32 0x2C22746F74616C537570706C79223A0000000000000000000000000000000000 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH32 0x2C226669786564537570706C79223A0000000000000000000000000000000000 DUP2 MSTORE PUSH1 0xF ADD SWAP1 JUMP JUMPDEST PUSH2 0x1DD JUMP JUMPDEST PUSH2 0x144 PUSH2 0x4F8 PUSH2 0x1307 JUMP JUMPDEST PUSH2 0x486 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x50B DUP5 SWAP8 SWAP4 SWAP8 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x514 DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0x571 JUMPI POP POP PUSH2 0x52A PUSH2 0xEC PUSH1 0x20 DUP4 ADD PUSH2 0x72B JUMP JUMPDEST PUSH1 0xFF PUSH2 0x535 DUP3 PUSH2 0xBA9 JUMP JUMPDEST SWAP2 PUSH2 0x548 PUSH2 0x542 DUP3 PUSH2 0x1135 JUMP JUMPDEST SWAP2 PUSH2 0x11BF JUMP JUMPDEST SWAP1 PUSH2 0x551 PUSH2 0x7BE JUMP JUMPDEST SWAP4 PUSH2 0x55A PUSH2 0x12C3 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD MSTORE DUP7 DUP5 ADD MSTORE AND PUSH1 0x60 DUP3 ADD MSTORE SWAP4 PUSH2 0x164 JUMP JUMPDEST PUSH2 0x5B9 DUP6 PUSH2 0x5BF SWAP3 PUSH2 0x584 SWAP9 SWAP5 SWAP9 PUSH2 0x1264 JUMP JUMPDEST DUP10 MSTORE PUSH2 0x59A PUSH2 0x593 DUP3 DUP1 PUSH2 0x1286 JUMP JUMPDEST CALLDATASIZE SWAP2 PUSH2 0x88A JUMP JUMPDEST PUSH1 0x20 DUP11 ADD MSTORE PUSH2 0x5AF PUSH2 0x593 PUSH1 0x20 DUP4 ADD DUP4 PUSH2 0x1286 JUMP JUMPDEST DUP3 DUP11 ADD MSTORE ADD PUSH2 0x12B9 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x164 JUMP JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x80 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x5DE JUMPI PUSH1 0x4 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x80 SWAP2 SUB SLT PUSH2 0x5DE JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0x5DE JUMPI JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x615 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x605 JUMP JUMPDEST PUSH1 0x40 SWAP2 PUSH1 0x20 DUP3 MSTORE PUSH2 0x645 DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x602 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF DUP2 AND SUB PUSH2 0x5DE JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x5DE JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5DE JUMPI PUSH1 0x20 PUSH2 0x68D PUSH2 0x67B CALLDATASIZE PUSH2 0x5CD JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD SWAP1 PUSH2 0x688 DUP3 PUSH2 0x651 JUMP JUMPDEST PUSH2 0x1160 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x40 MLOAD SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0x3 NOT DUP2 ADD PUSH1 0xA0 DUP2 SLT PUSH2 0x5DE JUMPI PUSH1 0x80 SGT PUSH2 0x5DE JUMPI PUSH1 0x4 SWAP2 PUSH1 0x84 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0x5DE JUMPI DUP1 PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x5DE JUMPI DUP2 DUP6 ADD CALLDATALOAD SWAP4 DUP5 GT PUSH2 0x5DE JUMPI PUSH1 0x24 DUP5 DUP4 ADD ADD GT PUSH2 0x5DE JUMPI PUSH1 0x24 ADD SWAP2 SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x5DE JUMPI PUSH2 0x427 PUSH2 0x705 PUSH2 0x6FF CALLDATASIZE PUSH2 0x698 JUMP JUMPDEST SWAP2 PUSH2 0x101A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x625 JUMP JUMPDEST CALLVALUE PUSH2 0x5DE JUMPI PUSH2 0x427 PUSH2 0x705 PUSH2 0x725 CALLDATASIZE PUSH2 0x698 JUMP JUMPDEST SWAP2 PUSH2 0x8C1 JUMP JUMPDEST CALLDATALOAD PUSH2 0x735 DUP2 PUSH2 0x5F1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x5 GT ISZERO PUSH2 0x742 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLDATALOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x5DE JUMPI SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x797 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x765 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x797 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x80 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x797 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x797 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 SUB SLT PUSH2 0x5DE JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x5DE JUMPI ADD DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x5DE JUMPI DUP1 MLOAD PUSH2 0x82D DUP2 PUSH2 0x7DE JUMP JUMPDEST SWAP3 PUSH2 0x83B PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x79C JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x5DE JUMPI PUSH2 0x735 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x602 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 DUP1 SWAP3 SWAP2 DUP3 CALLDATACOPY ADD PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x886 PUSH1 0x20 SWAP3 DUP3 DUP2 MLOAD SWAP5 DUP6 SWAP3 ADD PUSH2 0x602 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x896 DUP3 PUSH2 0x7DE JUMP JUMPDEST SWAP2 PUSH2 0x8A4 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x79C JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x5DE JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST SWAP2 PUSH1 0x40 SWAP3 DUP4 DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x8DA DUP4 PUSH2 0x72B JUMP JUMPDEST AND PUSH2 0x8ED JUMPI POP POP PUSH2 0x735 SWAP3 POP CALLDATASIZE SWAP2 PUSH2 0x88A JUMP JUMPDEST SWAP2 PUSH1 0x1 PUSH2 0x8FC DUP5 SWAP6 SWAP4 SWAP6 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x905 DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0x9C0 JUMPI POP POP SWAP1 PUSH1 0x0 PUSH2 0x935 PUSH2 0xEC PUSH2 0x92F PUSH2 0x92A PUSH2 0xEC PUSH1 0x20 PUSH1 0x4 SWAP10 SWAP9 ADD PUSH2 0x72B JUMP JUMPDEST PUSH2 0xBA9 JUMP JUMPDEST SWAP4 PUSH2 0x72B JUMP JUMPDEST DUP4 MLOAD PUSH4 0x6FDDE03 PUSH1 0xE0 SHL DUP2 MSTORE SWAP5 DUP6 SWAP2 DUP3 SWAP1 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x9BB JUMPI PUSH2 0x987 PUSH2 0x735 SWAP4 PUSH2 0x144 SWAP3 PUSH2 0x979 SWAP7 PUSH1 0x0 SWAP3 PUSH2 0x994 JUMPI JUMPDEST POP PUSH2 0x131 SWAP1 MLOAD SWAP7 DUP8 SWAP6 PUSH1 0x20 DUP8 ADD SWAP1 PUSH2 0x873 JUMP JUMPDEST PUSH2 0x405 PUSH1 0xF3 SHL DUP2 MSTORE PUSH1 0x2 ADD SWAP1 JUMP JUMPDEST PUSH1 0x29 PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0x9B4 SWAP1 PUSH2 0x131 SWAP3 SWAP4 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x9AC DUP2 DUP4 PUSH2 0x79C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x7FA JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x966 JUMP JUMPDEST PUSH2 0x859 JUMP JUMPDEST PUSH1 0x3 PUSH2 0x9CB DUP5 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x9D4 DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0xABC JUMPI POP POP SWAP1 PUSH2 0x137 PUSH1 0x0 PUSH2 0xA4D PUSH2 0xEC DUP6 PUSH2 0xA34 PUSH2 0xA10 PUSH1 0x60 PUSH2 0xA08 PUSH2 0xF8 PUSH2 0xEC PUSH2 0xEC PUSH1 0x20 PUSH1 0x4 SWAP16 SWAP15 ADD PUSH2 0x72B JUMP JUMPDEST SWAP4 ADD CALLDATALOAD PUSH2 0xDAE JUMP JUMPDEST PUSH2 0x131 DUP10 MLOAD SWAP8 DUP9 SWAP5 PUSH2 0x131 PUSH1 0x20 DUP8 ADD PUSH1 0x8 SWAP1 PUSH8 0x22A92198989A9A9D PUSH1 0xC1 SHL DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SUB SWAP5 PUSH2 0xA48 PUSH1 0x1F NOT SWAP7 DUP8 DUP2 ADD DUP8 MSTORE DUP7 PUSH2 0x79C JUMP JUMPDEST PUSH2 0x72B JUMP JUMPDEST DUP5 MLOAD PUSH4 0x6FDDE03 PUSH1 0xE0 SHL DUP2 MSTORE SWAP6 DUP7 SWAP2 DUP3 SWAP1 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x9BB JUMPI PUSH2 0x987 PUSH2 0x735 SWAP5 PUSH2 0xA91 SWAP3 PUSH2 0x979 SWAP8 PUSH1 0x0 SWAP3 PUSH2 0xA9D JUMPI JUMPDEST POP PUSH2 0x131 SWAP1 MLOAD SWAP8 DUP9 SWAP6 PUSH1 0x20 DUP8 ADD SWAP1 PUSH2 0x873 JUMP JUMPDEST SUB SWAP1 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x79C JUMP JUMPDEST PUSH2 0xAB5 SWAP1 PUSH2 0x131 SWAP3 SWAP4 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x9AC DUP2 DUP4 PUSH2 0x79C JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xA7E JUMP JUMPDEST SWAP2 POP SWAP3 PUSH1 0x0 PUSH2 0xACF PUSH2 0xEC PUSH1 0x4 SWAP6 PUSH2 0x72B JUMP JUMPDEST DUP3 MLOAD PUSH4 0x6FDDE03 PUSH1 0xE0 SHL DUP2 MSTORE SWAP5 DUP6 SWAP2 DUP3 SWAP1 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x9BB JUMPI PUSH2 0x735 SWAP4 PUSH2 0x144 SWAP3 PUSH2 0x987 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xB13 JUMPI JUMPDEST POP PUSH2 0x979 PUSH2 0x131 SWAP2 MLOAD SWAP8 DUP9 SWAP7 PUSH1 0x20 DUP9 ADD SWAP2 PUSH2 0x865 JUMP JUMPDEST PUSH2 0xB2E PUSH2 0x979 SWAP2 PUSH2 0x131 SWAP4 SWAP5 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x9AC DUP2 DUP4 PUSH2 0x79C JUMP JUMPDEST SWAP3 SWAP2 POP PUSH2 0xAFD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x797 JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0xB85 JUMPI RETURNDATASIZE SWAP1 PUSH2 0xB6B DUP3 PUSH2 0x7DE JUMP JUMPDEST SWAP2 PUSH2 0xB79 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x79C JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xB97 DUP3 PUSH2 0x77B JUMP JUMPDEST PUSH1 0x3 DUP3 MSTORE PUSH3 0x3F3F3F PUSH1 0xE8 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD SWAP2 PUSH4 0x6FDDE03 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0xBD4 DUP2 PUSH2 0x77B JUMP JUMPDEST MLOAD SWAP3 AND GAS STATICCALL PUSH2 0xBE1 PUSH2 0xB5A JUMP JUMPDEST SWAP1 ISZERO PUSH2 0xBF0 JUMPI PUSH2 0x735 SWAP1 PUSH2 0xCB0 JUMP JUMPDEST POP PUSH2 0x735 PUSH2 0xB8A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xC20 JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0xBF9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xFF AND PUSH1 0xFF DUP2 EQ PUSH2 0xC4C JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0xC25 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x797 JUMPI PUSH1 0x40 MSTORE PUSH1 0x2A DUP3 MSTORE PUSH1 0x40 DUP3 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH2 0xC88 DUP3 PUSH2 0x7DE JUMP JUMPDEST PUSH2 0xC95 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x79C JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0xCA6 PUSH1 0x1F NOT SWAP2 PUSH2 0x7DE JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST DUP1 MLOAD PUSH1 0x40 DUP2 LT PUSH2 0xCCE JUMPI POP DUP1 PUSH1 0x20 DUP1 PUSH2 0x735 SWAP4 MLOAD DUP4 ADD ADD SWAP2 ADD PUSH2 0x7FA JUMP JUMPDEST PUSH1 0x20 SWAP3 SWAP1 DUP4 SUB PUSH2 0xDA3 JUMPI PUSH1 0x0 DUP1 JUMPDEST PUSH1 0xFF DUP2 AND DUP6 DUP2 LT SWAP1 DUP2 PUSH2 0xD81 JUMPI JUMPDEST POP ISZERO PUSH2 0xCFE JUMPI PUSH2 0xCF9 SWAP1 PUSH2 0xC3B JUMP JUMPDEST PUSH2 0xCDC JUMP JUMPDEST SWAP3 PUSH2 0xD0C PUSH1 0xFF DUP1 SWAP6 AND PUSH2 0xC7E JUMP JUMPDEST SWAP3 DUP3 JUMPDEST DUP6 DUP2 AND DUP8 DUP2 LT DUP1 PUSH2 0xD62 JUMPI JUMPDEST ISZERO PUSH2 0xD57 JUMPI SWAP1 DUP2 PUSH2 0xD4C PUSH2 0xD43 PUSH2 0xD35 PUSH2 0xD52 SWAP6 DUP9 PUSH2 0xC0F JUMP JUMPDEST MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 JUMP JUMPDEST DUP8 BYTE SWAP2 DUP9 PUSH2 0xC0F JUMP JUMPDEST MSTORE8 PUSH2 0xC3B JUMP JUMPDEST PUSH2 0xD0F JUMP JUMPDEST POP POP SWAP5 POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT PUSH2 0xD79 PUSH2 0xD35 DUP4 DUP8 PUSH2 0xC0F JUMP JUMPDEST AND ISZERO ISZERO PUSH2 0xD1B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT SWAP2 POP PUSH2 0xD9A SWAP1 PUSH2 0xD35 SWAP1 DUP8 PUSH2 0xC0F JUMP JUMPDEST AND ISZERO ISZERO CODESIZE PUSH2 0xCEA JUMP JUMPDEST SWAP2 POP POP PUSH2 0x735 PUSH2 0xB8A JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP2 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP1 DUP3 LT ISZERO PUSH2 0xEE3 JUMPI JUMPDEST POP PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP1 DUP4 LT ISZERO PUSH2 0xED4 JUMPI JUMPDEST POP PUSH7 0x2386F26FC10000 DUP1 DUP4 LT ISZERO PUSH2 0xEC5 JUMPI JUMPDEST POP PUSH4 0x5F5E100 DUP1 DUP4 LT ISZERO PUSH2 0xEB6 JUMPI JUMPDEST POP PUSH2 0x2710 DUP1 DUP4 LT ISZERO PUSH2 0xEA7 JUMPI JUMPDEST POP PUSH1 0x64 DUP3 LT ISZERO PUSH2 0xE97 JUMPI JUMPDEST PUSH1 0xA DUP1 SWAP3 LT ISZERO PUSH2 0xE8D JUMPI JUMPDEST PUSH1 0x1 SWAP1 DUP2 PUSH1 0x21 PUSH2 0xE45 DUP3 DUP8 ADD PUSH2 0xC7E JUMP JUMPDEST SWAP6 DUP7 ADD ADD SWAP1 JUMPDEST PUSH2 0xE57 JUMPI JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP1 DUP4 SWAP1 PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP3 DUP3 MOD BYTE DUP4 MSTORE8 DIV SWAP2 DUP3 ISZERO PUSH2 0xE88 JUMPI SWAP2 SWAP1 DUP3 PUSH2 0xE4B JUMP JUMPDEST PUSH2 0xE50 JUMP JUMPDEST SWAP2 PUSH1 0x1 ADD SWAP2 PUSH2 0xE34 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x64 PUSH1 0x2 SWAP2 DIV SWAP2 ADD SWAP2 PUSH2 0xE29 JUMP JUMPDEST PUSH1 0x4 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0xE1E JUMP JUMPDEST PUSH1 0x8 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0xE11 JUMP JUMPDEST PUSH1 0x10 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0xE02 JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0xDF0 JUMP JUMPDEST PUSH1 0x40 SWAP4 POP DUP2 DIV SWAP2 POP CODESIZE PUSH2 0xDD7 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x2 SHL SWAP2 PUSH32 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND SUB PUSH2 0xC4C JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x2 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC4C JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC4C JUMPI JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC4C JUMPI PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xF51 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0xF9D PUSH2 0xC51 JUMP JUMPDEST SWAP1 DUP2 MLOAD ISZERO PUSH2 0xC20 JUMPI PUSH1 0x30 PUSH1 0x20 DUP4 ADD MSTORE8 DUP2 MLOAD PUSH1 0x1 SWAP1 DUP2 LT ISZERO PUSH2 0xC20 JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP5 ADD MSTORE8 PUSH1 0x29 SWAP2 JUMPDEST DUP1 DUP4 GT PUSH2 0xFD7 JUMPI POP PUSH2 0x735 SWAP2 POP ISZERO PUSH2 0xF4A JUMP JUMPDEST SWAP1 PUSH1 0xF DUP2 AND SWAP1 PUSH1 0x10 DUP3 LT ISZERO PUSH2 0xC20 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH2 0x1013 SWAP3 BYTE PUSH2 0x1009 DUP6 DUP8 PUSH2 0xC0F JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 PUSH2 0xF3D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xFC4 JUMP JUMPDEST SWAP2 PUSH1 0x40 SWAP3 DUP4 DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1033 DUP4 PUSH2 0x72B JUMP JUMPDEST AND PUSH2 0x1046 JUMPI POP POP PUSH2 0x735 SWAP3 POP CALLDATASIZE SWAP2 PUSH2 0x88A JUMP JUMPDEST SWAP2 PUSH1 0x1 PUSH2 0x1055 DUP5 SWAP6 SWAP4 SWAP6 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x105E DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0x1088 JUMPI POP POP SWAP1 PUSH1 0x0 PUSH2 0x935 PUSH2 0xEC PUSH2 0x92F PUSH2 0x1083 PUSH2 0xEC PUSH1 0x20 PUSH1 0x4 SWAP10 SWAP9 ADD PUSH2 0x72B JUMP JUMPDEST PUSH2 0x1135 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x1095 PUSH1 0x3 SWAP2 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x109E DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0x1123 JUMPI POP POP PUSH1 0x0 PUSH2 0x10B5 PUSH2 0xEC PUSH1 0x4 SWAP4 PUSH2 0x72B JUMP JUMPDEST DUP4 MLOAD PUSH4 0x6FDDE03 PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 DUP4 SWAP2 DUP3 SWAP1 GAS STATICCALL DUP1 ISZERO PUSH2 0x9BB JUMPI PUSH2 0x987 SWAP3 PUSH2 0x735 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0x1104 JUMPI JUMPDEST POP MLOAD PUSH7 0x45524331313535 PUSH1 0xC8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP3 DUP4 SWAP2 PUSH2 0x144 SWAP2 SWAP1 PUSH2 0x131 PUSH1 0x27 DUP6 ADD PUSH2 0x979 JUMP JUMPDEST PUSH2 0x111C SWAP1 PUSH2 0x144 SWAP3 SWAP4 RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x9AC DUP2 DUP4 PUSH2 0x79C JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x10DE JUMP JUMPDEST SWAP1 SWAP3 PUSH1 0x0 PUSH2 0xACF PUSH2 0xEC PUSH1 0x4 SWAP6 PUSH2 0x72B JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD SWAP2 PUSH4 0x95D89B41 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0xBD4 DUP2 PUSH2 0x77B JUMP JUMPDEST SWAP1 PUSH2 0x116A DUP3 PUSH2 0x758 JUMP JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x742 JUMPI PUSH1 0x3 SUB PUSH2 0x1181 JUMPI POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x118C DUP4 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x1195 DUP2 PUSH2 0x738 JUMP JUMPDEST SUB PUSH2 0x11BA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 PUSH2 0x735 SWAP3 ADD CALLDATALOAD PUSH2 0x11B4 DUP2 PUSH2 0x5F1 JUMP JUMPDEST AND PUSH2 0x11BF JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD SWAP2 PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0x11EA DUP2 PUSH2 0x77B JUMP JUMPDEST MLOAD SWAP3 AND GAS STATICCALL PUSH2 0x11F7 PUSH2 0xB5A JUMP JUMPDEST SWAP1 DUP1 PUSH2 0x1223 JUMPI JUMPDEST ISZERO PUSH2 0x121D JUMPI PUSH1 0x20 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x5DE JUMPI PUSH1 0x20 ADD MLOAD PUSH2 0x735 DUP2 PUSH2 0x651 JUMP JUMPDEST POP PUSH1 0x12 SWAP1 JUMP JUMPDEST POP PUSH1 0x20 DUP2 MLOAD EQ PUSH2 0x11FE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x80 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x797 JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 DUP4 DUP2 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1271 DUP3 PUSH2 0x77B JUMP JUMPDEST PUSH1 0x6 DUP3 MSTORE PUSH6 0x4E6174697665 PUSH1 0xD0 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x5DE JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x5DE JUMPI PUSH1 0x20 ADD SWAP2 DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0x5DE JUMPI JUMP JUMPDEST CALLDATALOAD PUSH2 0x735 DUP2 PUSH2 0x651 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x12D0 DUP3 PUSH2 0x77B JUMP JUMPDEST PUSH1 0x5 DUP3 MSTORE PUSH5 0x455243323 PUSH1 0xDC SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x12F1 DUP3 PUSH2 0x77B JUMP JUMPDEST PUSH1 0x7 DUP3 MSTORE PUSH7 0x45524331313535 PUSH1 0xC8 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1314 DUP3 PUSH2 0x77B JUMP JUMPDEST PUSH1 0x5 DUP3 MSTORE PUSH5 0x66616C7365 PUSH1 0xD8 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1335 DUP3 PUSH2 0x77B JUMP JUMPDEST PUSH1 0x4 DUP3 MSTORE PUSH4 0x74727565 PUSH1 0xE0 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1355 DUP3 PUSH2 0x77B JUMP JUMPDEST PUSH1 0xC DUP3 MSTORE PUSH32 0x2C22646563696D616C73223A0000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x797 JUMPI PUSH1 0x40 MSTORE PUSH1 0x40 DUP3 MSTORE PUSH32 0x6768696A6B6C6D6E6F707172737475767778797A303132333435363738392B2F PUSH1 0x40 DUP4 PUSH32 0x4142434445464748494A4B4C4D4E4F505152535455565758595A616263646566 PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x14D1 JUMPI PUSH2 0x1400 PUSH2 0x1381 JUMP JUMPDEST PUSH2 0x141C PUSH2 0x1417 PUSH2 0x1410 DUP5 MLOAD PUSH2 0xF21 JUMP JUMPDEST PUSH1 0x3 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH2 0xEF1 JUMP JUMPDEST SWAP2 PUSH2 0x142E PUSH2 0x1429 DUP5 PUSH2 0xF2F JUMP JUMPDEST PUSH2 0xC7E JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP1 DUP2 MLOAD DUP3 ADD SWAP1 PUSH1 0x20 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP3 LT PUSH2 0x147F JUMPI POP POP POP PUSH1 0x3 SWAP1 MLOAD MOD DUP1 PUSH1 0x1 EQ PUSH2 0x146E JUMPI PUSH1 0x2 EQ PUSH2 0x145F JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x3D PUSH1 0xF8 SHL PUSH1 0x0 NOT SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST POP PUSH2 0x3D3D PUSH1 0xF0 SHL PUSH1 0x1 NOT SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP4 PUSH1 0x4 SWAP1 PUSH1 0x3 DUP1 SWAP5 ADD SWAP4 DUP5 MLOAD PUSH1 0x1 SWAP1 PUSH1 0x3F SWAP1 DUP3 DUP3 DUP3 PUSH1 0x12 SHR AND DUP9 ADD ADD MLOAD DUP6 MSTORE8 DUP3 DUP3 DUP3 PUSH1 0xC SHR AND DUP9 ADD ADD MLOAD DUP4 DUP7 ADD MSTORE8 DUP3 DUP3 DUP3 PUSH1 0x6 SHR AND DUP9 ADD ADD MLOAD PUSH1 0x2 DUP7 ADD MSTORE8 AND DUP6 ADD ADD MLOAD SWAP1 DUP3 ADD MSTORE8 ADD SWAP4 SWAP2 SWAP1 PUSH2 0x143D JUMP JUMPDEST POP PUSH2 0x735 PUSH2 0xB36 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC INVALID 0xE2 0xD2 PUSH29 0xD3DC59AF8922776C9F323F6C3CC6D1EE5A299F168048339ED3F75D6473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"355:5263:37:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;-1:-1:-1;;355:5263:37;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;:::i;:::-;3254:15;355:5263;3254:15;;;:::i;:::-;4022:21:39;;;:::i;:::-;3254:36:37;3273:17;;3384:29;;;:::i;:::-;355:5263;;4022:21:39;3466:116:37;3495:55;:39;3503:30;3511:21;;;;;:::i;:::-;-1:-1:-1;;;;;355:5263:37;;;3495:39;:55;:::i;:::-;4022:21:39;3557:24:37;:13;;;4022:21:39;3557:24:37;:::i;:::-;4022:21:39;355:5263:37;;3466:116;;;4022:21:39;3511::37;3466:116;;4022:21:39;;-1:-1:-1;;;4022:21:39;;;;;;;;:::i;:::-;-1:-1:-1;;;4022:21:39;;;;;;;3466:116:37;;;;;;;;;:::i;:::-;3511:21;3427:12;;:169;3610:26;;:::i;:::-;:14;;;355:5263;3250:845;4152:15;;;:::i;:::-;4022:21:39;;;:::i;:::-;4152:35:37;;;4260:21;355:5263;4206:99;4244:55;:39;4252:30;4260:21;;;;;:::i;4244:55::-;355:5263;;;4206:99;;;355:5263;4260:21;4206:99;;355:5263;;;;;;;;;-1:-1:-1;;;355:5263:37;;;;;;4206:99;4709:12;;;;4795:14;;;;;4872:15;355:5263;4872:15;;;:::i;:::-;4022:21:39;;;:::i;:::-;4872:36:37;3273:17;;355:5263;;:::i;:::-;4872:58;;355:5263;4960:15;;;:::i;:::-;4022:21:39;;;:::i;:::-;4960:36:37;3273:17;;355:5263;;:::i;:::-;4960:71;;355:5263;5120:57;:41;5128:32;5136:23;5144:14;;;;;:::i;5120:57::-;5254:17;;5374:15;;;;:::i;:::-;4022:21:39;;;;:::i;:::-;-1:-1:-1;5374:36:37;3273:17;;5420:57;5452:24;:13;355:5263;5452:13;;4022:21:39;5452:24:37;:::i;:::-;355:5263;;;4709:12;5420:57;;355:5263;;;;;;;;;5420:57;5374:109;;355:5263;;;4709:12;4597:946;;355:5263;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;-1:-1:-1;;;355:5263:37;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;-1:-1:-1;;;355:5263:37;;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;;;355:5263:37;;;;4597:946;3466:116;;;4597:946;;;;;;;;;;:::i;:::-;:980;;;:::i;:::-;355:5263;;;4709:12;4506:1089;;355:5263;;;;;;;;;;;:::i;:::-;4506:1089;;;;;;;;;;:::i;:::-;355:5263;;;;;;:::i;:::-;;;;5374:109;355:5263;;;:::i;:::-;5374:109;;;4960:71;5004:27;:16;;;355:5263;5004:27;:::i;:::-;4960:71;;;4872:58;355:5263;;:::i;:::-;4872:58;;;4152:290;4324:118;355:5263;;-1:-1:-1;;;;;4360:22:37;355:5263;;4360:22;:::i;:::-;4403:38;355:5263;;;;;;:::i;:::-;;;;4324:118;;;355:5263;4324:118;;;355:5263;;;;;;;;;;;;;;;;4324:118;4152:290;;4403:38;355:5263;;;:::i;:::-;4403:38;;3250:845;355:5263;3657:15;;;;;;:::i;:::-;4022:21:39;;;:::i;:::-;3657:34:37;355:5263;;3729:21;;3722:29;3729:21;;;;;:::i;3722:29::-;355:5263;3797:16;;;:::i;:::-;3815:18;3835:20;3815:18;;;:::i;:::-;3835:20;;:::i;:::-;355:5263;;;:::i;:::-;;;;:::i;:::-;;;3729:21;3775:81;;355:5263;3775:81;;;355:5263;;3775:81;;;355:5263;3653:442;3250:845;;3653:442;4064:20;3909:28;4045:39;3909:28;;;;;;:::i;:::-;355:5263;;4022:21:39;3966:16:37;;;;:::i;:::-;355:5263;4022:21:39;;:::i;:::-;3951:12:37;;;:31;4022:21:39;4013:18:37;3951:12;4013:18;;;;:::i;4022:21:39:-;3996:14:37;;;:35;4064:20;;:::i;:::-;355:5263;;;;4045:39;:16;;;355:5263;3250:845;;355:5263;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;355:5263:37;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;355:5263:37;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3466:116;355:5263;-1:-1:-1;;355:5263:37;;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;-1:-1:-1;;355:5263:37;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;-1:-1:-1;;355:5263:37;;;;;;;;-1:-1:-1;355:5263:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;:::o;4022:21:39:-;;-1:-1:-1;4022:21:39;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;3466:116:37;;;355:5263;;;4022:21:39;;;;;;;;;;;;;:::o;:::-;355:5263:37;;4022:21:39;355:5263:37;4022:21:39;;;;;;;;;;;355:5263:37;4022:21:39;:::o;:::-;;;;;;3466:116:37;355:5263;-1:-1:-1;;355:5263:37;4022:21:39;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;355:5263:37;4022:21:39;355:5263:37;;4022:21:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;355:5263:37;;4022:21:39;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;355:5263:37;;;4022:21:39;;;;;:::i;:::-;;;:::o;:::-;;;;;;;:::i;:::-;355:5263:37;4022:21:39;355:5263:37;;4022:21:39;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;4022:21:39;;;;;;:::o;612:1275:37:-;;728:14;;;;;;-1:-1:-1;;;;;728:14:37;;;:::i;:::-;355:5263;;;4022:21:39;;;;;;;;:::i;724:1157:37:-;825:15;844;825;;;;;;:::i;:::-;4022:21:39;;;:::i;:::-;825:34:37;844:15;;901:21;;;4040:1:39;996:19:37;:14;972:16;894:29;901:21;;996;901;;;;:::i;894:29::-;972:16;:::i;:::-;996:14;;:::i;:19::-;355:5263;;-1:-1:-1;;;996:21:37;;355:5263;;;;;996:21;;;;;;;4022::39;955:68:37;996:21;4022::39;996::37;4022::39;996::37;4040:1:39;996:21:37;;;821:1050;355:5263;4022:21:39;355:5263:37;;955:68;;;901:21;955:68;;4022:21:39;;:::i;:::-;-1:-1:-1;;;4022:21:39;;;;;;;-1:-1:-1;;;4022:21:39;;;;;;996::37;;;4022::39;996::37;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;:::i;821:1050::-;1068:17;1049:15;;;:::i;:::-;4022:21:39;;;:::i;:::-;1049:36:37;1068:17;;1368:21;;;4022::39;4040:1;1638:19:37;:14;1368:21;4022::39;1486:24:37;:13;1352:55;:39;1360:30;1368:21;;1638;1368;;;;:::i;1352:55::-;1486:13;;4022:21:39;1486:24:37;:::i;:::-;4022:21:39;355:5263:37;;1250:294;;;4022:21:39;1368::37;1250:294;;4022:21:39;;-1:-1:-1;;;4022:21:39;;;;;;1250:294:37;3466:116;1250:294;3466:116;;1250:294;;;;;;;;:::i;:::-;1638:14;:::i;:19::-;355:5263;;-1:-1:-1;;;1638:21:37;;355:5263;;;;;1638:21;;;;;;;4022::39;1164:554:37;1638:21;4022::39;1638::37;4022::39;1638::37;4040:1:39;1638:21:37;;;1045:826;355:5263;4022:21:39;355:5263:37;;1164:554;;;1368:21;1164:554;;4022:21:39;;:::i;:::-;1164:554:37;;;;;;;;:::i;1638:21::-;;;4022::39;1638::37;;;;;;;;;;;:::i;:::-;;;;;1045:826;1828:14;;;4040:1:39;1828:19:37;:14;:21;:14;;:::i;:19::-;355:5263;;-1:-1:-1;;;1828:21:37;;355:5263;;;;;1828:21;;;;;;;1793:62;1828:21;4022::39;1828::37;4022::39;1828::37;4040:1:39;1828:21:37;;;1045:826;355:5263;4022:21:39;;355:5263:37;;1793:62;;;;;;4022:21:39;;:::i;1828::37:-;;4022::39;1828::37;4022::39;1828::37;;;;;;;;;;;:::i;:::-;;;;;;268:10:12;355:5263:37;;4022:21:39;;;;;;;;;;;;;355:5263:37;4022:21:39;355:5263:37;268:10:12;;:::o;:::-;;;;;;;;;;:::i;:::-;355:5263:37;4022:21:39;355:5263:37;;4022:21:39;;;:::i;:::-;268:10:12;;;-1:-1:-1;268:10:12;;;;:::o;:::-;355:5263:37;268:10:12;:::o;:::-;4022:21:39;355:5263:37;4022:21:39;;;;:::i;:::-;268:10:12;;;-1:-1:-1;;;268:10:12;;;;:::o;1877:244::-;2020:32;1877:244;;355:5263:37;;-1:-1:-1;;;;;2020:32:12;;;4022:21:39;;;;2020:32:12;;;;;;;;:::i;:::-;1994:59;355:5263:37;;1994:59:12;;;;:::i;:::-;2071:42;;;;2081:24;;;:::i;2071:42::-;268:10;;;:::i;355:5263:37:-;4022:21:39;;;355:5263:37;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;4022:21:39;;;355:5263:37;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;4022:21:39;;;;;;;;;;;;;355:5263:37;4022:21:39;355:5263:37;268:10:12;;355:5263:37;;4022:21:39;355:5263:37;;;;:::o;:::-;;268:10:12;;;:::i;:::-;4022:21:39;355:5263:37;;4022:21:39;;;:::i;:::-;268:10:12;;;355:5263:37;3466:116;355:5263;3466:116;;355:5263;;:::i;:::-;;;;;;;;:::o;634:587:12:-;355:5263:37;;749:2:12;734:17;;749:2;;355:5263:37;;775:26:12;355:5263:37;775:26:12;355:5263:37;;775:26:12;;;;;;:::i;730:484::-;838:2;;;823:17;;838:2;;867:1;857:11;883:69;355:5263:37;;;890:6:12;;;:22;;;;883:69;890:22;;;;933:3;;;:::i;:::-;883:69;;890:22;;992:12;355:5263:37;;;;992:12:12;:::i;:::-;1024:5;;1055:3;355:5263:37;;;1031:6:12;;;:22;;;1055:3;1031:22;;;1095:7;;1079:23;1095:7;;1055:3;1095:7;;;:::i;:::-;355:5263:37;-1:-1:-1;;;;;;355:5263:37;;;1095:7:12;1079:23;;;;;:::i;:::-;;1055:3;:::i;:::-;1024:5;;1031:22;;;;;;;;;1132:25;:::o;1031:22::-;-1:-1:-1;;;;;;;1041:7:12;;;;;:::i;:::-;355:5263:37;1041:12:12;;1031:22;;890;-1:-1:-1;;;;;;355:5263:37;-1:-1:-1;900:7:12;;;;;;:::i;:::-;355:5263:37;900:12:12;;890:22;;;819:395;268:10;;;;;:::i;415:696:16:-;537:17;-1:-1:-1;10026:6:19;;10017:15;;;;10013:99;;415:696:16;10138:6:19;;10129:15;;;;10125:99;;415:696:16;10250:6:19;;10241:15;;;;10237:99;;415:696:16;10362:5:19;;10353:14;;;;10349:96;;415:696:16;10471:5:19;;10462:14;;;;10458:96;;415:696:16;10571:14:19;10580:5;10571:14;;;10567:96;;415:696:16;10689:5:19;10680:14;;;;10676:64;;415:696:16;557:1;355:5263:37;;699:76:16;595:18;355:5263:37;;;595:18:16;:::i;:::-;627:11;699:76;;;788:280;557:1;;;788:280;1081:13;;;;415:696;:::o;788:280::-;-1:-1:-1;;355:5263:37;;;;-1:-1:-1;;;893:93:16;;;;355:5263:37;893:93:16;355:5263:37;1003:11:16;;1036:10;1032:21;;788:280;;;;;1032:21;1048:5;;10676:64:19;355:5263:37;10724:1:19;355:5263:37;10676:64:19;;;10567:96;355:5263:37;;10580:5:19;10647:1;355:5263:37;;;;10567:96:19;;;10458;10538:1;355:5263:37;;;;;;10458:96:19;;;;10349;10429:1;355:5263:37;;;;;;10349:96:19;;;;10237:99;10319:2;355:5263:37;;;;;;10237:99:19;;;;10125;10207:2;355:5263:37;;;;;;10125:99:19;;;;10013;10095:2;;-1:-1:-1;355:5263:37;;;-1:-1:-1;10013:99:19;;;355:5263:37;;;;;;;;;;;;:::o;:::-;;1645:1:16;355:5263:37;;;;;;;:::o;:::-;;774:2:10;355:5263:37;;;;;;;:::o;:::-;;;;;-1:-1:-1;;355:5263:37;;:::o;246:18:16:-;;;;:::o;:::-;;355:5263:37;;246:18:16;;;;;;;;;;;;;;355:5263:37;246:18:16;355:5263:37;;;246:18:16;;1513:437;1635:25;;:::i;:::-;355:5263:37;;;;;;1670:15:16;355:5263:37;;;1670:15:16;355:5263:37;;1702:1:16;355:5263:37;;;;;;;1695:15:16;355:5263:37;;;1695:15:16;355:5263:37;1720:128:16;1753:5;;;;;;1865:10;1857:55;1865:10;;;1857:55;:::i;1760:3::-;1800:11;1808:3;1800:11;;1791:21;;;;;;;-1:-1:-1;;;1760:3:16;1791:21;;1779:33;;;;:::i;:::-;;355:5263:37;246:18:16;1760:3;;:::i;:::-;1725:26;;;;1893:726:37;;2013:14;;;;;;-1:-1:-1;;;;;2013:14:37;;;:::i;:::-;355:5263;;;4022:21:39;;;;;;;;:::i;2009:604:37:-;2112:15;2131;2112;;;;;;:::i;:::-;4022:21:39;;;:::i;:::-;2112:34:37;2131:15;;2188:21;;;4040:1:39;2285:19:37;:14;2259:18;2181:29;2188:21;;2285;2188;;;;:::i;2181:29::-;2259:18;:::i;2108:495::-;2338:15;;;2357:17;2338:15;;:::i;:::-;4022:21:39;;;:::i;:::-;2338:36:37;2357:17;;2442:14;;4040:1:39;2442:19:37;:14;:21;:14;;:::i;:19::-;355:5263;;-1:-1:-1;;;2442:21:37;;355:5263;;;;;2442:21;;;;;;355:5263;2442:21;2408:61;2442:21;4040:1:39;2442:21:37;;;2334:269;-1:-1:-1;355:5263:37;-1:-1:-1;;;2408:61:37;;;355:5263;;;;;;2408:61;355:5263;;;;;;2442:21;;;355:5263;2442:21;;;;;;;;;;;:::i;:::-;;;;;2334:269;2560:14;;4040:1:39;2560:19:37;:14;:21;:14;;:::i;1427:248:12:-;1572:34;1427:248;;355:5263:37;;-1:-1:-1;;;;;1572:34:12;;;4022:21:39;;;;1572:34:12;;;;;;;;:::i;2625:391:37:-;;2731:15;;;:::i;:::-;4022:21:39;;;;;;2750:17:37;2731:36;2750:17;;2783:8;;-1:-1:-1;2783:8:37;:::o;2727:283::-;4022:21:39;2812:15:37;;;:::i;:::-;4022:21:39;;;:::i;:::-;2812:34:37;4022:21:39;;2884::37;-1:-1:-1;;;;;2884:21:37;2927:20;2884:21;;355:5263;;;;:::i;:::-;;2927:20;:::i;2808:202::-;2978:21;;;:::o;2328:263:12:-;2467:36;2328:263;;355:5263:37;;-1:-1:-1;;;;;2467:36:12;;;4022:21:39;;;;2467:36:12;;;;;;;;:::i;:::-;2441:63;355:5263:37;;2441:63:12;;;;:::i;:::-;2522:28;;;;2328:263;2522:61;;;2467:36;355:5263:37;;;2553:25:12;;334:10;;;;2467:36;2553:25;334:10;;;;:::i;2522:61::-;;2581:2;2328:263;:::o;2522:28::-;355:5263:37;2467:36:12;355:5263:37;;2533:17:12;2522:28;;355:5263:37;;;4022:21:39;355:5263:37;4022:21:39;;;;;;;;;;;355:5263:37;4022:21:39;-1:-1:-1;355:5263:37;;;;;;;;;;;;;;;;;:::o;:::-;4022:21:39;355:5263:37;4022:21:39;;;;:::i;:::-;355:5263:37;268:10:12;;-1:-1:-1;;;355:5263:37;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;4022:21:39;355:5263:37;4022:21:39;;;;:::i;:::-;355:5263:37;268:10:12;;-1:-1:-1;;;355:5263:37;;;;:::o;:::-;4022:21:39;355:5263:37;4022:21:39;;;;:::i;:::-;355:5263:37;268:10:12;;-1:-1:-1;;;355:5263:37;;;;:::o;:::-;4022:21:39;355:5263:37;4022:21:39;;;;:::i;:::-;355:5263:37;268:10:12;;-1:-1:-1;;;355:5263:37;;;;:::o;:::-;4022:21:39;355:5263:37;4022:21:39;;;;:::i;:::-;355:5263:37;268:10:12;;-1:-1:-1;;;355:5263:37;;;;:::o;:::-;4022:21:39;355:5263:37;4022:21:39;;;;:::i;:::-;355:5263:37;268:10:12;;355:5263:37;;;;;:::o;:::-;;;4022:21:39;;;;;;;;;;;;;355:5263:37;4022:21:39;355:5263:37;268:10:12;;355:5263:37;;;;;;;;;;:::o;289:2059:10:-;355:5263:37;;377:16:10;373:31;;355:5263:37;;:::i;:::-;617:27:10;622:21;623:15;355:5263:37;;623:15:10;:::i;:::-;642:1;355:5263:37;;;;622:21:10;617:27;:::i;:::-;761:15;750:27;761:15;;;:::i;:::-;750:27;:::i;:::-;790:1525;;;;;;;;;774:2;790:1525;;;;;;;;;;;;642:1;790:1525;;;642:1;790:1525;642:1;;;790:1525;;;;2327:13;289:2059;:::o;790:1525::-;-1:-1:-1;;;;;790:1525:10;;;;289:2059;:::o;790:1525::-;-1:-1:-1;;;;;;790:1525:10;;;;289:2059;:::o;790:1525::-;642:1;;;617;642;;790:1525;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;637:1;790:1525;;;;;;;;;;;;;;;;;;373:31;355:5263:37;;;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1078400","executionCost":"1129","totalCost":"1079529"},"external":{"decimals((uint8,address,address,uint256),uint8)":"infinite","name((uint8,address,address,uint256),string)":"infinite","symbol((uint8,address,address,uint256),string)":"infinite","uri((uint8,address,address,uint256),(string,string,uint8,string),uint256,address)":"infinite"}},"methodIdentifiers":{"decimals((uint8,address,address,uint256),uint8)":"6d7cd037","name((uint8,address,address,uint256),string)":"aa1163b9","symbol((uint8,address,address,uint256),string)":"84b1017d","uri((uint8,address,address,uint256),(string,string,uint8,string),uint256,address)":"5c6d8435"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"nativeDecimals\",\"type\":\"uint8\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"nativeName\",\"type\":\"string\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"nativeSymbol\",\"type\":\"string\"}],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct NativeToken\",\"name\":\"nativeToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxURIBuilder.sol\":\"YieldBoxURIBuilder\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\ninterface IERC1155 is IERC165 {\\r\\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\\r\\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n    event URI(string _value, uint256 indexed _id);\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external;\\r\\n\\r\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n\\r\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\r\\n\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x39f388312b08552eb8a5f09cbe6b0c6ea511a6a47c72985e1ab53b777b911771\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC1155TokenReceiver {\\r\\n    function onERC1155Received(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256 _id,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address _operator,\\r\\n        address _from,\\r\\n        uint256[] calldata _ids,\\r\\n        uint256[] calldata _values,\\r\\n        bytes calldata _data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0x5a73c68c2975f8908b96e76fe916a1a39b86fd7acb2d1e463e85e7841225c0cf\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC165 {\\r\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x2929dd1b0483b96a0b59b4b945684705adf252697b404fe7f126816cb78d684c\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc7605391c07120ced6c1cca9d01abf39add948385828037a537b2d6b4c52f4a3\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n// solhint-disable no-empty-blocks\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides functions for encoding/decoding base64\\r\\nlibrary Base64 {\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {\\r\\n\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                // read 3 bytes\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n                case 1 {\\r\\n                    mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\r\\n                }\\r\\n                case 2 {\\r\\n                    mstore(sub(resultPtr, 1), shl(248, 0x3d))\\r\\n                }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf85defde09eac584631013ed63018550950e1de602103538806b611ed86aa5b2\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// solhint-disable no-inline-assembly\\r\\n\\r\\nlibrary BoringAddress {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function sendNative(address to, uint256 amount) internal {\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"BoringAddress: transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdcdf9c08bc41b6091e03d4bb44d6503bd084ae9d990277d0761ed6e1cdeefbb3\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../interfaces/IERC20.sol\\\";\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to The address of the user to check.\\r\\n    /// @return amount The token amount.\\r\\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\\r\\n        require(success && data.length >= 32, \\\"BoringERC20: BalanceOf failed\\\");\\r\\n        amount = abi.decode(data, (uint256));\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1781055f2cd993ad2c58db7ea644b5d8017daf1f89e824cb5f47d8da10389722\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/AssetRegister.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\nimport \\\"./ERC1155.sol\\\";\\n\\n// An asset is a token + a strategy\\nstruct Asset {\\n    TokenType tokenType;\\n    address contractAddress;\\n    IStrategy strategy;\\n    uint256 tokenId;\\n}\\n\\ncontract AssetRegister is ERC1155 {\\n    using BoringAddress for address;\\n\\n    mapping(address => mapping(address => mapping(uint256 => bool))) public isApprovedForAsset;\\n\\n    event AssetRegistered(\\n        TokenType indexed tokenType,\\n        address indexed contractAddress,\\n        IStrategy strategy,\\n        uint256 indexed tokenId,\\n        uint256 assetId\\n    );\\n    event ApprovalForAsset(address indexed sender, address indexed operator, uint256 assetId, bool approved);\\n\\n    // ids start at 1 so that id 0 means it's not yet registered\\n    mapping(TokenType => mapping(address => mapping(IStrategy => mapping(uint256 => uint256)))) public ids;\\n    Asset[] public assets;\\n\\n    constructor() {\\n        assets.push(Asset(TokenType.None, address(0), NO_STRATEGY, 0));\\n    }\\n\\n    function assetCount() public view returns (uint256) {\\n        return assets.length;\\n    }\\n\\n    function _registerAsset(\\n        TokenType tokenType,\\n        address contractAddress,\\n        IStrategy strategy,\\n        uint256 tokenId\\n    ) internal returns (uint256 assetId) {\\n        // Checks\\n        assetId = ids[tokenType][contractAddress][strategy][tokenId];\\n\\n        // If assetId is 0, this is a new asset that needs to be registered\\n        if (assetId == 0) {\\n            // Only do these checks if a new asset needs to be created\\n            require(tokenId == 0 || tokenType != TokenType.ERC20, \\\"YieldBox: No tokenId for ERC20\\\");\\n            require(\\n                tokenType == TokenType.Native ||\\n                    (tokenType == strategy.tokenType() && contractAddress == strategy.contractAddress() && tokenId == strategy.tokenId()),\\n                \\\"YieldBox: Strategy mismatch\\\"\\n            );\\n            // If a new token gets added, the isContract checks that this is a deployed contract. Needed for security.\\n            // Prevents getting shares for a future token whose address is known in advance. For instance a token that will be deployed with CREATE2 in the future or while the contract creation is\\n            // in the mempool\\n            require((tokenType == TokenType.Native && contractAddress == address(0)) || contractAddress.isContract(), \\\"YieldBox: Not a token\\\");\\n\\n            // Effects\\n            assetId = assets.length;\\n            assets.push(Asset(tokenType, contractAddress, strategy, tokenId));\\n            ids[tokenType][contractAddress][strategy][tokenId] = assetId;\\n\\n            // The actual URI isn't emitted here as per EIP1155, because that would make this call super expensive.\\n            emit URI(\\\"\\\", assetId);\\n            emit AssetRegistered(tokenType, contractAddress, strategy, tokenId, assetId);\\n        }\\n    }\\n\\n    function registerAsset(TokenType tokenType, address contractAddress, IStrategy strategy, uint256 tokenId) public returns (uint256 assetId) {\\n        // Native assets can only be added internally by the NativeTokenFactory\\n        require(\\n            tokenType == TokenType.ERC20 || tokenType == TokenType.ERC721 || tokenType == TokenType.ERC1155,\\n            \\\"AssetManager: cannot add Native\\\"\\n        );\\n        assetId = _registerAsset(tokenType, contractAddress, strategy, tokenId);\\n    }\\n\\n    function setApprovalForAsset(address operator, uint256 assetId, bool approved) external virtual {\\n        require(assetId < assetCount(), \\\"AssetManager: asset not valid\\\");\\n        isApprovedForAsset[msg.sender][operator][assetId] = approved;\\n\\n        emit ApprovalForAsset(msg.sender, operator, assetId, approved);\\n    }\\n}\\n\",\"keccak256\":\"0x614d8dd6ef5b414eda33855d3f55091d8669169d8f8ca584153c91111094c72f\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/BoringMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary BoringMath {\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= type(uint128).max, \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= type(uint64).max, \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= type(uint32).max, \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n\\n    function muldiv(\\n        uint256 value,\\n        uint256 mul,\\n        uint256 div,\\n        bool roundUp\\n    ) internal pure returns (uint256 result) {\\n        result = (value * mul) / div;\\n        if (roundUp && (result * div) / mul < value) {\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x72b9e717e3845aa584e81dee9a2f486c42941ebdb552130887b383ce59a7627d\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\\\";\\n\\n// Written by OreNoMochi (https://github.com/OreNoMochii), BoringCrypto\\n\\ncontract ERC1155 is IERC1155 {\\n    using BoringAddress for address;\\n\\n    // mappings\\n\\n    mapping(address => mapping(address => bool)) public override isApprovedForAll; // map of operator approval\\n    mapping(address => mapping(uint256 => uint256)) public override balanceOf; // map of tokens owned by\\n    mapping(uint256 => uint256) public totalSupply; // totalSupply per token\\n\\n    function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\\n        return\\n            interfaceID == this.supportsInterface.selector || // EIP-165\\n            interfaceID == 0xd9b67a26 || // ERC-1155\\n            interfaceID == 0x0e89341c; // EIP-1155 Metadata\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view override returns (uint256[] memory balances) {\\n        uint256 len = owners.length;\\n        require(len == ids.length, \\\"ERC1155: Length mismatch\\\");\\n\\n        balances = new uint256[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            balances[i] = balanceOf[owners[i]][ids[i]];\\n        }\\n    }\\n\\n    function _mint(address to, uint256 id, uint256 value) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[to][id] += value;\\n        totalSupply[id] += value;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, value);\\n    }\\n\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        require(from != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        totalSupply[id] -= value;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, value);\\n    }\\n\\n    function _transferSingle(address from, address to, uint256 id, uint256 value) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        balanceOf[from][id] -= value;\\n        balanceOf[to][id] += value;\\n\\n        emit TransferSingle(msg.sender, from, to, id, value);\\n    }\\n\\n    function _transferBatch(address from, address to, uint256[] calldata ids, uint256[] calldata values) internal {\\n        require(to != address(0), \\\"No 0 address\\\");\\n\\n        uint256 len = ids.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            uint256 id = ids[i];\\n            uint256 value = values[i];\\n            balanceOf[from][id] -= value;\\n            balanceOf[to][id] += value;\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, values);\\n    }\\n\\n    function _requireTransferAllowed(address _from, bool _approved) internal view virtual {\\n        require(_from == msg.sender || _approved || isApprovedForAll[_from][msg.sender] == true, \\\"Transfer not allowed\\\");\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external override {\\n        _requireTransferAllowed(from, false);\\n\\n        _transferSingle(from, to, id, value);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, value, data) ==\\n                    bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override {\\n        require(ids.length == values.length, \\\"ERC1155: Length mismatch\\\");\\n        _requireTransferAllowed(from, false);\\n\\n        _transferBatch(from, to, ids, values);\\n\\n        if (to.isContract()) {\\n            require(\\n                IERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, values, data) ==\\n                    bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\")),\\n                \\\"Wrong return value\\\"\\n            );\\n        }\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function uri(uint256 /*assetId*/) external view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x946ff1e91845883dc69b26d2547bb8d53b0fabe08dcb6c4f8e4d6c32d585195c\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/NativeTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"./AssetRegister.sol\\\";\\nimport \\\"./BoringMath.sol\\\";\\n\\nstruct NativeToken {\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n    string uri;\\n}\\n\\n/// @title NativeTokenFactory\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The NativeTokenFactory is a token factory to create ERC1155 tokens. This is used by YieldBox to create\\n/// native tokens in YieldBox. These have many benefits:\\n/// - low and predictable gas usage\\n/// - simplified approval\\n/// - no hidden features, all these tokens behave the same\\n\\ncontract NativeTokenFactory is AssetRegister {\\n    using BoringMath for uint256;\\n\\n    mapping(uint256 => NativeToken) public nativeTokens;\\n    mapping(uint256 => address) public owner;\\n    mapping(uint256 => address) public pendingOwner;\\n\\n    event TokenCreated(address indexed creator, string name, string symbol, uint8 decimals, uint256 tokenId);\\n    event OwnershipTransferred(uint256 indexed tokenId, address indexed previousOwner, address indexed newOwner);\\n\\n    // ***************** //\\n    // *** MODIFIERS *** //\\n    // ***************** //\\n\\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\\n    /// If 'from' is msg.sender, it's allowed.\\n    /// If 'msg.sender' is an address (an operator) that is approved by 'from', it's allowed.\\n    modifier allowed(address _from, uint256 _id) {\\n        _requireTransferAllowed(_from, isApprovedForAsset[_from][msg.sender][_id]);\\n        _;\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    /// @param tokenId The `tokenId` that the sender has to be owner of.\\n    modifier onlyOwner(uint256 tokenId) {\\n        require(msg.sender == owner[tokenId], \\\"NTF: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param tokenId The `tokenId` of the token that ownership whose ownership will be transferred/renounced.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(uint256 tokenId, address newOwner, bool direct, bool renounce) public onlyOwner(tokenId) {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"NTF: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(tokenId, owner[tokenId], newOwner);\\n            owner[tokenId] = newOwner;\\n            pendingOwner[tokenId] = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner[tokenId] = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    /// @param tokenId The `tokenId` of the token that ownership is claimed for.\\n    function claimOwnership(uint256 tokenId) public {\\n        address _pendingOwner = pendingOwner[tokenId];\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"NTF: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(tokenId, owner[tokenId], _pendingOwner);\\n        owner[tokenId] = _pendingOwner;\\n        pendingOwner[tokenId] = address(0);\\n    }\\n\\n    /// @notice Create a new native token. This will be an ERC1155 token. If later it's needed as an ERC20 token it can\\n    /// be wrapped into an ERC20 token. Native support for ERC1155 tokens is growing though.\\n    /// @param name The name of the token.\\n    /// @param symbol The symbol of the token.\\n    /// @param decimals The number of decimals of the token (this is just for display purposes). Should be set to 18 in normal cases.\\n    function createToken(string calldata name, string calldata symbol, uint8 decimals, string calldata uri) public returns (uint32 tokenId) {\\n        // To keep each Token unique in the AssetRegister, we use the assetId as the tokenId. So for native assets, the tokenId is always equal to the assetId.\\n        tokenId = assets.length.to32();\\n        _registerAsset(TokenType.Native, address(0), NO_STRATEGY, tokenId);\\n        // Initial supply is 0, use owner can mint. For a fixed supply the owner can mint and revoke ownership.\\n        // The msg.sender is the initial owner, can be changed after.\\n        nativeTokens[tokenId] = NativeToken(name, symbol, decimals, uri);\\n        owner[tokenId] = msg.sender;\\n\\n        emit TokenCreated(msg.sender, name, symbol, decimals, tokenId);\\n        emit TransferSingle(msg.sender, address(0), address(0), tokenId, 0);\\n        emit OwnershipTransferred(tokenId, address(0), msg.sender);\\n    }\\n\\n    /// @notice The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\\n    /// @param tokenId The token to be minted.\\n    /// @param to The account to transfer the minted tokens to.\\n    /// @param amount The amount of tokens to mint.\\n    /// @dev For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.\\n    function mint(uint256 tokenId, address to, uint256 amount) public onlyOwner(tokenId) {\\n        _mint(to, tokenId, amount);\\n    }\\n\\n    /// @notice Burns tokens. Only the holder of tokens can burn them or an approved operator.\\n    /// @param tokenId The token to be burned.\\n    /// @param amount The amount of tokens to burn.\\n    function burn(uint256 tokenId, address from, uint256 amount) public allowed(from, tokenId) {\\n        require(assets[tokenId].tokenType == TokenType.Native, \\\"NTF: Not native\\\");\\n        _burn(from, tokenId, amount);\\n    }\\n\\n    /// @notice The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\\n    /// @param tokenId The token to be minted.\\n    /// @param tos The accounts to transfer the minted tokens to.\\n    /// @param amounts The amounts of tokens to mint.\\n    /// @dev If the tos array is longer than the amounts array there will be an out of bounds error. If the amounts array is longer, the extra amounts are simply ignored.\\n    /// @dev For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.\\n    function batchMint(uint256 tokenId, address[] calldata tos, uint256[] calldata amounts) public onlyOwner(tokenId) {\\n        uint256 len = tos.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            _mint(tos[i], tokenId, amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Burns tokens. This is only useful to be used by an operator.\\n    /// @param tokenId The token to be burned.\\n    /// @param froms The accounts to burn tokens from.\\n    /// @param amounts The amounts of tokens to burn.\\n    function batchBurn(uint256 tokenId, address[] calldata froms, uint256[] calldata amounts) public {\\n        require(assets[tokenId].tokenType == TokenType.Native, \\\"NTF: Not native\\\");\\n        uint256 len = froms.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            _requireTransferAllowed(froms[i], isApprovedForAsset[froms[i]][msg.sender][tokenId]);\\n            _burn(froms[i], tokenId, amounts[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x12cfa2a50322ae33b741b6bd0bc63feff775d4ba034c9937bbc49f1c33190a96\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/YieldBoxURIBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\nimport \\\"./interfaces/IYieldBox.sol\\\";\\nimport \\\"./NativeTokenFactory.sol\\\";\\n\\n// solhint-disable quotes\\n\\ncontract YieldBoxURIBuilder {\\n    using BoringERC20 for IERC20;\\n    using Strings for uint256;\\n    using Base64 for bytes;\\n\\n    struct AssetDetails {\\n        string tokenType;\\n        string name;\\n        string symbol;\\n        uint256 decimals;\\n    }\\n\\n    function name(Asset calldata asset, string calldata nativeName) external view returns (string memory) {\\n        if (asset.strategy == NO_STRATEGY) {\\n            return nativeName;\\n        } else {\\n            if (asset.tokenType == TokenType.ERC20) {\\n                IERC20 token = IERC20(asset.contractAddress);\\n                return string(abi.encodePacked(token.safeName(), \\\" (\\\", asset.strategy.name(), \\\")\\\"));\\n            } else if (asset.tokenType == TokenType.ERC1155) {\\n                return\\n                    string(\\n                        abi.encodePacked(\\n                            string(\\n                                abi.encodePacked(\\n                                    \\\"ERC1155:\\\",\\n                                    uint256(uint160(asset.contractAddress)).toHexString(20),\\n                                    \\\"/\\\",\\n                                    asset.tokenId.toString()\\n                                )\\n                            ),\\n                            \\\" (\\\",\\n                            asset.strategy.name(),\\n                            \\\")\\\"\\n                        )\\n                    );\\n            } else {\\n                return string(abi.encodePacked(nativeName, \\\" (\\\", asset.strategy.name(), \\\")\\\"));\\n            }\\n        }\\n    }\\n\\n    function symbol(Asset calldata asset, string calldata nativeSymbol) external view returns (string memory) {\\n        if (asset.strategy == NO_STRATEGY) {\\n            return nativeSymbol;\\n        } else {\\n            if (asset.tokenType == TokenType.ERC20) {\\n                IERC20 token = IERC20(asset.contractAddress);\\n                return string(abi.encodePacked(token.safeSymbol(), \\\" (\\\", asset.strategy.name(), \\\")\\\"));\\n            } else if (asset.tokenType == TokenType.ERC1155) {\\n                return string(abi.encodePacked(\\\"ERC1155\\\", \\\" (\\\", asset.strategy.name(), \\\")\\\"));\\n            } else {\\n                return string(abi.encodePacked(nativeSymbol, \\\" (\\\", asset.strategy.name(), \\\")\\\"));\\n            }\\n        }\\n    }\\n\\n    function decimals(Asset calldata asset, uint8 nativeDecimals) external view returns (uint8) {\\n        if (asset.tokenType == TokenType.ERC1155) {\\n            return 0;\\n        } else if (asset.tokenType == TokenType.ERC20) {\\n            IERC20 token = IERC20(asset.contractAddress);\\n            return token.safeDecimals();\\n        } else {\\n            return nativeDecimals;\\n        }\\n    }\\n\\n    function uri(\\n        Asset calldata asset,\\n        NativeToken calldata nativeToken,\\n        uint256 totalSupply,\\n        address owner\\n    ) external view returns (string memory) {\\n        AssetDetails memory details;\\n        if (asset.tokenType == TokenType.ERC1155) {\\n            // Contracts can't retrieve URIs, so the details are out of reach\\n            details.tokenType = \\\"ERC1155\\\";\\n            details.name = string(\\n                abi.encodePacked(\\\"ERC1155:\\\", uint256(uint160(asset.contractAddress)).toHexString(20), \\\"/\\\", asset.tokenId.toString())\\n            );\\n            details.symbol = \\\"ERC1155\\\";\\n        } else if (asset.tokenType == TokenType.ERC20) {\\n            IERC20 token = IERC20(asset.contractAddress);\\n            details = AssetDetails(\\\"ERC20\\\", token.safeName(), token.safeSymbol(), token.safeDecimals());\\n        } else {\\n            // Native\\n            details.tokenType = \\\"Native\\\";\\n            details.name = nativeToken.name;\\n            details.symbol = nativeToken.symbol;\\n            details.decimals = nativeToken.decimals;\\n        }\\n\\n        string memory properties = string(\\n            asset.tokenType != TokenType.Native\\n                ? abi.encodePacked(',\\\"tokenAddress\\\":\\\"', uint256(uint160(asset.contractAddress)).toHexString(20), '\\\"')\\n                : abi.encodePacked(',\\\"totalSupply\\\":', totalSupply.toString(), ',\\\"fixedSupply\\\":', owner == address(0) ? \\\"true\\\" : \\\"false\\\")\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    abi\\n                        .encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            details.name,\\n                            '\\\",\\\"symbol\\\":\\\"',\\n                            details.symbol,\\n                            '\\\"',\\n                            asset.tokenType == TokenType.ERC1155 ? \\\"\\\" : ',\\\"decimals\\\":',\\n                            asset.tokenType == TokenType.ERC1155 ? \\\"\\\" : details.decimals.toString(),\\n                            ',\\\"properties\\\":{\\\"strategy\\\":\\\"',\\n                            uint256(uint160(address(asset.strategy))).toHexString(20),\\n                            '\\\",\\\"tokenType\\\":\\\"',\\n                            details.tokenType,\\n                            '\\\"',\\n                            properties,\\n                            asset.tokenType == TokenType.ERC1155 ? string(abi.encodePacked(',\\\"tokenId\\\":', asset.tokenId.toString())) : \\\"\\\",\\n                            \\\"}}\\\"\\n                        )\\n                        .encode()\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x48f41f8c40d0d724dd09c88f6db8d1559c3e8c0796f5e17fc87f348405f9d155\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title TokenType\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The YieldBox can hold different types of tokens:\\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\\nenum TokenType {\\n    Native,\\n    ERC20,\\n    ERC721,\\n    ERC1155,\\n    None\\n}\\n\",\"keccak256\":\"0xc6adb740ff68d4162214dfa9d406422a066ae2197b7f0c8df5daa7c84b4a10aa\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\nimport \\\"./IYieldBox.sol\\\";\\n\\ninterface IStrategy {\\n    /// Each strategy only works with a single asset. This should help make implementations simpler and more readable.\\n    /// To safe gas a proxy pattern (YieldBox factory) could be used to deploy the same strategy for multiple tokens.\\n\\n    /// It is recommended that strategies keep a small amount of funds uninvested (like 5%) to handle small withdrawals\\n    /// and deposits without triggering costly investing/divesting logic.\\n\\n    /// #########################\\n    /// ### Basic Information ###\\n    /// #########################\\n\\n    /// Returns the address of the yieldBox that this strategy is for\\n    function yieldBox() external view returns (IYieldBox yieldBox_);\\n\\n    /// Returns a name for this strategy\\n    function name() external view returns (string memory name_);\\n\\n    /// Returns a description for this strategy\\n    function description() external view returns (string memory description_);\\n\\n    /// #######################\\n    /// ### Supported Token ###\\n    /// #######################\\n\\n    /// Returns the standard that this strategy works with\\n    function tokenType() external view returns (TokenType tokenType_);\\n\\n    /// Returns the contract address that this strategy works with\\n    function contractAddress() external view returns (address contractAddress_);\\n\\n    /// Returns the tokenId that this strategy works with (for EIP1155)\\n    /// This is always 0 for EIP20 tokens\\n    function tokenId() external view returns (uint256 tokenId_);\\n\\n    /// ###########################\\n    /// ### Balance Information ###\\n    /// ###########################\\n\\n    /// Returns the total value the strategy holds (principle + gain) expressed in asset token amount.\\n    /// This should be cheap in gas to retrieve. Can return a bit less than the actual, but MUST NOT return more.\\n    /// The gas cost of this function will be paid on any deposit or withdrawal onto and out of the YieldBox\\n    /// that uses this strategy. Also, anytime a protocol converts between shares and amount, this gets called.\\n    function currentBalance() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn\\n    function withdrawable() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn for a low gas fee\\n    /// When more than this amount is withdrawn it will trigger divesting from the actual strategy\\n    /// which will incur higher gas costs\\n    function cheapWithdrawable() external view returns (uint256 amount);\\n\\n    /// ##########################\\n    /// ### YieldBox Functions ###\\n    /// ##########################\\n\\n    /// Is called by YieldBox to signal funds have been added, the strategy may choose to act on this\\n    /// When a large enough deposit is made, this should trigger the strategy to invest into the actual\\n    /// strategy. This function should normally NOT be used to invest on each call as that would be costly\\n    /// for small deposits.\\n    /// If the strategy handles native tokens (ETH) it will receive it directly (not wrapped). It will be\\n    /// up to the strategy to wrap it if needed.\\n    /// Only accept this call from the YieldBox\\n    function deposited(uint256 amount) external;\\n\\n    /// Is called by the YieldBox to ask the strategy to withdraw to the user\\n    /// When a strategy keeps a little reserve for cheap withdrawals and the requested withdrawal goes over this amount,\\n    /// the strategy should divest enough from the strategy to complete the withdrawal and rebalance the reserve.\\n    /// If the strategy handles native tokens (ETH) it should send this, not a wrapped version.\\n    /// With some strategies it might be hard to withdraw exactly the correct amount.\\n    /// Only accept this call from the YieldBox\\n    function withdraw(address to, uint256 amount) external;\\n}\\n\\nIStrategy constant NO_STRATEGY = IStrategy(address(0));\\n\",\"keccak256\":\"0x637400567ba619671921a58dd2b17c9d1fdacc27f0f021d79bb4f122ead71902\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\n\\ninterface IYieldBox {\\n    function wrappedNative() external view returns (address wrappedNative);\\n\\n    function assets(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            TokenType tokenType,\\n            address contractAddress,\\n            address strategy,\\n            uint256 tokenId\\n        );\\n\\n    function nativeTokens(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            uint8 decimals\\n        );\\n\\n    function owner(uint256 assetId) external view returns (address owner);\\n\\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\\n\\n    function setApprovalForAsset(\\n        address operator,\\n        uint256 assetId,\\n        bool approved\\n    ) external;\\n\\n    function depositAsset(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function withdraw(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 assetId,\\n        uint256 share\\n    ) external;\\n\\n    function batchTransfer(\\n        address from,\\n        address to,\\n        uint256[] calldata assetIds_,\\n        uint256[] calldata shares_\\n    ) external;\\n\\n    function transferMultiple(\\n        address from,\\n        address[] calldata tos,\\n        uint256 assetId,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function toShare(\\n        uint256 assetId,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function toAmount(\\n        uint256 assetId,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x83e4c62b4059bbd59cac87eb714311f9304ce164ead7b45a7562067732fdc5d3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IStrategy.sol":{"IStrategy":{"abi":[{"inputs":[],"name":"cheapWithdrawable","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"contractAddress","outputs":[{"internalType":"address","name":"contractAddress_","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentBalance","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposited","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"description","outputs":[{"internalType":"string","name":"description_","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"name_","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenId","outputs":[{"internalType":"uint256","name":"tokenId_","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenType","outputs":[{"internalType":"enum TokenType","name":"tokenType_","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawable","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"yieldBox","outputs":[{"internalType":"contract IYieldBox","name":"yieldBox_","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"cheapWithdrawable()":"e3575f05","contractAddress()":"f6b4dfb4","currentBalance()":"ce845d1d","deposited(uint256)":"afa91cc6","description()":"7284e416","name()":"06fdde03","tokenId()":"17d70f7c","tokenType()":"30fa738c","withdraw(address,uint256)":"f3fef3a3","withdrawable()":"50188301","yieldBox()":"de406577"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"cheapWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldBox\",\"outputs\":[{\"internalType\":\"contract IYieldBox\",\"name\":\"yieldBox_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cheapWithdrawable()\":{\"notice\":\"Returns the maximum amount that can be withdrawn for a low gas fee When more than this amount is withdrawn it will trigger divesting from the actual strategy which will incur higher gas costs\"},\"contractAddress()\":{\"notice\":\"Returns the contract address that this strategy works with\"},\"currentBalance()\":{\"notice\":\"Returns the total value the strategy holds (principle + gain) expressed in asset token amount. This should be cheap in gas to retrieve. Can return a bit less than the actual, but MUST NOT return more. The gas cost of this function will be paid on any deposit or withdrawal onto and out of the YieldBox that uses this strategy. Also, anytime a protocol converts between shares and amount, this gets called.\"},\"deposited(uint256)\":{\"notice\":\"Is called by YieldBox to signal funds have been added, the strategy may choose to act on this When a large enough deposit is made, this should trigger the strategy to invest into the actual strategy. This function should normally NOT be used to invest on each call as that would be costly for small deposits. If the strategy handles native tokens (ETH) it will receive it directly (not wrapped). It will be up to the strategy to wrap it if needed. Only accept this call from the YieldBox\"},\"description()\":{\"notice\":\"Returns a description for this strategy\"},\"name()\":{\"notice\":\"Returns a name for this strategy\"},\"tokenId()\":{\"notice\":\"Returns the tokenId that this strategy works with (for EIP1155) This is always 0 for EIP20 tokens\"},\"tokenType()\":{\"notice\":\"Returns the standard that this strategy works with\"},\"withdraw(address,uint256)\":{\"notice\":\"Is called by the YieldBox to ask the strategy to withdraw to the user When a strategy keeps a little reserve for cheap withdrawals and the requested withdrawal goes over this amount, the strategy should divest enough from the strategy to complete the withdrawal and rebalance the reserve. If the strategy handles native tokens (ETH) it should send this, not a wrapped version. With some strategies it might be hard to withdraw exactly the correct amount. Only accept this call from the YieldBox\"},\"withdrawable()\":{\"notice\":\"Returns the maximum amount that can be withdrawn\"},\"yieldBox()\":{\"notice\":\"Returns the address of the yieldBox that this strategy is for\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IStrategy.sol\":\"IStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title TokenType\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The YieldBox can hold different types of tokens:\\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\\nenum TokenType {\\n    Native,\\n    ERC20,\\n    ERC721,\\n    ERC1155,\\n    None\\n}\\n\",\"keccak256\":\"0xc6adb740ff68d4162214dfa9d406422a066ae2197b7f0c8df5daa7c84b4a10aa\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\nimport \\\"./IYieldBox.sol\\\";\\n\\ninterface IStrategy {\\n    /// Each strategy only works with a single asset. This should help make implementations simpler and more readable.\\n    /// To safe gas a proxy pattern (YieldBox factory) could be used to deploy the same strategy for multiple tokens.\\n\\n    /// It is recommended that strategies keep a small amount of funds uninvested (like 5%) to handle small withdrawals\\n    /// and deposits without triggering costly investing/divesting logic.\\n\\n    /// #########################\\n    /// ### Basic Information ###\\n    /// #########################\\n\\n    /// Returns the address of the yieldBox that this strategy is for\\n    function yieldBox() external view returns (IYieldBox yieldBox_);\\n\\n    /// Returns a name for this strategy\\n    function name() external view returns (string memory name_);\\n\\n    /// Returns a description for this strategy\\n    function description() external view returns (string memory description_);\\n\\n    /// #######################\\n    /// ### Supported Token ###\\n    /// #######################\\n\\n    /// Returns the standard that this strategy works with\\n    function tokenType() external view returns (TokenType tokenType_);\\n\\n    /// Returns the contract address that this strategy works with\\n    function contractAddress() external view returns (address contractAddress_);\\n\\n    /// Returns the tokenId that this strategy works with (for EIP1155)\\n    /// This is always 0 for EIP20 tokens\\n    function tokenId() external view returns (uint256 tokenId_);\\n\\n    /// ###########################\\n    /// ### Balance Information ###\\n    /// ###########################\\n\\n    /// Returns the total value the strategy holds (principle + gain) expressed in asset token amount.\\n    /// This should be cheap in gas to retrieve. Can return a bit less than the actual, but MUST NOT return more.\\n    /// The gas cost of this function will be paid on any deposit or withdrawal onto and out of the YieldBox\\n    /// that uses this strategy. Also, anytime a protocol converts between shares and amount, this gets called.\\n    function currentBalance() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn\\n    function withdrawable() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn for a low gas fee\\n    /// When more than this amount is withdrawn it will trigger divesting from the actual strategy\\n    /// which will incur higher gas costs\\n    function cheapWithdrawable() external view returns (uint256 amount);\\n\\n    /// ##########################\\n    /// ### YieldBox Functions ###\\n    /// ##########################\\n\\n    /// Is called by YieldBox to signal funds have been added, the strategy may choose to act on this\\n    /// When a large enough deposit is made, this should trigger the strategy to invest into the actual\\n    /// strategy. This function should normally NOT be used to invest on each call as that would be costly\\n    /// for small deposits.\\n    /// If the strategy handles native tokens (ETH) it will receive it directly (not wrapped). It will be\\n    /// up to the strategy to wrap it if needed.\\n    /// Only accept this call from the YieldBox\\n    function deposited(uint256 amount) external;\\n\\n    /// Is called by the YieldBox to ask the strategy to withdraw to the user\\n    /// When a strategy keeps a little reserve for cheap withdrawals and the requested withdrawal goes over this amount,\\n    /// the strategy should divest enough from the strategy to complete the withdrawal and rebalance the reserve.\\n    /// If the strategy handles native tokens (ETH) it should send this, not a wrapped version.\\n    /// With some strategies it might be hard to withdraw exactly the correct amount.\\n    /// Only accept this call from the YieldBox\\n    function withdraw(address to, uint256 amount) external;\\n}\\n\\nIStrategy constant NO_STRATEGY = IStrategy(address(0));\\n\",\"keccak256\":\"0x637400567ba619671921a58dd2b17c9d1fdacc27f0f021d79bb4f122ead71902\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\n\\ninterface IYieldBox {\\n    function wrappedNative() external view returns (address wrappedNative);\\n\\n    function assets(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            TokenType tokenType,\\n            address contractAddress,\\n            address strategy,\\n            uint256 tokenId\\n        );\\n\\n    function nativeTokens(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            uint8 decimals\\n        );\\n\\n    function owner(uint256 assetId) external view returns (address owner);\\n\\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\\n\\n    function setApprovalForAsset(\\n        address operator,\\n        uint256 assetId,\\n        bool approved\\n    ) external;\\n\\n    function depositAsset(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function withdraw(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 assetId,\\n        uint256 share\\n    ) external;\\n\\n    function batchTransfer(\\n        address from,\\n        address to,\\n        uint256[] calldata assetIds_,\\n        uint256[] calldata shares_\\n    ) external;\\n\\n    function transferMultiple(\\n        address from,\\n        address[] calldata tos,\\n        uint256 assetId,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function toShare(\\n        uint256 assetId,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function toAmount(\\n        uint256 assetId,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x83e4c62b4059bbd59cac87eb714311f9304ce164ead7b45a7562067732fdc5d3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"cheapWithdrawable()":{"notice":"Returns the maximum amount that can be withdrawn for a low gas fee When more than this amount is withdrawn it will trigger divesting from the actual strategy which will incur higher gas costs"},"contractAddress()":{"notice":"Returns the contract address that this strategy works with"},"currentBalance()":{"notice":"Returns the total value the strategy holds (principle + gain) expressed in asset token amount. This should be cheap in gas to retrieve. Can return a bit less than the actual, but MUST NOT return more. The gas cost of this function will be paid on any deposit or withdrawal onto and out of the YieldBox that uses this strategy. Also, anytime a protocol converts between shares and amount, this gets called."},"deposited(uint256)":{"notice":"Is called by YieldBox to signal funds have been added, the strategy may choose to act on this When a large enough deposit is made, this should trigger the strategy to invest into the actual strategy. This function should normally NOT be used to invest on each call as that would be costly for small deposits. If the strategy handles native tokens (ETH) it will receive it directly (not wrapped). It will be up to the strategy to wrap it if needed. Only accept this call from the YieldBox"},"description()":{"notice":"Returns a description for this strategy"},"name()":{"notice":"Returns a name for this strategy"},"tokenId()":{"notice":"Returns the tokenId that this strategy works with (for EIP1155) This is always 0 for EIP20 tokens"},"tokenType()":{"notice":"Returns the standard that this strategy works with"},"withdraw(address,uint256)":{"notice":"Is called by the YieldBox to ask the strategy to withdraw to the user When a strategy keeps a little reserve for cheap withdrawals and the requested withdrawal goes over this amount, the strategy should divest enough from the strategy to complete the withdrawal and rebalance the reserve. If the strategy handles native tokens (ETH) it should send this, not a wrapped version. With some strategies it might be hard to withdraw exactly the correct amount. Only accept this call from the YieldBox"},"withdrawable()":{"notice":"Returns the maximum amount that can be withdrawn"},"yieldBox()":{"notice":"Returns the address of the yieldBox that this strategy is for"}},"version":1}}},"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IWrappedNative.sol":{"IWrappedNative":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","deposit()":"d0e30db0","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","totalSupply()":"18160ddd","withdraw(uint256)":"2e1a7d4d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"EIP 2612\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IWrappedNative.sol\":\"IWrappedNative\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc7605391c07120ced6c1cca9d01abf39add948385828037a537b2d6b4c52f4a3\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IWrappedNative.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IWrappedNative is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x458479ed595ed2327cc2e9376657aaa592825838e21af7a54a0b7e852c0ddd80\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"EIP 2612"}},"version":1}}},"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol":{"IYieldBox":{"abi":[{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"assets","outputs":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"address","name":"strategy","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"assetIds_","type":"uint256[]"},{"internalType":"uint256[]","name":"shares_","type":"uint256[]"}],"name":"batchTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"}],"name":"depositAsset","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"nativeTokens","outputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"owner","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"},{"internalType":"bool","name":"roundUp","type":"bool"}],"name":"toAmount","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"roundUp","type":"bool"}],"name":"toShare","outputs":[{"internalType":"uint256","name":"share","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"totalSupply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"}],"name":"transfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address[]","name":"tos","type":"address[]"},{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"uint256[]","name":"shares","type":"uint256[]"}],"name":"transferMultiple","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"assetId","type":"uint256"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"share","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"shareOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"wrappedNative","outputs":[{"internalType":"address","name":"wrappedNative","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"assets(uint256)":"cf35bdd0","batchTransfer(address,address,uint256[],uint256[])":"daf210b1","depositAsset(uint256,address,address,uint256,uint256)":"9a9af97a","nativeTokens(uint256)":"1f0ee4c3","owner(uint256)":"a123c33e","setApprovalForAsset(address,uint256,bool)":"b8489fb5","toAmount(uint256,uint256,bool)":"442c1599","toShare(uint256,uint256,bool)":"8eb22cdd","totalSupply(uint256)":"bd85b039","transfer(address,address,uint256,uint256)":"0411b252","transferMultiple(address,address[],uint256,uint256[])":"215b595a","withdraw(uint256,address,address,uint256,uint256)":"8d2e63b8","wrappedNative()":"eb6d3a11"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"assetIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares_\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"depositAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"nativeTokens\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"roundUp\",\"type\":\"bool\"}],\"name\":\"toAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"roundUp\",\"type\":\"bool\"}],\"name\":\"toShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wrappedNative\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol\":\"IYieldBox\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":700},\"remappings\":[],\"viaIR\":true},\"sources\":{\"tapioca-sdk/dist/contracts/YieldBox/contracts/enums/YieldBoxTokenType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title TokenType\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The YieldBox can hold different types of tokens:\\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\\nenum TokenType {\\n    Native,\\n    ERC20,\\n    ERC721,\\n    ERC1155,\\n    None\\n}\\n\",\"keccak256\":\"0xc6adb740ff68d4162214dfa9d406422a066ae2197b7f0c8df5daa7c84b4a10aa\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/YieldBox/contracts/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\n\\ninterface IYieldBox {\\n    function wrappedNative() external view returns (address wrappedNative);\\n\\n    function assets(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            TokenType tokenType,\\n            address contractAddress,\\n            address strategy,\\n            uint256 tokenId\\n        );\\n\\n    function nativeTokens(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            uint8 decimals\\n        );\\n\\n    function owner(uint256 assetId) external view returns (address owner);\\n\\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\\n\\n    function setApprovalForAsset(\\n        address operator,\\n        uint256 assetId,\\n        bool approved\\n    ) external;\\n\\n    function depositAsset(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function withdraw(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 assetId,\\n        uint256 share\\n    ) external;\\n\\n    function batchTransfer(\\n        address from,\\n        address to,\\n        uint256[] calldata assetIds_,\\n        uint256[] calldata shares_\\n    ) external;\\n\\n    function transferMultiple(\\n        address from,\\n        address[] calldata tos,\\n        uint256 assetId,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function toShare(\\n        uint256 assetId,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function toAmount(\\n        uint256 assetId,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x83e4c62b4059bbd59cac87eb714311f9304ce164ead7b45a7562067732fdc5d3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}